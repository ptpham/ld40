(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

Object.assign(window, require('gl-matrix'));
Object.assign(window, {
  createShader: require('gl-shader'),
  createGeometry: require('gl-geometry'),
});

Object.assign(window, {
  Setup: require('./src/setup'),
  Render: require('./src/render'),
  Control: require('./src/control'),
  Health: require('./src/health'),
  Money: require('./src/money'),
  Mesh: require('./src/mesh'),
  _: require('lodash'),
  Data: require('./src/data'),
  Cards: require('./src/cards'),
  Surgeon: require('./src/surgeon'),
  Events: require('./src/events'),
});

window.addEventListener('load', () => {
  var renderer = new Render.Face(canvas);

  var facePartAverages = Setup.weightedPositionAverage(Mesh.face, Mesh.faceWeights);
  var healthManager = new Health.Manager(renderer, facePartAverages);

  var listeners = Control.createTurntableListeners(renderer);
  Control.addListeners(window, listeners);

  renderer.installFace(Mesh.face, Mesh.faceWeights);

  var ponytailGeometry = Setup.createGeometryFromObj(renderer.gl, Mesh.ponytail);
  ponytailGeometry.attr('texcoord', _.times(3*Mesh.ponytail.cells.length, x => vec3.create()));
  renderer.geometry.push(ponytailGeometry);
  renderer.requestFrame();

  let turnIndex = 0;
  function drawCards() {
    turnIndex++;

    var cardTypes = ['surgeon', 'job', 'event'];
    var pickedTypes = turnIndex === 1 ? ['surgeon', 'job'] : ['surgeon', 'event'];
    pickedTypes.push(_.sample(cardTypes));

    if (turnIndex % 10 == 0) pickedTypes.push('victory');
    else pickedTypes.push(_.sample(cardTypes));

    pickedTypes = _.shuffle(pickedTypes);

    var cards = pickedTypes.map(type => Cards.generate(type));
    Data.cards = cards;

    Cards.unflip();
    Cards.reset();
    Data.cards.forEach(Cards.render);
    setTimeout(() => Cards.toggle(true), 200);
  }

  Cards.toggle(true);
  drawCards();
  Money.render();
  renderer.applyFaceParameters(Data.transform);

  document.body.addEventListener('click', function onClick(e) {
    if (e.target.matches('.card')) {
      var card = _.find(Data.cards, ({ key }) => key === e.target.dataset.key);
      if (e.target.classList.contains('chosen')) {
        Cards.toggle(false);
        setTimeout(drawCards, 400);
      } else {
        Cards.select(card);
      }
    }
  });


  document.body.addEventListener('card:select', function onCardSelect(e) {
    let card = e.detail;

    // Do turn healing first
    if (card.type == 'event' && Data.transform.injuryValues) {
      for (let key in Data.transform.injuryValues) {
        let current = Data.transform.injuryValues[key];
        Data.transform.injuryValues[key] = Math.max(current - Surgeon.HEAL_PER_TURN, 0);
      }
    }

    let cardBack = Cards.cardTypes[card.type].perform(card.attributes);
    Cards.renderBack(card, cardBack);
    Cards.flip(card);

    renderer.applyFaceParameters(Data.transform);
    renderer.requestFrame();

    // Pay Rent
    Data.money -= 100;
    Money.renderChange(-100, 'rent');
   
    if (Data.money <= 0) {
      modalDefeat.classList.add('show');
    }  
    Money.render();
  });

  document.body.addEventListener('endGame', () => {
    setTimeout(() => Cards.reset(), 500);
  });
});



},{"./src/cards":93,"./src/control":94,"./src/data":95,"./src/events":96,"./src/health":98,"./src/mesh":100,"./src/money":101,"./src/render":102,"./src/setup":103,"./src/surgeon":104,"gl-geometry":22,"gl-matrix":48,"gl-shader":49,"lodash":76}],2:[function(require,module,exports){
module.exports = "# Blender v2.76 (sub 0) OBJ File: ''\n# www.blender.org\nmtllib cube.mtl\no Cube\nv 1.000000 -1.000000 -1.000000\nv 1.000000 -1.000000 1.000000\nv -1.000000 -1.000000 1.000000\nv -1.000000 -1.000000 -1.000000\nv 1.000000 1.000000 -0.999999\nv 0.999999 1.000000 1.000001\nv -1.000000 1.000000 1.000000\nv -1.000000 1.000000 -1.000000\nvn 0.000000 -1.000000 0.000000\nvn 0.000000 1.000000 0.000000\nvn 1.000000 0.000000 0.000000\nvn -0.000000 0.000000 1.000000\nvn -1.000000 -0.000000 -0.000000\nvn 0.000000 0.000000 -1.000000\nusemtl Material\ns off\nf 2//1 3//1 4//1\nf 8//2 7//2 6//2\nf 5//3 6//3 2//3\nf 6//4 7//4 3//4\nf 3//5 7//5 8//5\nf 1//6 4//6 8//6\nf 1//1 2//1 4//1\nf 5//2 8//2 6//2\nf 1//3 5//3 2//3\nf 2//4 6//4 3//4\nf 4//5 3//5 8//5\nf 5//6 1//6 8//6\n";

},{}],3:[function(require,module,exports){
module.exports = "# Blender v2.76 (sub 0) OBJ File: 'face.blend'\n# www.blender.org\no face-base\nv -0.930265 1.038634 3.770598\nv -0.820650 1.041856 3.791115\nv -0.925869 1.077321 3.793752\nv -0.816839 1.079079 3.811631\nv -0.924989 1.107215 3.787891\nv -0.812443 1.105750 3.806942\nv -1.019657 1.020463 3.744514\nv -1.029329 1.057685 3.761806\nv -1.035777 1.084063 3.755358\nv -1.099963 0.992911 3.698792\nv -1.109342 1.027202 3.715205\nv -1.130152 1.054753 3.705533\nv -1.145978 0.963602 3.656294\nv -1.172063 0.992324 3.657759\nv -1.194338 1.016650 3.644863\nv -1.163271 0.948363 3.629916\nv -1.204596 0.969172 3.616727\nv -1.228336 0.984998 3.595624\nv -1.176753 0.931656 3.593866\nv -1.219837 0.946895 3.577453\nv -1.247680 0.955102 3.557523\nv -1.180563 0.917588 3.570712\nv -1.225406 0.926086 3.547558\nv -1.251491 0.924914 3.527335\nv -1.177339 0.906450 3.563092\nv -1.222475 0.903227 3.537006\nv -1.248560 0.897072 3.515025\nv -1.170598 0.891795 3.571005\nv -1.211630 0.878608 3.539937\nv -1.239474 0.865418 3.516197\nv -1.141582 0.863659 3.609107\nv -1.167374 0.824679 3.589469\nv -1.191700 0.798008 3.569246\nv -1.098791 0.835230 3.656294\nv -1.118428 0.794198 3.636950\nv -1.139237 0.768405 3.614675\nv -1.035191 0.812369 3.701723\nv -1.048966 0.768698 3.688827\nv -1.061862 0.740853 3.673000\nv -0.954884 0.726785 3.714325\nv -0.945212 0.753456 3.731911\nv -0.940230 0.799472 3.746272\nv -0.836769 0.721804 3.738945\nv -0.828856 0.748182 3.743048\nv -0.826218 0.797714 3.760927\nv -0.717189 0.726201 3.743927\nv -0.716603 0.753456 3.746565\nv -0.730964 0.805040 3.753306\nv -0.611091 0.740562 3.733669\nv -0.618125 0.764301 3.734548\nv -0.631314 0.810317 3.733376\nv -0.475684 0.781008 3.713153\nv -0.496200 0.793611 3.708171\nv -0.536646 0.824385 3.699964\nv -0.714844 1.022805 3.776167\nv -0.704879 1.059150 3.798735\nv -0.699604 1.090802 3.797270\nv -0.614022 0.989979 3.748031\nv -0.604350 1.021927 3.774995\nv -0.596729 1.048305 3.782029\nv -0.538112 0.944550 3.725170\nv -0.520233 0.968292 3.749789\nv -0.511734 0.997895 3.759168\nv -0.468943 0.885640 3.703774\nv -0.440513 0.894140 3.726049\nv -0.423221 0.901760 3.727808\nv -0.456926 0.863072 3.695861\nv -0.430548 0.861608 3.714912\nv -0.411790 0.864537 3.719894\nv -0.458684 0.848418 3.690878\nv -0.428496 0.839040 3.711101\nv -0.411204 0.834643 3.719015\nv -0.482718 0.832298 3.689706\nv -0.439927 0.819108 3.709929\nv -0.424686 0.807679 3.716670\nv -1.177046 0.700701 3.559574\nv -1.085309 0.666702 3.617313\nv -0.967780 0.656153 3.671534\nv -0.828270 0.650289 3.710222\nv -0.689639 0.656737 3.726635\nv -0.566541 0.678134 3.730738\nv -0.410325 0.749647 3.736600\nv -1.235371 1.056218 3.610865\nv -1.281972 1.008153 3.549902\nv -1.308350 0.965947 3.506525\nv -1.317436 0.921692 3.479854\nv -1.315091 0.878021 3.464027\nv -1.302781 0.831418 3.465493\nv -1.238302 0.741440 3.510042\nv -0.931730 1.151179 3.794046\nv -0.797496 1.155282 3.814562\nv -1.052483 1.130076 3.750669\nv -1.158288 1.092853 3.691464\nv -0.676157 1.138576 3.808114\nv -0.566541 1.094321 3.804890\nv -0.481545 1.044201 3.783494\nv -0.371051 0.931656 3.747151\nv -0.343500 0.876847 3.738945\nv -0.342621 0.830834 3.739238\nv -0.361965 0.788921 3.738066\nv -0.474804 0.927846 3.736014\nv -0.458978 0.940740 3.740996\nv -0.499424 0.907621 3.716670\nv -0.412963 0.977379 3.763271\nv -0.322691 0.948653 3.775581\nv -0.297485 0.890330 3.768840\nv -0.295434 0.837573 3.770892\nv -0.313898 0.787750 3.770305\nv -0.368706 1.008153 3.788184\nv -0.268763 0.958914 3.827458\nv -0.248247 0.894434 3.821010\nv -0.253815 0.831711 3.821596\nv -0.273159 0.769576 3.820131\nv -0.314778 1.019289 3.839767\nv -0.213955 0.954517 3.885489\nv -0.200473 0.879192 3.879921\nv -0.212197 0.810611 3.880214\nv -0.239747 0.735579 3.883145\nv -0.249419 1.025737 3.898093\nv -0.169992 0.564121 4.065446\nv -0.144786 0.942208 3.925643\nv -0.138338 0.865711 3.927108\nv -0.150355 0.783353 3.947917\nv -0.181129 0.674908 3.976347\nv -0.170871 1.017531 3.936487\nv -0.094375 0.594017 4.089772\nv -0.074738 0.935759 3.952021\nv -0.071514 0.864244 3.960520\nv -0.077962 0.785698 3.984554\nv -0.089099 0.694840 4.021189\nv -0.086168 1.005514 3.959641\nv 0.000000 0.600759 4.094755\nv 0.000000 0.933708 3.966382\nv 0.000000 0.866295 3.973709\nv 0.000000 0.787750 3.995398\nv 0.000000 0.700408 4.031447\nv 0.000000 1.000237 3.972830\nv -1.208113 0.658495 3.539644\nv -1.108463 0.622447 3.599141\nv -0.975987 0.605447 3.657466\nv -0.818598 0.606327 3.703188\nv -0.662381 0.618343 3.726049\nv -0.532250 0.648824 3.736600\nv -0.361672 0.740269 3.762978\nv -1.272007 1.080253 3.596210\nv -1.324470 1.031305 3.526162\nv -1.352606 0.973276 3.474579\nv -1.361985 0.919347 3.447614\nv -1.357882 0.866295 3.429443\nv -1.342934 0.812369 3.436770\nv -1.275817 0.707737 3.490112\nv -0.930851 1.174040 3.816906\nv -0.781083 1.175211 3.845043\nv -1.069775 1.159092 3.766495\nv -1.184666 1.120992 3.692637\nv -0.650072 1.154405 3.838888\nv -0.538405 1.110734 3.823648\nv -0.445202 1.058563 3.801666\nv -1.403897 0.990566 3.440580\nv -1.375174 1.054166 3.496560\nv -1.319780 1.120405 3.583314\nv -0.434651 0.227362 3.938831\nv -0.156803 0.356321 4.206422\nv -0.083530 0.361304 4.242178\nv 0.000000 0.364821 4.254196\nv -0.380723 1.075563 3.855301\nv -0.303054 1.087579 3.915092\nv -0.216007 1.093147 3.960520\nv -0.105805 1.088166 3.980743\nv 0.000000 1.090217 3.994226\nv -0.925575 1.221814 3.862042\nv -0.752360 1.217711 3.898093\nv -1.095274 1.213021 3.803717\nv -1.234784 1.167592 3.699671\nv -0.604936 1.179902 3.896920\nv -0.479494 1.130663 3.880507\nv -0.920593 1.298602 3.911281\nv -0.713086 1.292740 3.969606\nv -1.113739 1.296550 3.833319\nv -1.277282 1.249657 3.707291\nv -0.534888 1.239105 3.969606\nv -0.393912 1.162318 3.942935\nv -0.313605 0.478246 3.975761\nv -1.136600 0.553279 3.586538\nv -0.545146 0.128591 3.872593\nv -1.411810 0.924621 3.404530\nv -1.409466 0.855453 3.392807\nv -1.392760 0.791266 3.403358\nv -1.457532 1.016066 3.388410\nv -1.426465 1.101353 3.455821\nv -1.366382 1.188402 3.561040\nv -0.990641 0.538330 3.649553\nv -1.079447 0.329066 3.662155\nv -1.469549 0.930189 3.352947\nv -1.463980 0.843437 3.340637\nv -1.445516 0.760198 3.356464\nv -1.378984 0.612189 3.435597\nv -0.410325 0.164349 3.981622\nv -0.231833 0.269859 4.203491\nv -0.164716 0.274843 4.259178\nv -0.090565 0.279824 4.302555\nv 0.000000 0.278653 4.317796\nv -0.289865 0.255205 4.132856\nv -0.486528 0.063527 3.914212\nv -0.904473 1.407340 3.970192\nv -0.672053 1.411734 4.041413\nv -1.121652 1.408805 3.859698\nv -1.303074 1.361911 3.712274\nv -0.424393 1.344031 4.063101\nv -0.291624 1.197779 3.999208\nv -1.514978 1.048892 3.320707\nv -1.476876 1.154405 3.399255\nv -1.411224 1.276327 3.539058\nv -1.241526 0.367166 3.575401\nv -0.241212 0.522211 4.029103\nv -1.529925 0.938395 3.281140\nv -1.527874 0.826730 3.274692\nv -1.507650 0.724440 3.296966\nv -1.444636 0.552692 3.400427\nv -1.325642 0.251688 3.543747\nv 0.000000 1.207159 4.038482\nv -0.139217 1.204521 4.030569\nv -0.906232 1.550366 3.980450\nv -0.673226 1.576744 4.053723\nv -1.133376 1.540108 3.856767\nv -1.318608 1.481492 3.705533\nv -0.531078 3.196648 3.153646\nv 0.000000 1.379495 4.082738\nv -0.186112 1.380376 4.087428\nv -0.920593 1.709221 3.940297\nv -0.684363 1.737944 4.020311\nv -1.146272 1.682257 3.815734\nv -1.335021 1.601072 3.657466\nv -0.427031 1.564140 4.095928\nv 0.000000 1.582898 4.091825\nv -0.194611 1.577331 4.100910\nv -0.432893 1.752892 4.065446\nv 0.000000 1.763150 4.059585\nv -0.201059 1.765202 4.069256\nv -1.079447 2.402376 3.481027\nv -0.806581 2.497044 3.612330\nv -1.338831 2.262866 3.285243\nv -1.538718 2.035722 3.048720\nv -0.497665 2.252021 3.837130\nv 0.000000 2.287779 3.863508\nv -0.232420 2.276347 3.856181\nv -1.162392 2.725654 3.205816\nv -0.856993 2.864870 3.334775\nv -1.436137 2.517560 3.009153\nv -1.632213 2.232092 2.752700\nv -0.520526 2.556834 3.688534\nv 0.000000 2.590540 3.721360\nv -0.248247 2.583505 3.711981\nv -1.575647 1.085234 3.233366\nv -1.529925 1.222108 3.332137\nv -1.449033 1.369824 3.500371\nv -1.594991 0.950705 3.182955\nv -1.595577 0.809144 3.186765\nv -1.579750 0.683115 3.215487\nv -1.516150 0.477075 3.339171\nv -1.625765 1.120405 3.133130\nv -1.572130 1.292156 3.257106\nv -1.480686 1.469182 3.441460\nv -1.653902 0.946602 3.077736\nv -1.794878 1.153231 2.507678\nv -1.744467 1.460095 2.637223\nv -1.671780 1.778683 2.826852\nv -1.822135 0.865124 2.426785\nv -1.821842 0.574379 2.383994\nv -1.795171 0.290669 2.370512\nv -1.665626 -0.219599 2.454042\nv -1.798688 1.573228 2.367288\nv -1.746518 1.919953 2.533469\nv -1.781396 2.017844 2.365529\nv -0.220989 -0.119070 4.333622\nv -0.208386 -0.097086 4.366742\nv -0.230368 -0.041693 4.376121\nv -0.252057 0.060888 4.357069\nv -0.254108 0.118920 4.323658\nv -0.246781 0.195708 4.263867\nv -0.322691 0.109540 4.233679\nv -0.306864 0.183398 4.179164\nv -0.429376 0.059714 4.042585\nv -0.412376 0.106317 4.017673\nv -0.459564 -0.006815 3.984260\nv -0.245609 -0.254183 4.132563\nv -0.361379 -0.233373 4.062222\nv -0.368706 -0.100312 4.228404\nv -0.460736 -0.206409 3.965209\nv -0.173802 0.201569 4.326881\nv -0.094961 0.206259 4.366448\nv 0.000000 0.208311 4.380517\nv -0.176147 0.072024 4.413343\nv -0.087634 0.080817 4.450858\nv 0.000000 0.078766 4.467271\nv -0.154458 -0.035538 4.426239\nv -0.073272 -0.030557 4.464926\nv 0.000000 -0.029676 4.478995\nv -0.165302 -0.147792 4.339191\nv -0.144200 -0.142225 4.372603\nv -0.135407 -0.089467 4.416566\nv -0.063307 -0.094157 4.452617\nv 0.000000 -0.095622 4.464047\nv -0.127494 -0.179738 4.304607\nv -0.104340 -0.191463 4.326295\nv -0.099357 -0.146619 4.391654\nv -0.047187 -0.161567 4.412170\nv 0.000000 -0.160980 4.415394\nv -0.129252 -0.206702 4.242472\nv -0.101995 -0.228683 4.248333\nv -0.068290 -0.208754 4.334209\nv -0.035757 -0.220770 4.339777\nv 0.000000 -0.222822 4.338312\nv -0.173802 -0.236305 4.188543\nv -0.148303 -0.291405 4.204957\nv -0.069462 -0.249786 4.260643\nv -0.032533 -0.264148 4.263867\nv 0.000000 -0.272647 4.260936\nv -0.418238 -0.189702 4.062515\nv -0.410911 -0.131380 4.137839\nv -0.333535 -0.208460 4.093876\nv -0.312140 -0.139879 4.221369\nv -0.335001 -0.127860 4.228990\nv -0.372223 -0.149844 4.153372\nv -0.341742 -0.157464 4.168320\nv -0.345845 -0.183257 4.122012\nv -0.378085 -0.189996 4.090945\nv -0.225386 -0.122586 4.305486\nv -0.180836 -0.146619 4.312227\nv -0.150355 -0.172118 4.280573\nv -0.154458 -0.187360 4.231041\nv -0.189922 -0.198789 4.181509\nv -0.243557 -0.214615 4.134615\nv -0.316243 -0.260631 4.091238\nv -0.300123 -0.221357 4.102961\nv -0.317122 -0.046676 4.308124\nv -0.439927 -0.092983 4.104720\nv -0.458098 -0.153360 4.011224\nv -0.325622 0.056198 4.273246\nv -0.439048 0.021907 4.066325\nv -0.457805 -0.021176 4.007414\nv -0.081772 -0.306060 4.230162\nv -0.039860 -0.319541 4.236024\nv 0.000000 -0.327748 4.239834\nv -0.310381 -0.185893 4.114099\nv -0.291037 -0.130793 4.203198\nv -0.317709 -0.143689 4.165683\nv -0.322984 -0.168896 4.132563\nv -0.230368 -0.125518 4.276470\nv -0.198421 -0.138119 4.279987\nv -0.177905 -0.151015 4.260057\nv -0.174388 -0.158344 4.216973\nv -0.199008 -0.160689 4.170372\nv -0.240040 -0.175050 4.132563\nv -0.284003 -0.190289 4.114392\nv -0.194318 -0.529980 4.292883\nv -0.120753 -0.522947 4.304314\nv -0.054515 -0.538186 4.321020\nv -0.407101 -0.277044 4.041706\nv -0.248247 -0.306938 4.147511\nv -0.333535 -0.307525 4.094755\nv -0.652709 -0.932393 3.929452\nv 0.000000 -0.545222 4.325123\nv -0.569472 -0.720780 4.043171\nv -0.283710 -0.117312 4.290538\nv -0.270228 -0.126689 4.277349\nv -0.260263 -0.124051 4.248333\nv -0.297779 -0.091518 4.307831\nv -0.615780 -0.788777 3.988657\nv -0.660330 -0.891360 3.932383\nv -0.444909 -1.135502 4.040826\nv -0.546025 -1.046109 3.986019\nv -0.562145 -0.503309 4.032620\nv -0.603471 -0.993061 3.951141\nv -0.522285 -0.595631 4.085669\nv -0.510268 -0.669196 4.105599\nv -0.629555 -0.596218 4.001259\nv -0.592040 -0.668318 4.034672\nv -0.642744 -0.750090 3.979277\nv -0.704293 -0.892238 3.909815\nv -0.703121 -0.953493 3.898971\nv -0.289279 -0.151896 4.128167\nv -0.275797 -0.117602 4.185612\nv -0.295727 -0.126689 4.156890\nv -0.303933 -0.153654 4.138718\nv -0.230368 -0.124051 4.253609\nv -0.213662 -0.125809 4.249799\nv -0.196370 -0.123467 4.233972\nv -0.197835 -0.125809 4.199095\nv -0.214834 -0.130206 4.159235\nv -0.237988 -0.147792 4.133443\nv -0.263780 -0.149844 4.127581\nv -0.250884 -0.109396 4.221956\nv -0.250591 -0.108518 4.178286\nv -0.271107 -0.119654 4.149856\nv -0.230661 -0.105293 4.213163\nv -0.225092 -0.109396 4.182682\nv -0.241212 -0.117896 4.148097\nv -0.214248 -0.107344 4.209939\nv -0.638055 -1.045815 3.917435\nv -0.570938 -1.107951 3.951141\nv -0.450185 -1.208189 4.011811\nv -0.628969 -0.886670 3.944986\nv -0.623987 -0.916564 3.944693\nv -0.580903 -0.961406 3.967847\nv -0.533129 -1.007715 4.004776\nv -0.443737 -1.094177 4.065739\nv -0.596729 -0.810467 3.987777\nv -0.557456 -0.760641 4.041413\nv -0.281659 -0.600322 4.274418\nv -0.434358 -0.670664 4.170958\nv -0.502648 -0.712283 4.107358\nv -0.541922 -0.791122 4.038188\nv -0.490924 -0.754486 4.102668\nv -0.524630 -0.814864 4.031447\nv -0.478028 -0.791709 4.091824\nv -0.496493 -0.843880 4.000673\nv -0.453116 -0.839776 4.055188\nv -0.482718 -0.854722 3.979864\nv -0.436996 -0.856773 4.024414\nv -0.477149 -0.833035 3.949089\nv -0.427324 -0.855602 3.993053\nv -0.606988 -0.878170 3.948210\nv -0.602298 -0.902789 3.950555\nv -0.575041 -0.823654 3.987777\nv -0.588816 -0.874947 3.946158\nv -0.585592 -0.892825 3.947917\nv -0.554525 -0.836844 3.983674\nv -0.559507 -0.871428 3.930625\nv -0.563024 -0.878170 3.927987\nv -0.526095 -0.851499 3.961106\nv -0.548077 -0.866447 3.912160\nv -0.551594 -0.875238 3.910402\nv -0.517009 -0.849154 3.940004\nv -0.543680 -0.852377 3.880800\nv -0.548077 -0.867912 3.876403\nv -0.507044 -0.826586 3.910988\nv -0.471580 -0.871428 3.956710\nv -0.475684 -0.889599 3.994811\nv -0.500010 -0.939719 4.019138\nv -0.518182 -0.969615 4.018259\nv -0.563317 -0.939719 3.975467\nv -0.546318 -0.920374 3.977226\nv -0.521406 -0.890773 3.952900\nv -0.521992 -0.879341 3.920660\nv -0.523750 -0.886377 3.874645\nv -0.480959 -0.880222 3.905419\nv -0.428496 -0.719609 4.170958\nv -0.417945 -0.761812 4.156890\nv -0.400360 -0.824241 4.106771\nv -0.129838 -0.569254 4.336553\nv -0.286641 -0.655422 4.274126\nv -0.281659 -0.711696 4.258299\nv -0.277262 -0.806657 4.194698\nv -0.061256 -0.585080 4.351794\nv 0.000000 -0.593286 4.358828\nv -0.206335 -0.580099 4.308417\nv -0.210731 -0.636957 4.308710\nv -0.215127 -0.695576 4.296986\nv -0.210438 -0.800796 4.221663\nv -0.139217 -0.628164 4.334795\nv -0.145372 -0.690006 4.323071\nv -0.143907 -0.799328 4.245110\nv -0.064187 -0.643112 4.356190\nv -0.068290 -0.702315 4.338898\nv -0.071514 -0.802260 4.256540\nv 0.000000 -0.651612 4.360293\nv 0.000000 -0.712283 4.344467\nv 0.000000 -0.808122 4.260350\nv -0.385998 -0.850325 4.079807\nv -0.268177 -0.840654 4.144287\nv -0.207214 -0.845051 4.162752\nv -0.136286 -0.845638 4.180630\nv -0.066238 -0.847396 4.191767\nv 0.000000 -0.850034 4.193819\nv -0.386585 -0.880809 4.028224\nv -0.398015 -0.899857 4.065446\nv -0.423514 -0.972544 4.094169\nv -0.441099 -1.027351 4.086255\nv -0.313019 -1.276477 4.052257\nv -0.327087 -1.166864 4.138132\nv -0.277262 -0.895754 4.123478\nv -0.290451 -0.923599 4.148390\nv -0.317709 -1.011525 4.180044\nv -0.327674 -1.086264 4.168613\nv -0.137752 -1.304322 4.070722\nv -0.158268 -1.202035 4.197336\nv -0.138924 -0.903670 4.189716\nv -0.139510 -0.930341 4.212576\nv -0.149475 -1.036731 4.246282\nv -0.158268 -1.116158 4.236903\nv 0.000000 -1.305200 4.079807\nv 0.000000 -1.206138 4.219904\nv 0.000000 -0.900151 4.212284\nv 0.000000 -0.925944 4.229576\nv 0.000000 -1.043180 4.259178\nv 0.000000 -1.119677 4.256833\nv -0.465426 -0.817793 4.073359\nv -0.509389 -0.831570 4.019138\nv -0.537819 -0.844464 3.974295\nv -0.570645 -0.873480 3.942934\nv -0.571231 -0.884325 3.941762\nv -0.485356 -0.913635 4.012983\nv -0.532543 -0.901031 3.969606\nv -0.412083 -0.795225 4.131098\nv -0.282245 -0.763573 4.232800\nv -0.214541 -0.749503 4.265919\nv -0.146545 -0.748038 4.290245\nv -0.070048 -0.755657 4.307831\nv 0.000000 -0.764451 4.313107\nv -0.405928 -0.929460 4.090945\nv -0.301882 -0.958183 4.174475\nv -0.142441 -0.971080 4.236024\nv 0.000000 -0.974009 4.248627\nv -0.197249 -0.869964 4.109995\nv -0.257039 -0.864396 4.093583\nv -0.366948 -0.863515 4.041999\nv -0.137752 -0.887548 4.168613\nv -0.271694 -0.870551 4.093876\nv -0.384533 -0.873480 3.978105\nv 0.000000 -0.889893 4.127288\nv -0.053049 -0.881393 4.122012\nv -0.123684 -0.874067 4.111754\nv 0.000000 -0.886964 4.181802\nv -0.486235 -0.802260 3.912160\nv -0.424393 -0.818380 3.961399\nv -0.557456 -0.842119 3.829509\nv -0.569179 -0.876118 3.826285\nv -0.514665 -0.802260 3.871421\nv -0.543973 -0.920667 3.804010\nv -0.490631 -0.906893 3.838595\nv -0.196370 -0.843586 4.092117\nv -0.245316 -0.835964 4.073652\nv -0.365482 -0.821312 4.016500\nv -0.146838 -0.888428 4.115857\nv -0.263780 -0.881980 4.056946\nv -0.400067 -0.896048 3.908643\nv 0.000000 -0.857654 4.114685\nv -0.051877 -0.848274 4.109702\nv -0.124270 -0.848861 4.097979\nv 0.000000 -0.897515 4.141063\nv -0.521112 -0.731038 3.835664\nv -0.430255 -0.733970 3.858232\nv -0.646848 -0.809880 3.690878\nv -0.672933 -0.861464 3.678568\nv -0.561266 -0.739831 3.781735\nv -0.601712 -0.978406 3.725169\nv -0.529319 -0.995993 3.761805\nv -0.163251 -0.721954 4.017086\nv -0.233592 -0.733970 3.987191\nv -0.357862 -0.733090 3.913625\nv -0.162958 -0.952909 4.053722\nv -0.289279 -0.950564 3.981036\nv -0.437582 -0.972251 3.824527\nv 0.000000 -0.753315 4.059877\nv -0.041032 -0.727815 4.042292\nv -0.100236 -0.724883 4.030569\nv 0.000000 -0.985148 4.073946\nv -0.558921 -0.607941 3.818958\nv -0.470115 -0.589183 3.889593\nv -0.666778 -0.748038 3.644277\nv -0.692863 -0.851793 3.618484\nv -0.597023 -0.628751 3.757995\nv -0.611384 -1.072196 3.686481\nv -0.527267 -1.106486 3.735427\nv -0.165302 -0.593286 4.012690\nv -0.235937 -0.586838 3.996863\nv -0.388636 -0.581564 3.940590\nv -0.162371 -1.094764 4.028224\nv -0.303054 -1.066625 3.947917\nv -0.432600 -1.094177 3.810165\nv 0.000000 -0.608822 4.039361\nv -0.040153 -0.608235 4.027931\nv -0.101409 -0.599735 4.021776\nv 0.000000 -1.119677 4.080980\nv -0.594678 -0.475173 3.816320\nv -0.494148 -0.463157 3.892230\nv -0.691397 -0.682093 3.600020\nv -0.716017 -0.831861 3.565143\nv -0.635710 -0.504773 3.751547\nv -0.618418 -1.142535 3.654242\nv -0.530198 -1.198222 3.704067\nv -0.175267 -0.469602 4.020310\nv -0.244143 -0.461396 4.000087\nv -0.412963 -0.452018 3.939711\nv -0.151820 -1.209654 3.995105\nv -0.312433 -1.184741 3.910402\nv -0.430255 -1.189725 3.772943\nv 0.000000 -0.490999 4.039068\nv -0.041619 -0.486309 4.029982\nv -0.105512 -0.470776 4.021482\nv 0.000000 -1.204377 4.045809\nv -0.633366 -0.312509 3.801666\nv -0.534301 -0.287596 3.881972\nv -0.745619 -0.602080 3.533782\nv -0.761446 -0.818086 3.486301\nv -0.682605 -0.361160 3.710515\nv -0.635710 -1.235151 3.578039\nv -0.534888 -1.305786 3.633725\nv -0.197249 -0.301370 3.988364\nv -0.280486 -0.297560 3.976640\nv -0.443737 -0.282028 3.932383\nv -0.110202 -1.350922 3.852370\nv -0.322105 -1.312235 3.758288\nv -0.425858 -1.310183 3.681499\nv 0.000000 -0.361454 3.981036\nv -0.046308 -0.343576 3.997742\nv -0.104633 -0.322473 3.998328\nv 0.000000 -1.363525 3.841526\nv -0.604350 -0.142515 3.579797\nv -0.497372 -0.097380 3.613209\nv -0.810978 -0.515031 3.381669\nv -0.861389 -0.765331 3.322758\nv -0.692863 -0.199670 3.537886\nv -0.680553 -1.254790 3.389875\nv -0.561852 -1.354441 3.419184\nv -0.174388 -0.054296 3.725463\nv -0.254988 -0.050779 3.703188\nv -0.396843 -0.077157 3.638415\nv -0.142441 -1.503328 3.595624\nv -0.309209 -1.402799 3.517076\nv -0.440513 -1.379938 3.443511\nv 0.000000 -0.134602 3.728393\nv -0.031654 -0.106760 3.741289\nv -0.101409 -0.077450 3.738065\nv 0.000000 -1.522380 3.570711\nv -0.599367 0.041837 3.234245\nv -0.510854 0.086679 3.247434\nv -0.902128 -0.383434 3.086821\nv -0.912680 -0.702609 3.040806\nv -0.723637 -0.010041 3.215487\nv -0.748257 -1.197931 3.030255\nv -0.614022 -1.279409 3.033479\nv -0.177612 0.197175 3.313379\nv -0.262022 0.196588 3.301363\nv -0.419117 0.133572 3.267951\nv -0.150355 -1.571325 3.090045\nv -0.351707 -1.484864 3.070115\nv -0.496200 -1.375248 3.051651\nv 0.000000 0.084627 3.322758\nv -0.024326 0.127418 3.329206\nv -0.100530 0.169037 3.321000\nv 0.000000 -1.646941 3.126388\nv -0.719827 0.155556 2.673273\nv -0.631021 0.212414 2.683531\nv -0.997675 -0.309870 2.598242\nv -0.995038 -0.629924 2.557209\nv -0.827977 0.064992 2.658325\nv -0.812443 -1.170967 2.576553\nv -0.696966 -1.272083 2.556037\nv -0.233885 0.319685 2.716064\nv -0.339104 0.327305 2.711667\nv -0.530491 0.252862 2.684996\nv -0.195197 -1.578945 2.598535\nv -0.402704 -1.503622 2.578312\nv -0.579144 -1.416574 2.567174\nv 0.000000 0.190727 2.762372\nv -0.029895 0.237034 2.738632\nv -0.130425 0.288324 2.725443\nv 0.000000 -1.642547 2.609086\nv -0.718655 0.061475 2.067751\nv -0.620177 0.115108 2.080647\nv -1.041932 -0.365263 1.990082\nv -1.003830 -0.612631 1.966928\nv -0.832959 -0.030557 2.052217\nv -0.847321 -1.113521 1.984806\nv -0.790754 -1.334802 1.920620\nv -0.235937 0.214760 2.102628\nv -0.337346 0.216811 2.098232\nv -0.522285 0.145005 2.075664\nv -0.237402 -1.942670 1.617565\nv -0.495907 -1.680941 1.608187\nv -0.703121 -1.549638 1.728060\nv 0.000000 0.116282 2.165056\nv -0.044843 0.159072 2.145419\nv -0.140683 0.193950 2.113472\nv 0.000000 -1.969047 1.647167\nv -0.631314 -0.134015 1.538725\nv -0.528733 -0.103241 1.555138\nv -0.949023 -0.458466 1.461935\nv -0.903887 -0.610286 1.390422\nv -0.747084 -0.190289 1.513519\nv -0.624280 -0.956131 1.345872\nv -0.594678 -1.177415 1.379284\nv -0.200473 -0.038469 1.581223\nv -0.274038 -0.046382 1.586498\nv -0.426152 -0.100311 1.596170\nv -0.189336 -1.520328 1.350268\nv -0.328553 -1.476364 1.331510\nv -0.482425 -1.370854 1.344113\nv 0.000000 -0.090347 1.636030\nv -0.048946 -0.071002 1.605842\nv -0.110495 -0.051073 1.590015\nv 0.000000 -1.549638 1.364630\nv -0.440513 -0.508585 1.278461\nv -0.410911 -0.448795 1.274944\nv -0.665312 -0.583028 1.243877\nv -0.617832 -0.683850 1.248859\nv -0.485942 -0.527050 1.273479\nv -0.484183 -0.818966 1.258238\nv -0.436996 -0.870550 1.268496\nv -0.151820 -0.425934 1.275824\nv -0.213955 -0.472241 1.282858\nv -0.332656 -0.426518 1.271427\nv -0.128373 -0.959647 1.268790\nv -0.244143 -0.934150 1.287254\nv -0.358155 -0.915392 1.270841\nv 0.000000 -0.498325 1.332390\nv -0.050411 -0.486602 1.326821\nv -0.091444 -0.432966 1.281978\nv 0.000000 -0.942650 1.306305\nv -0.687880 -0.699680 3.957882\nv -0.764376 -0.896048 3.869955\nv -0.756170 2.213921 3.772943\nv -1.008813 2.150905 3.672121\nv -1.245043 2.051550 3.517369\nv -1.440826 1.893282 3.314845\nv -1.745346 1.136231 2.765596\nv -1.775534 0.879779 2.689100\nv -1.693469 1.412321 2.899538\nv -1.600560 1.678447 3.109683\nv -0.444323 -1.298167 3.977519\nv -0.313312 -1.359128 4.015621\nv -0.141269 -1.375248 4.040534\nv 0.000000 -1.367335 4.055188\nv -0.753825 -0.977235 3.853249\nv -0.154751 -1.998651 3.500077\nv -0.331484 -1.980771 3.446148\nv -0.314778 -1.443245 3.993639\nv -0.672640 -1.111761 3.876110\nv -0.584127 -1.190896 3.916556\nv -0.157682 -1.470209 4.050791\nv 0.000000 -1.983409 3.663034\nv 0.000000 -1.473435 4.081565\nv -0.450771 -1.386386 3.929452\nv -1.384553 -0.835964 2.835351\nv -1.483031 -0.634028 2.621982\nv -1.273179 -1.248635 2.741855\nv -1.617852 -0.583028 1.506192\nv -1.439654 -1.058712 1.934395\nv -1.332969 -1.269151 2.070974\nv -1.224526 -1.416280 2.243604\nv -1.111687 -1.537912 2.420043\nv -0.837649 -1.751577 2.763251\nv -0.156803 -2.023270 3.301949\nv -1.333849 -1.268270 1.454022\nv -0.333242 -1.993667 3.226625\nv 0.000000 -2.001873 3.526162\nv -1.376346 -1.134037 1.245928\nv -1.274938 -1.574841 1.309529\nv -1.318901 -1.452625 1.104659\nv -1.238888 -1.921567 1.162691\nv -1.268197 -1.811951 0.965735\nv -1.244750 -2.231361 1.008819\nv -1.268197 -2.128196 0.835017\nv -1.294868 -2.521519 0.923237\nv -1.329452 -2.403993 0.764383\nv -1.433499 -2.766541 0.847327\nv -1.461342 -2.666599 0.692576\nv -1.666212 -2.986945 0.733022\nv -1.716623 -2.868831 0.564203\nv -1.184666 -1.541431 1.754145\nv -1.270834 -1.418041 1.613755\nv -1.110515 -1.782641 1.604963\nv -1.206062 -1.692077 1.476590\nv -1.090585 -2.097128 1.451970\nv -1.182908 -2.025906 1.328286\nv -1.132789 -2.435351 1.303081\nv -1.194631 -2.333651 1.167380\nv -1.187304 -2.713200 1.199620\nv -1.255008 -2.619119 1.065092\nv -1.307178 -2.982257 1.124296\nv -1.381915 -2.872935 0.990061\nv -1.504426 -3.227864 1.041059\nv -1.584147 -3.110922 0.893342\nv -1.088826 -1.630528 1.892483\nv -1.038122 -2.523864 1.428816\nv -1.100550 -2.808454 1.333269\nv -1.218665 -3.072528 1.255600\nv -1.393932 -3.335429 1.177052\nv 0.000000 -2.023561 3.325103\nv -0.145958 -1.988683 2.724563\nv -0.310381 -1.974322 2.665945\nv 0.000000 -1.986632 2.731890\nv -0.790754 -1.832761 2.299584\nv -0.136873 -2.149296 2.415647\nv -0.289865 -2.141383 2.371684\nv 0.000000 -2.137574 2.432646\nv -0.723051 -2.010373 2.065699\nv -0.137752 -2.500712 2.179710\nv -0.281659 -2.477264 2.141022\nv 0.000000 -2.503642 2.208433\nv -0.684656 -2.345080 1.866691\nv -0.141855 -2.875864 2.040200\nv -0.569765 -2.785887 1.819797\nv -0.286641 -2.857399 1.995650\nv -0.584713 -3.740771 1.685269\nv 0.000000 -2.885829 2.072439\nv -0.697845 -2.730786 1.730991\nv -0.151820 -3.194161 1.922085\nv -0.595557 -3.092164 1.739197\nv -0.299830 -3.173645 1.868156\nv -0.491804 -3.447974 1.733922\nv 0.000000 -3.197677 1.932636\nv -0.738585 -3.036184 1.654201\nv -0.164716 -3.507471 1.820383\nv -0.661209 -3.396390 1.666218\nv -0.329139 -3.486955 1.781109\nv -0.452237 -3.132319 1.815693\nv 0.000000 -3.521248 1.826538\nv -0.818598 -3.335722 1.578877\nv -0.196077 -3.806716 1.740076\nv -0.781376 -3.689187 1.612290\nv -0.378964 -3.783561 1.724543\nv -0.429082 -2.823109 1.905965\nv 0.000000 -3.807890 1.730111\nv -0.959867 -3.623535 1.520846\nv -1.318022 -1.291131 0.853189\nv -1.260576 -1.699992 0.742694\nv -1.266145 -2.019751 0.649492\nv -1.315970 -2.303460 0.596150\nv -1.462808 -2.574570 0.513792\nv -1.730691 -2.788231 0.362558\nv -1.249146 -1.143415 0.581202\nv -1.211630 -1.604738 0.532843\nv -1.227750 -1.935341 0.475397\nv -1.274058 -2.221396 0.430847\nv -1.438775 -2.517709 0.330611\nv -1.694641 -2.747493 0.166481\nv -1.095860 -1.068970 0.322991\nv -1.096740 -1.518570 0.330904\nv -1.128979 -1.874379 0.312439\nv -1.199907 -2.166589 0.267304\nv -1.360520 -2.476383 0.155051\nv -1.624300 -2.716718 -0.041905\nv -0.943747 -1.017092 0.157982\nv -0.928506 -1.464934 0.186997\nv -0.980090 -1.844192 0.182015\nv -1.063914 -2.137280 0.117242\nv -1.228630 -2.449128 -0.030182\nv -1.473652 -2.724925 -0.237982\nv -0.766428 -0.986905 0.032833\nv -0.775807 -1.428299 0.081485\nv -0.812443 -1.822796 0.062434\nv -0.889232 -2.128196 -0.005562\nv -1.052190 -2.453231 -0.181123\nv -1.265266 -2.757751 -0.427904\nv -0.585885 -0.964044 -0.028716\nv -0.595850 -1.385505 -0.009959\nv -0.613729 -1.795538 -0.036044\nv -0.674691 -2.134641 -0.124263\nv -0.791048 -2.477263 -0.322392\nv -0.966022 -2.806402 -0.580603\nv 0.000000 -0.942941 -0.155331\nv 0.000000 -1.344766 -0.133935\nv 0.000000 -1.738092 -0.190501\nv 0.000000 -2.118228 -0.256740\nv 0.000000 -2.529728 -0.442558\nv 0.000000 -2.947380 -0.727148\nv -1.871374 0.190727 1.879587\nv -2.005023 1.425805 1.041059\nv -1.432033 3.068277 -0.114591\nv -1.172063 3.291022 -0.248532\nv -1.923251 2.081151 0.657992\nv -1.846755 2.388896 0.386885\nv -1.995351 1.162318 1.148037\nv -1.790481 -0.346505 1.731577\nv -1.863754 0.540676 2.066578\nv -1.847634 0.219156 2.033459\nv -1.721019 -0.355005 1.983341\nv -1.861702 0.891795 2.127248\nv -1.833565 1.231779 2.235691\nv -2.002971 1.235883 1.306891\nv -1.993885 1.062960 0.989769\nv -1.983334 0.881831 0.839414\nv -1.859357 0.337273 0.784020\nv -1.914458 0.543605 0.765849\nv -1.675884 2.986212 0.715145\nv -1.119600 3.601113 0.523465\nv 0.000000 3.905045 0.461623\nv -1.387777 3.384226 0.603478\nv 0.000000 3.969525 1.327115\nv 0.000000 3.882477 2.008840\nv -0.931437 3.650938 1.926482\nv -1.610818 -0.490412 1.272307\nv -1.403311 -0.946753 0.960167\nv -1.369899 -0.703489 0.607580\nv -1.179391 -0.692350 0.268476\nv -1.008520 -0.676231 0.100536\nv -0.812443 -0.661869 -0.039267\nv -0.610505 -0.654834 -0.115470\nv -0.842631 -1.736922 2.978671\nv -1.132496 -1.505673 2.642498\nv -1.261749 -1.362938 2.467524\nv -1.385432 -1.192360 2.290498\nv -1.499151 -0.961699 2.150109\nv -0.941402 1.866902 3.867025\nv -0.702242 -1.211412 3.811337\nv -0.593506 -1.304322 3.867024\nv -0.092909 0.137969 4.423601\nv -0.773755 -0.500670 3.884903\nv -1.364330 0.451576 3.481612\nv -1.447567 0.350166 3.440287\nv -1.249146 0.602517 3.520300\nv -1.324763 0.665824 3.465786\nv -1.177339 0.467108 3.582142\nv -1.297799 0.531295 3.500370\nv -0.395084 0.429008 3.907764\nv -1.024346 0.441904 3.654242\nv -0.289279 0.669634 3.866145\nv -1.567147 -0.428863 2.510315\nv -1.611404 -0.711695 1.762058\nv -1.608766 -0.704660 2.047821\nv -0.507923 -1.927428 3.092976\nv -0.509096 -1.901932 3.479854\nv -1.138651 -1.436212 2.898072\nv -0.673226 -1.811073 3.335361\nv -0.835597 -1.708493 3.186764\nv -0.340276 -1.959083 3.581849\nv -0.159147 -1.973445 3.640173\nv -0.677036 -1.833935 2.934708\nv -0.510854 -1.919516 3.320413\nv -0.676743 -1.832761 3.153939\nv -0.643038 -1.893431 2.425905\nv -0.594385 -2.073680 2.177366\nv -0.445495 -2.116471 2.284636\nv -0.477735 -1.942964 2.551054\nv -1.010278 -1.691199 2.034338\nv -0.933196 -2.601825 1.546638\nv -0.994744 -2.896090 1.457538\nv -1.099377 -3.170125 1.384559\nv -1.259404 -3.433319 1.307770\nv -1.724830 -0.361453 1.512347\nv -1.635144 -0.349731 1.075644\nv 0.000000 -0.631095 -0.285462\nv -1.793705 0.179589 0.682025\nv -1.639834 0.165815 0.213669\nv -1.481272 0.186037 -0.114884\nv -1.289885 0.212708 -0.421162\nv -1.052776 0.221208 -0.645962\nv -0.795737 0.231466 -0.783127\nv 0.000000 0.238208 -1.024926\nv -1.845875 0.363944 0.624287\nv -1.706365 0.399699 0.122518\nv -1.546045 0.420802 -0.225086\nv -1.344986 0.470334 -0.559207\nv -1.104360 0.491437 -0.784593\nv -0.848493 0.508728 -0.953998\nv 0.000000 0.529538 -1.230088\nv -1.895994 0.580534 0.593805\nv -1.762638 0.705392 0.030488\nv -1.607301 0.764889 -0.332649\nv -1.388070 0.831128 -0.669702\nv -1.146272 0.889744 -0.919707\nv -0.889232 0.927260 -1.101422\nv 0.000000 0.965070 -1.368719\nv -1.964576 1.019289 0.665026\nv -1.819497 1.347844 0.038695\nv -1.669436 1.519593 -0.392146\nv -1.462222 1.645915 -0.746491\nv -1.222182 1.738238 -0.986531\nv -0.975108 1.820890 -1.160626\nv 0.000000 1.936951 -1.465439\nv -1.993885 1.291276 0.862568\nv -1.907424 1.863093 0.363438\nv -1.783447 2.132148 0.019058\nv -1.609352 2.392412 -0.322391\nv -1.350262 2.637141 -0.624859\nv -1.093222 2.832926 -0.790161\nv 0.000000 3.087326 -0.988582\nv -1.001779 3.712780 1.321839\nv -1.325642 3.485341 1.323012\nv -1.268490 3.446361 1.904501\nv -1.678814 2.353431 2.565123\nv -1.617559 3.126015 1.304254\nv -1.832686 2.658538 1.330046\nv -1.479807 2.677586 2.808974\nv -1.842944 2.588489 0.851724\nv -1.919734 2.234144 1.026405\nv -1.996816 1.524870 1.240946\nv -1.190821 2.930815 2.990396\nv -0.870182 3.089086 3.099718\nv -0.532836 2.954263 3.408340\nv 0.000000 3.011122 3.443804\nv -0.245609 2.997934 3.435305\nv -1.792826 2.649744 1.730405\nv -1.568320 3.112532 1.836211\nv -1.910648 2.274590 1.380457\nv -1.884563 2.260815 1.674425\nv -0.154751 -1.980770 3.030255\nv -0.328553 -1.952928 2.950535\nv 0.000000 -1.986341 3.060443\nv -1.517029 -0.696747 1.133382\nv -0.502648 -1.899293 2.818352\nv -0.672640 -1.832761 2.678841\nv -0.824460 -1.753335 2.525556\nv -1.463980 -0.868499 1.384560\nv -1.424706 -1.024715 1.607014\nv -1.357882 -1.218154 1.758834\nv -1.169426 -1.495415 2.053096\nv -1.074465 -1.589203 2.221036\nv -1.265852 -1.370560 1.896879\nv -1.560113 -0.479276 0.885429\nv -1.741829 0.162005 0.500017\nv -1.804843 0.380356 0.415021\nv -1.859944 0.639740 0.366368\nv -1.927061 1.175212 0.403884\nv -1.963697 1.567954 0.666199\nv -1.968387 1.858402 1.161812\nv -1.537546 2.993538 2.269690\nv -1.753259 2.575299 2.073320\nv -1.853789 2.206886 1.941723\nv -1.223647 3.317986 2.389856\nv 0.000000 3.701054 2.546073\nv -0.235644 3.250870 3.177680\nv 0.000000 3.274318 3.185593\nv -0.886888 3.516115 2.446422\nv -0.305985 -2.920122 -0.708390\nv -0.190215 -0.942063 -0.138625\nv -0.189336 -1.350628 -0.131884\nv -0.235937 3.678193 2.536401\nv -0.454581 3.046000 -0.929672\nv -0.359034 1.935487 -1.371064\nv -0.199594 -0.630215 -0.253222\nv -0.341449 3.936699 1.354079\nv -0.469822 3.858151 0.464847\nv -0.312433 0.965070 -1.325928\nv -0.283710 0.530712 -1.187297\nv -0.251764 0.242896 -0.964550\nv -0.258212 3.855806 2.025547\nv -0.220989 -2.130831 -0.258791\nv -0.198128 -1.750696 -0.173502\nv -0.241799 -2.517415 -0.441386\nv -1.008227 -1.851225 1.724543\nv -0.928506 -1.885518 1.843537\nv -0.996503 -2.168641 1.570964\nv -0.892163 -2.221396 1.667390\nv -0.562731 -2.412199 1.972203\nv -0.429082 -2.453525 2.072733\nv -0.393033 -0.946460 -0.101402\nv -0.495907 -2.503641 -0.390388\nv -0.586764 3.784877 1.979238\nv -0.409739 -0.633440 -0.189622\nv -0.526974 0.239966 -0.902122\nv -0.390981 -1.761541 -0.118108\nv -0.617246 -2.870589 -0.674685\nv -0.687001 1.885661 -1.280206\nv -0.616953 0.954518 -1.226864\nv -0.570645 0.520160 -1.085302\nv -0.810098 2.961300 -0.892449\nv -0.778152 3.767000 0.476863\nv -0.425565 -2.127315 -0.216000\nv -0.663554 3.854926 1.345873\nv -0.387757 -1.363525 -0.089679\nv -0.540163 3.628077 2.521746\nv -0.931437 1.040392 3.690585\nv -0.820356 1.040685 3.714618\nv -1.020829 1.017824 3.660983\nv -1.083257 0.988514 3.614675\nv -1.126048 0.967411 3.574815\nv -1.145685 0.950121 3.558109\nv -1.159168 0.934292 3.546386\nv -1.164443 0.920518 3.538765\nv -1.161512 0.909966 3.538472\nv -1.153892 0.896485 3.542282\nv -1.127221 0.876847 3.572470\nv -1.078568 0.849298 3.618485\nv -1.020829 0.827024 3.661863\nv -0.935540 0.818817 3.708464\nv -0.827684 0.816179 3.728394\nv -0.733895 0.823505 3.723411\nv -0.651830 0.827608 3.702016\nv -0.572989 0.843143 3.670948\nv -0.714551 1.022221 3.711394\nv -0.621056 0.985585 3.695275\nv -0.565369 0.942498 3.685603\nv -0.538991 0.893847 3.666259\nv -0.529319 0.876263 3.667724\nv -0.534301 0.863366 3.665673\nv -0.553645 0.851934 3.665380\nv -0.547784 0.914656 3.673879\nv -0.924989 1.049769 3.615261\nv -0.823874 1.048892 3.638415\nv -1.021709 1.027789 3.576573\nv -1.086188 1.009031 3.530558\nv -1.129859 0.983824 3.490698\nv -1.150961 0.964189 3.470475\nv -1.161219 0.945724 3.454355\nv -1.164736 0.927260 3.445856\nv -1.165322 0.913776 3.439115\nv -1.166495 0.900882 3.435304\nv -1.140996 0.873331 3.464027\nv -1.080327 0.846073 3.514146\nv -1.022295 0.831418 3.555471\nv -0.937592 0.817350 3.592400\nv -0.820650 0.812663 3.625813\nv -0.733895 0.816472 3.639002\nv -0.641865 0.827315 3.614089\nv -0.578265 0.838453 3.607641\nv -0.705466 1.028082 3.648673\nv -0.615194 0.994376 3.639881\nv -0.566541 0.953930 3.628157\nv -0.542215 0.899415 3.617606\nv -0.534008 0.881537 3.616433\nv -0.534888 0.868640 3.616727\nv -0.550128 0.853401 3.613503\nv -0.555697 0.920224 3.624347\nv -0.927041 1.158798 3.625813\nv -0.812736 1.156456 3.652777\nv -1.027277 1.140627 3.586832\nv -1.099084 1.096956 3.542575\nv -1.151840 1.052995 3.504766\nv -1.187597 1.013427 3.473699\nv -1.206355 0.980308 3.454355\nv -1.212510 0.946311 3.444097\nv -1.214854 0.911724 3.440580\nv -1.208113 0.880072 3.435597\nv -1.174408 0.812663 3.471941\nv -1.122238 0.767524 3.516490\nv -1.048673 0.718285 3.558988\nv -0.941988 0.688685 3.601486\nv -0.795737 0.669634 3.632260\nv -0.679381 0.688685 3.624640\nv -0.592333 0.718285 3.601193\nv -0.507337 0.766060 3.564557\nv -0.690811 1.125389 3.656587\nv -0.587351 1.070286 3.634019\nv -0.518182 1.016650 3.601779\nv -0.458391 0.925795 3.550195\nv -0.451064 0.887985 3.534076\nv -0.453995 0.853401 3.532610\nv -0.470701 0.814127 3.545799\nv -0.477149 0.969172 3.572470\nv -0.926162 1.242331 3.534076\nv -0.795444 1.237640 3.557816\nv -1.034898 1.211263 3.500371\nv -1.111101 1.160266 3.462855\nv -1.170598 1.106924 3.427098\nv -1.208700 1.054166 3.399548\nv -1.230681 0.999947 3.381669\nv -1.241819 0.951292 3.369359\nv -1.243284 0.900882 3.363498\nv -1.237129 0.856918 3.362032\nv -1.201665 0.767818 3.389583\nv -1.152426 0.709201 3.418305\nv -1.070655 0.647653 3.458458\nv -0.954884 0.602224 3.496267\nv -0.788117 0.583172 3.513266\nv -0.660037 0.608966 3.509163\nv -0.572403 0.640911 3.495388\nv -0.474511 0.720924 3.473699\nv -0.666778 1.213021 3.563677\nv -0.551301 1.149127 3.544920\nv -0.478615 1.077614 3.520593\nv -0.416480 0.946311 3.482785\nv -0.411497 0.893260 3.474285\nv -0.416480 0.843728 3.466665\nv -0.434944 0.785698 3.464320\nv -0.436703 1.006979 3.494215\nv -0.917369 1.297137 3.432081\nv -0.783427 1.294208 3.448493\nv -1.026984 1.263434 3.407168\nv -1.110808 1.206573 3.377566\nv -1.170598 1.146489 3.347964\nv -1.212803 1.086992 3.324810\nv -1.236250 1.021634 3.304880\nv -1.245336 0.959792 3.292277\nv -1.246215 0.902934 3.285829\nv -1.239767 0.847247 3.283484\nv -1.206062 0.750234 3.294328\nv -1.154771 0.677840 3.317482\nv -1.077396 0.604276 3.346205\nv -0.952540 0.551811 3.372876\nv -0.781962 0.528950 3.391341\nv -0.650072 0.560311 3.397203\nv -0.561266 0.598998 3.390169\nv -0.461322 0.689563 3.385186\nv -0.654761 1.273982 3.453769\nv -0.534888 1.199831 3.444097\nv -0.455167 1.119818 3.425632\nv -0.393033 0.962137 3.398082\nv -0.390688 0.902053 3.390462\nv -0.394791 0.840211 3.382548\nv -0.420876 0.769576 3.381962\nv -0.414428 1.038927 3.411858\nv -0.905645 1.322343 3.349429\nv -0.781376 1.321463 3.360860\nv -1.016140 1.289811 3.330379\nv -1.097033 1.230898 3.307811\nv -1.157409 1.171695 3.280847\nv -1.200493 1.105457 3.261503\nv -1.228043 1.038340 3.247141\nv -1.240939 0.969463 3.233952\nv -1.240646 0.905279 3.228970\nv -1.235371 0.847247 3.221642\nv -1.196097 0.742905 3.226918\nv -1.146565 0.668169 3.239521\nv -1.067431 0.592844 3.257399\nv -0.946092 0.533347 3.277036\nv -0.780203 0.507850 3.296380\nv -0.646262 0.539208 3.306052\nv -0.559214 0.581121 3.311914\nv -0.456926 0.680185 3.314259\nv -0.652709 1.297431 3.366135\nv -0.537232 1.228263 3.360860\nv -0.455460 1.146782 3.351481\nv -0.386291 0.977963 3.334482\nv -0.380430 0.909382 3.329206\nv -0.389222 0.841676 3.321293\nv -0.413549 0.766647 3.317190\nv -0.408566 1.057685 3.342102\nv -0.899784 1.332015 3.280554\nv -0.380723 0.919053 3.278795\nv -1.003537 1.301240 3.267071\nv -0.460150 1.161144 3.291398\nv -1.145392 1.182834 3.228970\nv -1.189356 1.117766 3.214901\nv -1.229509 0.976498 3.189110\nv -1.231854 0.910847 3.182662\nv -0.644796 0.540088 3.239521\nv -1.188183 0.742027 3.175041\nv -1.138651 0.671098 3.183248\nv -1.060983 0.596947 3.191161\nv -0.938765 0.534521 3.204057\nv -0.773169 0.509901 3.223401\nv -1.223647 0.850176 3.175628\nv -0.561266 0.581414 3.252123\nv -0.460443 0.683115 3.260916\nv -1.218665 1.046253 3.201126\nv -0.542215 1.242918 3.294622\nv -0.649779 1.307982 3.295208\nv -1.087068 1.242331 3.251245\nv -0.388636 0.992031 3.282019\nv -0.774341 1.330550 3.290225\nv -0.389222 0.848124 3.273226\nv -0.414135 0.768992 3.266778\nv -0.411204 1.075269 3.287881\nv -0.888939 1.329085 3.221936\nv -0.385412 0.929898 3.231314\nv -0.988883 1.301240 3.212557\nv -0.472460 1.167886 3.236883\nv -1.129272 1.184592 3.184713\nv -1.174701 1.121576 3.171231\nv -1.213096 0.985585 3.148956\nv -1.214561 0.919931 3.138991\nv -0.644503 0.551811 3.176800\nv -1.170598 0.754924 3.127268\nv -1.123411 0.682530 3.126681\nv -1.046914 0.610430 3.129026\nv -0.927334 0.549175 3.139284\nv -0.768773 0.523089 3.156870\nv -1.209286 0.856624 3.133716\nv -0.560679 0.593137 3.193799\nv -0.463081 0.691030 3.209039\nv -1.203424 1.053289 3.159508\nv -0.550421 1.242037 3.237469\nv -0.652416 1.304466 3.234246\nv -1.067724 1.243795 3.198195\nv -0.396843 1.002876 3.233366\nv -0.771997 1.329085 3.228970\nv -0.390981 0.858969 3.225746\nv -0.417945 0.776905 3.217539\nv -0.426445 1.086992 3.233952\nv -0.875750 1.315015 3.163025\nv -0.398601 0.941327 3.178266\nv -0.972763 1.290982 3.154525\nv -0.486235 1.168766 3.177679\nv -1.108170 1.186937 3.131371\nv -1.152426 1.126266 3.123458\nv -1.189942 0.995843 3.098838\nv -1.194338 0.931656 3.090045\nv -0.644503 0.578189 3.109096\nv -1.145685 0.773389 3.074805\nv -1.101136 0.703924 3.069529\nv -1.025519 0.634463 3.066305\nv -0.912386 0.577311 3.070994\nv -0.766428 0.554743 3.086528\nv -1.185252 0.869227 3.084770\nv -0.569472 0.614534 3.127561\nv -0.469236 0.706563 3.147491\nv -1.177925 1.062373 3.111734\nv -0.562438 1.237054 3.174748\nv -0.657692 1.292156 3.170645\nv -1.047794 1.239986 3.143388\nv -0.413256 1.014308 3.178558\nv -0.768187 1.316482 3.166835\nv -0.403877 0.869814 3.170938\nv -0.427031 0.793318 3.159801\nv -0.441978 1.093440 3.178266\nv -0.864906 1.287173 3.091218\nv -0.433479 0.953344 3.101183\nv -0.945799 1.264311 3.085063\nv -0.521699 1.161144 3.103235\nv -1.070655 1.175505 3.065426\nv -1.112273 1.119524 3.058978\nv -1.150668 1.003463 3.037289\nv -1.145978 0.943086 3.027911\nv -0.662088 0.625379 3.029669\nv -1.107291 0.797421 3.010032\nv -1.062155 0.739095 3.000947\nv -0.994451 0.676376 2.995671\nv -0.895094 0.626550 2.999188\nv -0.767893 0.605447 3.011791\nv -1.140117 0.885640 3.021756\nv -0.588230 0.654392 3.048133\nv -0.497079 0.737337 3.068650\nv -1.137186 1.064718 3.048427\nv -0.588230 1.219763 3.100597\nv -0.670881 1.263724 3.095028\nv -1.014968 1.223573 3.076270\nv -0.448719 1.023392 3.100890\nv -0.769359 1.286002 3.092683\nv -0.433772 0.890037 3.095321\nv -0.458391 0.816472 3.081839\nv -0.476856 1.093734 3.102941\nv -0.888060 0.826437 2.885469\nv -0.863441 0.796540 2.889866\nv -0.849958 0.768992 2.896900\nv -0.796616 0.760492 2.900710\nv -0.902421 0.917588 2.875504\nv -0.751187 0.799766 2.889866\nv -0.714844 0.851934 2.880487\nv -0.897732 1.041857 2.896314\nv -0.741809 1.131834 2.937346\nv -0.767600 1.151179 2.945846\nv -0.862268 1.130956 2.932950\nv -0.690811 1.030427 2.902469\nv -0.790754 1.168179 2.955224\nv -0.684070 0.944844 2.884590\nv -0.695207 0.897072 2.882832\nv -0.704000 1.070579 2.912434\nv -0.903301 0.883589 2.876970\nv -0.733602 0.821453 2.884883\nv -0.606988 0.747302 2.960207\nv -1.049259 0.867763 2.941449\nv -0.555404 1.084647 2.998309\nv -0.534595 0.853986 2.973103\nv -0.515837 0.914069 2.985120\nv -0.778152 1.228554 3.008274\nv -0.528440 1.027495 2.995964\nv -0.956350 1.182834 2.992740\nv -0.706345 1.210676 3.007980\nv -0.644796 1.180195 3.005050\nv -1.055414 1.058270 2.966655\nv -0.569179 0.789508 2.964310\nv -0.646555 0.722682 2.954931\nv -1.057173 0.905279 2.945553\nv -0.778445 0.686634 2.939691\nv -0.871354 0.702460 2.933536\nv -0.941988 0.740563 2.930312\nv -0.995624 0.787163 2.933536\nv -1.027570 0.834643 2.937932\nv -0.700776 0.700115 2.946432\nv -1.058931 0.952466 2.948190\nv -1.061276 1.008444 2.955811\nv -3.234239 -4.329294 1.547810\nv -3.524397 -4.103029 1.357888\nv -3.949669 -3.800854 0.841465\nv -2.504153 -4.793255 1.855260\nv -2.015867 -5.051171 2.018804\nv -2.642785 -4.233748 1.402438\nv -2.868463 -4.070790 1.215740\nv -3.186172 -3.755425 0.802777\nv -1.972783 -4.528010 1.685269\nv -1.556303 -4.626194 1.786971\nv -3.751541 -3.938900 1.124882\nv -3.058971 -3.887316 1.038421\nv -0.955177 -3.967035 1.613462\nv -0.714258 -4.021552 1.682045\nv -1.512633 -3.733151 1.235084\nv -1.662695 -3.609467 1.094108\nv -1.783741 -3.481974 0.953425\nv -1.029915 -3.673067 -1.237709\nv -0.513199 -3.741064 -1.155937\nv 0.000000 -3.750441 -1.150662\nv -1.524650 -3.611518 -1.241226\nv -2.019677 -3.554367 -1.143921\nv -2.463707 -3.515093 -0.985653\nv -1.261163 -5.052345 2.047234\nv -0.628383 -4.718516 1.859657\nv -2.767055 -3.489006 -0.730958\nv -2.971924 -3.495161 -0.381596\nv -3.132536 -3.481680 -0.056267\nv -3.218705 -3.553487 0.260562\nv -3.258272 -3.637603 0.536066\nv -2.505619 -3.442112 0.525222\nv -2.556030 -3.329860 0.312439\nv -2.543427 -3.257467 0.054814\nv -2.461949 -3.250138 -0.221569\nv -2.297819 -3.243983 -0.485349\nv -2.095294 -3.252190 -0.714545\nv -1.767327 -3.274173 -0.897140\nv -1.350848 -3.337480 -1.029909\nv 0.000000 -3.498386 -1.072407\nv -0.438461 -3.461751 -1.060977\nv -0.912680 -3.412512 -1.089699\nv -0.774928 -3.159573 -0.896260\nv -0.380430 -3.217606 -0.932310\nv 0.000000 -3.229915 -0.922345\nv -1.156823 -3.081028 -0.812730\nv -1.505306 -3.018599 -0.678495\nv -1.764983 -2.991048 -0.487694\nv -1.911820 -2.979619 -0.264067\nv -2.008540 -2.984015 -0.028423\nv -2.065399 -3.014496 0.196962\nv -2.051331 -3.112096 0.409159\nv -1.991248 -3.217022 0.602597\nv -0.747084 -5.065242 2.067750\nv -1.043983 -4.680123 1.835037\nv -0.466598 -4.054962 1.724836\nv -1.169719 -3.902558 1.490071\nv -1.892183 -3.341877 0.786950\nv -1.518788 -4.232868 1.484503\nv -0.551008 -4.370326 1.755024\nv -1.213975 -4.291487 1.615806\nv -0.873112 -4.334571 1.710181\nv -1.966921 -4.072548 1.238601\nv -2.106725 -3.935674 1.068902\nv -2.221029 -3.770958 0.908289\nv -2.365522 -3.593348 0.709868\nv -0.227730 -4.080168 1.735387\nv 0.000000 -4.088374 1.738318\nv -0.267004 -4.393481 1.790488\nv 0.000000 -4.404910 1.803677\nv -0.306571 -4.731413 1.885742\nv 0.000000 -4.740497 1.900103\nv -0.336466 -5.053223 2.076250\nv 0.000000 -5.052932 2.093542\nv -1.132203 -4.019206 -1.345859\nv -0.582075 -4.086909 -1.257053\nv 0.000000 -4.088961 -1.279035\nv -1.670022 -3.906951 -1.432027\nv -2.214288 -3.807889 -1.396564\nv -2.711954 -3.779751 -1.227744\nv -3.122571 -3.779751 -0.910329\nv -3.433246 -3.745167 -0.518175\nv -3.686768 -3.704135 -0.162658\nv -3.906292 -3.700909 0.189049\nv -3.983961 -3.741357 0.531963\nv -1.354951 -3.817561 1.355836\nv -1.119307 -3.538248 1.423247\nv -0.974814 -3.258054 1.485675\nv -0.877802 -2.974929 1.566568\nv -0.820356 -2.673341 1.639547\nv -0.790461 -2.270344 1.765869\nv -0.831787 -1.943548 1.949635\nv -0.909749 -1.750989 2.158022\nv -0.969246 -1.663648 2.353219\nv -0.985366 -1.640787 2.578605\nv -0.994158 -1.626719 2.801939\nv -0.988297 -1.585980 3.035824\nv -0.771997 -1.124364 3.780563\nv -0.723637 -1.046989 3.854715\nv -0.681432 -1.004493 3.898092\nv -0.606988 -0.936202 3.951434\nv -0.588230 -0.918909 3.959934\nv -0.570938 -0.907773 3.956123\nv -0.558042 -0.894877 3.950262\nv -0.550714 -0.884031 3.932969\nv -0.544853 -0.879051 3.906298\nv -0.542801 -0.879341 3.873472\nv -0.560973 -0.899857 3.819251\nv -0.643038 -0.918909 3.697619\nv -0.654175 -0.961406 3.649845\nv -0.667950 -0.995406 3.607347\nv -0.699604 -1.034386 3.534661\nv -0.772876 -1.027938 3.362032\nv -0.868130 -0.950270 3.038168\nv -0.898611 -0.897221 2.567174\nv -0.901835 -0.846515 1.974548\nv -0.764083 -0.776173 1.345872\nv -0.551594 -0.751554 1.253256\nv -0.576213 -0.554012 1.256773\nv -0.847907 -0.294921 1.485089\nv -0.937885 -0.197908 2.019098\nv -0.914731 -0.120241 2.625206\nv -0.848493 -0.168015 3.145439\nv -0.760273 -0.349731 3.464320\nv -0.709569 -0.475757 3.625519\nv -0.657106 -0.589477 3.674172\nv -0.626625 -0.678576 3.698498\nv -0.603764 -0.764451 3.734841\nv -0.541922 -0.816915 3.846508\nv -0.529026 -0.835964 3.889592\nv -0.533715 -0.859119 3.920953\nv -0.545439 -0.859999 3.937366\nv -0.558335 -0.859119 3.950555\nv -0.575041 -0.857067 3.956417\nv -0.596143 -0.853257 3.959640\nv -0.620177 -0.852377 3.953485\nv -0.678794 -0.825706 3.934728\nv -0.731550 -0.803138 3.908936\nv -1.741829 0.901760 2.827145\nv -1.709589 1.137698 2.899245\nv -1.652730 1.386531 3.037582\nv -1.557769 1.620708 3.243624\nv -1.395690 1.811802 3.451718\nv -1.201959 1.939002 3.635191\nv -0.974228 2.012276 3.768840\nv -0.723637 2.057705 3.859111\nv -0.469529 2.098444 3.911867\nv -0.223041 2.118960 3.932091\nv 0.000000 2.132441 3.925936\nv -1.757362 -4.163700 1.367267\nv -2.317456 -4.394361 1.536086\nv -2.869343 -4.565232 1.690837\nv -0.817719 1.057976 3.805769\nv -0.925575 1.057976 3.784374\nv -1.024053 1.036582 3.755944\nv -1.102308 1.007566 3.709343\nv -1.156237 0.981188 3.660983\nv -1.181442 0.958621 3.630209\nv -1.196390 0.941327 3.589176\nv -1.200493 0.924327 3.564850\nv -1.197269 0.904985 3.554885\nv -1.187011 0.885640 3.562212\nv -1.150082 0.847247 3.605589\nv -1.108170 0.817643 3.649553\nv -1.041639 0.794489 3.700550\nv -0.941988 0.778956 3.741876\nv -0.827977 0.773973 3.754772\nv -0.724809 0.781008 3.752427\nv -0.626918 0.787750 3.733963\nv -0.516423 0.808266 3.704947\nv -0.709276 1.042737 3.791994\nv -0.607574 1.005514 3.763857\nv -0.530198 0.955689 3.742169\nv -0.458978 0.888866 3.723118\nv -0.444616 0.861901 3.705240\nv -0.445789 0.844314 3.698206\nv -0.459271 0.827315 3.698792\nv -0.484769 0.914656 3.729566\nv -0.399774 0.795663 3.725170\nv -0.586471 1.077027 3.795511\nv -0.503527 1.024857 3.769719\nv -1.040173 1.107508 3.741583\nv -1.209872 1.037753 3.625226\nv -1.252077 0.996721 3.572177\nv -1.275817 0.960672 3.535541\nv -1.281386 0.924914 3.505939\nv -1.280213 0.888279 3.491285\nv -1.210458 0.769869 3.540231\nv -1.268490 0.850763 3.493336\nv -0.961332 0.693960 3.691171\nv -1.072999 0.708027 3.644570\nv -0.835304 0.688979 3.724290\nv -0.708983 0.691908 3.735134\nv -0.449013 0.763421 3.724877\nv -0.594971 0.710666 3.730152\nv -1.154185 0.736459 3.588004\nv -0.441392 0.958914 3.749496\nv -0.381309 0.832005 3.726049\nv -0.400360 0.913485 3.734842\nv -0.380723 0.868640 3.726928\nv -0.691397 1.119818 3.802252\nv -0.924696 1.129492 3.777339\nv -0.803944 1.131543 3.800200\nv -1.138358 1.072337 3.689999\nv -0.893336 0.096643 3.755065\nv -0.244436 0.009304 4.372896\nv -0.477442 -0.102363 3.955831\nv -0.080893 0.026595 4.461116\nv -0.171164 0.019856 4.423308\nv 0.000000 0.026888 4.474892\nv -0.446668 -0.034660 4.078342\nv -0.468943 -0.081847 3.993346\nv -0.326794 0.004321 4.297573\nv -0.524630 0.349288 3.827457\nv -0.719534 0.254620 3.776753\nv -0.836183 0.335805 3.720187\nv -0.583540 0.416111 3.771771\nv -0.085582 0.468869 4.169493\nv 0.000000 0.473850 4.179458\nv -0.159440 0.454507 4.142235\nv -1.252370 0.044182 3.594745\nv -1.390122 0.125659 3.488060\nv -0.666778 -0.004470 3.858525\nv -0.769066 -0.149257 3.847388\nv -0.460443 0.022492 3.952900\nv -0.177905 0.128591 4.384034\nv -0.048946 -0.378454 4.241006\nv 0.000000 -0.387244 4.242472\nv -0.256453 -0.379038 4.175061\nv -0.098771 -0.370831 4.232213\nv -0.647434 -0.210219 3.895454\nv -1.221302 0.833469 3.534955\nv -1.194924 0.851934 3.558695\nv -1.158874 0.878608 3.589762\nv -0.550421 0.780421 3.719015\nv -0.578265 0.817643 3.710515\nv -0.534301 0.758734 3.719601\nv -0.476270 0.712718 3.730738\nv -1.277575 0.787750 3.482199\nv -0.436410 0.691324 3.748324\nv -1.319194 0.761079 3.458166\nv -0.422928 0.487040 3.839767\nv -1.419138 0.688392 3.388410\nv -0.347897 0.217982 4.052257\nv -1.483617 0.636221 3.338292\nv -0.261729 0.603688 3.938538\nv -1.552786 0.578189 3.265899\nv -1.751794 0.030114 2.392493\nv -0.356396 0.155556 4.087721\nv -0.380137 0.102214 4.132856\nv -0.391274 -0.054883 4.214921\nv -0.390981 0.055320 4.164803\nv -1.835324 -0.125808 1.815987\nv -1.794585 -0.084776 1.998289\nv -1.368433 0.729131 3.427098\nv -0.335880 0.544485 3.887248\nv -1.144806 0.888572 3.557230\nv -0.602884 0.836695 3.681206\nv -1.155944 0.885640 3.447028\nv -0.600540 0.832005 3.607641\nv -1.196390 0.849592 3.452011\nv -0.543973 0.740562 3.583314\nv -1.225113 0.816766 3.371411\nv -0.519061 0.676376 3.485130\nv -1.228336 0.801524 3.288467\nv -0.505286 0.638273 3.389582\nv -1.222475 0.794782 3.222229\nv -0.505286 0.625379 3.311914\nv -1.209579 0.796834 3.174162\nv -0.506458 0.625963 3.256227\nv -1.191114 0.808559 3.129026\nv -0.510854 0.635343 3.201712\nv -1.170891 0.822334 3.080960\nv -0.517009 0.652634 3.140164\nv -1.130152 0.841385 3.018532\nv -0.542215 0.686634 3.058978\nv -1.035777 1.103112 2.975155\nv -0.999141 1.143853 2.983947\nv -0.594092 1.137111 3.004170\nv -0.905059 1.213021 3.000654\nv -0.514958 0.970050 2.992447\nv -0.849372 1.229728 3.008567\nv -1.172063 0.866005 3.579211\nv -0.563317 0.800644 3.716670\nv -1.246508 0.810317 3.512680\nv -0.512320 0.735285 3.723997\nv -0.400067 -0.000660 4.189716\nv -0.394205 0.654392 3.777632\nv -1.174408 0.188675 3.631674\nv 0.000000 0.136504 4.440893\nv -0.349948 -0.390763 4.134322\nv -0.538698 -0.271476 3.954952\nv -0.463667 -0.401315 4.069842\nv -0.166182 -0.367022 4.211404\nv -0.499717 -0.102363 3.927694\nv -0.926162 -0.627286 3.762099\nv -0.888939 -0.463157 3.810751\nv -0.816253 -1.023248 3.784667\nv -0.827098 -0.915686 3.809872\nv -0.794272 -0.790828 3.861456\nv -0.750308 -0.661870 3.915091\nv -0.571524 -0.062502 3.893989\nv -0.772583 0.054440 3.813096\nv -0.871354 -0.097380 3.785839\nv -0.826511 -0.642819 3.853249\nv -0.994744 -0.052538 3.740117\nv -1.352899 -0.277044 3.410685\nv -1.480393 -0.170067 3.277622\nv -1.366675 -0.450554 3.266485\nv -1.483031 -0.319247 3.097080\nv -0.866665 -0.793173 3.789649\nv -0.890112 -0.945286 3.732790\nv -0.173216 -1.592428 4.043756\nv -0.328260 -1.564583 3.977226\nv -0.466891 -1.505967 3.888713\nv -0.602005 -1.425954 3.802838\nv -0.728326 -1.316338 3.737479\nv 0.000000 -1.595945 4.069842\nv -0.815374 -1.208480 3.702601\nv -0.870182 -1.080986 3.699084\nv -0.641865 -1.629357 3.679447\nv -0.500303 -1.726664 3.773822\nv -0.346138 -1.798177 3.862921\nv -0.171750 -1.835106 3.918608\nv -0.969246 -1.220790 3.489233\nv -0.889232 -1.383748 3.512973\nv 0.000000 -1.842432 3.932383\nv -0.771997 -1.515932 3.583607\nv -1.024640 -0.816915 3.579211\nv -1.013795 -1.026473 3.518835\nv -1.509409 0.232930 3.374049\nv -1.585026 -0.032608 3.140164\nv -1.575647 -0.160980 2.953172\nv -1.580337 0.370098 3.255054\nv -1.652730 0.127418 3.012377\nv -1.659471 0.009598 2.841506\nv -1.616680 0.495540 3.162731\nv -1.701382 0.296531 2.909503\nv -1.717795 0.199518 2.748597\nv -1.641592 0.628015 3.100889\nv -1.734208 0.481763 2.839747\nv -1.754431 0.409956 2.682652\nv -1.655074 0.776024 3.070995\nv -1.747690 0.685460 2.808387\nv -1.778172 0.639740 2.665359\nv -1.045449 2.278692 3.575108\nv -1.490651 1.964795 3.182369\nv 0.000000 2.428754 3.804011\nv -0.240919 2.422305 3.790529\nv -0.510268 2.399738 3.765030\nv -1.802205 0.870986 2.557503\nv -0.781376 2.353724 3.693810\nv -1.291351 2.162924 3.402772\nv -1.772310 1.142973 2.637516\nv -1.720433 1.429321 2.770286\nv -1.638661 1.724754 2.963138\nv -1.775534 0.343718 2.527314\nv -1.802205 0.602811 2.526142\nv -1.728933 0.111005 2.566588\nv -1.659471 -0.104121 2.640154\nv -1.567441 -0.286131 2.736287\nv -1.479221 -0.460518 2.881073\nv -0.949316 -0.982509 3.632846\nv -1.372243 -0.637838 3.081839\nv -0.631314 0.563827 3.735428\nv -0.622228 -1.536448 3.741582\nv 0.000000 -1.743370 4.021189\nv -0.924403 -1.151328 3.599434\nv -0.488286 -1.631703 3.836836\nv -0.177905 -1.736335 3.996863\nv -0.347018 -1.699699 3.935021\nv -0.857872 -1.299632 3.609985\nv -0.749429 -1.427419 3.662741\nv -0.946092 -0.800209 3.694102\nv -0.808633 0.542727 3.705533\nv -0.169406 -1.898119 3.846215\nv -0.343500 -1.867638 3.789062\nv -0.506751 -1.801987 3.694102\nv -0.658571 -1.703509 3.590348\nv -0.798082 -1.591548 3.486888\nv 0.000000 -1.907499 3.857646\nv -0.921179 -1.453212 3.394858\nv -1.025226 -1.286735 3.353239\nv -1.097033 -1.060764 3.361153\nv -1.390122 2.379515 3.165956\nv -1.584733 2.119547 2.912727\nv -1.121359 2.547750 3.367308\nv -0.833252 2.665570 3.507698\nv -1.769672 1.504351 2.505919\nv -1.707537 1.838179 2.692031\nv -1.817153 0.244069 2.226312\nv -1.839134 0.546244 2.243311\nv -1.838255 0.867469 2.297240\nv -1.684969 -0.318957 2.255621\nv -1.811584 1.182540 2.381649\nv -1.404483 -1.054315 2.539331\nv -1.505306 -0.828638 2.383993\nv -1.591474 -0.585667 2.297533\nv 0.000000 2.770789 3.612917\nv -0.248247 2.764635 3.606762\nv -0.527267 2.735325 3.584194\nv -1.763517 -0.044331 2.236570\nv -0.318881 0.711253 3.808407\nv -0.494734 0.608672 3.753306\nv -0.808926 0.451576 3.711687\nv -0.632779 0.199811 3.818958\nv -0.480080 0.296530 3.878162\nv -0.351414 0.288030 4.017086\nv -0.372223 0.363943 3.966675\nv -0.286055 0.327305 4.089186\nv -0.296313 0.400872 4.037602\nv -0.224506 0.344891 4.147218\nv -0.223920 0.429301 4.100324\nv -0.691397 -0.537309 3.950262\nv -1.168839 1.816785 3.743634\nv -1.358468 1.714205 3.568953\nv -1.514978 1.552124 3.356170\nv -1.613749 1.349895 3.156577\nv -1.672366 1.136231 3.022049\nv -1.702848 0.925501 2.953759\nv -0.448426 1.933434 3.993346\nv 0.000000 -0.163911 -0.617532\nv -0.223334 -0.166256 -0.577086\nv -0.461029 -0.174169 -0.499710\nv -0.699897 -0.180911 -0.407973\nv -0.929093 -0.191753 -0.285755\nv -1.150668 -0.195566 -0.102574\nv -1.333262 -0.197031 0.108743\nv -1.512340 -0.179153 0.386884\nv -1.645402 -0.128447 0.644803\nv -1.704900 -0.088002 0.833845\nv -1.676763 -0.220770 0.926168\nv -1.602318 -0.297560 0.734488\nv -1.252077 -0.410985 0.193446\nv -1.079154 -0.417434 0.014075\nv -0.869009 -0.413037 -0.131590\nv -0.651244 -0.399847 -0.242671\nv -0.436410 -0.387831 -0.349649\nv -0.210145 -0.378160 -0.412663\nv 0.000000 -0.377573 -0.444023\nv -1.447860 -0.383434 0.466018\nv -0.989176 -0.436777 3.717549\nv -1.097326 -0.404831 3.622588\nv -1.013209 -0.627873 3.651018\nv -1.120187 -0.605596 3.533196\nv -1.118135 -0.822776 3.446441\nv -0.164130 -1.952048 3.750668\nv -0.343500 -1.923325 3.698205\nv -0.508803 -1.866174 3.597382\nv -0.667364 -1.765938 3.471647\nv -0.818305 -1.653977 3.351774\nv 0.000000 -1.958496 3.770891\nv -0.962212 -1.515931 3.238641\nv -1.096446 -1.347406 3.149249\nv -1.226578 -1.054609 3.083597\nv -1.237422 -0.769728 3.279381\nv -1.243870 -0.554599 3.418012\nv -1.232733 -0.362625 3.532024\nv -0.602591 0.494072 3.745686\nv -1.113446 -0.010041 3.680913\nv -1.016140 0.152330 3.703481\nv -0.451650 0.554156 3.783787\nv -0.360500 0.608085 3.825992\nv -0.898611 0.856037 2.879608\nv -0.771997 0.779543 2.892503\nv -0.902714 0.960085 2.876677\nv -0.899197 1.000824 2.884004\nv -0.891870 1.077027 2.907158\nv -0.877802 1.105750 2.917416\nv -0.720120 1.105457 2.923864\nv -0.847028 1.152937 2.944673\nv -0.683191 0.988515 2.894262\nv -0.832373 1.169350 2.954931\nv -0.696966 1.894747 3.951728\nv -0.213662 1.956002 4.007415\nv 0.000000 1.959225 3.996277\nv -0.716310 -0.360283 3.892230\nv -0.837649 -0.298147 3.830682\nv -1.311574 -0.112034 3.516197\nv -1.444343 -0.011505 3.405995\nv -1.559527 0.111005 3.281433\nv -1.622541 0.253153 3.149542\nv -1.666798 0.397060 3.044323\nv -1.694348 0.554743 2.976913\nv -1.707537 0.730011 2.942035\nv -0.626038 -0.419780 3.963744\nv -1.059517 -0.217841 3.698498\nv -0.942282 -0.255063 3.761513\nv -1.183494 -0.180325 3.624347\nv -0.275211 -0.552841 4.258299\nv -0.318588 -1.215222 4.086842\nv -0.138924 -1.248928 4.117909\nv 0.000000 -1.251567 4.120254\nv -0.634538 -0.962873 3.935900\nv -0.645968 -0.844757 3.951727\nv -0.438168 -0.624061 4.156303\nv -0.439341 -0.539944 4.130219\nv 0.000000 -0.463741 4.259764\nv -0.053049 -0.458467 4.261816\nv -0.110788 -0.446451 4.259471\nv -0.182008 -0.453190 4.245989\nv -0.265246 -0.473415 4.221663\nv -0.333242 -0.292870 3.969020\nv -0.295727 -0.458467 3.977226\nv -0.282831 -0.585080 3.965796\nv -0.271694 -0.742177 3.944107\nv -0.358741 -0.685025 4.230455\nv -0.355810 -0.736902 4.212576\nv -0.338811 -0.813396 4.153666\nv -0.362551 -0.632561 4.227817\nv -0.424686 0.173727 2.096180\nv -0.434065 0.291256 2.700823\nv -0.305106 0.187501 3.291691\nv -0.297192 -0.061918 3.685895\nv -0.286641 -0.840067 4.055188\nv -0.302175 -0.863809 4.076583\nv -0.348483 -0.777641 4.186199\nv -0.328553 -0.843293 4.113806\nv -0.352879 -0.504189 4.181802\nv -0.358155 -0.583028 4.214921\nv -0.263780 -0.472534 1.280806\nv -0.351121 -0.068950 1.584447\nv -1.704020 2.753499 0.125449\nv 0.000000 3.606387 -0.391560\nv -1.973076 1.730031 0.893343\nv -0.499717 3.534874 -0.370164\nv -0.832080 3.450464 -0.349355\nv -1.993006 0.970344 0.894808\nv -1.028743 2.296864 -1.060976\nv -1.274938 2.194577 -0.860796\nv -1.857306 1.611331 0.174688\nv -1.983041 1.166715 0.745040\nv -1.527580 2.037480 -0.588809\nv -1.716916 1.833493 -0.219517\nv 0.000000 2.521664 -1.304826\nv -1.948750 1.380960 0.506465\nv -0.412083 2.471254 -1.268776\nv -0.738292 2.390361 -1.177039\nv -1.960473 0.748182 0.787537\nv -1.799274 1.051531 -0.021389\nv -1.944060 0.844021 0.606115\nv -1.184666 1.311206 -0.997375\nv -1.426465 1.245260 -0.752060\nv -1.641885 1.160560 -0.420283\nv 0.000000 1.451009 -1.433492\nv -0.927627 1.366015 -1.176160\nv -1.901562 0.942208 0.346145\nv -0.330898 1.443977 -1.378684\nv -0.653589 1.412615 -1.295447\nv -1.831514 1.664963 2.209020\nv -1.952560 1.906470 1.414455\nv -1.931457 1.897092 1.638082\nv -1.902148 1.850783 1.848813\nv -1.864047 1.310621 2.081233\nv -1.982162 1.566779 1.429403\nv -1.960180 1.566779 1.599981\nv -1.926768 1.517834 1.769093\nv -1.897166 0.892676 1.950515\nv -1.991248 1.266657 1.449919\nv -1.973369 1.257863 1.586205\nv -1.946991 1.205108 1.711061\nv -1.714864 -0.377279 1.359061\nv -1.723657 -0.287008 1.195517\nv -1.819204 0.191899 0.833259\nv -1.756483 -0.088002 0.977166\nv -1.734208 -0.180618 1.065972\nv -1.893063 0.511073 1.917689\nv -1.958422 0.150573 1.653909\nv -2.214288 1.061202 1.206655\nv -2.013522 -0.253889 1.527880\nv -2.153912 0.952757 1.388663\nv -2.206668 1.024566 1.053662\nv -2.213409 0.831712 0.857293\nv -2.150395 0.374202 0.810984\nv -2.184393 0.549176 0.774055\nv -2.078002 -0.310457 1.432626\nv -1.945233 -0.129327 1.599394\nv -2.215754 0.929018 0.934961\nv -2.207840 0.708908 0.805709\nv -1.951387 0.534521 1.660064\nv -2.090019 0.873331 1.470142\nv -2.030815 0.800060 1.542828\nv -1.998282 0.732356 1.596463\nv -2.070089 -0.346799 1.306891\nv -2.066864 -0.282612 1.217792\nv -2.111121 0.190434 0.867844\nv -2.115224 -0.047263 1.028456\nv -2.101449 -0.136360 1.127228\nv -1.945526 0.364528 1.666805\nv -1.978645 0.160831 1.581516\nv -2.271734 0.978844 1.221602\nv -2.024367 -0.185308 1.477469\nv -2.206668 0.879779 1.386318\nv -2.291371 0.963895 1.084437\nv -2.337972 0.764889 0.900963\nv -2.255614 0.354270 0.797795\nv -2.285509 0.499350 0.798088\nv -2.104380 -0.256821 1.381336\nv -1.970145 -0.064260 1.554258\nv -2.326541 0.864831 0.967787\nv -2.334162 0.665531 0.852896\nv -1.969266 0.493195 1.595584\nv -2.150688 0.806508 1.464573\nv -2.092949 0.721511 1.523191\nv -2.036090 0.654686 1.555431\nv -2.105845 -0.304595 1.304839\nv -2.125776 -0.250666 1.194345\nv -2.208133 0.166986 0.862861\nv -2.190548 -0.049608 1.033146\nv -2.179118 -0.113792 1.110228\nv -1.966335 0.347821 1.604377\nv -2.010885 0.178418 1.524070\nv -2.216340 0.870986 1.217792\nv -2.007074 -0.112621 1.456953\nv -2.162705 0.807973 1.362871\nv -2.233632 0.873331 1.099970\nv -2.255321 0.735579 0.941995\nv -2.266165 0.334634 0.861103\nv -2.252683 0.485866 0.861689\nv -2.075364 -0.151015 1.379870\nv -1.978058 -0.025279 1.520846\nv -2.246821 0.822921 1.006768\nv -2.254735 0.641499 0.896273\nv -1.978645 0.456850 1.553672\nv -2.131051 0.741441 1.441126\nv -2.088260 0.663186 1.495348\nv -2.051917 0.605740 1.525536\nv -2.123431 -0.173876 1.296340\nv -2.166222 -0.150431 1.198448\nv -2.252390 0.207140 0.899790\nv -2.209599 0.023960 1.038422\nv -2.199927 -0.075105 1.143641\nv -1.976300 0.338150 1.545466\nv -2.007661 0.227950 1.420317\nv -2.121379 0.811489 1.216327\nv -2.001213 -0.006521 1.455194\nv -2.048986 0.767525 1.341476\nv -2.156257 0.814715 1.124297\nv -2.196117 0.680186 1.017026\nv -2.255321 0.312360 0.949909\nv -2.253269 0.441611 0.961925\nv -2.088846 -0.042573 1.405662\nv -1.936733 0.058250 1.484503\nv -2.173549 0.756976 1.064507\nv -2.223374 0.590792 0.990062\nv -1.969852 0.412008 1.497399\nv -2.067451 0.685169 1.405076\nv -2.079467 0.613947 1.459298\nv -2.056900 0.558553 1.486555\nv -2.095880 -0.055176 1.335028\nv -2.118741 0.007840 1.256480\nv -2.243891 0.256673 0.961046\nv -2.173842 0.127127 1.069196\nv -2.125482 0.055611 1.169725\nv -1.958422 0.319392 1.484210\nv -1.917096 0.281292 1.427351\nv -2.083277 0.614534 1.244463\nv -1.854082 0.055321 1.396283\nv -2.023487 0.600760 1.303667\nv -2.127241 0.611602 1.200793\nv -2.188203 0.563828 1.125469\nv -2.196996 0.358373 1.045163\nv -2.200806 0.424024 1.053076\nv -2.004730 0.037734 1.353199\nv -1.840014 0.103092 1.428523\nv -2.161825 0.596069 1.164157\nv -2.208426 0.505798 1.085316\nv -1.957542 0.385337 1.446402\nv -2.011178 0.575260 1.355251\nv -2.032280 0.535986 1.396283\nv -2.023194 0.489676 1.428523\nv -2.050159 0.063234 1.317442\nv -2.020556 0.089611 1.234791\nv -2.171497 0.293308 1.035491\nv -2.085329 0.183105 1.108177\nv -2.034332 0.122144 1.175001\nv -1.933216 0.334634 1.447867\nv -1.966042 0.398821 1.382215\nv -1.976593 0.300634 1.082678\nv -2.029349 0.249344 1.061576\nv -1.983920 0.416405 1.416507\nv -1.918854 0.339908 1.413869\nv -1.934974 0.136211 1.136606\nv -1.987437 0.192192 1.085902\nv -2.062175 0.311479 1.050145\nv -1.887494 0.126247 1.182328\nv -1.859944 0.111885 1.237429\nv -2.011764 0.460369 1.395404\nv -2.012350 0.501695 1.371957\nv -2.015574 0.534227 1.342648\nv -1.949336 0.373614 1.417386\nv -2.150102 0.474731 1.116090\nv -2.128706 0.528950 1.180570\nv -1.815394 0.176659 1.391887\nv -1.839720 0.104559 1.289306\nv -2.121379 0.413766 1.070075\nv -2.094415 0.359547 1.051904\nv -2.146292 0.509315 1.147451\nv -2.103794 0.539208 1.218085\nv 0.000000 0.035976 -0.792506\nv -0.233885 0.037441 -0.748836\nv -0.490338 0.029528 -0.670288\nv -0.750601 0.023960 -0.581775\nv -1.504426 2.854028 2.568640\nv -1.205769 3.139496 2.729839\nv -1.004416 0.011357 -0.463953\nv -1.709882 2.474183 2.346772\nv -1.815394 2.120425 2.170918\nv -1.228923 0.007253 -0.254688\nv 0.000000 3.530183 2.885470\nv -0.871940 3.323264 2.800474\nv -0.225972 3.505270 2.872574\nv -1.409759 -0.007401 0.002938\nv -1.694641 0.005789 0.575048\nv -1.748863 0.052682 0.749436\nv -0.524336 3.435809 2.850592\nv -1.570665 -0.010334 0.309216\nv -1.867857 1.769012 2.038735\nv -1.893356 1.428441 1.924430\nv -1.918854 1.098424 1.823901\nv -1.783741 0.050924 0.898911\nv -1.968387 0.651463 1.643944\nv -2.114052 0.078179 0.928220\nv -1.988024 0.590499 1.585326\nv -2.215168 0.088437 0.921479\nv -2.002385 0.543021 1.543121\nv -2.232460 0.110421 0.965442\nv -2.014108 0.488798 1.500330\nv -2.213995 0.180176 1.008526\nv -1.997989 0.436334 1.438488\nv -2.130172 0.242311 1.061869\nv -2.027884 0.544192 1.306012\nv -1.821549 0.132402 1.358475\nv -2.073899 0.544486 1.256187\nv -1.888666 0.297998 1.400093\nv -2.005023 0.671392 1.317149\nv -1.940543 0.333169 1.463401\nv -1.943474 0.272792 1.432333\nv -2.172670 0.184866 1.109056\nv -2.121086 0.131230 1.201965\nv -2.049572 0.574966 1.421782\nv -2.003850 0.630066 1.369905\nv -1.871374 0.072611 1.455487\nv -2.207547 0.623327 1.083557\nv -2.235684 0.545363 1.041059\nv -2.096467 0.070266 1.340010\nv -2.052796 0.041250 1.371664\nv -1.959301 0.392957 1.463401\nv -2.038142 0.514882 1.447574\nv -2.168859 0.677547 1.131331\nv -2.139844 0.701289 1.176760\nv -2.260303 0.343718 1.004423\nv -2.253562 0.432818 1.009406\nv -2.265872 0.281876 1.011457\nv -2.104380 0.108663 1.269669\nv -1.886322 0.025131 1.430868\nv -2.091484 0.703634 1.234205\nv -2.004143 0.454799 1.463108\nv -2.237149 0.228828 1.055421\nv -1.908890 0.256086 1.130158\nv -1.900683 0.323202 1.344113\nv -1.934974 0.411131 1.322718\nv -1.935268 0.441318 1.299857\nv -2.064813 0.505211 1.217792\nv -2.146585 0.006666 1.162398\nv -1.965163 0.320566 1.504433\nv -2.144826 0.855160 1.207241\nv -1.997695 0.499057 1.316270\nv -1.943767 0.368047 1.384560\nv -2.175308 0.783647 1.022009\nv -2.059244 0.576137 1.505899\nv -2.025539 0.209192 1.461056\nv -2.064520 -0.093276 1.386318\nv -1.863754 0.186624 1.154778\nv -1.835031 0.162005 1.209879\nv -2.070382 0.457731 1.135141\nv -2.079760 0.496124 1.190242\nv -1.959594 0.429595 1.102608\nv -2.054262 0.511073 1.246808\nv -1.866685 0.295947 1.353199\nv -1.953146 0.407905 1.095867\nv -1.976593 0.467695 1.155364\nv -1.909769 0.335221 1.372836\nv -1.907424 0.210363 1.122831\nv -1.951680 0.252569 1.097332\nv -1.990661 0.348702 1.070661\nv -1.978938 0.434869 1.364044\nv -1.987437 0.471799 1.339424\nv -1.956663 0.453921 1.125469\nv -2.005902 0.477076 1.189949\nv -1.875184 0.222966 1.144813\nv -1.854082 0.210070 1.186432\nv -2.209892 0.147056 0.977752\nv -2.025246 0.515469 1.519381\nv -1.831807 0.256966 1.335614\nv -1.827997 0.162298 1.287840\nv -2.043710 0.418750 1.090298\nv -1.842065 0.266637 1.310115\nv -1.825945 0.215347 1.243877\nv -2.015574 0.378011 1.068610\nv -2.080347 0.480592 1.162105\nv -2.009419 0.483521 1.219844\nv -1.936733 0.383873 1.344993\nv -1.951680 0.341376 1.101729\nv -2.018798 0.507850 1.290771\nv -1.819790 0.214466 1.321252\nv -2.012643 0.489385 1.244756\nv -1.863754 0.293308 1.325063\nv -2.201099 0.613947 0.920014\nv -2.105845 0.713305 1.424127\nv -2.013815 -0.054589 1.456074\nv -1.951387 0.382408 1.097626\nv -1.938492 0.295947 1.113745\nv -2.138671 -0.057814 1.229223\nv -2.230408 0.450695 0.914738\nv -2.155670 0.853402 1.096160\nv -1.986265 0.429008 1.522605\nv -1.964576 0.476489 1.284910\nv -1.926475 0.351340 1.346458\nv -1.997109 0.494073 1.275824\nv -1.828876 0.242895 1.281099\nv -2.191134 0.706563 0.962511\nv -2.106431 -0.106173 1.309822\nv -2.233339 0.230002 0.936720\nv -2.238615 0.306789 0.913273\nv -2.082398 0.627721 1.473659\nv -2.166515 0.072024 1.055421\nv -2.115810 0.785405 1.345579\nv -1.953439 0.018098 1.499744\nv -1.915630 0.453627 1.213982\nv -1.897166 0.374492 1.240653\nv -1.891304 0.411715 1.227171\nv -1.891597 0.325547 1.265566\nv -1.866098 0.289792 1.284323\nv -1.908596 0.354270 1.306891\nv -1.910062 0.398527 1.149502\nv -1.915630 0.359547 1.153019\nv -1.913872 0.439853 1.148330\nv -1.928233 0.317340 1.140417\nv -1.896873 0.269566 1.157709\nv -1.883684 0.310308 1.224533\nv -1.852616 0.266931 1.251790\nv -1.901269 0.421682 1.266738\nv -1.901855 0.393250 1.284030\nv -1.930871 0.460076 1.251791\nv -1.893649 0.315582 1.317442\nv -1.916510 0.450405 1.177932\nv -1.899511 0.361598 1.199620\nv -1.895700 0.404095 1.187018\nv -1.923544 0.430473 1.125176\nv -1.932923 0.358373 1.121659\nv -1.926768 0.395008 1.121073\nv -1.897459 0.307376 1.181156\nv -1.857306 0.255792 1.215154\nv -1.946698 0.326721 1.473659\nv -2.135154 0.097231 1.188776\nv -2.015867 0.672566 1.388663\nv -2.233925 0.574673 1.014388\nv -2.101449 0.016337 1.392473\nv -2.048107 0.536573 1.465453\nv -2.173549 0.730011 1.091178\nv -2.264407 0.317634 0.975407\nv -2.257373 0.263412 0.982442\nv -2.000333 0.728837 1.324770\nv -1.981282 0.242311 1.421782\nv -2.192307 0.162882 1.085609\nv -2.064227 0.603102 1.442592\nv -1.915924 0.071440 1.475418\nv -2.200513 0.666118 1.045749\nv -2.127241 0.028647 1.356716\nv -1.965456 0.400872 1.481866\nv -2.147171 0.778076 1.141589\nv -2.260010 0.431353 0.983907\nv -2.133982 0.061182 1.278755\nv -1.946112 0.015166 1.440540\nv -2.109656 0.765473 1.221309\nv -2.010591 0.470627 1.479521\nv -2.229529 0.199227 1.028750\nv -2.116103 0.565295 0.890119\nv -2.110828 0.970050 1.085609\nv -2.079174 0.970931 1.215447\nv -2.088846 0.371269 0.890411\nv -1.938784 0.142073 1.704906\nv -1.911527 -0.147205 1.636323\nv -2.134275 0.881831 0.984786\nv -2.138964 0.812076 0.949323\nv -1.946991 -0.300198 1.577999\nv -1.979524 -0.344454 1.459591\nv -1.991248 -0.286131 1.249446\nv -1.996230 -0.128447 1.181742\nv -1.936440 0.396182 1.724543\nv -1.942888 0.594895 1.725716\nv -2.005316 -0.039056 1.097625\nv -2.017333 0.880366 1.560120\nv -1.985972 0.826144 1.628996\nv -2.138085 0.712131 0.908583\nv -2.038728 0.904399 1.466918\nv -2.063054 0.928724 1.374009\nv -1.988903 -0.352366 1.346751\nv -2.052503 0.199811 0.959288\nv -1.956663 0.730011 1.696700\nv -2.033159 0.086679 1.020836\nv -1.988610 0.554744 0.881912\nv -1.975421 0.926086 1.070954\nv -1.953732 0.370683 0.880740\nv -1.898045 0.166401 1.776420\nv -2.005609 0.810611 0.935547\nv -1.856133 -0.289647 1.607308\nv -1.868736 -0.250960 1.293409\nv -1.933509 0.705392 1.811298\nv -1.979524 1.018702 1.571844\nv -1.977765 1.025737 1.344700\nv -1.908010 0.191312 0.937306\nv -1.960473 0.968292 1.210758\nv -1.869029 -0.139292 1.699338\nv -1.989196 0.871573 0.993579\nv -1.877236 -0.343869 1.505019\nv -1.872840 -0.126395 1.201086\nv -1.912993 0.452456 1.806315\nv -1.879874 -0.046969 1.075644\nv -1.963404 0.963895 1.666512\nv -2.000627 0.709202 0.906825\nv -1.981282 1.038928 1.463401\nv -1.857599 -0.329799 1.386611\nv -1.949922 0.867763 1.756490\nv -1.897459 0.069682 1.007061\nv -0.822408 1.036582 3.758289\nv -0.929679 1.037753 3.738359\nv -1.165322 0.932827 3.580091\nv -1.155357 0.948069 3.606762\nv -1.138358 0.963017 3.622588\nv -1.089412 0.989979 3.666259\nv -1.017605 1.017237 3.711101\nv -0.715137 1.018411 3.749789\nv -0.492976 0.855746 3.680620\nv -0.517595 0.842850 3.670362\nv -0.553645 0.834643 3.683551\nv -0.500303 0.890037 3.682965\nv -0.518768 0.911434 3.694982\nv -0.487114 0.870108 3.684430\nv -1.133669 0.873918 3.602072\nv -0.643331 0.824385 3.716377\nv -0.730378 0.818230 3.738066\nv -0.544267 0.944550 3.702895\nv -0.826804 0.811489 3.745979\nv -0.615780 0.984118 3.726342\nv -0.938765 0.811489 3.734842\nv -1.029036 0.824092 3.689999\nv -1.088240 0.848124 3.649846\nv -1.159461 0.897363 3.572470\nv -1.166202 0.911434 3.566022\nv -1.167667 0.921105 3.570419\nv -0.589695 0.828782 3.700550\nv -1.148616 0.884176 3.584487\nv 0.930265 1.038634 3.770598\nv 0.820650 1.041856 3.791115\nv 0.925869 1.077321 3.793752\nv 0.816839 1.079079 3.811631\nv 0.924989 1.107215 3.787891\nv 0.812443 1.105750 3.806942\nv 1.019657 1.020463 3.744514\nv 1.029329 1.057685 3.761806\nv 1.035777 1.084063 3.755358\nv 1.099963 0.992911 3.698792\nv 1.109342 1.027202 3.715205\nv 1.130152 1.054753 3.705533\nv 1.145978 0.963602 3.656294\nv 1.172063 0.992324 3.657759\nv 1.194338 1.016650 3.644863\nv 1.163271 0.948363 3.629916\nv 1.204596 0.969172 3.616727\nv 1.228336 0.984998 3.595624\nv 1.176753 0.931656 3.593866\nv 1.219837 0.946895 3.577453\nv 1.247680 0.955102 3.557523\nv 1.180563 0.917588 3.570712\nv 1.225406 0.926086 3.547558\nv 1.251491 0.924914 3.527335\nv 1.177339 0.906450 3.563092\nv 1.222475 0.903227 3.537006\nv 1.248560 0.897072 3.515025\nv 1.170598 0.891795 3.571005\nv 1.211630 0.878608 3.539937\nv 1.239474 0.865418 3.516197\nv 1.141582 0.863659 3.609107\nv 1.167374 0.824679 3.589469\nv 1.191700 0.798008 3.569246\nv 1.098791 0.835230 3.656294\nv 1.118428 0.794198 3.636950\nv 1.139237 0.768405 3.614675\nv 1.035191 0.812369 3.701723\nv 1.048966 0.768698 3.688827\nv 1.061862 0.740853 3.673000\nv 0.954884 0.726785 3.714325\nv 0.945212 0.753456 3.731911\nv 0.940230 0.799472 3.746272\nv 0.836769 0.721804 3.738945\nv 0.828856 0.748182 3.743048\nv 0.826218 0.797714 3.760927\nv 0.717189 0.726201 3.743927\nv 0.716603 0.753456 3.746565\nv 0.730964 0.805040 3.753306\nv 0.611091 0.740562 3.733669\nv 0.618125 0.764301 3.734548\nv 0.631314 0.810317 3.733376\nv 0.475684 0.781008 3.713153\nv 0.496200 0.793611 3.708171\nv 0.536646 0.824385 3.699964\nv 0.714844 1.022805 3.776167\nv 0.704879 1.059150 3.798735\nv 0.699604 1.090802 3.797270\nv 0.614022 0.989979 3.748031\nv 0.604350 1.021927 3.774995\nv 0.596729 1.048305 3.782029\nv 0.538112 0.944550 3.725170\nv 0.520233 0.968292 3.749789\nv 0.511734 0.997895 3.759168\nv 0.468943 0.885640 3.703774\nv 0.440513 0.894140 3.726049\nv 0.423221 0.901760 3.727808\nv 0.456926 0.863072 3.695861\nv 0.430548 0.861608 3.714912\nv 0.411790 0.864537 3.719894\nv 0.458684 0.848418 3.690878\nv 0.428496 0.839040 3.711101\nv 0.411204 0.834643 3.719015\nv 0.482718 0.832298 3.689706\nv 0.439927 0.819108 3.709929\nv 0.424686 0.807679 3.716670\nv 1.177046 0.700701 3.559574\nv 1.085309 0.666702 3.617313\nv 0.967780 0.656153 3.671534\nv 0.828270 0.650289 3.710222\nv 0.689639 0.656737 3.726635\nv 0.566541 0.678134 3.730738\nv 0.410325 0.749647 3.736600\nv 1.235371 1.056218 3.610865\nv 1.281972 1.008153 3.549902\nv 1.308350 0.965947 3.506525\nv 1.317436 0.921692 3.479854\nv 1.315091 0.878021 3.464027\nv 1.302781 0.831418 3.465493\nv 1.238302 0.741440 3.510042\nv 0.931730 1.151179 3.794046\nv 0.797496 1.155282 3.814562\nv 1.052483 1.130076 3.750669\nv 1.158288 1.092853 3.691464\nv 0.676157 1.138576 3.808114\nv 0.566541 1.094321 3.804890\nv 0.481545 1.044201 3.783494\nv 0.371051 0.931656 3.747151\nv 0.343500 0.876847 3.738945\nv 0.342621 0.830834 3.739238\nv 0.361965 0.788921 3.738066\nv 0.474804 0.927846 3.736014\nv 0.458978 0.940740 3.740996\nv 0.499424 0.907621 3.716670\nv 0.412963 0.977379 3.763271\nv 0.322691 0.948653 3.775581\nv 0.297485 0.890330 3.768840\nv 0.295434 0.837573 3.770892\nv 0.313898 0.787750 3.770305\nv 0.368706 1.008153 3.788184\nv 0.268763 0.958914 3.827458\nv 0.248247 0.894434 3.821010\nv 0.253815 0.831711 3.821596\nv 0.273159 0.769576 3.820131\nv 0.314778 1.019289 3.839767\nv 0.213955 0.954517 3.885489\nv 0.200473 0.879192 3.879921\nv 0.212197 0.810611 3.880214\nv 0.239747 0.735579 3.883145\nv 0.249419 1.025737 3.898093\nv 0.169992 0.564121 4.065446\nv 0.144786 0.942208 3.925643\nv 0.138338 0.865711 3.927108\nv 0.150355 0.783353 3.947917\nv 0.181129 0.674908 3.976347\nv 0.170871 1.017531 3.936487\nv 0.094375 0.594017 4.089772\nv 0.074738 0.935759 3.952021\nv 0.071514 0.864244 3.960520\nv 0.077962 0.785698 3.984554\nv 0.089099 0.694840 4.021189\nv 0.086168 1.005514 3.959641\nv 1.208113 0.658495 3.539644\nv 1.108463 0.622447 3.599141\nv 0.975987 0.605447 3.657466\nv 0.818598 0.606327 3.703188\nv 0.662381 0.618343 3.726049\nv 0.532250 0.648824 3.736600\nv 0.361672 0.740269 3.762978\nv 1.272007 1.080253 3.596210\nv 1.324470 1.031305 3.526162\nv 1.352606 0.973276 3.474579\nv 1.361985 0.919347 3.447614\nv 1.357882 0.866295 3.429443\nv 1.342934 0.812369 3.436770\nv 1.275817 0.707737 3.490112\nv 0.930851 1.174040 3.816906\nv 0.781083 1.175211 3.845043\nv 1.069775 1.159092 3.766495\nv 1.184666 1.120992 3.692637\nv 0.650072 1.154405 3.838888\nv 0.538405 1.110734 3.823648\nv 0.445202 1.058563 3.801666\nv 1.403897 0.990566 3.440580\nv 1.375174 1.054166 3.496560\nv 1.319780 1.120405 3.583314\nv 0.434651 0.227362 3.938831\nv 0.156803 0.356321 4.206422\nv 0.083530 0.361304 4.242178\nv 0.380723 1.075563 3.855301\nv 0.303054 1.087579 3.915092\nv 0.216007 1.093147 3.960520\nv 0.105805 1.088166 3.980743\nv 0.925575 1.221814 3.862042\nv 0.752360 1.217711 3.898093\nv 1.095274 1.213021 3.803717\nv 1.234784 1.167592 3.699671\nv 0.604936 1.179902 3.896920\nv 0.479494 1.130663 3.880507\nv 0.920593 1.298602 3.911281\nv 0.713086 1.292740 3.969606\nv 1.113739 1.296550 3.833319\nv 1.277282 1.249657 3.707291\nv 0.534888 1.239105 3.969606\nv 0.393912 1.162318 3.942935\nv 0.313605 0.478246 3.975761\nv 1.136600 0.553279 3.586538\nv 0.545146 0.128591 3.872593\nv 1.411810 0.924621 3.404530\nv 1.409466 0.855453 3.392807\nv 1.392760 0.791266 3.403358\nv 1.457532 1.016066 3.388410\nv 1.426465 1.101353 3.455821\nv 1.366382 1.188402 3.561040\nv 0.990641 0.538330 3.649553\nv 1.079447 0.329066 3.662155\nv 1.469549 0.930189 3.352947\nv 1.463980 0.843437 3.340637\nv 1.445516 0.760198 3.356464\nv 1.378984 0.612189 3.435597\nv 0.410325 0.164349 3.981622\nv 0.231833 0.269859 4.203491\nv 0.164716 0.274843 4.259178\nv 0.090565 0.279824 4.302555\nv 0.289865 0.255205 4.132856\nv 0.486528 0.063527 3.914212\nv 0.904473 1.407340 3.970192\nv 0.672053 1.411734 4.041413\nv 1.121652 1.408805 3.859698\nv 1.303074 1.361911 3.712274\nv 0.424393 1.344031 4.063101\nv 0.291624 1.197779 3.999208\nv 1.514978 1.048892 3.320707\nv 1.476876 1.154405 3.399255\nv 1.411224 1.276327 3.539058\nv 1.241526 0.367166 3.575401\nv 0.241212 0.522211 4.029103\nv 1.529925 0.938395 3.281140\nv 1.527874 0.826730 3.274692\nv 1.507650 0.724440 3.296966\nv 1.444636 0.552692 3.400427\nv 1.325642 0.251688 3.543747\nv 0.139217 1.204521 4.030569\nv 0.906232 1.550366 3.980450\nv 0.673226 1.576744 4.053723\nv 1.133376 1.540108 3.856767\nv 1.318608 1.481492 3.705533\nv 0.531078 3.196648 3.153646\nv 0.186112 1.380376 4.087428\nv 0.920593 1.709221 3.940297\nv 0.684363 1.737944 4.020311\nv 1.146272 1.682257 3.815734\nv 1.335021 1.601072 3.657466\nv 0.427031 1.564140 4.095928\nv 0.194611 1.577331 4.100910\nv 0.432893 1.752892 4.065446\nv 0.201059 1.765202 4.069256\nv 1.079447 2.402376 3.481027\nv 0.806581 2.497044 3.612330\nv 1.338831 2.262866 3.285243\nv 1.538718 2.035722 3.048720\nv 0.497665 2.252021 3.837130\nv 0.232420 2.276347 3.856181\nv 1.162392 2.725654 3.205816\nv 0.856993 2.864870 3.334775\nv 1.436137 2.517560 3.009153\nv 1.632213 2.232092 2.752700\nv 0.520526 2.556834 3.688534\nv 0.248247 2.583505 3.711981\nv 1.575647 1.085234 3.233366\nv 1.529925 1.222108 3.332137\nv 1.449033 1.369824 3.500371\nv 1.594991 0.950705 3.182955\nv 1.595577 0.809144 3.186765\nv 1.579750 0.683115 3.215487\nv 1.516150 0.477075 3.339171\nv 1.625765 1.120405 3.133130\nv 1.572130 1.292156 3.257106\nv 1.480686 1.469182 3.441460\nv 1.653902 0.946602 3.077736\nv 1.794878 1.153231 2.507678\nv 1.744467 1.460095 2.637223\nv 1.671780 1.778683 2.826852\nv 1.822135 0.865124 2.426785\nv 1.821842 0.574379 2.383994\nv 1.795171 0.290669 2.370512\nv 1.665626 -0.219599 2.454042\nv 1.798688 1.573228 2.367288\nv 1.746518 1.919953 2.533469\nv 1.781396 2.017844 2.365529\nv 0.220989 -0.119070 4.333622\nv 0.208386 -0.097086 4.366742\nv 0.230368 -0.041693 4.376121\nv 0.252057 0.060888 4.357069\nv 0.254108 0.118920 4.323658\nv 0.246781 0.195708 4.263867\nv 0.322691 0.109540 4.233679\nv 0.306864 0.183398 4.179164\nv 0.429376 0.059714 4.042585\nv 0.412376 0.106317 4.017673\nv 0.459564 -0.006815 3.984260\nv 0.245609 -0.254183 4.132563\nv 0.361379 -0.233373 4.062222\nv 0.368706 -0.100312 4.228404\nv 0.460736 -0.206409 3.965209\nv 0.173802 0.201569 4.326881\nv 0.094961 0.206259 4.366448\nv 0.176147 0.072024 4.413343\nv 0.087634 0.080817 4.450858\nv 0.154458 -0.035538 4.426239\nv 0.073272 -0.030557 4.464926\nv 0.165302 -0.147792 4.339191\nv 0.144200 -0.142225 4.372603\nv 0.135407 -0.089467 4.416566\nv 0.063307 -0.094157 4.452617\nv 0.127494 -0.179738 4.304607\nv 0.104340 -0.191463 4.326295\nv 0.099357 -0.146619 4.391654\nv 0.047187 -0.161567 4.412170\nv 0.129252 -0.206702 4.242472\nv 0.101995 -0.228683 4.248333\nv 0.068290 -0.208754 4.334209\nv 0.035757 -0.220770 4.339777\nv 0.173802 -0.236305 4.188543\nv 0.148303 -0.291405 4.204957\nv 0.069462 -0.249786 4.260643\nv 0.032533 -0.264148 4.263867\nv 0.418238 -0.189702 4.062515\nv 0.410911 -0.131380 4.137839\nv 0.333535 -0.208460 4.093876\nv 0.312140 -0.139879 4.221369\nv 0.335001 -0.127860 4.228990\nv 0.372223 -0.149844 4.153372\nv 0.341742 -0.157464 4.168320\nv 0.345845 -0.183257 4.122012\nv 0.378085 -0.189996 4.090945\nv 0.225386 -0.122586 4.305486\nv 0.180836 -0.146619 4.312227\nv 0.150355 -0.172118 4.280573\nv 0.154458 -0.187360 4.231041\nv 0.189922 -0.198789 4.181509\nv 0.243557 -0.214615 4.134615\nv 0.316243 -0.260631 4.091238\nv 0.300123 -0.221357 4.102961\nv 0.317122 -0.046676 4.308124\nv 0.439927 -0.092983 4.104720\nv 0.458098 -0.153360 4.011224\nv 0.325622 0.056198 4.273246\nv 0.439048 0.021907 4.066325\nv 0.457805 -0.021176 4.007414\nv 0.081772 -0.306060 4.230162\nv 0.039860 -0.319541 4.236024\nv 0.310381 -0.185893 4.114099\nv 0.291037 -0.130793 4.203198\nv 0.317709 -0.143689 4.165683\nv 0.322984 -0.168896 4.132563\nv 0.230368 -0.125518 4.276470\nv 0.198421 -0.138119 4.279987\nv 0.177905 -0.151015 4.260057\nv 0.174388 -0.158344 4.216973\nv 0.199008 -0.160689 4.170372\nv 0.240040 -0.175050 4.132563\nv 0.284003 -0.190289 4.114392\nv 0.194318 -0.529980 4.292883\nv 0.120753 -0.522947 4.304314\nv 0.054515 -0.538186 4.321020\nv 0.407101 -0.277044 4.041706\nv 0.248247 -0.306938 4.147511\nv 0.333535 -0.307525 4.094755\nv 0.652709 -0.932393 3.929452\nv 0.569472 -0.720780 4.043171\nv 0.283710 -0.117312 4.290538\nv 0.270228 -0.126689 4.277349\nv 0.260263 -0.124051 4.248333\nv 0.297779 -0.091518 4.307831\nv 0.615780 -0.788777 3.988657\nv 0.660330 -0.891360 3.932383\nv 0.444909 -1.135502 4.040826\nv 0.546025 -1.046109 3.986019\nv 0.562145 -0.503309 4.032620\nv 0.603471 -0.993061 3.951141\nv 0.522285 -0.595631 4.085669\nv 0.510268 -0.669196 4.105599\nv 0.629555 -0.596218 4.001259\nv 0.592040 -0.668318 4.034672\nv 0.642744 -0.750090 3.979277\nv 0.704293 -0.892238 3.909815\nv 0.703121 -0.953493 3.898971\nv 0.289279 -0.151896 4.128167\nv 0.275797 -0.117602 4.185612\nv 0.295727 -0.126689 4.156890\nv 0.303933 -0.153654 4.138718\nv 0.230368 -0.124051 4.253609\nv 0.213662 -0.125809 4.249799\nv 0.196370 -0.123467 4.233972\nv 0.197835 -0.125809 4.199095\nv 0.214834 -0.130206 4.159235\nv 0.237988 -0.147792 4.133443\nv 0.263780 -0.149844 4.127581\nv 0.250884 -0.109396 4.221956\nv 0.250591 -0.108518 4.178286\nv 0.271107 -0.119654 4.149856\nv 0.230661 -0.105293 4.213163\nv 0.225092 -0.109396 4.182682\nv 0.241212 -0.117896 4.148097\nv 0.214248 -0.107344 4.209939\nv 0.638055 -1.045815 3.917435\nv 0.570938 -1.107951 3.951141\nv 0.450185 -1.208189 4.011811\nv 0.628969 -0.886670 3.944986\nv 0.623987 -0.916564 3.944693\nv 0.580903 -0.961406 3.967847\nv 0.533129 -1.007715 4.004776\nv 0.443737 -1.094177 4.065739\nv 0.596729 -0.810467 3.987777\nv 0.557456 -0.760641 4.041413\nv 0.281659 -0.600322 4.274418\nv 0.434358 -0.670664 4.170958\nv 0.502648 -0.712283 4.107358\nv 0.541922 -0.791122 4.038188\nv 0.490924 -0.754486 4.102668\nv 0.524630 -0.814864 4.031447\nv 0.478028 -0.791709 4.091824\nv 0.496493 -0.843880 4.000673\nv 0.453116 -0.839776 4.055188\nv 0.482718 -0.854722 3.979864\nv 0.436996 -0.856773 4.024414\nv 0.477149 -0.833035 3.949089\nv 0.427324 -0.855602 3.993053\nv 0.606988 -0.878170 3.948210\nv 0.602298 -0.902789 3.950555\nv 0.575041 -0.823654 3.987777\nv 0.588816 -0.874947 3.946158\nv 0.585592 -0.892825 3.947917\nv 0.554525 -0.836844 3.983674\nv 0.559507 -0.871428 3.930625\nv 0.563024 -0.878170 3.927987\nv 0.526095 -0.851499 3.961106\nv 0.548077 -0.866447 3.912160\nv 0.551594 -0.875238 3.910402\nv 0.517009 -0.849154 3.940004\nv 0.543680 -0.852377 3.880800\nv 0.548077 -0.867912 3.876403\nv 0.507044 -0.826586 3.910988\nv 0.471580 -0.871428 3.956710\nv 0.475684 -0.889599 3.994811\nv 0.500010 -0.939719 4.019138\nv 0.518182 -0.969615 4.018259\nv 0.563317 -0.939719 3.975467\nv 0.546318 -0.920374 3.977226\nv 0.521406 -0.890773 3.952900\nv 0.521992 -0.879341 3.920660\nv 0.523750 -0.886377 3.874645\nv 0.480959 -0.880222 3.905419\nv 0.428496 -0.719609 4.170958\nv 0.417945 -0.761812 4.156890\nv 0.400360 -0.824241 4.106771\nv 0.129838 -0.569254 4.336553\nv 0.286641 -0.655422 4.274126\nv 0.281659 -0.711696 4.258299\nv 0.277262 -0.806657 4.194698\nv 0.061256 -0.585080 4.351794\nv 0.206335 -0.580099 4.308417\nv 0.210731 -0.636957 4.308710\nv 0.215127 -0.695576 4.296986\nv 0.210438 -0.800796 4.221663\nv 0.139217 -0.628164 4.334795\nv 0.145372 -0.690006 4.323071\nv 0.143907 -0.799328 4.245110\nv 0.064187 -0.643112 4.356190\nv 0.068290 -0.702315 4.338898\nv 0.071514 -0.802260 4.256540\nv 0.385998 -0.850325 4.079807\nv 0.268177 -0.840654 4.144287\nv 0.207214 -0.845051 4.162752\nv 0.136286 -0.845638 4.180630\nv 0.066238 -0.847396 4.191767\nv 0.386585 -0.880809 4.028224\nv 0.398015 -0.899857 4.065446\nv 0.423514 -0.972544 4.094169\nv 0.441099 -1.027351 4.086255\nv 0.313019 -1.276477 4.052257\nv 0.327087 -1.166864 4.138132\nv 0.277262 -0.895754 4.123478\nv 0.290451 -0.923599 4.148390\nv 0.317709 -1.011525 4.180044\nv 0.327674 -1.086264 4.168613\nv 0.137752 -1.304322 4.070722\nv 0.158268 -1.202035 4.197336\nv 0.138924 -0.903670 4.189716\nv 0.139510 -0.930341 4.212576\nv 0.149475 -1.036731 4.246282\nv 0.158268 -1.116158 4.236903\nv 0.465426 -0.817793 4.073359\nv 0.509389 -0.831570 4.019138\nv 0.537819 -0.844464 3.974295\nv 0.570645 -0.873480 3.942934\nv 0.571231 -0.884325 3.941762\nv 0.485356 -0.913635 4.012983\nv 0.532543 -0.901031 3.969606\nv 0.412083 -0.795225 4.131098\nv 0.282245 -0.763573 4.232800\nv 0.214541 -0.749503 4.265919\nv 0.146545 -0.748038 4.290245\nv 0.070048 -0.755657 4.307831\nv 0.405928 -0.929460 4.090945\nv 0.301882 -0.958183 4.174475\nv 0.142441 -0.971080 4.236024\nv 0.197249 -0.869964 4.109995\nv 0.257039 -0.864396 4.093583\nv 0.366948 -0.863515 4.041999\nv 0.137752 -0.887548 4.168613\nv 0.271694 -0.870551 4.093876\nv 0.384533 -0.873480 3.978105\nv 0.053049 -0.881393 4.122012\nv 0.123684 -0.874067 4.111754\nv 0.486235 -0.802260 3.912160\nv 0.424393 -0.818380 3.961399\nv 0.557456 -0.842119 3.829509\nv 0.569179 -0.876118 3.826285\nv 0.514665 -0.802260 3.871421\nv 0.543973 -0.920667 3.804010\nv 0.490631 -0.906893 3.838595\nv 0.196370 -0.843586 4.092117\nv 0.245316 -0.835964 4.073652\nv 0.365482 -0.821312 4.016500\nv 0.146838 -0.888428 4.115857\nv 0.263780 -0.881980 4.056946\nv 0.400067 -0.896048 3.908643\nv 0.051877 -0.848274 4.109702\nv 0.124270 -0.848861 4.097979\nv 0.521112 -0.731038 3.835664\nv 0.430255 -0.733970 3.858232\nv 0.646848 -0.809880 3.690878\nv 0.672933 -0.861464 3.678568\nv 0.561266 -0.739831 3.781735\nv 0.601712 -0.978406 3.725169\nv 0.529319 -0.995993 3.761805\nv 0.163251 -0.721954 4.017086\nv 0.233592 -0.733970 3.987191\nv 0.357862 -0.733090 3.913625\nv 0.162958 -0.952909 4.053722\nv 0.289279 -0.950564 3.981036\nv 0.437582 -0.972251 3.824527\nv 0.041032 -0.727815 4.042292\nv 0.100236 -0.724883 4.030569\nv 0.558921 -0.607941 3.818958\nv 0.470115 -0.589183 3.889593\nv 0.666778 -0.748038 3.644277\nv 0.692863 -0.851793 3.618484\nv 0.597023 -0.628751 3.757995\nv 0.611384 -1.072196 3.686481\nv 0.527267 -1.106486 3.735427\nv 0.165302 -0.593286 4.012690\nv 0.235937 -0.586838 3.996863\nv 0.388636 -0.581564 3.940590\nv 0.162371 -1.094764 4.028224\nv 0.303054 -1.066625 3.947917\nv 0.432600 -1.094177 3.810165\nv 0.040153 -0.608235 4.027931\nv 0.101409 -0.599735 4.021776\nv 0.594678 -0.475173 3.816320\nv 0.494148 -0.463157 3.892230\nv 0.691397 -0.682093 3.600020\nv 0.716017 -0.831861 3.565143\nv 0.635710 -0.504773 3.751547\nv 0.618418 -1.142535 3.654242\nv 0.530198 -1.198222 3.704067\nv 0.175267 -0.469602 4.020310\nv 0.244143 -0.461396 4.000087\nv 0.412963 -0.452018 3.939711\nv 0.151820 -1.209654 3.995105\nv 0.312433 -1.184741 3.910402\nv 0.430255 -1.189725 3.772943\nv 0.041619 -0.486309 4.029982\nv 0.105512 -0.470776 4.021482\nv 0.633366 -0.312509 3.801666\nv 0.534301 -0.287596 3.881972\nv 0.745619 -0.602080 3.533782\nv 0.761446 -0.818086 3.486301\nv 0.682605 -0.361160 3.710515\nv 0.635710 -1.235151 3.578039\nv 0.534888 -1.305786 3.633725\nv 0.197249 -0.301370 3.988364\nv 0.280486 -0.297560 3.976640\nv 0.443737 -0.282028 3.932383\nv 0.110202 -1.350922 3.852370\nv 0.322105 -1.312235 3.758288\nv 0.425858 -1.310183 3.681499\nv 0.046308 -0.343576 3.997742\nv 0.104633 -0.322473 3.998328\nv 0.604350 -0.142515 3.579797\nv 0.497372 -0.097380 3.613209\nv 0.810978 -0.515031 3.381669\nv 0.861389 -0.765331 3.322758\nv 0.692863 -0.199670 3.537886\nv 0.680553 -1.254790 3.389875\nv 0.561852 -1.354441 3.419184\nv 0.174388 -0.054296 3.725463\nv 0.254988 -0.050779 3.703188\nv 0.396843 -0.077157 3.638415\nv 0.142441 -1.503328 3.595624\nv 0.309209 -1.402799 3.517076\nv 0.440513 -1.379938 3.443511\nv 0.031654 -0.106760 3.741289\nv 0.101409 -0.077450 3.738065\nv 0.599367 0.041837 3.234245\nv 0.510854 0.086679 3.247434\nv 0.902128 -0.383434 3.086821\nv 0.912680 -0.702609 3.040806\nv 0.723637 -0.010041 3.215487\nv 0.748257 -1.197931 3.030255\nv 0.614022 -1.279409 3.033479\nv 0.177612 0.197175 3.313379\nv 0.262022 0.196588 3.301363\nv 0.419117 0.133572 3.267951\nv 0.150355 -1.571325 3.090045\nv 0.351707 -1.484864 3.070115\nv 0.496200 -1.375248 3.051651\nv 0.024326 0.127418 3.329206\nv 0.100530 0.169037 3.321000\nv 0.719827 0.155556 2.673273\nv 0.631021 0.212414 2.683531\nv 0.997675 -0.309870 2.598242\nv 0.995038 -0.629924 2.557209\nv 0.827977 0.064992 2.658325\nv 0.812443 -1.170967 2.576553\nv 0.696966 -1.272083 2.556037\nv 0.233885 0.319685 2.716064\nv 0.339104 0.327305 2.711667\nv 0.530491 0.252862 2.684996\nv 0.195197 -1.578945 2.598535\nv 0.402704 -1.503622 2.578312\nv 0.579144 -1.416574 2.567174\nv 0.029895 0.237034 2.738632\nv 0.130425 0.288324 2.725443\nv 0.718655 0.061475 2.067751\nv 0.620177 0.115108 2.080647\nv 1.041932 -0.365263 1.990082\nv 1.003830 -0.612631 1.966928\nv 0.832959 -0.030557 2.052217\nv 0.847321 -1.113521 1.984806\nv 0.790754 -1.334802 1.920620\nv 0.235937 0.214760 2.102628\nv 0.337346 0.216811 2.098232\nv 0.522285 0.145005 2.075664\nv 0.237402 -1.942670 1.617565\nv 0.495907 -1.680941 1.608187\nv 0.703121 -1.549638 1.728060\nv 0.044843 0.159072 2.145419\nv 0.140683 0.193950 2.113472\nv 0.631314 -0.134015 1.538725\nv 0.528733 -0.103241 1.555138\nv 0.949023 -0.458466 1.461935\nv 0.903887 -0.610286 1.390422\nv 0.747084 -0.190289 1.513519\nv 0.624280 -0.956131 1.345872\nv 0.594678 -1.177415 1.379284\nv 0.200473 -0.038469 1.581223\nv 0.274038 -0.046382 1.586498\nv 0.426152 -0.100311 1.596170\nv 0.189336 -1.520328 1.350268\nv 0.328553 -1.476364 1.331510\nv 0.482425 -1.370854 1.344113\nv 0.048946 -0.071002 1.605842\nv 0.110495 -0.051073 1.590015\nv 0.440513 -0.508585 1.278461\nv 0.410911 -0.448795 1.274944\nv 0.665312 -0.583028 1.243877\nv 0.617832 -0.683850 1.248859\nv 0.485942 -0.527050 1.273479\nv 0.484183 -0.818966 1.258238\nv 0.436996 -0.870550 1.268496\nv 0.151820 -0.425934 1.275824\nv 0.213955 -0.472241 1.282858\nv 0.332656 -0.426518 1.271427\nv 0.128373 -0.959647 1.268790\nv 0.244143 -0.934150 1.287254\nv 0.358155 -0.915392 1.270841\nv 0.050411 -0.486602 1.326821\nv 0.091444 -0.432966 1.281978\nv 0.687880 -0.699680 3.957882\nv 0.764376 -0.896048 3.869955\nv 0.756170 2.213921 3.772943\nv 1.008813 2.150905 3.672121\nv 1.245043 2.051550 3.517369\nv 1.440826 1.893282 3.314845\nv 1.745346 1.136231 2.765596\nv 1.775534 0.879779 2.689100\nv 1.693469 1.412321 2.899538\nv 1.600560 1.678447 3.109683\nv 0.444323 -1.298167 3.977519\nv 0.313312 -1.359128 4.015621\nv 0.141269 -1.375248 4.040534\nv 0.753825 -0.977235 3.853249\nv 0.154751 -1.998651 3.500077\nv 0.331484 -1.980771 3.446148\nv 0.314778 -1.443245 3.993639\nv 0.672640 -1.111761 3.876110\nv 0.584127 -1.190896 3.916556\nv 0.157682 -1.470209 4.050791\nv 0.450771 -1.386386 3.929452\nv 1.384553 -0.835964 2.835351\nv 1.483031 -0.634028 2.621982\nv 1.273179 -1.248635 2.741855\nv 1.617852 -0.583028 1.506192\nv 1.439654 -1.058712 1.934395\nv 1.332969 -1.269151 2.070974\nv 1.224526 -1.416280 2.243604\nv 1.111687 -1.537912 2.420043\nv 0.837649 -1.751577 2.763251\nv 0.156803 -2.023270 3.301949\nv 1.333849 -1.268270 1.454022\nv 0.333242 -1.993667 3.226625\nv 1.376346 -1.134037 1.245928\nv 1.274938 -1.574841 1.309529\nv 1.318901 -1.452625 1.104659\nv 1.238888 -1.921567 1.162691\nv 1.268197 -1.811951 0.965735\nv 1.244750 -2.231361 1.008819\nv 1.268197 -2.128196 0.835017\nv 1.294868 -2.521519 0.923237\nv 1.329452 -2.403993 0.764383\nv 1.433499 -2.766541 0.847327\nv 1.461342 -2.666599 0.692576\nv 1.666212 -2.986945 0.733022\nv 1.716623 -2.868831 0.564203\nv 1.184666 -1.541431 1.754145\nv 1.270834 -1.418041 1.613755\nv 1.110515 -1.782641 1.604963\nv 1.206062 -1.692077 1.476590\nv 1.090585 -2.097128 1.451970\nv 1.182908 -2.025906 1.328286\nv 1.132789 -2.435351 1.303081\nv 1.194631 -2.333651 1.167380\nv 1.187304 -2.713200 1.199620\nv 1.255008 -2.619119 1.065092\nv 1.307178 -2.982257 1.124296\nv 1.381915 -2.872935 0.990061\nv 1.504426 -3.227864 1.041059\nv 1.584147 -3.110922 0.893342\nv 1.088826 -1.630528 1.892483\nv 1.038122 -2.523864 1.428816\nv 1.100550 -2.808454 1.333269\nv 1.218665 -3.072528 1.255600\nv 1.393932 -3.335429 1.177052\nv 0.145958 -1.988683 2.724563\nv 0.310381 -1.974322 2.665945\nv 0.790754 -1.832761 2.299584\nv 0.136873 -2.149296 2.415647\nv 0.289865 -2.141383 2.371684\nv 0.723051 -2.010373 2.065699\nv 0.137752 -2.500712 2.179710\nv 0.281659 -2.477264 2.141022\nv 0.684656 -2.345080 1.866691\nv 0.141855 -2.875864 2.040200\nv 0.569765 -2.785887 1.819797\nv 0.286641 -2.857399 1.995064\nv 0.584713 -3.740771 1.685269\nv 0.697845 -2.730786 1.730991\nv 0.151820 -3.194161 1.922085\nv 0.595557 -3.092164 1.739197\nv 0.299830 -3.173645 1.868156\nv 0.491804 -3.447974 1.733922\nv 0.738585 -3.036184 1.654201\nv 0.164716 -3.507471 1.820383\nv 0.661209 -3.396390 1.666218\nv 0.329139 -3.486955 1.781109\nv 0.452237 -3.132319 1.815693\nv 0.818598 -3.335722 1.578877\nv 0.196077 -3.806716 1.740076\nv 0.781376 -3.689187 1.612290\nv 0.378964 -3.783561 1.724543\nv 0.429082 -2.823109 1.905965\nv 0.959867 -3.623535 1.520846\nv 1.318022 -1.291131 0.853189\nv 1.260576 -1.699992 0.742694\nv 1.266145 -2.019751 0.649492\nv 1.315970 -2.303460 0.596150\nv 1.462808 -2.574570 0.513792\nv 1.730691 -2.788231 0.362558\nv 1.249146 -1.143415 0.581202\nv 1.211630 -1.604738 0.532843\nv 1.227750 -1.935341 0.475397\nv 1.274058 -2.221396 0.430847\nv 1.438775 -2.517709 0.330611\nv 1.694641 -2.747493 0.166481\nv 1.095860 -1.068970 0.322991\nv 1.096740 -1.518570 0.330904\nv 1.128979 -1.874379 0.312439\nv 1.199907 -2.166589 0.267304\nv 1.360520 -2.476383 0.155051\nv 1.624300 -2.716718 -0.041905\nv 0.943747 -1.017092 0.157982\nv 0.928506 -1.464934 0.186997\nv 0.980090 -1.844192 0.182015\nv 1.063914 -2.137280 0.117242\nv 1.228630 -2.449128 -0.030182\nv 1.473652 -2.724925 -0.237982\nv 0.766428 -0.986905 0.032833\nv 0.775807 -1.428299 0.081485\nv 0.812443 -1.822796 0.062434\nv 0.889232 -2.128196 -0.005562\nv 1.052190 -2.453231 -0.181123\nv 1.265266 -2.757751 -0.427904\nv 0.585885 -0.964044 -0.028716\nv 0.595850 -1.385505 -0.009959\nv 0.613729 -1.795538 -0.036044\nv 0.674691 -2.134641 -0.124263\nv 0.791048 -2.477263 -0.322392\nv 0.966022 -2.806402 -0.580603\nv 1.871374 0.190727 1.879587\nv 2.005023 1.425805 1.041059\nv 1.432033 3.068277 -0.114591\nv 1.172063 3.291022 -0.248532\nv 1.923251 2.081151 0.657992\nv 1.846755 2.388896 0.386885\nv 1.995351 1.162318 1.148037\nv 1.790481 -0.346505 1.731577\nv 1.863754 0.540676 2.066578\nv 1.847634 0.219156 2.033459\nv 1.721019 -0.355005 1.983341\nv 1.861702 0.891795 2.127248\nv 1.833565 1.231779 2.235691\nv 2.002971 1.235883 1.306891\nv 1.993885 1.062960 0.989769\nv 1.983334 0.881831 0.839414\nv 1.859357 0.337273 0.784020\nv 1.914458 0.543605 0.765849\nv 1.675884 2.986212 0.715145\nv 1.119600 3.601113 0.523465\nv 1.387777 3.384226 0.603478\nv 0.931437 3.650938 1.926482\nv 1.610818 -0.490412 1.272307\nv 1.403311 -0.946753 0.960167\nv 1.369899 -0.703489 0.607580\nv 1.179391 -0.692350 0.268476\nv 1.008520 -0.676231 0.100536\nv 0.812443 -0.661869 -0.039267\nv 0.610505 -0.654834 -0.115470\nv 0.842631 -1.736922 2.978671\nv 1.132496 -1.505673 2.642498\nv 1.261749 -1.362938 2.467524\nv 1.385432 -1.192360 2.290498\nv 1.499151 -0.961699 2.150109\nv 0.941402 1.866902 3.867025\nv 0.702242 -1.211412 3.811337\nv 0.593506 -1.304322 3.867024\nv 0.092909 0.137969 4.423601\nv 0.773755 -0.500670 3.884903\nv 1.364330 0.451576 3.481612\nv 1.447567 0.350166 3.440287\nv 1.249146 0.602517 3.520300\nv 1.324763 0.665824 3.465786\nv 1.177339 0.467108 3.582142\nv 1.297799 0.531295 3.500370\nv 0.395084 0.429008 3.907764\nv 1.024346 0.441904 3.654242\nv 0.289279 0.669634 3.866145\nv 1.567147 -0.428863 2.510315\nv 1.611404 -0.711695 1.762058\nv 1.608766 -0.704660 2.047821\nv 0.507923 -1.927428 3.092976\nv 0.509096 -1.901932 3.479854\nv 1.138651 -1.436212 2.898072\nv 0.673226 -1.811073 3.335361\nv 0.835597 -1.708493 3.186764\nv 0.340276 -1.959083 3.581849\nv 0.159147 -1.973445 3.640173\nv 0.677036 -1.833935 2.934708\nv 0.510854 -1.919516 3.320413\nv 0.676743 -1.832761 3.153939\nv 0.643038 -1.893431 2.425905\nv 0.594385 -2.073680 2.177366\nv 0.445495 -2.116471 2.284636\nv 0.477735 -1.942964 2.551054\nv 1.010278 -1.691199 2.034338\nv 0.933196 -2.601825 1.546638\nv 0.994744 -2.896090 1.457538\nv 1.099377 -3.170125 1.384559\nv 1.259404 -3.433319 1.307770\nv 1.724830 -0.361453 1.512347\nv 1.635144 -0.349731 1.075644\nv 1.793705 0.179589 0.682025\nv 1.639834 0.165815 0.213669\nv 1.481272 0.186037 -0.114884\nv 1.289885 0.212708 -0.421162\nv 1.052776 0.221208 -0.645962\nv 0.795737 0.231466 -0.783127\nv 1.845875 0.363944 0.624287\nv 1.706365 0.399699 0.122518\nv 1.546045 0.420802 -0.225086\nv 1.344986 0.470334 -0.559207\nv 1.104360 0.491437 -0.784593\nv 0.848493 0.508728 -0.953998\nv 1.895994 0.580534 0.593805\nv 1.762638 0.705392 0.030488\nv 1.607301 0.764889 -0.332649\nv 1.388070 0.831128 -0.669702\nv 1.146272 0.889744 -0.919707\nv 0.889232 0.927260 -1.101422\nv 1.964576 1.019289 0.665026\nv 1.819497 1.347844 0.038695\nv 1.669436 1.519593 -0.392146\nv 1.462222 1.645915 -0.746491\nv 1.222182 1.738238 -0.986531\nv 0.975108 1.820890 -1.160626\nv 1.993885 1.291276 0.862568\nv 1.907424 1.863093 0.363438\nv 1.783447 2.132148 0.019058\nv 1.609352 2.392412 -0.322391\nv 1.350262 2.637141 -0.624859\nv 1.093222 2.832926 -0.790161\nv 1.001779 3.712780 1.321839\nv 1.325642 3.485341 1.323012\nv 1.268490 3.446361 1.904501\nv 1.678814 2.353431 2.565123\nv 1.617559 3.126015 1.304254\nv 1.832686 2.658538 1.330046\nv 1.479807 2.677586 2.808974\nv 1.842944 2.588489 0.851724\nv 1.919734 2.234144 1.026405\nv 1.996816 1.524870 1.240946\nv 1.190821 2.930815 2.990396\nv 0.870182 3.089086 3.099718\nv 0.532836 2.954263 3.408340\nv 0.245609 2.997934 3.435305\nv 1.792826 2.649744 1.730405\nv 1.568320 3.112532 1.836211\nv 1.910648 2.274590 1.380457\nv 1.884563 2.260815 1.674425\nv 0.154751 -1.980770 3.030255\nv 0.328553 -1.952928 2.950535\nv 1.517029 -0.696747 1.133382\nv 0.502648 -1.899293 2.818352\nv 0.672640 -1.832761 2.678841\nv 0.824460 -1.753335 2.525556\nv 1.463980 -0.868499 1.384560\nv 1.424706 -1.024715 1.607014\nv 1.357882 -1.218154 1.758834\nv 1.169426 -1.495415 2.053096\nv 1.074465 -1.589203 2.221036\nv 1.265852 -1.370560 1.896879\nv 1.560113 -0.479276 0.885429\nv 1.741829 0.162005 0.500017\nv 1.804843 0.380356 0.415021\nv 1.859944 0.639740 0.366368\nv 1.927061 1.175212 0.403884\nv 1.963697 1.567954 0.666199\nv 1.968387 1.858402 1.161812\nv 1.537546 2.993538 2.269690\nv 1.753259 2.575299 2.073320\nv 1.853789 2.206886 1.941723\nv 1.223647 3.317986 2.389856\nv 0.235644 3.250870 3.177680\nv 0.886888 3.516115 2.446422\nv 0.305985 -2.920122 -0.708390\nv 0.190215 -0.942063 -0.138625\nv 0.189336 -1.350628 -0.131884\nv 0.235937 3.678193 2.536401\nv 0.454581 3.046000 -0.929672\nv 0.359034 1.935487 -1.371064\nv 0.199594 -0.630215 -0.253222\nv 0.341449 3.936699 1.354079\nv 0.469822 3.858151 0.464847\nv 0.312433 0.965070 -1.325928\nv 0.283710 0.530712 -1.187297\nv 0.251764 0.242896 -0.964550\nv 0.258212 3.855806 2.025547\nv 0.220989 -2.130831 -0.258791\nv 0.198128 -1.750696 -0.173502\nv 0.241799 -2.517415 -0.441386\nv 1.008227 -1.851225 1.724543\nv 0.928506 -1.885518 1.843537\nv 0.996503 -2.168641 1.570964\nv 0.892163 -2.221396 1.667390\nv 0.562731 -2.412199 1.972203\nv 0.429082 -2.453525 2.072733\nv 0.393033 -0.946460 -0.101402\nv 0.495907 -2.503641 -0.390388\nv 0.586764 3.784877 1.979238\nv 0.409739 -0.633440 -0.189622\nv 0.526974 0.239966 -0.902122\nv 0.390981 -1.761541 -0.118108\nv 0.617246 -2.870589 -0.674685\nv 0.687001 1.885661 -1.280206\nv 0.616953 0.954518 -1.226864\nv 0.570645 0.520160 -1.085302\nv 0.810098 2.961300 -0.892449\nv 0.778152 3.767000 0.476863\nv 0.425565 -2.127315 -0.216000\nv 0.663554 3.854926 1.345873\nv 0.387757 -1.363525 -0.089679\nv 0.540163 3.628077 2.521746\nv 0.931437 1.040392 3.690585\nv 0.820356 1.040685 3.714618\nv 1.020829 1.017824 3.660983\nv 1.083257 0.988514 3.614675\nv 1.126048 0.967411 3.574815\nv 1.145685 0.950121 3.558109\nv 1.159168 0.934292 3.546386\nv 1.164443 0.920518 3.538765\nv 1.161512 0.909966 3.538472\nv 1.153892 0.896485 3.542282\nv 1.127221 0.876847 3.572470\nv 1.078568 0.849298 3.618485\nv 1.020829 0.827024 3.661863\nv 0.935540 0.818817 3.708464\nv 0.827684 0.816179 3.728394\nv 0.733895 0.823505 3.723411\nv 0.651830 0.827608 3.702016\nv 0.572989 0.843143 3.670948\nv 0.714551 1.022221 3.711394\nv 0.621056 0.985585 3.695275\nv 0.565369 0.942498 3.685603\nv 0.538991 0.893847 3.666259\nv 0.529319 0.876263 3.667724\nv 0.534301 0.863366 3.665673\nv 0.553645 0.851934 3.665380\nv 0.547784 0.914656 3.673879\nv 0.924989 1.049769 3.615261\nv 0.823874 1.048892 3.638415\nv 1.021709 1.027789 3.576573\nv 1.086188 1.009031 3.530558\nv 1.129859 0.983824 3.490698\nv 1.150961 0.964189 3.470475\nv 1.161219 0.945724 3.454355\nv 1.164736 0.927260 3.445856\nv 1.165322 0.913776 3.439115\nv 1.166495 0.900882 3.435304\nv 1.140996 0.873331 3.464027\nv 1.080327 0.846073 3.514146\nv 1.022295 0.831418 3.555471\nv 0.937592 0.817350 3.592400\nv 0.820650 0.812663 3.625813\nv 0.733895 0.816472 3.639002\nv 0.641865 0.827315 3.614089\nv 0.578265 0.838453 3.607641\nv 0.705466 1.028082 3.648673\nv 0.615194 0.994376 3.639881\nv 0.566541 0.953930 3.628157\nv 0.542215 0.899415 3.617606\nv 0.534008 0.881537 3.616433\nv 0.534888 0.868640 3.616727\nv 0.550128 0.853401 3.613503\nv 0.555697 0.920224 3.624347\nv 0.927041 1.158798 3.625813\nv 0.812736 1.156456 3.652777\nv 1.027277 1.140627 3.586832\nv 1.099084 1.096956 3.542575\nv 1.151840 1.052995 3.504766\nv 1.187597 1.013427 3.473699\nv 1.206355 0.980308 3.454355\nv 1.212510 0.946311 3.444097\nv 1.214854 0.911724 3.440580\nv 1.208113 0.880072 3.435597\nv 1.174408 0.812663 3.471941\nv 1.122238 0.767524 3.516490\nv 1.048673 0.718285 3.558988\nv 0.941988 0.688685 3.601486\nv 0.795737 0.669634 3.632260\nv 0.679381 0.688685 3.624640\nv 0.592333 0.718285 3.601193\nv 0.507337 0.766060 3.564557\nv 0.690811 1.125389 3.656587\nv 0.587351 1.070286 3.634019\nv 0.518182 1.016650 3.601779\nv 0.458391 0.925795 3.550195\nv 0.451064 0.887985 3.534076\nv 0.453995 0.853401 3.532610\nv 0.470701 0.814127 3.545799\nv 0.477149 0.969172 3.572470\nv 0.926162 1.242331 3.534076\nv 0.795444 1.237640 3.557816\nv 1.034898 1.211263 3.500371\nv 1.111101 1.160266 3.462855\nv 1.170598 1.106924 3.427098\nv 1.208700 1.054166 3.399548\nv 1.230681 0.999947 3.381669\nv 1.241819 0.951292 3.369359\nv 1.243284 0.900882 3.363498\nv 1.237129 0.856918 3.362032\nv 1.201665 0.767818 3.389583\nv 1.152426 0.709201 3.418305\nv 1.070655 0.647653 3.458458\nv 0.954884 0.602224 3.496267\nv 0.788117 0.583172 3.513266\nv 0.660037 0.608966 3.509163\nv 0.572403 0.640911 3.495388\nv 0.474511 0.720924 3.473699\nv 0.666778 1.213021 3.563677\nv 0.551301 1.149127 3.544920\nv 0.478615 1.077614 3.520593\nv 0.416480 0.946311 3.482785\nv 0.411497 0.893260 3.474285\nv 0.416480 0.843728 3.466665\nv 0.434944 0.785698 3.464320\nv 0.436703 1.006979 3.494215\nv 0.917369 1.297137 3.432081\nv 0.783427 1.294208 3.448493\nv 1.026984 1.263434 3.407168\nv 1.110808 1.206573 3.377566\nv 1.170598 1.146489 3.347964\nv 1.212803 1.086992 3.324810\nv 1.236250 1.021634 3.304880\nv 1.245336 0.959792 3.292277\nv 1.246215 0.902934 3.285829\nv 1.239767 0.847247 3.283484\nv 1.206062 0.750234 3.294328\nv 1.154771 0.677840 3.317482\nv 1.077396 0.604276 3.346205\nv 0.952540 0.551811 3.372876\nv 0.781962 0.528950 3.391341\nv 0.650072 0.560311 3.397203\nv 0.561266 0.598998 3.390169\nv 0.461322 0.689563 3.385186\nv 0.654761 1.273982 3.453769\nv 0.534888 1.199831 3.444097\nv 0.455167 1.119818 3.425632\nv 0.393033 0.962137 3.398082\nv 0.390688 0.902053 3.390462\nv 0.394791 0.840211 3.382548\nv 0.420876 0.769576 3.381962\nv 0.414428 1.038927 3.411858\nv 0.905645 1.322343 3.349429\nv 0.781376 1.321463 3.360860\nv 1.016140 1.289811 3.330379\nv 1.097033 1.230898 3.307811\nv 1.157409 1.171695 3.280847\nv 1.200493 1.105457 3.261503\nv 1.228043 1.038340 3.247141\nv 1.240939 0.969463 3.233952\nv 1.240646 0.905279 3.228970\nv 1.235371 0.847247 3.221642\nv 1.196097 0.742905 3.226918\nv 1.146565 0.668169 3.239521\nv 1.067431 0.592844 3.257399\nv 0.946092 0.533347 3.277036\nv 0.780203 0.507850 3.296380\nv 0.646262 0.539208 3.306052\nv 0.559214 0.581121 3.311914\nv 0.456926 0.680185 3.314259\nv 0.652709 1.297431 3.366135\nv 0.537232 1.228263 3.360860\nv 0.455460 1.146782 3.351481\nv 0.386291 0.977963 3.334482\nv 0.380430 0.909382 3.329206\nv 0.389222 0.841676 3.321293\nv 0.413549 0.766647 3.317190\nv 0.408566 1.057685 3.342102\nv 0.899784 1.332015 3.280554\nv 0.380723 0.919053 3.278795\nv 1.003537 1.301240 3.267071\nv 0.460150 1.161144 3.291398\nv 1.145392 1.182834 3.228970\nv 1.189356 1.117766 3.214901\nv 1.229509 0.976498 3.189110\nv 1.231854 0.910847 3.182662\nv 0.644796 0.540088 3.239521\nv 1.188183 0.742027 3.175041\nv 1.138651 0.671098 3.183248\nv 1.060983 0.596947 3.191161\nv 0.938765 0.534521 3.204057\nv 0.773169 0.509901 3.223401\nv 1.223647 0.850176 3.175628\nv 0.561266 0.581414 3.252123\nv 0.460443 0.683115 3.260916\nv 1.218665 1.046253 3.201126\nv 0.542215 1.242918 3.294622\nv 0.649779 1.307982 3.295208\nv 1.087068 1.242331 3.251245\nv 0.388636 0.992031 3.282019\nv 0.774341 1.330550 3.290225\nv 0.389222 0.848124 3.273226\nv 0.414135 0.768992 3.266778\nv 0.411204 1.075269 3.287881\nv 0.888939 1.329085 3.221936\nv 0.385412 0.929898 3.231314\nv 0.988883 1.301240 3.212557\nv 0.472460 1.167886 3.236883\nv 1.129272 1.184592 3.184713\nv 1.174701 1.121576 3.171231\nv 1.213096 0.985585 3.148956\nv 1.214561 0.919931 3.138991\nv 0.644503 0.551811 3.176800\nv 1.170598 0.754924 3.127268\nv 1.123411 0.682530 3.126681\nv 1.046914 0.610430 3.129026\nv 0.927334 0.549175 3.139284\nv 0.768773 0.523089 3.156870\nv 1.209286 0.856624 3.133716\nv 0.560679 0.593137 3.193799\nv 0.463081 0.691030 3.209039\nv 1.203424 1.053289 3.159508\nv 0.550421 1.242037 3.237469\nv 0.652416 1.304466 3.234246\nv 1.067724 1.243795 3.198195\nv 0.396843 1.002876 3.233366\nv 0.771997 1.329085 3.228970\nv 0.390981 0.858969 3.225746\nv 0.417945 0.776905 3.217539\nv 0.426445 1.086992 3.233952\nv 0.875750 1.315015 3.163025\nv 0.398601 0.941327 3.178266\nv 0.972763 1.290982 3.154525\nv 0.486235 1.168766 3.177679\nv 1.108170 1.186937 3.131371\nv 1.152426 1.126266 3.123458\nv 1.189942 0.995843 3.098838\nv 1.194338 0.931656 3.090045\nv 0.644503 0.578189 3.109096\nv 1.145685 0.773389 3.074805\nv 1.101136 0.703924 3.069529\nv 1.025519 0.634463 3.066305\nv 0.912386 0.577311 3.070994\nv 0.766428 0.554743 3.086528\nv 1.185252 0.869227 3.084770\nv 0.569472 0.614534 3.127561\nv 0.469236 0.706563 3.147491\nv 1.177925 1.062373 3.111734\nv 0.562438 1.237054 3.174748\nv 0.657692 1.292156 3.170645\nv 1.047794 1.239986 3.143388\nv 0.413256 1.014308 3.178558\nv 0.768187 1.316482 3.166835\nv 0.403877 0.869814 3.170938\nv 0.427031 0.793318 3.159801\nv 0.441978 1.093440 3.178266\nv 0.864906 1.287173 3.091218\nv 0.433479 0.953344 3.101183\nv 0.945799 1.264311 3.085063\nv 0.521699 1.161144 3.103235\nv 1.070655 1.175505 3.065426\nv 1.112273 1.119524 3.058978\nv 1.150668 1.003463 3.037289\nv 1.145978 0.943086 3.027911\nv 0.662088 0.625379 3.029669\nv 1.107291 0.797421 3.010032\nv 1.062155 0.739095 3.000947\nv 0.994451 0.676376 2.995671\nv 0.895094 0.626550 2.999188\nv 0.767893 0.605447 3.011791\nv 1.140117 0.885640 3.021756\nv 0.588230 0.654392 3.048133\nv 0.497079 0.737337 3.068650\nv 1.137186 1.064718 3.048427\nv 0.588230 1.219763 3.100597\nv 0.670881 1.263724 3.095028\nv 1.014968 1.223573 3.076270\nv 0.448719 1.023392 3.100890\nv 0.769359 1.286002 3.092683\nv 0.433772 0.890037 3.095321\nv 0.458391 0.816472 3.081839\nv 0.476856 1.093734 3.102941\nv 0.888060 0.826437 2.885469\nv 0.863441 0.796540 2.889866\nv 0.849958 0.768992 2.896900\nv 0.796616 0.760492 2.900710\nv 0.902421 0.917588 2.875504\nv 0.751187 0.799766 2.889866\nv 0.714844 0.851934 2.880487\nv 0.897732 1.041857 2.896314\nv 0.741809 1.131834 2.937346\nv 0.767600 1.151179 2.945846\nv 0.862268 1.130956 2.932950\nv 0.690811 1.030427 2.902469\nv 0.790754 1.168179 2.955224\nv 0.684070 0.944844 2.884590\nv 0.695207 0.897072 2.882832\nv 0.704000 1.070579 2.912434\nv 0.903301 0.883589 2.876970\nv 0.733602 0.821453 2.884883\nv 0.606988 0.747302 2.960207\nv 1.049259 0.867763 2.941449\nv 0.555404 1.084647 2.998309\nv 0.534595 0.853986 2.973103\nv 0.515837 0.914069 2.985120\nv 0.778152 1.228554 3.008274\nv 0.528440 1.027495 2.995964\nv 0.956350 1.182834 2.992740\nv 0.706345 1.210676 3.007980\nv 0.644796 1.180195 3.005050\nv 1.055414 1.058270 2.966655\nv 0.569179 0.789508 2.964310\nv 0.646555 0.722682 2.954931\nv 1.057173 0.905279 2.945553\nv 0.778445 0.686634 2.939691\nv 0.871354 0.702460 2.933536\nv 0.941988 0.740563 2.930312\nv 0.995624 0.787163 2.933536\nv 1.027570 0.834643 2.937932\nv 0.700776 0.700115 2.946432\nv 1.058931 0.952466 2.948190\nv 1.061276 1.008444 2.955811\nv 3.234239 -4.329294 1.547810\nv 3.524397 -4.103029 1.357888\nv 3.949669 -3.800854 0.841465\nv 2.504153 -4.793255 1.855260\nv 2.015867 -5.051171 2.018804\nv 2.642785 -4.233748 1.402438\nv 2.868463 -4.070790 1.215740\nv 3.186172 -3.755425 0.802777\nv 1.972783 -4.528010 1.685269\nv 1.556303 -4.626194 1.786971\nv 3.751541 -3.938900 1.124882\nv 3.058971 -3.887316 1.038421\nv 0.955177 -3.967035 1.613462\nv 0.714258 -4.021552 1.682045\nv 1.512633 -3.733151 1.235084\nv 1.662695 -3.609467 1.094108\nv 1.783741 -3.481974 0.953425\nv 1.029915 -3.673067 -1.237709\nv 0.513199 -3.741064 -1.155937\nv 1.524650 -3.611518 -1.241226\nv 2.019677 -3.554367 -1.143921\nv 2.463707 -3.515093 -0.985653\nv 1.261163 -5.052345 2.047234\nv 0.628383 -4.718516 1.859657\nv 2.767055 -3.489006 -0.730958\nv 2.971924 -3.495161 -0.381596\nv 3.132536 -3.481680 -0.056267\nv 3.218705 -3.553487 0.260562\nv 3.258272 -3.637603 0.536066\nv 2.505619 -3.442112 0.525222\nv 2.556030 -3.329860 0.312439\nv 2.543427 -3.257467 0.054814\nv 2.461949 -3.250138 -0.221569\nv 2.297819 -3.243983 -0.485349\nv 2.095294 -3.252190 -0.714545\nv 1.767327 -3.274173 -0.897140\nv 1.350848 -3.337480 -1.029909\nv 0.438461 -3.461751 -1.060977\nv 0.912680 -3.412512 -1.089699\nv 0.774928 -3.159573 -0.896260\nv 0.380430 -3.217606 -0.932310\nv 1.156823 -3.081028 -0.812730\nv 1.505306 -3.018599 -0.678495\nv 1.764983 -2.991048 -0.487694\nv 1.911820 -2.979619 -0.264067\nv 2.008540 -2.984015 -0.028423\nv 2.065399 -3.014496 0.196962\nv 2.051331 -3.112096 0.409159\nv 1.991248 -3.217022 0.602597\nv 0.747084 -5.065242 2.067750\nv 1.043983 -4.680123 1.835037\nv 0.466598 -4.054962 1.724836\nv 1.169719 -3.902558 1.490071\nv 1.892183 -3.341877 0.786950\nv 1.518788 -4.232868 1.484503\nv 0.551008 -4.370326 1.755024\nv 1.213975 -4.291487 1.615806\nv 0.873112 -4.334571 1.710181\nv 1.966921 -4.072548 1.238601\nv 2.106725 -3.935674 1.068902\nv 2.221029 -3.770958 0.908289\nv 2.365522 -3.593348 0.709868\nv 0.227730 -4.080168 1.735387\nv 0.267004 -4.393481 1.790488\nv 0.306571 -4.731413 1.885742\nv 0.336466 -5.053223 2.076250\nv 1.132203 -4.019206 -1.345859\nv 0.582075 -4.086909 -1.257053\nv 1.670022 -3.906951 -1.432027\nv 2.214288 -3.807889 -1.396564\nv 2.711954 -3.779751 -1.227744\nv 3.122571 -3.779751 -0.910329\nv 3.433246 -3.745167 -0.518175\nv 3.686768 -3.704135 -0.162658\nv 3.906292 -3.700909 0.189049\nv 3.983961 -3.741357 0.531963\nv 1.354951 -3.817561 1.355836\nv 1.119307 -3.538248 1.423247\nv 0.974814 -3.258054 1.485675\nv 0.877802 -2.974929 1.566568\nv 0.820356 -2.673341 1.639547\nv 0.790461 -2.270344 1.765869\nv 0.831787 -1.943548 1.949635\nv 0.909749 -1.750989 2.158022\nv 0.969246 -1.663648 2.353219\nv 0.985366 -1.640787 2.578605\nv 0.994158 -1.626719 2.801939\nv 0.988297 -1.585980 3.035824\nv 0.771997 -1.124364 3.780563\nv 0.723637 -1.046989 3.854715\nv 0.681432 -1.004493 3.898092\nv 0.606988 -0.936202 3.951434\nv 0.588230 -0.918909 3.959934\nv 0.570938 -0.907773 3.956123\nv 0.558042 -0.894877 3.950262\nv 0.550714 -0.884031 3.932969\nv 0.544853 -0.879051 3.906298\nv 0.542801 -0.879341 3.873472\nv 0.560973 -0.899857 3.819251\nv 0.643038 -0.918909 3.697619\nv 0.654175 -0.961406 3.649845\nv 0.667950 -0.995406 3.607347\nv 0.699604 -1.034386 3.534661\nv 0.772876 -1.027938 3.362032\nv 0.868130 -0.950270 3.038168\nv 0.898611 -0.897221 2.567174\nv 0.901835 -0.846515 1.974548\nv 0.764083 -0.776173 1.345872\nv 0.551594 -0.751554 1.253256\nv 0.576213 -0.554012 1.256773\nv 0.847907 -0.294921 1.485089\nv 0.937885 -0.197908 2.019098\nv 0.914731 -0.120241 2.625206\nv 0.848493 -0.168015 3.145439\nv 0.760273 -0.349731 3.464320\nv 0.709569 -0.475757 3.625519\nv 0.657106 -0.589477 3.674172\nv 0.626625 -0.678576 3.698498\nv 0.603764 -0.764451 3.734841\nv 0.541922 -0.816915 3.846508\nv 0.529026 -0.835964 3.889592\nv 0.533715 -0.859119 3.920953\nv 0.545439 -0.859999 3.937366\nv 0.558335 -0.859119 3.950555\nv 0.575041 -0.857067 3.956417\nv 0.596143 -0.853257 3.959640\nv 0.620177 -0.852377 3.953485\nv 0.678794 -0.825706 3.934728\nv 0.731550 -0.803138 3.908936\nv 1.741829 0.901760 2.827145\nv 1.709589 1.137698 2.899245\nv 1.652730 1.386531 3.037582\nv 1.557769 1.620708 3.243624\nv 1.395690 1.811802 3.451718\nv 1.201959 1.939002 3.635191\nv 0.974228 2.012276 3.768840\nv 0.723637 2.057705 3.859111\nv 0.469529 2.098444 3.911867\nv 0.223041 2.118960 3.932091\nv 1.757362 -4.163700 1.367267\nv 2.317456 -4.394361 1.536086\nv 2.869343 -4.565232 1.690837\nv 0.817719 1.057976 3.805769\nv 0.925575 1.057976 3.784374\nv 1.024053 1.036582 3.755944\nv 1.102308 1.007566 3.709343\nv 1.156237 0.981188 3.660983\nv 1.181442 0.958621 3.630209\nv 1.196390 0.941327 3.589176\nv 1.200493 0.924327 3.564850\nv 1.197269 0.904985 3.554885\nv 1.187011 0.885640 3.562212\nv 1.150082 0.847247 3.605589\nv 1.108170 0.817643 3.649553\nv 1.041639 0.794489 3.700550\nv 0.941988 0.778956 3.741876\nv 0.827977 0.773973 3.754772\nv 0.724809 0.781008 3.752427\nv 0.626918 0.787750 3.733963\nv 0.516423 0.808266 3.704947\nv 0.709276 1.042737 3.791994\nv 0.607574 1.005514 3.763857\nv 0.530198 0.955689 3.742169\nv 0.458978 0.888866 3.723118\nv 0.444616 0.861901 3.705240\nv 0.445789 0.844314 3.698206\nv 0.459271 0.827315 3.698792\nv 0.484769 0.914656 3.729566\nv 0.399774 0.795663 3.725170\nv 0.586471 1.077027 3.795511\nv 0.503527 1.024857 3.769719\nv 1.040173 1.107508 3.741583\nv 1.209872 1.037753 3.625226\nv 1.252077 0.997014 3.572177\nv 1.275817 0.960672 3.535541\nv 1.281386 0.924914 3.505939\nv 1.280213 0.888279 3.491285\nv 1.210458 0.769869 3.540231\nv 1.268490 0.850763 3.493336\nv 0.961332 0.693960 3.691171\nv 1.072999 0.708027 3.644570\nv 0.835304 0.688979 3.724290\nv 0.708983 0.691908 3.735134\nv 0.449013 0.763421 3.724877\nv 0.594971 0.710666 3.730152\nv 1.154185 0.736459 3.588004\nv 0.441392 0.958914 3.749496\nv 0.381309 0.832005 3.726049\nv 0.400360 0.913485 3.734842\nv 0.380723 0.868640 3.726928\nv 0.691397 1.119818 3.802252\nv 0.924696 1.129492 3.777339\nv 0.803944 1.131543 3.800200\nv 1.138358 1.072337 3.689999\nv 0.893336 0.096643 3.755065\nv 0.244436 0.009304 4.372896\nv 0.477442 -0.102363 3.955831\nv 0.080893 0.026595 4.461116\nv 0.171164 0.019856 4.423308\nv 0.446668 -0.034660 4.078342\nv 0.468943 -0.081847 3.993346\nv 0.326794 0.004321 4.297573\nv 0.524630 0.349288 3.827457\nv 0.719534 0.254620 3.776753\nv 0.836183 0.335805 3.720187\nv 0.583540 0.416111 3.771771\nv 0.085582 0.468869 4.169493\nv 0.159440 0.454507 4.142235\nv 1.252370 0.044182 3.594745\nv 1.390122 0.125659 3.488060\nv 0.666778 -0.004470 3.858525\nv 0.769066 -0.149257 3.847388\nv 0.460443 0.022492 3.952900\nv 0.177905 0.128591 4.384034\nv 0.048946 -0.378454 4.241006\nv 0.256453 -0.379038 4.175061\nv 0.098771 -0.370831 4.232213\nv 0.647434 -0.210219 3.895454\nv 1.221302 0.833469 3.534955\nv 1.194924 0.851934 3.558695\nv 1.158874 0.878608 3.589762\nv 0.550421 0.780421 3.719015\nv 0.578265 0.817643 3.710515\nv 0.534301 0.758734 3.719601\nv 0.476270 0.712718 3.730738\nv 1.277575 0.787750 3.482199\nv 0.436410 0.691324 3.748324\nv 1.319194 0.761079 3.458166\nv 0.422928 0.487040 3.839767\nv 1.419138 0.688392 3.388410\nv 0.347897 0.217982 4.052257\nv 1.483617 0.636221 3.338292\nv 0.261729 0.603688 3.938538\nv 1.552786 0.578189 3.265899\nv 1.751794 0.030114 2.392493\nv 0.356396 0.155556 4.087721\nv 0.380137 0.102214 4.132856\nv 0.391274 -0.054883 4.214921\nv 0.390981 0.055320 4.164803\nv 1.835324 -0.125808 1.815987\nv 1.794585 -0.084776 1.998289\nv 1.368433 0.729131 3.427098\nv 0.335880 0.544485 3.887248\nv 1.144806 0.888572 3.557230\nv 0.602884 0.836695 3.681206\nv 1.155944 0.885640 3.447028\nv 0.600540 0.832005 3.607641\nv 1.196390 0.849592 3.452011\nv 0.543973 0.740562 3.583314\nv 1.225113 0.816766 3.371411\nv 0.519061 0.676376 3.485130\nv 1.228336 0.801524 3.288467\nv 0.505286 0.638273 3.389582\nv 1.222475 0.794782 3.222229\nv 0.505286 0.625379 3.311914\nv 1.209579 0.796834 3.174162\nv 0.506458 0.625963 3.256227\nv 1.191114 0.808559 3.129026\nv 0.510854 0.635343 3.201712\nv 1.170891 0.822334 3.080960\nv 0.517009 0.652634 3.140164\nv 1.130152 0.841385 3.018532\nv 0.542215 0.686634 3.058978\nv 1.035777 1.103112 2.975155\nv 0.999141 1.143853 2.983947\nv 0.594092 1.137111 3.004170\nv 0.905059 1.213021 3.000654\nv 0.514958 0.970050 2.992447\nv 0.849372 1.229728 3.008567\nv 1.172063 0.866005 3.579211\nv 0.563317 0.800644 3.716670\nv 1.246508 0.810317 3.512680\nv 0.512320 0.735285 3.723997\nv 0.400067 -0.000660 4.189716\nv 0.394205 0.654392 3.777632\nv 1.174408 0.188675 3.631674\nv 0.349948 -0.390763 4.134322\nv 0.538698 -0.271476 3.954952\nv 0.463667 -0.401315 4.069842\nv 0.166182 -0.367022 4.211404\nv 0.499717 -0.102363 3.927694\nv 0.926162 -0.627286 3.762099\nv 0.888939 -0.463157 3.810751\nv 0.816253 -1.023248 3.784667\nv 0.827098 -0.915686 3.809872\nv 0.794272 -0.790828 3.861456\nv 0.750308 -0.661870 3.915091\nv 0.571524 -0.062502 3.893989\nv 0.772583 0.054440 3.813096\nv 0.871354 -0.097380 3.785839\nv 0.826511 -0.642819 3.853249\nv 0.994744 -0.052538 3.740117\nv 1.352899 -0.277044 3.410685\nv 1.480393 -0.170067 3.277622\nv 1.366675 -0.450554 3.266485\nv 1.483031 -0.319247 3.097080\nv 0.866665 -0.793173 3.789649\nv 0.890112 -0.945286 3.732790\nv 0.173216 -1.592428 4.043756\nv 0.328260 -1.564583 3.977226\nv 0.466891 -1.505967 3.888713\nv 0.602005 -1.425954 3.802838\nv 0.728326 -1.316338 3.737479\nv 0.815374 -1.208480 3.702601\nv 0.870182 -1.080986 3.699084\nv 0.641865 -1.629357 3.679447\nv 0.500303 -1.726664 3.773822\nv 0.346138 -1.798177 3.862921\nv 0.171750 -1.835106 3.918608\nv 0.969246 -1.220790 3.489233\nv 0.889232 -1.383748 3.512973\nv 0.771997 -1.515932 3.583607\nv 1.024640 -0.816915 3.579211\nv 1.013795 -1.026473 3.518835\nv 1.509409 0.232930 3.374049\nv 1.585026 -0.032608 3.140164\nv 1.575647 -0.160980 2.953172\nv 1.580337 0.370098 3.255054\nv 1.652730 0.127418 3.012377\nv 1.659471 0.009598 2.841506\nv 1.616680 0.495540 3.162731\nv 1.701382 0.296531 2.909503\nv 1.717795 0.199518 2.748597\nv 1.641592 0.628015 3.100889\nv 1.734208 0.481763 2.839747\nv 1.754431 0.409956 2.682652\nv 1.655074 0.776024 3.070995\nv 1.747690 0.685460 2.808387\nv 1.778172 0.639740 2.665359\nv 1.045449 2.278692 3.575108\nv 1.490651 1.964795 3.182369\nv 0.240919 2.422305 3.790529\nv 0.510268 2.399738 3.765030\nv 1.802205 0.870986 2.557503\nv 0.781376 2.353724 3.693810\nv 1.291351 2.162924 3.402772\nv 1.772310 1.142973 2.637516\nv 1.720433 1.429321 2.770286\nv 1.638661 1.724754 2.963138\nv 1.775534 0.343718 2.527314\nv 1.802205 0.602811 2.526142\nv 1.728933 0.111005 2.566588\nv 1.659471 -0.104121 2.640154\nv 1.567441 -0.286131 2.736287\nv 1.479221 -0.460518 2.881073\nv 0.949316 -0.982509 3.632846\nv 1.372243 -0.637838 3.081839\nv 0.631314 0.563827 3.735428\nv 0.622228 -1.536448 3.741582\nv 0.924403 -1.151328 3.599434\nv 0.488286 -1.631703 3.836836\nv 0.177905 -1.736335 3.996863\nv 0.347018 -1.699699 3.935021\nv 0.857872 -1.299632 3.609985\nv 0.749429 -1.427419 3.662741\nv 0.946092 -0.800209 3.694102\nv 0.808633 0.542727 3.705533\nv 0.169406 -1.898119 3.846215\nv 0.343500 -1.867638 3.789062\nv 0.506751 -1.801987 3.694102\nv 0.658571 -1.703509 3.590348\nv 0.798082 -1.591548 3.486888\nv 0.921179 -1.453212 3.394858\nv 1.025226 -1.286735 3.353239\nv 1.097033 -1.060764 3.361153\nv 1.390122 2.379515 3.165956\nv 1.584733 2.119547 2.912727\nv 1.121359 2.547750 3.367308\nv 0.833252 2.665570 3.507698\nv 1.769672 1.504351 2.505919\nv 1.707537 1.838179 2.692031\nv 1.817153 0.244069 2.226312\nv 1.839134 0.546244 2.243311\nv 1.838255 0.867469 2.297240\nv 1.684969 -0.318957 2.255621\nv 1.811584 1.182540 2.381649\nv 1.404483 -1.054315 2.539331\nv 1.505306 -0.828638 2.383993\nv 1.591474 -0.585667 2.297533\nv 0.248247 2.764635 3.606762\nv 0.527267 2.735325 3.584194\nv 1.763517 -0.044331 2.236570\nv 0.318881 0.711253 3.808407\nv 0.494734 0.608672 3.753306\nv 0.808926 0.451576 3.711687\nv 0.632779 0.199811 3.818958\nv 0.480080 0.296530 3.878162\nv 0.351414 0.288030 4.017086\nv 0.372223 0.363943 3.966675\nv 0.286055 0.327305 4.089186\nv 0.296313 0.400872 4.037602\nv 0.224506 0.344891 4.147218\nv 0.223920 0.429301 4.100324\nv 0.691397 -0.537309 3.950262\nv 1.168839 1.816785 3.743634\nv 1.358468 1.714205 3.568953\nv 1.514978 1.552124 3.356170\nv 1.613749 1.349895 3.156577\nv 1.672366 1.136231 3.022049\nv 1.702848 0.925501 2.953759\nv 0.448426 1.933434 3.993346\nv 0.223334 -0.166256 -0.577086\nv 0.461029 -0.174169 -0.499710\nv 0.699897 -0.180911 -0.407973\nv 0.929093 -0.191753 -0.285755\nv 1.150668 -0.195566 -0.102574\nv 1.333262 -0.197031 0.108743\nv 1.512340 -0.179153 0.386884\nv 1.645402 -0.128447 0.644803\nv 1.704900 -0.088002 0.833845\nv 1.676763 -0.220770 0.926168\nv 1.602318 -0.297560 0.734488\nv 1.252077 -0.410985 0.193446\nv 1.079154 -0.417434 0.014075\nv 0.869009 -0.413037 -0.131590\nv 0.651244 -0.399847 -0.242671\nv 0.436410 -0.387831 -0.349649\nv 0.210145 -0.378160 -0.412663\nv 1.447860 -0.383434 0.466018\nv 0.989176 -0.436777 3.717549\nv 1.097326 -0.404831 3.622588\nv 1.013209 -0.627873 3.651018\nv 1.120187 -0.605596 3.533196\nv 1.118135 -0.822776 3.446441\nv 0.164130 -1.952048 3.750668\nv 0.343500 -1.923325 3.698205\nv 0.508803 -1.866174 3.597382\nv 0.667364 -1.765938 3.471647\nv 0.818305 -1.653977 3.351774\nv 0.962212 -1.515931 3.238641\nv 1.096446 -1.347406 3.149249\nv 1.226578 -1.054609 3.083597\nv 1.237422 -0.769728 3.279381\nv 1.243870 -0.554599 3.418012\nv 1.232733 -0.362625 3.532024\nv 0.602591 0.494072 3.745686\nv 1.113446 -0.010041 3.680913\nv 1.016140 0.152330 3.703481\nv 0.451650 0.554156 3.783787\nv 0.360500 0.608085 3.825992\nv 0.898611 0.856037 2.879608\nv 0.771997 0.779543 2.892503\nv 0.902714 0.960085 2.876677\nv 0.899197 1.000824 2.884004\nv 0.891870 1.077027 2.907158\nv 0.877802 1.105750 2.917416\nv 0.720120 1.105457 2.923864\nv 0.847028 1.152937 2.944673\nv 0.683191 0.988515 2.894262\nv 0.832373 1.169350 2.954931\nv 0.696966 1.894747 3.951728\nv 0.213662 1.956002 4.007415\nv 0.716310 -0.360283 3.892230\nv 0.837649 -0.298147 3.830682\nv 1.311574 -0.112034 3.516197\nv 1.444343 -0.011505 3.405995\nv 1.559527 0.111005 3.281433\nv 1.622541 0.253153 3.149542\nv 1.666798 0.397060 3.044323\nv 1.694348 0.554743 2.976913\nv 1.707537 0.730011 2.942035\nv 0.626038 -0.419780 3.963744\nv 1.059517 -0.217841 3.698498\nv 0.942282 -0.255063 3.761513\nv 1.183494 -0.180325 3.624347\nv 0.275211 -0.552841 4.258299\nv 0.318588 -1.215222 4.086842\nv 0.138924 -1.248928 4.117909\nv 0.634538 -0.962873 3.935900\nv 0.645968 -0.844757 3.951727\nv 0.438168 -0.624061 4.156303\nv 0.439341 -0.539944 4.130219\nv 0.053049 -0.458467 4.261816\nv 0.110788 -0.446451 4.259471\nv 0.182008 -0.453190 4.245989\nv 0.265246 -0.473415 4.221663\nv 0.333242 -0.292870 3.969020\nv 0.295727 -0.458467 3.977226\nv 0.282831 -0.585080 3.965796\nv 0.271694 -0.742177 3.944107\nv 0.358741 -0.685025 4.230455\nv 0.355810 -0.736902 4.212576\nv 0.338811 -0.813396 4.153666\nv 0.362551 -0.632561 4.227817\nv 0.424686 0.173727 2.096180\nv 0.434065 0.291256 2.700823\nv 0.305106 0.187501 3.291691\nv 0.297192 -0.061918 3.685895\nv 0.286641 -0.840067 4.055188\nv 0.302175 -0.863809 4.076583\nv 0.348483 -0.777641 4.186199\nv 0.328553 -0.843293 4.113806\nv 0.352879 -0.504189 4.181802\nv 0.358155 -0.583028 4.214921\nv 0.263780 -0.472534 1.280806\nv 0.351121 -0.068950 1.584447\nv 1.704020 2.753499 0.125449\nv 1.973076 1.730031 0.893343\nv 0.499717 3.534874 -0.370164\nv 0.832080 3.450464 -0.349355\nv 1.993006 0.970344 0.894808\nv 1.028743 2.296864 -1.060976\nv 1.274938 2.194577 -0.860796\nv 1.857306 1.611331 0.174688\nv 1.983041 1.166715 0.745040\nv 1.527580 2.037480 -0.588809\nv 1.716916 1.833493 -0.219517\nv 1.948750 1.380960 0.506465\nv 0.412083 2.471254 -1.268776\nv 0.738292 2.390361 -1.177039\nv 1.960473 0.748182 0.787537\nv 1.799274 1.051531 -0.021389\nv 1.944060 0.844021 0.606115\nv 1.184666 1.311206 -0.997375\nv 1.426465 1.245260 -0.752060\nv 1.641885 1.160560 -0.420283\nv 0.927627 1.366015 -1.176160\nv 1.901562 0.942208 0.346145\nv 0.330898 1.443977 -1.378684\nv 0.653589 1.412615 -1.295447\nv 1.831514 1.664963 2.209020\nv 1.952560 1.906470 1.414455\nv 1.931457 1.897092 1.638082\nv 1.902148 1.850783 1.848813\nv 1.864047 1.310621 2.081233\nv 1.982162 1.566779 1.429403\nv 1.960180 1.567073 1.599981\nv 1.926768 1.517834 1.769093\nv 1.897166 0.892676 1.950515\nv 1.991248 1.266657 1.449919\nv 1.973369 1.257863 1.586205\nv 1.946991 1.205108 1.711061\nv 1.714864 -0.377279 1.359061\nv 1.723657 -0.287008 1.195517\nv 1.819204 0.191899 0.833259\nv 1.756483 -0.088002 0.977166\nv 1.734208 -0.180618 1.065972\nv 1.893063 0.511073 1.917689\nv 1.958422 0.150573 1.653909\nv 2.214288 1.061202 1.206655\nv 2.013522 -0.253889 1.527880\nv 2.153912 0.952757 1.388663\nv 2.206668 1.024566 1.053662\nv 2.213409 0.831712 0.857293\nv 2.150395 0.374202 0.810984\nv 2.184393 0.549176 0.774055\nv 2.078002 -0.310457 1.432626\nv 1.945233 -0.129327 1.599394\nv 2.215754 0.929018 0.934961\nv 2.207840 0.708908 0.805709\nv 1.951387 0.534521 1.660064\nv 2.090019 0.873331 1.470142\nv 2.030815 0.800060 1.542828\nv 1.998282 0.732356 1.596463\nv 2.070089 -0.346799 1.306891\nv 2.066864 -0.282612 1.217792\nv 2.111121 0.190434 0.867844\nv 2.115224 -0.047263 1.028456\nv 2.101449 -0.136360 1.127228\nv 1.945526 0.364528 1.666805\nv 1.978645 0.160831 1.581516\nv 2.271734 0.978844 1.221602\nv 2.024367 -0.185308 1.477469\nv 2.206668 0.879779 1.386318\nv 2.291371 0.963895 1.084437\nv 2.337972 0.764889 0.900963\nv 2.255614 0.354270 0.797795\nv 2.285509 0.499350 0.798088\nv 2.104380 -0.256821 1.381336\nv 1.970145 -0.064260 1.554258\nv 2.326541 0.864831 0.967787\nv 2.334162 0.665531 0.852896\nv 1.969266 0.493195 1.595584\nv 2.150688 0.806508 1.464573\nv 2.092949 0.721511 1.523191\nv 2.036090 0.654686 1.555431\nv 2.105845 -0.304595 1.304839\nv 2.125776 -0.250666 1.194345\nv 2.208133 0.166986 0.862861\nv 2.190548 -0.049608 1.033146\nv 2.179118 -0.113792 1.110228\nv 1.966335 0.347821 1.604377\nv 2.010885 0.178418 1.524070\nv 2.216340 0.870986 1.217792\nv 2.007074 -0.112621 1.456953\nv 2.162705 0.807973 1.362871\nv 2.233632 0.873331 1.099970\nv 2.255321 0.735579 0.941995\nv 2.266165 0.334634 0.861103\nv 2.252683 0.485866 0.861689\nv 2.075364 -0.151015 1.379870\nv 1.978058 -0.025279 1.520846\nv 2.246821 0.822921 1.006768\nv 2.254735 0.641499 0.896273\nv 1.978645 0.456850 1.553672\nv 2.131051 0.741441 1.441126\nv 2.088260 0.663186 1.495348\nv 2.051917 0.605740 1.525536\nv 2.123431 -0.173876 1.296340\nv 2.166222 -0.150431 1.198448\nv 2.252390 0.207140 0.899790\nv 2.209599 0.023960 1.038422\nv 2.199927 -0.075105 1.143641\nv 1.976300 0.338150 1.545466\nv 2.007661 0.227950 1.420317\nv 2.121379 0.811489 1.216327\nv 2.001213 -0.006521 1.455194\nv 2.048986 0.767525 1.341476\nv 2.156257 0.814715 1.124297\nv 2.196117 0.680186 1.017026\nv 2.255321 0.312360 0.949909\nv 2.253269 0.441611 0.961925\nv 2.088846 -0.042573 1.405662\nv 1.936733 0.058250 1.484503\nv 2.173549 0.756976 1.064507\nv 2.223374 0.590792 0.990062\nv 1.969852 0.412008 1.497399\nv 2.067451 0.685169 1.405076\nv 2.079467 0.613947 1.459298\nv 2.056900 0.558553 1.486555\nv 2.095880 -0.055176 1.335028\nv 2.118741 0.007840 1.256480\nv 2.243891 0.256673 0.961046\nv 2.173842 0.127127 1.069196\nv 2.125482 0.055611 1.169725\nv 1.958422 0.319392 1.484210\nv 1.917096 0.281292 1.427351\nv 2.083277 0.614534 1.244463\nv 1.854082 0.055321 1.396283\nv 2.023487 0.600760 1.303667\nv 2.127241 0.611602 1.200793\nv 2.188203 0.563828 1.125469\nv 2.196996 0.358373 1.045163\nv 2.200806 0.424024 1.053076\nv 2.004730 0.037734 1.353199\nv 1.840014 0.103092 1.428523\nv 2.161825 0.596069 1.164157\nv 2.208426 0.505798 1.085316\nv 1.957542 0.385337 1.446402\nv 2.011178 0.575260 1.355251\nv 2.032280 0.535986 1.396283\nv 2.023194 0.489676 1.428523\nv 2.050159 0.063234 1.317442\nv 2.020556 0.089611 1.234791\nv 2.171497 0.293308 1.035491\nv 2.085329 0.183105 1.108177\nv 2.034332 0.122144 1.175001\nv 1.933216 0.334634 1.447867\nv 1.966042 0.398821 1.382215\nv 1.976593 0.300634 1.082678\nv 2.029349 0.249344 1.061576\nv 1.983920 0.416405 1.416507\nv 1.918854 0.339908 1.413869\nv 1.934974 0.136211 1.136606\nv 1.987437 0.192192 1.085902\nv 2.062175 0.311479 1.050145\nv 1.887494 0.126247 1.182328\nv 1.859944 0.111885 1.237429\nv 2.011764 0.460369 1.395404\nv 2.012350 0.501695 1.371957\nv 2.015574 0.534227 1.342648\nv 1.949336 0.373614 1.417386\nv 2.150102 0.474731 1.116090\nv 2.128706 0.528950 1.180570\nv 1.815394 0.176659 1.391887\nv 1.839720 0.104559 1.289306\nv 2.121379 0.413766 1.070075\nv 2.094415 0.359547 1.051904\nv 2.146292 0.509315 1.147451\nv 2.103794 0.539208 1.218085\nv 0.233885 0.037441 -0.748836\nv 0.490338 0.029528 -0.670288\nv 0.750601 0.023960 -0.581775\nv 1.504426 2.854028 2.568640\nv 1.205769 3.139496 2.729839\nv 1.004416 0.011357 -0.463953\nv 1.709882 2.474183 2.346772\nv 1.815394 2.120425 2.170918\nv 1.228923 0.007253 -0.254688\nv 0.871940 3.323264 2.800474\nv 0.225972 3.505270 2.872574\nv 1.409759 -0.007401 0.002938\nv 1.694641 0.005789 0.575048\nv 1.748863 0.052682 0.749436\nv 0.524336 3.435809 2.850592\nv 1.570665 -0.010334 0.309216\nv 1.867857 1.769012 2.038735\nv 1.893356 1.428441 1.924430\nv 1.918854 1.098424 1.823901\nv 1.783741 0.050924 0.898911\nv 1.968387 0.651463 1.643944\nv 2.114052 0.078179 0.928220\nv 1.988024 0.590499 1.585326\nv 2.215168 0.088437 0.921479\nv 2.002385 0.543021 1.543121\nv 2.232460 0.110421 0.965442\nv 2.014108 0.488798 1.500330\nv 2.213995 0.180176 1.008526\nv 1.997989 0.436334 1.438488\nv 2.130172 0.242311 1.061869\nv 2.027884 0.544192 1.306012\nv 1.821549 0.132402 1.358475\nv 2.073899 0.544486 1.256187\nv 1.888666 0.297998 1.400093\nv 2.005023 0.671392 1.317149\nv 1.940543 0.333169 1.463401\nv 1.943474 0.272792 1.432333\nv 2.172670 0.184866 1.109056\nv 2.121086 0.131230 1.201965\nv 2.049572 0.574966 1.421782\nv 2.003850 0.630066 1.369905\nv 1.871374 0.072611 1.455487\nv 2.207547 0.623327 1.083557\nv 2.235684 0.545363 1.041059\nv 2.096467 0.070266 1.340010\nv 2.052796 0.041250 1.371664\nv 1.959301 0.392957 1.463401\nv 2.038142 0.514882 1.447574\nv 2.168859 0.677547 1.131331\nv 2.139844 0.701289 1.176760\nv 2.260303 0.343718 1.004423\nv 2.253562 0.432818 1.009406\nv 2.265872 0.281876 1.011457\nv 2.104380 0.108663 1.269669\nv 1.886322 0.025131 1.430868\nv 2.091484 0.703634 1.234205\nv 2.004143 0.454799 1.463108\nv 2.237149 0.228828 1.055421\nv 1.908890 0.256086 1.130158\nv 1.900683 0.323202 1.344113\nv 1.934974 0.411131 1.322718\nv 1.935268 0.441318 1.299857\nv 2.064813 0.505211 1.217792\nv 2.146585 0.006666 1.162398\nv 1.965163 0.320566 1.504433\nv 2.144826 0.855160 1.207241\nv 1.997695 0.499057 1.316270\nv 1.943767 0.368047 1.384560\nv 2.175308 0.783647 1.022009\nv 2.059244 0.576137 1.505899\nv 2.025539 0.209192 1.461056\nv 2.064520 -0.093276 1.386318\nv 1.863754 0.186624 1.154778\nv 1.835031 0.162005 1.209879\nv 2.070382 0.457731 1.135141\nv 2.079760 0.496124 1.190242\nv 1.959594 0.429595 1.102608\nv 2.054262 0.511073 1.246808\nv 1.866685 0.295947 1.353199\nv 1.953146 0.407905 1.095867\nv 1.976593 0.467695 1.155364\nv 1.909769 0.335221 1.372836\nv 1.907424 0.210363 1.122831\nv 1.951680 0.252569 1.097332\nv 1.990661 0.348702 1.070661\nv 1.978938 0.434869 1.364044\nv 1.987437 0.471799 1.339424\nv 1.956663 0.453921 1.125469\nv 2.005902 0.477076 1.189949\nv 1.875184 0.222966 1.144813\nv 1.854082 0.210070 1.186432\nv 2.209892 0.147056 0.977752\nv 2.025246 0.515469 1.519381\nv 1.831807 0.256966 1.335614\nv 1.827997 0.162298 1.287840\nv 2.043710 0.418750 1.090298\nv 1.842065 0.266637 1.310115\nv 1.825945 0.215347 1.243877\nv 2.015574 0.378011 1.068610\nv 2.080347 0.480592 1.162105\nv 2.009419 0.483521 1.219844\nv 1.936733 0.383873 1.344993\nv 1.951680 0.341376 1.101729\nv 2.018798 0.507850 1.290771\nv 1.819790 0.214466 1.321252\nv 2.012643 0.489385 1.244756\nv 1.863754 0.293308 1.325063\nv 2.201099 0.613947 0.920014\nv 2.105845 0.713305 1.424127\nv 2.013815 -0.054589 1.456074\nv 1.951387 0.382408 1.097626\nv 1.938492 0.295947 1.113745\nv 2.138671 -0.057814 1.229223\nv 2.230408 0.450695 0.914738\nv 2.155670 0.853402 1.096160\nv 1.986265 0.429008 1.522605\nv 1.964576 0.476489 1.284910\nv 1.926475 0.351340 1.346458\nv 1.997109 0.494073 1.275824\nv 1.828876 0.242895 1.281099\nv 2.191134 0.706563 0.962511\nv 2.106431 -0.106173 1.309822\nv 2.233339 0.230002 0.936720\nv 2.238615 0.306789 0.913273\nv 2.082398 0.627721 1.473659\nv 2.166515 0.072024 1.055421\nv 2.115810 0.785405 1.345579\nv 1.953439 0.018098 1.499744\nv 1.915630 0.453627 1.213982\nv 1.897166 0.374492 1.240653\nv 1.891304 0.411715 1.227171\nv 1.891597 0.325547 1.265566\nv 1.866098 0.289792 1.284323\nv 1.908596 0.354270 1.306891\nv 1.910062 0.398527 1.149502\nv 1.915630 0.359547 1.153019\nv 1.913872 0.439853 1.148330\nv 1.928233 0.317340 1.140417\nv 1.896873 0.269566 1.157709\nv 1.883684 0.310308 1.224533\nv 1.852616 0.266931 1.251790\nv 1.901269 0.421682 1.266738\nv 1.901855 0.393250 1.284030\nv 1.930871 0.460076 1.251791\nv 1.893649 0.315582 1.317442\nv 1.916510 0.450405 1.177932\nv 1.899511 0.361598 1.199620\nv 1.895700 0.404095 1.187018\nv 1.923544 0.430473 1.125176\nv 1.932923 0.358373 1.121659\nv 1.926768 0.395008 1.121073\nv 1.897459 0.307376 1.181156\nv 1.857306 0.255792 1.215154\nv 1.946698 0.326721 1.473659\nv 2.135154 0.097231 1.188776\nv 2.015867 0.672566 1.388663\nv 2.233925 0.574673 1.014388\nv 2.101449 0.016337 1.392473\nv 2.048107 0.536573 1.465453\nv 2.173549 0.730011 1.091178\nv 2.264407 0.317634 0.975407\nv 2.257373 0.263412 0.982442\nv 2.000333 0.728837 1.324770\nv 1.981282 0.242311 1.421782\nv 2.192307 0.162882 1.085609\nv 2.064227 0.603102 1.442592\nv 1.915924 0.071440 1.475418\nv 2.200513 0.666118 1.045749\nv 2.127241 0.028647 1.356716\nv 1.965456 0.400872 1.481866\nv 2.147171 0.778076 1.141589\nv 2.260010 0.431353 0.983907\nv 2.133982 0.061182 1.278755\nv 1.946112 0.015166 1.440540\nv 2.109656 0.765473 1.221309\nv 2.010591 0.470627 1.479521\nv 2.229529 0.199227 1.028750\nv 2.116103 0.565295 0.890119\nv 2.110828 0.970050 1.085609\nv 2.079174 0.970931 1.215447\nv 2.088846 0.371269 0.890411\nv 1.938784 0.142073 1.704906\nv 1.911527 -0.147205 1.636323\nv 2.134275 0.881831 0.984786\nv 2.138964 0.812076 0.949323\nv 1.946991 -0.300198 1.577999\nv 1.979524 -0.344454 1.459591\nv 1.991248 -0.286131 1.249446\nv 1.996230 -0.128447 1.181742\nv 1.936440 0.396182 1.724543\nv 1.942888 0.594895 1.725716\nv 2.005316 -0.039056 1.097625\nv 2.017333 0.880366 1.560120\nv 1.985972 0.826144 1.628996\nv 2.138085 0.712131 0.908583\nv 2.038728 0.904399 1.466918\nv 2.063054 0.928724 1.374009\nv 1.988903 -0.352366 1.346751\nv 2.052503 0.199811 0.959288\nv 1.956663 0.730011 1.696700\nv 2.033159 0.086679 1.020836\nv 1.988610 0.554744 0.881912\nv 1.975421 0.926086 1.070954\nv 1.953732 0.370683 0.880740\nv 1.898045 0.166401 1.776420\nv 2.005609 0.810611 0.935547\nv 1.856133 -0.289647 1.607308\nv 1.868736 -0.250960 1.293409\nv 1.933509 0.705392 1.811298\nv 1.979524 1.018702 1.571844\nv 1.977765 1.025737 1.344700\nv 1.908010 0.191312 0.937306\nv 1.960473 0.968292 1.210758\nv 1.869029 -0.139292 1.699338\nv 1.989196 0.871573 0.993579\nv 1.877236 -0.343869 1.505019\nv 1.872840 -0.126395 1.201086\nv 1.912993 0.452456 1.806315\nv 1.879874 -0.046969 1.075644\nv 1.963404 0.963895 1.666512\nv 2.000627 0.709202 0.906825\nv 1.981282 1.038928 1.463401\nv 1.857599 -0.329799 1.386611\nv 1.949922 0.867763 1.756490\nv 1.897459 0.069682 1.007061\nv 0.822408 1.036582 3.758289\nv 0.929679 1.037753 3.738359\nv 1.165322 0.932827 3.580091\nv 1.155357 0.948069 3.606762\nv 1.138358 0.963017 3.622588\nv 1.089412 0.989979 3.666259\nv 1.017605 1.017237 3.711101\nv 0.715137 1.018411 3.749789\nv 0.492976 0.855746 3.680620\nv 0.517595 0.842850 3.670362\nv 0.553645 0.834643 3.683551\nv 0.500303 0.890037 3.682965\nv 0.518768 0.911434 3.694982\nv 0.487114 0.870108 3.684430\nv 1.133669 0.873918 3.602072\nv 0.643331 0.824385 3.716377\nv 0.730378 0.818230 3.738066\nv 0.544267 0.944550 3.702895\nv 0.826804 0.811489 3.745979\nv 0.615780 0.984118 3.726342\nv 0.938765 0.811489 3.734842\nv 1.029036 0.824092 3.689999\nv 1.088240 0.848124 3.649846\nv 1.159461 0.897363 3.572470\nv 1.166202 0.911434 3.566022\nv 1.167667 0.921105 3.570419\nv 0.589695 0.828782 3.700550\nv 1.148616 0.884176 3.584487\nvt 0.944310 0.471855\nvt 0.945374 0.471032\nvt 0.946240 0.477841\nvt 0.114804 0.717663\nvt 0.115217 0.719548\nvt 0.108707 0.720921\nvt 0.115776 0.720552\nvt 0.122091 0.719068\nvt 0.122158 0.717305\nvt 0.128234 0.719239\nvt 0.122314 0.720291\nvt 0.133778 0.719674\nvt 0.129157 0.717196\nvt 0.133013 0.720568\nvt 0.128335 0.720393\nvt 0.137031 0.720012\nvt 0.134921 0.717754\nvt 0.135587 0.721125\nvt 0.139268 0.720512\nvt 0.138612 0.718445\nvt 0.952498 0.451044\nvt 0.950107 0.452807\nvt 0.950238 0.451451\nvt 0.954614 0.448480\nvt 0.952616 0.449602\nvt 0.953070 0.447838\nvt 0.954134 0.450154\nvt 0.141208 0.722412\nvt 0.140704 0.721189\nvt 0.142686 0.720633\nvt 0.139326 0.722884\nvt 0.138914 0.721859\nvt 0.143321 0.722125\nvt 0.143335 0.724142\nvt 0.140959 0.724057\nvt 0.142399 0.726577\nvt 0.138904 0.724281\nvt 0.140013 0.726159\nvt 0.134769 0.731787\nvt 0.136936 0.732730\nvt 0.131637 0.736215\nvt 0.133474 0.730706\nvt 0.130037 0.734953\nvt 0.989396 0.522543\nvt 0.988181 0.516161\nvt 0.989396 0.515616\nvt 0.116842 0.739479\nvt 0.117839 0.740907\nvt 0.111033 0.742014\nvt 0.105245 0.739119\nvt 0.110290 0.738788\nvt 0.110463 0.740430\nvt 0.105149 0.740631\nvt 0.101957 0.738733\nvt 0.101534 0.740125\nvt 0.105193 0.742117\nvt 0.948310 0.484442\nvt 0.945153 0.478513\nvt 0.108125 0.719287\nvt 0.103202 0.723100\nvt 0.097849 0.724627\nvt 0.102403 0.721232\nvt 0.952574 0.489371\nvt 0.949485 0.483529\nvt 0.094614 0.728175\nvt 0.098905 0.726008\nvt 0.956239 0.492720\nvt 0.953650 0.488487\nvt 0.093155 0.731862\nvt 0.095835 0.729700\nvt 0.958605 0.494470\nvt 0.957271 0.491814\nvt 0.092407 0.736582\nvt 0.092193 0.734360\nvt 0.093324 0.734601\nvt 0.972087 0.592670\nvt 0.973715 0.593461\nvt 0.972462 0.593928\nvt 0.093622 0.736470\nvt 0.093996 0.737782\nvt 0.095192 0.737058\nvt 0.094643 0.736136\nvt 0.095544 0.735773\nvt 0.094183 0.739801\nvt 0.092913 0.738367\nvt 0.096214 0.737944\nvt 0.096022 0.736548\nvt 0.133550 0.737578\nvt 0.101002 0.741611\nvt 0.104909 0.744024\nvt 0.111398 0.744010\nvt 0.118702 0.742642\nvt 0.119343 0.744799\nvt 0.144764 0.727314\nvt 0.145832 0.721906\nvt 0.144887 0.719945\nvt 0.141177 0.719379\nvt 0.143201 0.718365\nvt 0.140325 0.717084\nvt 0.135921 0.715984\nvt 0.122352 0.715614\nvt 0.114676 0.716148\nvt 0.107385 0.717715\nvt 0.093424 0.726826\nvt 0.096440 0.723244\nvt 0.129707 0.715786\nvt 0.130416 0.714365\nvt 0.090547 0.734022\nvt 0.091127 0.738967\nvt 0.092795 0.740935\nvt 0.088299 0.733457\nvt 0.089409 0.730539\nvt 0.094380 0.732380\nvt 0.974594 0.594864\nvt 0.973599 0.595718\nvt 0.091652 0.731105\nvt 0.091522 0.726137\nvt 0.085794 0.729594\nvt 0.084604 0.733444\nvt 0.087934 0.736903\nvt 0.088671 0.739679\nvt 0.085134 0.740324\nvt 0.090492 0.741967\nvt 0.087028 0.743106\nvt 0.076073 0.731703\nvt 0.081295 0.730389\nvt 0.080113 0.734296\nvt 0.076365 0.740714\nvt 0.080258 0.738277\nvt 0.081631 0.741992\nvt 0.078187 0.744710\nvt 0.083808 0.745489\nvt 0.075668 0.736144\nvt 0.070889 0.733698\nvt 0.071027 0.738314\nvt 0.071952 0.743000\nvt 0.073499 0.748171\nvt 0.080926 0.748968\nvt 0.065823 0.735726\nvt 0.075334 0.763132\nvt 0.070017 0.762567\nvt 0.069755 0.755397\nvt 0.066591 0.739906\nvt 0.067427 0.744379\nvt 0.076335 0.754836\nvt 0.060817 0.737195\nvt 0.064562 0.763263\nvt 0.064476 0.756197\nvt 0.062130 0.741078\nvt 0.068518 0.749436\nvt 0.063899 0.750336\nvt 0.119748 0.747422\nvt 0.110327 0.748771\nvt 0.111155 0.746184\nvt 0.103885 0.746293\nvt 0.098305 0.745187\nvt 0.102346 0.748521\nvt 0.138154 0.741556\nvt 0.135644 0.739460\nvt 0.141610 0.735444\nvt 0.147605 0.719304\nvt 0.145654 0.717202\nvt 0.148794 0.715739\nvt 0.148722 0.724634\nvt 0.148636 0.721680\nvt 0.152092 0.721331\nvt 0.142352 0.715695\nvt 0.144911 0.713442\nvt 0.150936 0.718414\nvt 0.137380 0.714355\nvt 0.139366 0.712268\nvt 0.955561 0.345325\nvt 0.957616 0.337580\nvt 0.959401 0.337845\nvt 0.955381 0.312176\nvt 0.953822 0.314431\nvt 0.950695 0.308828\nvt 0.958174 0.329469\nvt 0.958647 0.319435\nvt 0.956842 0.321192\nvt 0.951537 0.306607\nvt 0.946891 0.305036\nvt 0.959896 0.328680\nvt 0.088800 0.725977\nvt 0.131357 0.712413\nvt 0.946438 0.294885\nvt 0.948643 0.290107\nvt 0.951812 0.291893\nvt 0.071458 0.729085\nvt 0.064939 0.730915\nvt 0.058715 0.732160\nvt 0.962246 0.302015\nvt 0.958317 0.308243\nvt 0.954036 0.301980\nvt 0.966684 0.311535\nvt 0.961933 0.316225\nvt 0.120790 0.705047\nvt 0.121974 0.709753\nvt 0.110951 0.712048\nvt 0.133875 0.703945\nvt 0.133140 0.709198\nvt 0.967447 0.324471\nvt 0.963279 0.326863\nvt 0.949654 0.297520\nvt 0.956560 0.295487\nvt 0.156071 0.720800\nvt 0.154706 0.716824\nvt 0.159126 0.714985\nvt 0.152203 0.713568\nvt 0.156069 0.710567\nvt 0.160639 0.725507\nvt 0.155983 0.725013\nvt 0.148079 0.711018\nvt 0.151147 0.706936\nvt 0.141643 0.709123\nvt 0.143618 0.704159\nvt 0.133235 0.697015\nvt 0.145144 0.698023\nvt 0.089059 0.706446\nvt 0.095226 0.711917\nvt 0.086312 0.717052\nvt 0.967447 0.292269\nvt 0.160632 0.720041\nvt 0.164168 0.712613\nvt 0.160419 0.706819\nvt 0.166146 0.719228\nvt 0.154473 0.702241\nvt 0.103801 0.702991\nvt 0.108083 0.708336\nvt 0.165348 0.732228\nvt 0.159598 0.730648\nvt 0.118613 0.698676\nvt 0.077530 0.727706\nvt 0.072832 0.722655\nvt 0.063494 0.724425\nvt 0.055559 0.725899\nvt 0.132205 0.689555\nvt 0.101168 0.694563\nvt 0.051447 0.716313\nvt 0.071500 0.700865\nvt 0.075994 0.713543\nvt 0.061586 0.714340\nvt 0.085962 0.696739\nvt 0.084659 0.686371\nvt 0.117072 0.690618\nvt 0.116390 0.681244\nvt 0.047707 0.704259\nvt 0.100257 0.684185\nvt 0.069355 0.688950\nvt 0.058313 0.702657\nvt 0.056246 0.690768\nvt 0.151725 0.642670\nvt 0.130680 0.635236\nvt 0.134574 0.625639\nvt 0.108911 0.633003\nvt 0.111649 0.621879\nvt 0.088831 0.632503\nvt 0.090095 0.620308\nvt 0.173011 0.726277\nvt 0.166219 0.725967\nvt 0.165392 0.702490\nvt 0.170078 0.709493\nvt 0.146616 0.691342\nvt 0.172033 0.733728\nvt 0.157963 0.696457\nvt 0.148169 0.684028\nvt 0.161019 0.690513\nvt 0.170135 0.698123\nvt 0.132288 0.681377\nvt 0.183610 0.667962\nvt 0.169219 0.652868\nvt 0.173641 0.646603\nvt 0.161129 0.624807\nvt 0.178468 0.638560\nvt 0.164809 0.658796\nvt 0.593977 0.241532\nvt 0.588050 0.248448\nvt 0.578965 0.230923\nvt 0.964405 0.177938\nvt 0.942415 0.184028\nvt 0.945157 0.133719\nvt 0.063647 0.797059\nvt 0.069197 0.795676\nvt 0.069189 0.799630\nvt 0.087266 0.791659\nvt 0.081000 0.793375\nvt 0.080812 0.787820\nvt 0.093162 0.789754\nvt 0.086524 0.786462\nvt 0.080264 0.782496\nvt 0.085540 0.781541\nvt 0.092094 0.786035\nvt 0.075070 0.794648\nvt 0.069605 0.790576\nvt 0.064368 0.786418\nvt 0.069741 0.785113\nvt 0.075038 0.783872\nvt 0.075058 0.789332\nvt 0.075193 0.798564\nvt 0.063965 0.791714\nvt 0.105335 0.787188\nvt 0.103606 0.790594\nvt 0.097838 0.787189\nvt 0.383917 0.923960\nvt 0.381823 0.925177\nvt 0.381102 0.921752\nvt 0.100552 0.800347\nvt 0.105005 0.802174\nvt 0.102110 0.805662\nvt 0.075282 0.812142\nvt 0.072131 0.813951\nvt 0.070817 0.810425\nvt 0.386703 0.926094\nvt 0.385705 0.927290\nvt 0.375350 0.934242\nvt 0.375987 0.930385\nvt 0.379954 0.930783\nvt 0.385648 0.929287\nvt 0.385604 0.931138\nvt 0.390990 0.925961\nvt 0.391164 0.927366\nvt 0.379751 0.933703\nvt 0.390939 0.929079\nvt 0.391088 0.931186\nvt 0.081812 0.812872\nvt 0.086171 0.813246\nvt 0.085290 0.817109\nvt 0.385739 0.933340\nvt 0.096961 0.811508\nvt 0.098634 0.814198\nvt 0.092556 0.815983\nvt 0.095092 0.809525\nvt 0.096949 0.808236\nvt 0.385303 0.920687\nvt 0.383567 0.920868\nvt 0.386057 0.917200\nvt 0.394185 0.913703\nvt 0.390653 0.915496\nvt 0.389922 0.914183\nvt 0.397515 0.913364\nvt 0.394884 0.911972\nvt 0.385474 0.923137\nvt 0.387935 0.924878\nvt 0.083165 0.811244\nvt 0.086596 0.810700\nvt 0.091038 0.810271\nvt 0.091886 0.812588\nvt 0.399762 0.913964\nvt 0.399499 0.911430\nvt 0.395361 0.909861\nvt 0.389307 0.912418\nvt 0.064661 0.804221\nvt 0.069487 0.803133\nvt 0.069953 0.806711\nvt 0.384432 0.916548\nvt 0.087328 0.795507\nvt 0.098938 0.790230\nvt 0.099512 0.792802\nvt 0.103255 0.792900\nvt 0.102809 0.794177\nvt 0.402210 0.912093\nvt 0.401163 0.909076\nvt 0.123890 0.782926\nvt 0.132662 0.790511\nvt 0.126324 0.795779\nvt 0.081221 0.819135\nvt 0.078988 0.820495\nvt 0.076911 0.817726\nvt 0.391461 0.933119\nvt 0.394031 0.930212\nvt 0.398042 0.915571\nvt 0.396556 0.914902\nvt 0.094760 0.807477\nvt 0.084127 0.809047\nvt 0.086727 0.808125\nvt 0.387077 0.920480\nvt 0.387168 0.922298\nvt 0.388643 0.923513\nvt 0.387053 0.917988\nvt 0.388696 0.918775\nvt 0.090214 0.807898\nvt 0.394015 0.915369\nvt 0.093372 0.808029\nvt 0.646638 0.977603\nvt 0.645261 0.975494\nvt 0.647188 0.974364\nvt 0.076831 0.821482\nvt 0.080377 0.824019\nvt 0.126309 0.835461\nvt 0.125246 0.838234\nvt 0.120113 0.835584\nvt 0.125899 0.854385\nvt 0.120446 0.861776\nvt 0.119027 0.859735\nvt 0.099731 0.808890\nvt 0.391507 0.916999\nvt 0.129055 0.849986\nvt 0.124042 0.852540\nvt 0.078382 0.835997\nvt 0.081377 0.834918\nvt 0.081764 0.838188\nvt 0.077789 0.825098\nvt 0.081447 0.829135\nvt 0.087363 0.805934\nvt 0.089609 0.806299\nvt 0.395835 0.916234\nvt 0.091219 0.806045\nvt 0.396413 0.917214\nvt 0.388386 0.920605\nvt 0.388651 0.921639\nvt 0.645095 0.979297\nvt 0.644297 0.978149\nvt 0.092647 0.805904\nvt 0.389900 0.919654\nvt 0.643019 0.976715\nvt 0.085321 0.806536\nvt 0.394131 0.916975\nvt 0.392229 0.918183\nvt 0.392445 0.919888\nvt 0.394378 0.918619\nvt 0.390320 0.920999\nvt 0.392208 0.921440\nvt 0.394440 0.920503\nvt 0.396399 0.918823\nvt 0.088894 0.804721\nvt 0.394076 0.921942\nvt 0.390558 0.922008\nvt 0.391630 0.922861\nvt 0.642596 0.978359\nvt 0.132742 0.852203\nvt 0.129239 0.857232\nvt 0.122737 0.865586\nvt 0.124591 0.839725\nvt 0.120182 0.838075\nvt 0.084488 0.827752\nvt 0.119933 0.840017\nvt 0.114824 0.839470\nvt 0.119561 0.841512\nvt 0.115033 0.841658\nvt 0.690100 0.887912\nvt 0.691479 0.888648\nvt 0.688190 0.891146\nvt 0.692961 0.889467\nvt 0.690404 0.892082\nvt 0.497115 0.808042\nvt 0.497289 0.809934\nvt 0.493900 0.807064\nvt 0.127344 0.843001\nvt 0.127449 0.844570\nvt 0.126423 0.844106\nvt 0.985904 0.645226\nvt 0.986435 0.646253\nvt 0.985542 0.646253\nvt 0.696227 0.884723\nvt 0.696540 0.884436\nvt 0.697507 0.885259\nvt 0.230546 0.988677\nvt 0.231024 0.988536\nvt 0.230921 0.990608\nvt 0.123974 0.846684\nvt 0.125291 0.847632\nvt 0.122212 0.850645\nvt 0.643957 0.952308\nvt 0.645924 0.954945\nvt 0.643028 0.954918\nvt 0.123621 0.840750\nvt 0.688979 0.887109\nvt 0.692296 0.885206\nvt 0.693976 0.886897\nvt 0.499955 0.809655\nvt 0.130924 0.842948\nvt 0.131286 0.845443\nvt 0.129035 0.845063\nvt 0.123077 0.845540\nvt 0.120671 0.849061\nvt 0.640709 0.951805\nvt 0.641344 0.955087\nvt 0.089678 0.832441\nvt 0.090805 0.835586\nvt 0.085670 0.836239\nvt 0.109017 0.839218\nvt 0.109525 0.841623\nvt 0.104230 0.841750\nvt 0.682691 0.893883\nvt 0.684808 0.894375\nvt 0.681813 0.898114\nvt 0.088883 0.827160\nvt 0.087415 0.821566\nvt 0.093542 0.820694\nvt 0.108281 0.833127\nvt 0.108497 0.836217\nvt 0.102411 0.835675\nvt 0.676005 0.901863\nvt 0.679260 0.901831\nvt 0.677556 0.905927\nvt 0.097421 0.838657\nvt 0.098524 0.841817\nvt 0.093576 0.842227\nvt 0.673747 0.906084\nvt 0.676162 0.909969\nvt 0.092021 0.838957\nvt 0.088957 0.843090\nvt 0.672301 0.910213\nvt 0.675580 0.914376\nvt 0.082813 0.841715\nvt 0.087249 0.839645\nvt 0.671385 0.919011\nvt 0.671469 0.914792\nvt 0.079310 0.842985\nvt 0.084506 0.844928\nvt 0.683026 0.902216\nvt 0.682061 0.905865\nvt 0.681044 0.910180\nvt 0.680451 0.914456\nvt 0.675514 0.918728\nvt 0.103037 0.838911\nvt 0.096188 0.835408\nvt 0.078343 0.839459\nvt 0.115081 0.853138\nvt 0.636636 0.946795\nvt 0.638816 0.952347\nvt 0.119571 0.847547\nvt 0.117200 0.856104\nvt 0.109832 0.862270\nvt 0.107699 0.858087\nvt 0.106049 0.854959\nvt 0.105494 0.852560\nvt 0.113160 0.848557\nvt 0.113450 0.850686\nvt 0.104928 0.850603\nvt 0.097139 0.862543\nvt 0.099235 0.867055\nvt 0.103522 0.873194\nvt 0.113660 0.868708\nvt 0.115300 0.871852\nvt 0.111974 0.866592\nvt 0.101735 0.871532\nvt 0.095720 0.853700\nvt 0.686601 0.890562\nvt 0.668976 0.993728\nvt 0.668314 0.993728\nvt 0.668622 0.992688\nvt 0.693031 0.886194\nvt 0.640562 0.955930\nvt 0.680387 0.893801\nvt 0.679057 0.897793\nvt 0.100107 0.844488\nvt 0.095274 0.844939\nvt 0.090868 0.845998\nvt 0.086323 0.847579\nvt 0.668314 0.919490\nvt 0.668388 0.915395\nvt 0.119091 0.845897\nvt 0.632500 0.939717\nvt 0.639475 0.946441\nvt 0.095623 0.855686\nvt 0.095921 0.852383\nvt 0.686568 0.902851\nvt 0.685751 0.906422\nvt 0.685765 0.910931\nvt 0.684863 0.898573\nvt 0.687541 0.900133\nvt 0.634946 0.939207\nvt 0.644098 0.947396\nvt 0.685355 0.915182\nvt 0.685260 0.918350\nvt 0.680411 0.918526\nvt 0.505215 0.813020\nvt 0.503182 0.811109\nvt 0.503878 0.810356\nvt 0.471406 0.798406\nvt 0.470997 0.800594\nvt 0.468396 0.799348\nvt 0.498201 0.812659\nvt 0.499831 0.811509\nvt 0.482335 0.802349\nvt 0.481719 0.804318\nvt 0.478822 0.802903\nvt 0.648509 0.952942\nvt 0.489267 0.800256\nvt 0.502065 0.804217\nvt 0.495941 0.806315\nvt 0.475171 0.799864\nvt 0.475069 0.801646\nvt 0.628395 0.931721\nvt 0.631564 0.932131\nvt 0.478900 0.800977\nvt 0.484482 0.804966\nvt 0.493898 0.809908\nvt 0.469859 0.808990\nvt 0.467782 0.806647\nvt 0.476749 0.811287\nvt 0.473180 0.810097\nvt 0.636632 0.933524\nvt 0.484947 0.812992\nvt 0.481515 0.812063\nvt 0.507008 0.808883\nvt 0.502931 0.808296\nvt 0.509175 0.805296\nvt 0.500750 0.818920\nvt 0.500889 0.813902\nvt 0.495481 0.817209\nvt 0.493502 0.794421\nvt 0.513283 0.819041\nvt 0.506653 0.811252\nvt 0.504900 0.797404\nvt 0.516114 0.816619\nvt 0.518742 0.818765\nvt 0.467645 0.816249\nvt 0.465257 0.815501\nvt 0.474185 0.818881\nvt 0.470780 0.817577\nvt 0.480654 0.797043\nvt 0.484485 0.789375\nvt 0.481440 0.821751\nvt 0.478138 0.820415\nvt 0.517314 0.803505\nvt 0.513606 0.807967\nvt 0.500510 0.826875\nvt 0.504629 0.820084\nvt 0.493419 0.825360\nvt 0.497690 0.788516\nvt 0.507987 0.792671\nvt 0.505564 0.784661\nvt 0.512275 0.799453\nvt 0.514367 0.823912\nvt 0.521107 0.821391\nvt 0.465002 0.823300\nvt 0.462700 0.822350\nvt 0.471771 0.826004\nvt 0.468191 0.825119\nvt 0.478996 0.828991\nvt 0.475729 0.827719\nvt 0.520181 0.800229\nvt 0.504758 0.827477\nvt 0.504233 0.835261\nvt 0.499528 0.835050\nvt 0.491825 0.832891\nvt 0.346139 0.897938\nvt 0.335709 0.888307\nvt 0.362171 0.874161\nvt 0.504747 0.845060\nvt 0.498409 0.845266\nvt 0.490367 0.843773\nvt 0.276910 0.794032\nvt 0.265308 0.793189\nvt 0.265933 0.728854\nvt 0.474730 0.838176\nvt 0.470199 0.836745\nvt 0.284704 0.852705\nvt 0.292527 0.848882\nvt 0.291557 0.864558\nvt 0.515371 0.794868\nvt 0.513153 0.787693\nvt 0.275258 0.823536\nvt 0.515530 0.829021\nvt 0.525517 0.824489\nvt 0.591429 0.923468\nvt 0.583461 0.919040\nvt 0.585837 0.917404\nvt 0.275393 0.855173\nvt 0.266592 0.853183\nvt 0.465617 0.834244\nvt 0.463110 0.832371\nvt 0.283868 0.880786\nvt 0.274257 0.885211\nvt 0.272604 0.873689\nvt 0.477558 0.839219\nvt 0.525389 0.796769\nvt 0.572647 0.899811\nvt 0.575175 0.898908\nvt 0.265797 0.872698\nvt 0.471604 0.856778\nvt 0.467993 0.854321\nvt 0.580732 0.919980\nvt 0.569187 0.900637\nvt 0.285274 0.869029\nvt 0.479252 0.858623\nvt 0.476327 0.858400\nvt 0.303739 0.860097\nvt 0.298221 0.861873\nvt 0.299824 0.848050\nvt 0.499937 0.859825\nvt 0.492468 0.860477\nvt 0.264833 0.888243\nvt 0.287009 0.824302\nvt 0.475122 0.784894\nvt 0.478031 0.780771\nvt 0.518567 0.835780\nvt 0.534432 0.832384\nvt 0.294992 0.825599\nvt 0.472405 0.792866\nvt 0.524619 0.845015\nvt 0.544224 0.842982\nvt 0.563189 0.872072\nvt 0.566320 0.871982\nvt 0.630250 0.923098\nvt 0.636103 0.923675\nvt 0.566077 0.901128\nvt 0.555358 0.873296\nvt 0.558903 0.872529\nvt 0.486155 0.882109\nvt 0.483460 0.881929\nvt 0.965822 0.706785\nvt 0.973471 0.708841\nvt 0.966129 0.728450\nvt 0.506125 0.878286\nvt 0.506980 0.858457\nvt 0.500219 0.879588\nvt 0.627595 0.923133\nvt 0.478764 0.880734\nvt 0.289149 0.794551\nvt 0.306258 0.742984\nvt 0.299358 0.795836\nvt 0.301434 0.826606\nvt 0.141892 0.973437\nvt 0.140353 0.964798\nvt 0.141892 0.964561\nvt 0.867599 0.522833\nvt 0.886396 0.528247\nvt 0.874177 0.550460\nvt 0.562096 0.836997\nvt 0.565301 0.838541\nvt 0.087407 0.857213\nvt 0.087408 0.855369\nvt 0.905239 0.796040\nvt 0.904583 0.763818\nvt 0.910574 0.763364\nvt 0.556669 0.837537\nvt 0.897260 0.794889\nvt 0.891846 0.762814\nvt 0.898169 0.764024\nvt 0.609947 0.860202\nvt 0.602564 0.857664\nvt 0.609947 0.830039\nvt 0.872458 0.758846\nvt 0.877282 0.788953\nvt 0.868956 0.786992\nvt 0.878668 0.760518\nvt 0.095883 0.858502\nvt 0.900026 0.795550\nvt 0.571473 0.805569\nvt 0.574905 0.806479\nvt 0.088666 0.864757\nvt 0.904413 0.725254\nvt 0.910027 0.725152\nvt 0.915453 0.725967\nvt 0.294206 0.732918\nvt 0.892204 0.724446\nvt 0.898163 0.725321\nvt 0.895868 0.590748\nvt 0.908551 0.561071\nvt 0.915027 0.567013\nvt 0.872610 0.720990\nvt 0.864629 0.756174\nvt 0.879371 0.722716\nvt 0.090045 0.869309\nvt 0.903779 0.639460\nvt 0.919424 0.613664\nvt 0.926713 0.628218\nvt 0.908738 0.598320\nvt 0.924653 0.571804\nvt 0.092487 0.873866\nvt 0.849114 0.576280\nvt 0.855183 0.544867\nvt 0.876642 0.685066\nvt 0.864382 0.718266\nvt 0.883359 0.686462\nvt 0.899804 0.688921\nvt 0.904476 0.688591\nvt 0.891887 0.631885\nvt 0.847281 0.608354\nvt 0.864110 0.581336\nvt 0.913398 0.688876\nvt 0.916120 0.690075\nvt 0.909872 0.688572\nvt 0.958356 0.634411\nvt 0.937847 0.633455\nvt 0.958356 0.609159\nvt 0.894743 0.688492\nvt 0.877673 0.630384\nvt 0.872220 0.639769\nvt 0.400492 0.859114\nvt 0.405833 0.863506\nvt 0.387885 0.887698\nvt 0.390909 0.848565\nvt 0.395737 0.855449\nvt 0.868801 0.682601\nvt 0.881186 0.659974\nvt 0.973216 0.549929\nvt 0.973216 0.581156\nvt 0.970132 0.579290\nvt 0.889667 0.688666\nvt 0.886834 0.661659\nvt 0.875408 0.642707\nvt 0.853060 0.630570\nvt 0.855727 0.615216\nvt 0.608012 0.520628\nvt 0.605050 0.520523\nvt 0.602187 0.492990\nvt 0.903182 0.661527\nvt 0.906821 0.661561\nvt 0.417620 0.830698\nvt 0.412539 0.830591\nvt 0.423466 0.808340\nvt 0.378037 0.885773\nvt 0.370608 0.881346\nvt 0.895637 0.661053\nvt 0.898724 0.661044\nvt 0.426775 0.841084\nvt 0.428466 0.845415\nvt 0.426749 0.849259\nvt 0.414972 0.864982\nvt 0.410707 0.865023\nvt 0.070045 0.633294\nvt 0.070028 0.620721\nvt 0.105628 0.875724\nvt 0.117685 0.876182\nvt 0.138357 0.841042\nvt 0.139605 0.845743\nvt 0.135218 0.845646\nvt 0.136853 0.855082\nvt 0.132288 0.861476\nvt 0.128787 0.843220\nvt 0.124848 0.870462\nvt 0.889863 0.321526\nvt 0.893347 0.334290\nvt 0.882451 0.334030\nvt 0.535937 0.065499\nvt 0.549687 0.065200\nvt 0.545631 0.080063\nvt 0.498178 0.089642\nvt 0.489527 0.101843\nvt 0.477184 0.084655\nvt 0.485723 0.073206\nvt 0.464812 0.065091\nvt 0.473507 0.054720\nvt 0.454892 0.048598\nvt 0.506665 0.680902\nvt 0.511458 0.689943\nvt 0.493785 0.688416\nvt 0.488418 0.678932\nvt 0.474998 0.690756\nvt 0.451294 0.691849\nvt 0.470450 0.682162\nvt 0.507129 0.066181\nvt 0.503425 0.077106\nvt 0.491474 0.062400\nvt 0.537752 0.666843\nvt 0.540048 0.677756\nvt 0.521046 0.673013\nvt 0.519762 0.662878\nvt 0.502582 0.671027\nvt 0.498777 0.661290\nvt 0.484284 0.670196\nvt 0.481068 0.660390\nvt 0.466124 0.672603\nvt 0.442643 0.668436\nvt 0.462217 0.662083\nvt 0.531420 0.078693\nvt 0.543778 0.097721\nvt 0.896259 0.349419\nvt 0.899660 0.366458\nvt 0.889425 0.366632\nvt 0.905783 0.386807\nvt 0.896309 0.387473\nvt 0.541120 0.593706\nvt 0.521362 0.592192\nvt 0.523937 0.583282\nvt 0.498964 0.587623\nvt 0.501866 0.578611\nvt 0.476547 0.605121\nvt 0.478258 0.594667\nvt 0.496900 0.598297\nvt 0.480072 0.584473\nvt 0.458837 0.591432\nvt 0.482969 0.574961\nvt 0.461041 0.580949\nvt 0.464329 0.571074\nvt 0.457118 0.603190\nvt 0.442517 0.577913\nvt 0.446072 0.567788\nvt 0.517164 0.612939\nvt 0.517483 0.623884\nvt 0.494576 0.619289\nvt 0.467914 0.562369\nvt 0.486815 0.567013\nvt 0.439415 0.590385\nvt 0.439789 0.656130\nvt 0.459761 0.651437\nvt 0.478286 0.649636\nvt 0.496568 0.650552\nvt 0.906299 0.407490\nvt 0.897845 0.408633\nvt 0.540752 0.053697\nvt 0.553707 0.051958\nvt 0.156324 0.634814\nvt 0.138775 0.614172\nvt 0.479706 0.044873\nvt 0.462582 0.039096\nvt 0.468608 0.029570\nvt 0.446816 0.679804\nvt 0.465057 0.098680\nvt 0.453555 0.075583\nvt 0.479719 0.698587\nvt 0.459910 0.711322\nvt 0.456247 0.702441\nvt 0.499421 0.695388\nvt 0.445803 0.058291\nvt 0.441940 0.043012\nvt 0.449530 0.111370\nvt 0.441539 0.084315\nvt 0.645103 0.333436\nvt 0.659741 0.351007\nvt 0.648890 0.354255\nvt 0.435954 0.065885\nvt 0.432432 0.050265\nvt 0.429590 0.036549\nvt 0.431390 0.118369\nvt 0.427764 0.091515\nvt 0.654716 0.327605\nvt 0.671536 0.345663\nvt 0.424568 0.071107\nvt 0.421743 0.055450\nvt 0.632879 0.320769\nvt 0.641490 0.315111\nvt 0.418109 0.122398\nvt 0.415124 0.095068\nvt 0.665203 0.318512\nvt 0.683418 0.335680\nvt 0.413058 0.073278\nvt 0.409578 0.058082\nvt 0.649834 0.305855\nvt 0.405977 0.124109\nvt 0.404895 0.097133\nvt 0.674302 0.307021\nvt 0.695450 0.322325\nvt 0.401456 0.074493\nvt 0.397466 0.058531\nvt 0.656976 0.294445\nvt 0.397107 0.124220\nvt 0.394612 0.098965\nvt 0.683244 0.290437\nvt 0.705592 0.303541\nvt 0.390054 0.075282\nvt 0.384162 0.057469\nvt 0.664200 0.280692\nvt 0.811837 0.622852\nvt 0.802490 0.621957\nvt 0.808158 0.597445\nvt 0.691524 0.240997\nvt 0.717311 0.243859\nvt 0.715617 0.262832\nvt 0.818040 0.598215\nvt 0.816215 0.574958\nvt 0.826178 0.575087\nvt 0.824377 0.553451\nvt 0.672152 0.251821\nvt 0.671765 0.237877\nvt 0.940409 0.039181\nvt 0.945524 0.080948\nvt 0.922366 0.079712\nvt 0.900811 0.081583\nvt 0.897915 0.037959\nvt 0.444367 0.342154\nvt 0.474819 0.356940\nvt 0.456054 0.376371\nvt 0.501509 0.280282\nvt 0.515531 0.286030\nvt 0.504434 0.310410\nvt 0.959108 0.043785\nvt 0.964398 0.083096\nvt 0.486062 0.302441\nvt 0.490164 0.332499\nvt 0.568973 0.172163\nvt 0.573333 0.190110\nvt 0.564535 0.193215\nvt 0.579129 0.208242\nvt 0.570928 0.212991\nvt 0.543035 0.331704\nvt 0.516927 0.336112\nvt 0.525582 0.312959\nvt 0.565198 0.154145\nvt 0.559316 0.174479\nvt 0.453375 0.217102\nvt 0.429704 0.222418\nvt 0.431452 0.205680\nvt 0.585690 0.225137\nvt 0.985279 0.167940\nvt 0.964128 0.132756\nvt 0.539026 0.357167\nvt 0.507841 0.360005\nvt 0.405719 0.228658\nvt 0.409070 0.210196\nvt 0.557797 0.101584\nvt 0.476673 0.118366\nvt 0.458797 0.138616\nvt 0.434531 0.142799\nvt 0.420169 0.144512\nvt 0.406505 0.145297\nvt 0.157962 0.760528\nvt 0.150512 0.755042\nvt 0.158253 0.747049\nvt 0.152008 0.724854\nvt 0.151030 0.728555\nvt 0.144567 0.737302\nvt 0.148295 0.739890\nvt 0.141224 0.745190\nvt 0.152783 0.734343\nvt 0.148732 0.732770\nvt 0.145072 0.749849\nvt 0.152723 0.743300\nvt 0.084391 0.737100\nvt 0.947502 0.302376\nvt 0.956665 0.346344\nvt 0.963038 0.337839\nvt 0.944310 0.298982\nvt 0.529365 0.094991\nvt 0.544089 0.116222\nvt 0.558087 0.118666\nvt 0.505142 0.570331\nvt 0.451163 0.558331\nvt 0.879037 0.322278\nvt 0.876821 0.313708\nvt 0.888034 0.313185\nvt 0.908366 0.317930\nvt 0.911573 0.328643\nvt 0.901061 0.324023\nvt 0.904289 0.337239\nvt 0.563790 0.017599\nvt 0.573661 0.015641\nvt 0.571755 0.026460\nvt 0.922040 0.333597\nvt 0.925102 0.346292\nvt 0.914747 0.341200\nvt 0.930493 0.375257\nvt 0.933176 0.393284\nvt 0.925198 0.390625\nvt 0.518623 0.602196\nvt 0.456181 0.615179\nvt 0.435738 0.616943\nvt 0.436959 0.603659\nvt 0.495062 0.608846\nvt 0.475728 0.616210\nvt 0.921137 0.372089\nvt 0.915711 0.388237\nvt 0.907381 0.352531\nvt 0.927759 0.360184\nvt 0.565886 0.067302\nvt 0.500659 0.040838\nvt 0.515322 0.050080\nvt 0.510726 0.057205\nvt 0.476417 0.638412\nvt 0.495213 0.639806\nvt 0.457691 0.639155\nvt 0.438111 0.643030\nvt 0.523186 0.063444\nvt 0.518968 0.074869\nvt 0.511538 0.102595\nvt 0.502209 0.116314\nvt 0.515840 0.087554\nvt 0.521757 0.265752\nvt 0.524828 0.248077\nvt 0.510553 0.260760\nvt 0.552969 0.156347\nvt 0.551516 0.175811\nvt 0.868896 0.083787\nvt 0.465975 0.322908\nvt 0.528696 0.120880\nvt 0.547364 0.139596\nvt 0.424168 0.324699\nvt 0.402865 0.335570\nvt 0.390259 0.309980\nvt 0.481885 0.149501\nvt 0.812823 0.662120\nvt 0.802890 0.661476\nvt 0.801768 0.643189\nvt 0.359044 0.210441\nvt 0.346926 0.208159\nvt 0.356127 0.191908\nvt 0.373957 0.211310\nvt 0.368470 0.193367\nvt 0.405588 0.162449\nvt 0.392771 0.162378\nvt 0.396019 0.144450\nvt 0.420107 0.162334\nvt 0.435355 0.161788\nvt 0.456552 0.161147\nvt 0.387195 0.124055\nvt 0.428978 0.245561\nvt 0.404407 0.252612\nvt 0.826459 0.761061\nvt 0.811581 0.759976\nvt 0.813986 0.731162\nvt 0.452980 0.237625\nvt 0.383743 0.257382\nvt 0.366084 0.259496\nvt 0.368939 0.231488\nvt 0.473604 0.229054\nvt 0.386079 0.230779\nvt 0.482628 0.261090\nvt 0.461066 0.276405\nvt 0.454491 0.259590\nvt 0.410025 0.303360\nvt 0.384603 0.284302\nvt 0.434600 0.292277\nvt 0.404948 0.279179\nvt 0.338011 0.287886\nvt 0.343780 0.317333\nvt 0.327253 0.314444\nvt 0.428945 0.271075\nvt 0.373739 0.314771\nvt 0.367259 0.287392\nvt 0.422010 0.358689\nvt 0.406673 0.369921\nvt 0.385144 0.342000\nvt 0.490720 0.271791\nvt 0.448274 0.308504\nvt 0.868795 0.037108\nvt 0.870979 0.006109\nvt 0.471998 0.290157\nvt 0.883240 0.232391\nvt 0.877893 0.193757\nvt 0.899661 0.193330\nvt 0.965125 0.211873\nvt 0.942645 0.218897\nvt 0.115008 0.607993\nvt 0.118591 0.591682\nvt 0.166442 0.613810\nvt 0.183033 0.629432\nvt 0.143585 0.600668\nvt 0.922230 0.135850\nvt 0.389460 0.211603\nvt 0.053538 0.622347\nvt 0.053949 0.635022\nvt 0.039881 0.637429\nvt 0.092425 0.605128\nvt 0.095344 0.587501\nvt 0.148095 0.585696\nvt 0.171702 0.602487\nvt 0.188156 0.619575\nvt 0.353099 0.230893\nvt 0.563279 0.323602\nvt 0.544757 0.308999\nvt 0.566026 0.346343\nvt 0.885422 0.348823\nvt 0.338542 0.229611\nvt 0.910555 0.369129\nvt 0.918126 0.355903\nvt 0.516268 0.133127\nvt 0.528365 0.053678\nvt 0.491911 0.131641\nvt 0.495713 0.154815\nvt 0.486485 0.221988\nvt 0.472118 0.212064\nvt 0.496495 0.247699\nvt 0.476586 0.247929\nvt 0.179399 0.591267\nvt 0.155220 0.571845\nvt 0.166037 0.556946\nvt 0.559656 0.302656\nvt 0.572603 0.294336\nvt 0.827350 0.732141\nvt 0.811953 0.709701\nvt 0.129202 0.557802\nvt 0.141969 0.541301\nvt 0.058456 0.565553\nvt 0.055515 0.585946\nvt 0.041898 0.587207\nvt 0.378832 0.075871\nvt 0.369792 0.075001\nvt 0.362471 0.054204\nvt 0.872451 0.140933\nvt 0.902184 0.138295\nvt 0.473835 0.185550\nvt 0.485397 0.185962\nvt 0.484342 0.195275\nvt 0.920444 0.226256\nvt 0.944467 0.247058\nvt 0.053788 0.605435\nvt 0.039782 0.607429\nvt 0.350882 0.259810\nvt 0.335922 0.258248\nvt 0.966642 0.238119\nvt 0.827206 0.597838\nvt 0.921032 0.036968\nvt 0.897358 0.005569\nvt 0.985956 0.199451\nvt 0.888323 0.260401\nvt 0.899691 0.231809\nvt 0.687859 0.271979\nvt 0.691195 0.256030\nvt 0.821259 0.623109\nvt 0.358688 0.317007\nvt 0.811100 0.643839\nvt 0.099114 0.568300\nvt 0.105737 0.550498\nvt 0.427249 0.925616\nvt 0.431315 0.926107\nvt 0.429066 0.934316\nvt 0.107823 0.879426\nvt 0.099510 0.880721\nvt 0.898349 0.314609\nvt 0.887801 0.388997\nvt 0.880702 0.369069\nvt 0.875997 0.350268\nvt 0.872908 0.335820\nvt 0.869627 0.323915\nvt 0.091263 0.754344\nvt 0.085236 0.752103\nvt 0.087640 0.748297\nvt 0.580598 0.026566\nvt 0.581234 0.015844\nvt 0.575395 0.005569\nvt 0.895983 0.307226\nvt 0.885891 0.305800\nvt 0.518509 0.643351\nvt 0.537362 0.647941\nvt 0.536871 0.656404\nvt 0.494529 0.053516\nvt 0.497094 0.046007\nvt 0.518494 0.652792\nvt 0.536378 0.616467\nvt 0.536281 0.627844\nvt 0.538176 0.604724\nvt 0.484565 0.207927\nvt 0.493369 0.203697\nvt 0.496018 0.216995\nvt 0.505252 0.236693\nvt 0.491073 0.238055\nvt 0.073379 0.585614\nvt 0.071092 0.604507\nvt 0.820031 0.643698\nvt 0.920356 0.189832\nvt 0.371335 0.056302\nvt 0.922462 0.255292\nvt 0.383874 0.098988\nvt 0.918988 0.008014\nvt 0.712561 0.281982\nvt 0.352508 0.288724\nvt 0.669523 0.264735\nvt 0.906187 0.274705\nvt 0.903172 0.258421\nvt 0.082724 0.548795\nvt 0.947250 0.470609\nvt 0.949906 0.469900\nvt 0.950654 0.476790\nvt 0.952150 0.453831\nvt 0.950666 0.453686\nvt 0.952788 0.452088\nvt 0.951288 0.455327\nvt 0.949199 0.455349\nvt 0.949217 0.459312\nvt 0.947094 0.459189\nvt 0.947511 0.464667\nvt 0.945495 0.465063\nvt 0.948188 0.477191\nvt 0.097657 0.737237\nvt 0.098053 0.735564\nvt 0.984605 0.747353\nvt 0.986532 0.746166\nvt 0.986792 0.747353\nvt 0.097383 0.734830\nvt 0.362591 0.984415\nvt 0.362512 0.987158\nvt 0.361619 0.986363\nvt 0.095614 0.734424\nvt 0.110193 0.737294\nvt 0.105114 0.737707\nvt 0.105973 0.736443\nvt 0.972334 0.596674\nvt 0.974805 0.597828\nvt 0.115562 0.735752\nvt 0.115382 0.736841\nvt 0.954970 0.487978\nvt 0.951075 0.483069\nvt 0.132479 0.729867\nvt 0.128191 0.732701\nvt 0.127952 0.731862\nvt 0.136762 0.725477\nvt 0.135567 0.726892\nvt 0.135135 0.726241\nvt 0.137213 0.723021\nvt 0.137989 0.723151\nvt 0.137666 0.724238\nvt 0.954307 0.451286\nvt 0.955015 0.451166\nvt 0.954967 0.451956\nvt 0.953775 0.452596\nvt 0.603141 0.692472\nvt 0.603807 0.686553\nvt 0.608993 0.686806\nvt 0.607659 0.707991\nvt 0.605834 0.704540\nvt 0.612095 0.704807\nvt 0.026259 0.973731\nvt 0.026051 0.978879\nvt 0.025262 0.978793\nvt 0.954172 0.469422\nvt 0.950312 0.463802\nvt 0.786661 0.907151\nvt 0.786419 0.911256\nvt 0.783208 0.910117\nvt 0.605455 0.681435\nvt 0.025149 0.973608\nvt 0.024569 0.978832\nvt 0.954947 0.462778\nvt 0.952320 0.458942\nvt 0.784184 0.904225\nvt 0.784381 0.902614\nvt 0.787010 0.903456\nvt 0.786793 0.904941\nvt 0.783350 0.906312\nvt 0.611289 0.678386\nvt 0.606785 0.678327\nvt 0.607432 0.676414\nvt 0.023643 0.979000\nvt 0.023518 0.973426\nvt 0.956701 0.457996\nvt 0.954181 0.455480\nvt 0.784832 0.901451\nvt 0.787565 0.902327\nvt 0.610162 0.711825\nvt 0.609585 0.710823\nvt 0.616060 0.711947\nvt 0.958622 0.454407\nvt 0.955087 0.453773\nvt 0.785310 0.900855\nvt 0.787980 0.901802\nvt 0.953216 0.482648\nvt 0.954801 0.475691\nvt 0.569983 0.735753\nvt 0.568978 0.739495\nvt 0.567809 0.738592\nvt 0.607694 0.675124\nvt 0.607553 0.673793\nvt 0.610368 0.673875\nvt 0.956623 0.487268\nvt 0.956876 0.482434\nvt 0.586059 0.768329\nvt 0.580939 0.768150\nvt 0.581341 0.763601\nvt 0.558025 0.763126\nvt 0.566274 0.759824\nvt 0.568022 0.764547\nvt 0.558438 0.741421\nvt 0.563961 0.742392\nvt 0.563996 0.746997\nvt 0.568725 0.734877\nvt 0.567565 0.734620\nvt 0.567870 0.731955\nvt 0.578817 0.751247\nvt 0.575859 0.745305\nvt 0.582576 0.743972\nvt 0.779145 0.907197\nvt 0.631462 0.973898\nvt 0.631462 0.982744\nvt 0.627703 0.980911\nvt 0.993834 0.339920\nvt 0.993187 0.339653\nvt 0.993834 0.336596\nvt 0.573695 0.740634\nvt 0.578764 0.739325\nvt 0.778743 0.902848\nvt 0.778864 0.899578\nvt 0.525669 0.990883\nvt 0.524438 0.985620\nvt 0.525669 0.985248\nvt 0.565740 0.732150\nvt 0.566756 0.734509\nvt 0.565963 0.734473\nvt 0.571496 0.737303\nvt 0.575258 0.735864\nvt 0.562269 0.734287\nvt 0.565195 0.735630\nvt 0.564668 0.737165\nvt 0.572304 0.733438\nvt 0.780437 0.895458\nvt 0.587484 0.763375\nvt 0.580510 0.757114\nvt 0.570014 0.732210\nvt 0.585364 0.750147\nvt 0.587195 0.756826\nvt 0.616060 0.670610\nvt 0.610784 0.674997\nvt 0.779262 0.897094\nvt 0.775484 0.894611\nvt 0.772399 0.920537\nvt 0.780528 0.919328\nvt 0.780936 0.924596\nvt 0.574606 0.729083\nvt 0.590705 0.745664\nvt 0.592696 0.753060\nvt 0.779059 0.889838\nvt 0.782712 0.894392\nvt 0.779872 0.912807\nvt 0.933622 0.926797\nvt 0.942445 0.928148\nvt 0.941198 0.935525\nvt 0.556650 0.747279\nvt 0.552254 0.743312\nvt 0.570973 0.728020\nvt 0.772078 0.913302\nvt 0.932597 0.935004\nvt 0.939507 0.941118\nvt 0.567857 0.727631\nvt 0.586967 0.739434\nvt 0.772875 0.901468\nvt 0.774132 0.897576\nvt 0.772331 0.906904\nvt 0.931064 0.944391\nvt 0.938392 0.944266\nvt 0.937404 0.946724\nvt 0.564789 0.727984\nvt 0.563954 0.732700\nvt 0.582613 0.734918\nvt 0.560367 0.736594\nvt 0.557390 0.732722\nvt 0.578412 0.731322\nvt 0.594474 0.741552\nvt 0.764941 0.912746\nvt 0.924900 0.934307\nvt 0.931521 0.940725\nvt 0.351309 0.943891\nvt 0.349532 0.947749\nvt 0.346555 0.946909\nvt 0.590536 0.735643\nvt 0.767253 0.900271\nvt 0.768939 0.895495\nvt 0.930801 0.947618\nvt 0.924800 0.947483\nvt 0.347946 0.942927\nvt 0.343866 0.946124\nvt 0.585667 0.731126\nvt 0.341208 0.945762\nvt 0.337820 0.945386\nvt 0.338302 0.940297\nvt 0.581034 0.727834\nvt 0.776895 0.892154\nvt 0.770617 0.892291\nvt 0.764503 0.920394\nvt 0.773021 0.925650\nvt 0.572405 0.724575\nvt 0.840714 0.491204\nvt 0.845496 0.489780\nvt 0.849609 0.496930\nvt 0.772432 0.889196\nvt 0.934054 0.905217\nvt 0.934433 0.909773\nvt 0.926988 0.908107\nvt 0.354841 0.944966\nvt 0.352253 0.948590\nvt 0.849771 0.488407\nvt 0.853755 0.494966\nvt 0.775231 0.886548\nvt 0.769182 0.887562\nvt 0.759739 0.912131\nvt 0.925262 0.925733\nvt 0.919034 0.933701\nvt 0.333274 0.938996\nvt 0.327966 0.937115\nvt 0.328654 0.931963\nvt 0.352820 0.940776\nvt 0.843143 0.482729\nvt 0.847078 0.481520\nvt 0.760976 0.905333\nvt 0.765693 0.905857\nvt 0.924343 0.940226\nvt 0.919324 0.939633\nvt 0.348980 0.939766\nvt 0.842251 0.476283\nvt 0.845964 0.475390\nvt 0.762963 0.899261\nvt 0.765051 0.894467\nvt 0.924508 0.944164\nvt 0.920358 0.947186\nvt 0.344554 0.941951\nvt 0.842277 0.470967\nvt 0.845826 0.470146\nvt 0.767098 0.890795\nvt 0.342259 0.937542\nvt 0.341629 0.941312\nvt 0.842616 0.466744\nvt 0.846023 0.465839\nvt 0.858490 0.501013\nvt 0.854297 0.503066\nvt 0.358403 0.945996\nvt 0.356754 0.941837\nvt 0.848622 0.465247\nvt 0.360495 0.942457\nvt 0.357936 0.939188\nvt 0.353920 0.938110\nvt 0.345531 0.938539\nvt 0.346398 0.935755\nvt 0.350026 0.937093\nvt 0.769289 0.883428\nvt 0.771931 0.884555\nvt 0.338895 0.936323\nvt 0.339642 0.933311\nvt 0.343100 0.934600\nvt 0.333903 0.934496\nvt 0.329943 0.928299\nvt 0.919191 0.924975\nvt 0.915081 0.933377\nvt 0.850580 0.480465\nvt 0.915795 0.939127\nvt 0.759189 0.919287\nvt 0.755166 0.917938\nvt 0.755921 0.911350\nvt 0.764195 0.890018\nvt 0.766508 0.886676\nvt 0.759622 0.898849\nvt 0.761919 0.893919\nvt 0.919641 0.943509\nvt 0.917278 0.946663\nvt 0.757478 0.904682\nvt 0.857450 0.493351\nvt 0.853328 0.486801\nvt 0.849032 0.474412\nvt 0.848736 0.469408\nvt 0.334953 0.931296\nvt 0.554635 0.736981\nvt 0.851528 0.468891\nvt 0.852386 0.473778\nvt 0.756675 0.898555\nvt 0.759175 0.893492\nvt 0.754635 0.904037\nvt 0.916353 0.943088\nvt 0.913338 0.942582\nvt 0.912548 0.938934\nvt 0.911576 0.933137\nvt 0.911077 0.924976\nvt 0.914821 0.924968\nvt 0.862032 0.499218\nvt 0.865040 0.497122\nvt 0.869367 0.500870\nvt 0.347401 0.933140\nvt 0.351206 0.934320\nvt 0.853855 0.479517\nvt 0.856704 0.485467\nvt 0.753153 0.910137\nvt 0.344459 0.931741\nvt 0.851306 0.464723\nvt 0.860631 0.491544\nvt 0.761462 0.889510\nvt 0.763734 0.886075\nvt 0.331704 0.924707\nvt 0.336493 0.927936\nvt 0.358967 0.936567\nvt 0.362817 0.937022\nvt 0.361947 0.939769\nvt 0.766556 0.882705\nvt 0.355047 0.935552\nvt 0.341119 0.930355\nvt 0.345983 0.928693\nvt 0.348850 0.929906\nvt 0.854464 0.464474\nvt 0.854951 0.468357\nvt 0.868191 0.494606\nvt 0.872138 0.498216\nvt 0.229769 0.943525\nvt 0.228280 0.941398\nvt 0.232740 0.939020\nvt 0.758542 0.889159\nvt 0.760740 0.885643\nvt 0.334085 0.920963\nvt 0.338619 0.924427\nvt 0.360176 0.933306\nvt 0.363771 0.933817\nvt 0.860316 0.483980\nvt 0.864044 0.489522\nvt 0.756210 0.893199\nvt 0.909112 0.938230\nvt 0.908061 0.933028\nvt 0.356376 0.932258\nvt 0.753827 0.897969\nvt 0.751778 0.903035\nvt 0.342979 0.926973\nvt 0.352619 0.931201\nvt 0.855915 0.472996\nvt 0.857484 0.478294\nvt 0.750298 0.908704\nvt 0.240754 0.932009\nvt 0.242705 0.928333\nvt 0.244986 0.930438\nvt 0.907484 0.925060\nvt 0.223999 0.942619\nvt 0.222034 0.938655\nvt 0.225851 0.937838\nvt 0.337641 0.916687\nvt 0.341694 0.919921\nvt 0.361153 0.928644\nvt 0.364216 0.929008\nvt 0.864657 0.481655\nvt 0.868094 0.486461\nvt 0.219445 0.942541\nvt 0.217650 0.938499\nvt 0.239059 0.925490\nvt 0.240278 0.920543\nvt 0.244370 0.923246\nvt 0.357654 0.927797\nvt 0.214445 0.941720\nvt 0.213227 0.937687\nvt 0.209610 0.939982\nvt 0.208889 0.935860\nvt 0.345315 0.922560\nvt 0.354097 0.926454\nvt 0.860686 0.472185\nvt 0.862282 0.476876\nvt 0.875128 0.494230\nvt 0.878140 0.496272\nvt 0.237418 0.928697\nvt 0.240811 0.913912\nvt 0.244986 0.915545\nvt 0.350662 0.925276\nvt 0.859775 0.467934\nvt 0.871850 0.490946\nvt 0.347967 0.924269\nvt 0.859253 0.464338\nvt 0.230091 0.935342\nvt 0.350044 0.909455\nvt 0.348386 0.916547\nvt 0.345412 0.914715\nvt 0.350451 0.917829\nvt 0.351790 0.909786\nvt 0.353886 0.910070\nvt 0.878336 0.487519\nvt 0.878772 0.479436\nvt 0.880562 0.479489\nvt 0.866868 0.468261\nvt 0.866462 0.465200\nvt 0.875460 0.469701\nvt 0.229585 0.910799\nvt 0.228783 0.907787\nvt 0.233305 0.906926\nvt 0.875112 0.471396\nvt 0.874595 0.473244\nvt 0.867520 0.471590\nvt 0.234756 0.912149\nvt 0.234347 0.916829\nvt 0.228399 0.912147\nvt 0.348094 0.909076\nvt 0.342374 0.912239\nvt 0.875567 0.485240\nvt 0.872708 0.482069\nvt 0.875642 0.478386\nvt 0.866713 0.462903\nvt 0.876216 0.468249\nvt 0.874120 0.476319\nvt 0.870073 0.478537\nvt 0.868634 0.475111\nvt 0.229643 0.925609\nvt 0.225939 0.928443\nvt 0.221346 0.917375\nvt 0.233303 0.920334\nvt 0.227204 0.913445\nvt 0.222484 0.930434\nvt 0.218475 0.918530\nvt 0.358864 0.920599\nvt 0.358817 0.911368\nvt 0.361117 0.912441\nvt 0.232027 0.922948\nvt 0.224012 0.915752\nvt 0.355558 0.919477\nvt 0.225872 0.914514\nvt 0.219141 0.931251\nvt 0.211993 0.930300\nvt 0.211034 0.919450\nvt 0.213424 0.919510\nvt 0.356463 0.910630\nvt 0.208680 0.928821\nvt 0.208977 0.919213\nvt 0.230615 0.903259\nvt 0.215923 0.919288\nvt 0.215595 0.931171\nvt 0.352711 0.918738\nvt 0.880758 0.489024\nvt 0.361705 0.921551\nvt 0.238800 0.906640\nvt 0.163035 0.738726\nvt 0.169865 0.741447\nvt 0.165661 0.751534\nvt 0.536077 0.145441\nvt 0.522022 0.147572\nvt 0.157479 0.736462\nvt 0.145566 0.731492\nvt 0.138999 0.734030\nvt 0.140493 0.729611\nvt 0.138169 0.728618\nvt 0.136410 0.727725\nvt 0.607839 0.711195\nvt 0.613949 0.708354\nvt 0.363619 0.729576\nvt 0.342585 0.760037\nvt 0.339854 0.737568\nvt 0.358643 0.710168\nvt 0.335094 0.711778\nvt 0.413972 0.650511\nvt 0.642966 0.455512\nvt 0.641613 0.503851\nvt 0.627595 0.493591\nvt 0.363142 0.613841\nvt 0.327253 0.619125\nvt 0.347239 0.580750\nvt 0.373742 0.585605\nvt 0.360161 0.554279\nvt 0.357462 0.640053\nvt 0.328666 0.654713\nvt 0.419848 0.590051\nvt 0.424608 0.575619\nvt 0.416403 0.605458\nvt 0.392092 0.694826\nvt 0.420397 0.678790\nvt 0.690337 0.365330\nvt 0.735251 0.269464\nvt 0.676359 0.372175\nvt 0.734915 0.245787\nvt 0.731876 0.293757\nvt 0.725235 0.317226\nvt 0.663542 0.376727\nvt 0.429092 0.706379\nvt 0.432959 0.717887\nvt 0.715905 0.338910\nvt 0.663286 0.410659\nvt 0.652926 0.377401\nvt 0.743602 0.330997\nvt 0.402322 0.728798\nvt 0.703932 0.355528\nvt 0.734342 0.356926\nvt 0.722975 0.377844\nvt 0.709117 0.391180\nvt 0.748074 0.274891\nvt 0.677146 0.408398\nvt 0.748752 0.304048\nvt 0.749528 0.247731\nvt 0.555722 0.632199\nvt 0.557794 0.609921\nvt 0.572052 0.614811\nvt 0.744699 0.402421\nvt 0.754977 0.374469\nvt 0.761990 0.343679\nvt 0.406809 0.740600\nvt 0.376275 0.769632\nvt 0.763076 0.313268\nvt 0.688499 0.446954\nvt 0.552254 0.657626\nvt 0.571394 0.641822\nvt 0.693495 0.402351\nvt 0.708209 0.435984\nvt 0.728941 0.421990\nvt 0.382465 0.664659\nvt 0.416691 0.665329\nvt 0.397746 0.589417\nvt 0.404347 0.571169\nvt 0.390923 0.610302\nvt 0.414066 0.621488\nvt 0.425084 0.692728\nvt 0.355804 0.689227\nvt 0.386128 0.680175\nvt 0.397886 0.712456\nvt 0.385838 0.630914\nvt 0.382606 0.563274\nvt 0.652944 0.409191\nvt 0.656412 0.458116\nvt 0.429512 0.562818\nvt 0.435075 0.551220\nvt 0.410637 0.555410\nvt 0.417084 0.541467\nvt 0.390458 0.546177\nvt 0.398090 0.530291\nvt 0.371742 0.533924\nvt 0.380713 0.516692\nvt 0.590840 0.622182\nvt 0.671092 0.454004\nvt 0.699536 0.483324\nvt 0.585521 0.683244\nvt 0.577293 0.713436\nvt 0.562119 0.696668\nvt 0.721628 0.466690\nvt 0.565951 0.671141\nvt 0.591055 0.651928\nvt 0.745773 0.446302\nvt 0.764727 0.419582\nvt 0.775400 0.388138\nvt 0.779604 0.354840\nvt 0.678466 0.498159\nvt 0.413651 0.636898\nvt 0.436131 0.629951\nvt 0.456234 0.627705\nvt 0.475304 0.627319\nvt 0.494365 0.629593\nvt 0.518679 0.634071\nvt 0.536901 0.638452\nvt 0.502771 0.034266\nvt 0.518245 0.043044\nvt 0.531464 0.045561\nvt 0.521343 0.034147\nvt 0.544342 0.043151\nvt 0.556797 0.040161\nvt 0.548585 0.031398\nvt 0.569595 0.038380\nvt 0.568319 0.051657\nvt 0.580338 0.038628\nvt 0.063963 0.800976\nvt 0.075561 0.801920\nvt 0.139103 0.850279\nvt 0.130642 0.847579\nvt 0.134923 0.848925\nvt 0.126708 0.845849\nvt 0.128261 0.846540\nvt 0.126833 0.848614\nvt 0.125660 0.845301\nvt 0.124877 0.844565\nvt 0.071117 0.993188\nvt 0.071767 0.993505\nvt 0.071791 0.994431\nvt 0.642392 0.956798\nvt 0.643880 0.956301\nvt 0.649516 0.957221\nvt 0.645846 0.956071\nvt 0.515258 0.812514\nvt 0.518200 0.811252\nvt 0.520931 0.810395\nvt 0.525600 0.810134\nvt 0.534433 0.815242\nvt 0.911920 0.519175\nvt 0.926713 0.523095\nvt 0.917422 0.539372\nvt 0.901755 0.532429\nvt 0.879076 0.586722\nvt 0.865931 0.623910\nvt 0.864110 0.635568\nvt 0.859555 0.632917\nvt 0.420521 0.865056\nvt 0.427675 0.852116\nvt 0.861275 0.678790\nvt 0.852965 0.673933\nvt 0.869417 0.657431\nvt 0.855808 0.712744\nvt 0.847281 0.707461\nvt 0.856954 0.750190\nvt 0.613348 0.971708\nvt 0.602564 0.946593\nvt 0.613348 0.940168\nvt 0.515923 0.852171\nvt 0.526131 0.870933\nvt 0.514181 0.877107\nvt 0.509514 0.832334\nvt 0.509158 0.826264\nvt 0.503357 0.813924\nvt 0.508759 0.820196\nvt 0.501808 0.811697\nvt 0.501603 0.809697\nvt 0.695566 0.885701\nvt 0.696513 0.886513\nvt 0.695163 0.887583\nvt 0.694766 0.884853\nvt 0.694368 0.883814\nvt 0.695388 0.882793\nvt 0.695548 0.883952\nvt 0.691739 0.884071\nvt 0.127491 0.841402\nvt 0.130751 0.838849\nvt 0.133947 0.842142\nvt 0.133939 0.836486\nvt 0.081087 0.800902\nvt 0.081026 0.797453\nvt 0.087660 0.799025\nvt 0.383153 0.648062\nvt 0.355580 0.665030\nvt 0.331617 0.683486\nvt 0.504957 0.026841\nvt 0.535328 0.035317\nvt 0.560497 0.028533\nvt 0.081106 0.804169\nvt 0.087734 0.802371\nvt 0.087446 0.805266\nvt 0.094570 0.796689\nvt 0.093745 0.793000\nvt 0.125642 0.843645\nvt 0.641588 0.957409\nvt 0.071791 0.992235\nvt 0.231409 0.988889\nvt 0.503946 0.809699\nvt 0.533806 0.800392\nvt 0.894783 0.515616\nvt 0.891197 0.555885\nvt 0.411431 0.875784\nvt 0.426024 0.865057\nvt 0.430135 0.857470\nvt 0.875282 0.658616\nvt 0.849445 0.744456\nvt 0.534748 0.895244\nvt 0.535341 0.860357\nvt 0.511195 0.840633\nvt 0.502764 0.809633\nvt 0.697198 0.885573\nvt 0.694083 0.882536\nvt 0.989947 0.533682\nvt 0.988891 0.537014\nvt 0.988181 0.535703\nvt 0.128483 0.831583\nvt 0.447282 0.962298\nvt 0.448164 0.958915\nvt 0.450915 0.960615\nvt 0.182372 0.705921\nvt 0.175297 0.694769\nvt 0.180491 0.692177\nvt 0.164911 0.684878\nvt 0.169498 0.680222\nvt 0.150830 0.677220\nvt 0.154910 0.670715\nvt 0.133913 0.672818\nvt 0.117175 0.671691\nvt 0.119690 0.662142\nvt 0.100575 0.673241\nvt 0.102411 0.662481\nvt 0.084418 0.675648\nvt 0.085468 0.663994\nvt 0.068958 0.676711\nvt 0.069378 0.665183\nvt 0.055245 0.678120\nvt 0.054895 0.666948\nvt 0.043681 0.680033\nvt 0.042507 0.668431\nvt 0.109270 0.722078\nvt 0.944453 0.465258\nvt 0.946168 0.459466\nvt 0.948402 0.455133\nvt 0.132871 0.721654\nvt 0.137779 0.722578\nvt 0.137980 0.725911\nvt 0.128886 0.733684\nvt 0.116047 0.738141\nvt 0.277413 0.987772\nvt 0.276173 0.985116\nvt 0.277527 0.984582\nvt 0.951689 0.490017\nvt 0.947699 0.485098\nvt 0.955757 0.493645\nvt 0.096799 0.730219\nvt 0.974106 0.592295\nvt 0.095001 0.738835\nvt 0.095323 0.732954\nvt 0.094510 0.734669\nvt 0.955697 0.322209\nvt 0.953427 0.315758\nvt 0.122408 0.714283\nvt 0.090440 0.736790\nvt 0.142761 0.730601\nvt 0.147653 0.727813\nvt 0.145778 0.724319\nvt 0.956435 0.337396\nvt 0.956673 0.329685\nvt 0.950217 0.310453\nvt 0.946162 0.306880\nvt 0.100005 0.718802\nvt 0.101321 0.719663\nvt 0.100080 0.743330\nvt 0.451389 0.963934\nvt 0.452154 0.959499\nvt 0.108576 0.797235\nvt 0.106621 0.797956\nvt 0.118447 0.770858\nvt 0.104748 0.768139\nvt 0.108283 0.762541\nvt 0.087054 0.765207\nvt 0.080925 0.764260\nvt 0.082986 0.757597\nvt 0.069635 0.771540\nvt 0.074663 0.771141\nvt 0.074556 0.778162\nvt 0.094153 0.766122\nvt 0.089422 0.759475\nvt 0.069503 0.779263\nvt 0.446023 0.966175\nvt 0.064568 0.772331\nvt 0.064522 0.780156\nvt 0.096441 0.761175\nvt 0.107251 0.804542\nvt 0.103537 0.810668\nvt 0.108663 0.757210\nvt 0.098312 0.755878\nvt 0.100536 0.751621\nvt 0.041438 0.658037\nvt 0.054655 0.656099\nvt 0.070209 0.654382\nvt 0.086791 0.652791\nvt 0.104423 0.652131\nvt 0.099956 0.819695\nvt 0.112941 0.807434\nvt 0.108077 0.818002\nvt 0.080535 0.814585\nvt 0.380807 0.927818\nvt 0.075645 0.808751\nvt 0.081089 0.807570\nvt 0.078173 0.811070\nvt 0.075518 0.805474\nvt 0.120673 0.832046\nvt 0.122362 0.826743\nvt 0.065530 0.807687\nvt 0.099539 0.738578\nvt 0.098592 0.739731\nvt 0.097548 0.740793\nvt 0.093877 0.743780\nvt 0.096020 0.747201\nvt 0.091463 0.781771\nvt 0.097654 0.783110\nvt 0.123164 0.652904\nvt 0.112722 0.793493\nvt 0.561228 0.136469\nvt 0.155100 0.729411\nvt 0.121663 0.756960\nvt 0.124944 0.763762\nvt 0.544063 0.157651\nvt 0.109310 0.752538\nvt 0.276707 0.988318\nvt 0.136917 0.724049\nvt 0.610770 0.681000\nvt 0.023092 0.979665\nvt 0.022479 0.973968\nvt 0.987636 0.783182\nvt 0.985707 0.776864\nvt 0.987636 0.776254\nvt 0.559990 0.730255\nvt 0.914373 0.946265\nvt 0.239579 0.937323\nvt 0.237735 0.935436\nvt 0.234619 0.932008\nvt 0.334088 0.913021\nvt 0.339673 0.909641\nvt 0.141920 0.656831\nvt 0.137306 0.664552\nvt 0.100506 0.737308\nvt 0.102648 0.737446\nvt 0.096077 0.742336\nvt 0.100659 0.887541\nvt 0.094370 0.800470\nvt 0.098759 0.803531\nvt 0.093560 0.803671\nvt 0.083223 0.822876\nvt 0.186303 0.717404\nvt 0.188196 0.704758\nvt 0.119782 0.880839\nvt 0.119421 0.801569\nvt 0.127964 0.874865\nvt 0.136037 0.867335\nvt 0.141874 0.859636\nvt 0.100599 0.796321\nvt 0.099013 0.778333\nvt 0.108522 0.781939\nvt 0.450731 0.968595\nvt 0.453241 0.964661\nvt 0.145017 0.853134\nvt 0.145611 0.846659\nvt 0.143706 0.840517\nvt 0.138413 0.834259\nvt 0.132381 0.827910\nvt 0.126075 0.821669\nvt 0.117894 0.788378\nvt 0.139297 0.812704\nvt 0.131674 0.817465\nvt 0.125894 0.809781\nvt 0.159728 0.664495\nvt 0.174859 0.675871\nvt 0.611943 0.228132\nvt 0.603867 0.214754\nvt 0.609949 0.212020\nvt 0.598377 0.201249\nvt 0.604947 0.199684\nvt 0.596801 0.132139\nvt 0.583705 0.128420\nvt 0.587118 0.114358\nvt 0.595002 0.187433\nvt 0.602159 0.187233\nvt 0.601572 0.174397\nvt 0.593092 0.173162\nvt 0.593571 0.159015\nvt 0.602607 0.161731\nvt 0.594999 0.145332\nvt 0.605070 0.149234\nvt 0.608351 0.136591\nvt 0.600173 0.118994\nvt 0.581327 0.051958\nvt 0.106868 0.902710\nvt 0.103073 0.894694\nvt 0.113247 0.892174\nvt 0.151268 0.830324\nvt 0.156167 0.840182\nvt 0.149682 0.840297\nvt 0.079737 0.771243\nvt 0.127493 0.894883\nvt 0.131000 0.899568\nvt 0.120574 0.904613\nvt 0.158563 0.850011\nvt 0.151789 0.848079\nvt 0.156842 0.873264\nvt 0.149144 0.883113\nvt 0.144857 0.878811\nvt 0.136650 0.887601\nvt 0.140574 0.892092\nvt 0.157174 0.859809\nvt 0.165075 0.851811\nvt 0.863123 0.303196\nvt 0.860839 0.297709\nvt 0.870995 0.294955\nvt 0.162855 0.862859\nvt 0.152031 0.869549\nvt 0.881353 0.293996\nvt 0.883552 0.299566\nvt 0.873070 0.300316\nvt 0.144283 0.895178\nvt 0.133955 0.902501\nvt 0.180058 0.761965\nvt 0.187582 0.767891\nvt 0.180633 0.779622\nvt 0.583106 0.142125\nvt 0.184485 0.750496\nvt 0.191853 0.755369\nvt 0.612647 0.153898\nvt 0.609688 0.164881\nvt 0.085839 0.771097\nvt 0.092494 0.771282\nvt 0.187158 0.739580\nvt 0.187698 0.728664\nvt 0.194691 0.730266\nvt 0.192731 0.717357\nvt 0.584785 0.172238\nvt 0.587924 0.188005\nvt 0.580625 0.189077\nvt 0.592049 0.203393\nvt 0.585581 0.205609\nvt 0.172452 0.718050\nvt 0.176112 0.707304\nvt 0.179291 0.717415\nvt 0.180328 0.726956\nvt 0.179643 0.736235\nvt 0.177420 0.745737\nvt 0.172803 0.756771\nvt 0.165129 0.766446\nvt 0.583306 0.157109\nvt 0.576472 0.172105\nvt 0.054300 0.646122\nvt 0.040541 0.648556\nvt 0.070216 0.644145\nvt 0.106742 0.642405\nvt 0.087811 0.642773\nvt 0.146851 0.649733\nvt 0.126754 0.643758\nvt 0.597880 0.217763\nvt 0.591689 0.220955\nvt 0.605985 0.231771\nvt 0.599854 0.236259\nvt 0.179385 0.672347\nvt 0.573910 0.155668\nvt 0.572216 0.138624\nvt 0.570211 0.123918\nvt 0.571690 0.108665\nvt 0.120234 0.751387\nvt 0.592926 0.098893\nvt 0.857719 0.290786\nvt 0.868393 0.288519\nvt 0.158853 0.828514\nvt 0.163422 0.840175\nvt 0.123041 0.887697\nvt 0.117195 0.899959\nvt 0.140257 0.873446\nvt 0.131965 0.881172\nvt 0.150870 0.856381\nvt 0.147026 0.864388\nvt 0.153640 0.885858\nvt 0.101892 0.772653\nvt 0.113514 0.775804\nvt 0.131324 0.778101\nvt 0.139879 0.785710\nvt 0.144300 0.832392\nvt 0.137852 0.824888\nvt 0.145435 0.821323\nvt 0.162077 0.875866\nvt 0.168860 0.864662\nvt 0.172806 0.852838\nvt 0.865317 0.309107\nvt 0.172671 0.838638\nvt 0.183040 0.852220\nvt 0.578226 0.091623\nvt 0.605064 0.257290\nvt 0.598496 0.265452\nvt 0.560913 0.084124\nvt 0.039568 0.624752\nvt 0.587808 0.027631\nvt 0.093572 0.750374\nvt 0.090673 0.745318\nvt 0.611181 0.124642\nvt 0.604408 0.106696\nvt 0.091355 0.776926\nvt 0.085212 0.776507\nvt 0.080016 0.777107\nvt 0.110102 0.885126\nvt 0.120093 0.815547\nvt 0.346299 0.189569\nvt 0.353923 0.174599\nvt 0.374888 0.177870\nvt 0.363206 0.176633\nvt 0.369731 0.160965\nvt 0.387393 0.178938\nvt 0.380258 0.162203\nvt 0.395830 0.195292\nvt 0.381495 0.194839\nvt 0.414241 0.194257\nvt 0.401197 0.179100\nvt 0.433771 0.191178\nvt 0.418109 0.178506\nvt 0.455396 0.187680\nvt 0.435318 0.177050\nvt 0.456194 0.175520\nvt 0.476738 0.163512\nvt 0.490148 0.165657\nvt 0.487271 0.175542\nvt 0.815479 0.678107\nvt 0.805126 0.677663\nvt 0.474809 0.175704\nvt 0.375707 0.143032\nvt 0.385810 0.144435\nvt 0.153112 0.818520\nvt 0.146777 0.808447\nvt 0.154644 0.803740\nvt 0.139923 0.798797\nvt 0.161670 0.814014\nvt 0.167536 0.825587\nvt 0.587923 0.017347\nvt 0.582050 0.005617\nvt 0.893280 0.300540\nvt 0.875134 0.306890\nvt 0.588025 0.039070\nvt 0.176231 0.865310\nvt 0.867325 0.315741\nvt 0.584593 0.072204\nvt 0.172010 0.789693\nvt 0.179477 0.797490\nvt 0.170587 0.807651\nvt 0.147225 0.780869\nvt 0.138473 0.772555\nvt 0.148434 0.767442\nvt 0.177511 0.818259\nvt 0.139986 0.760558\nvt 0.186868 0.832122\nvt 0.187771 0.805509\nvt 0.163725 0.798200\nvt 0.156180 0.774644\nvt 0.135202 0.754241\nvt 0.131800 0.748735\nvt 0.129630 0.745000\nvt 0.127941 0.742285\nvt 0.126427 0.740421\nvt 0.124908 0.738917\nvt 0.123462 0.737721\nvt 0.616461 0.244873\nvt 0.330003 0.916820\nvt 0.327253 0.920598\nvt 0.915802 0.914911\nvt 0.917464 0.908040\nvt 0.921387 0.908014\nvt 0.926311 0.915351\nvt 0.920191 0.914910\nvt 0.934646 0.916614\nvt 0.941557 0.912641\nvt 0.942445 0.919144\nvt 0.564556 0.752742\nvt 0.603684 0.699212\nvt 0.610639 0.699599\nvt 0.604166 0.705025\nvt 0.122587 0.736396\nvt 0.122023 0.735259\nvt 0.242765 0.907155\nvt 0.874298 0.474884\nvt 0.877167 0.478859\nvt 0.990659 0.905217\nvt 0.990659 0.912125\nvt 0.989557 0.911023\nvt 0.208206 0.910191\nvt 0.209773 0.908829\nvt 0.211763 0.907845\nvt 0.214113 0.907009\nvt 0.216506 0.906198\nvt 0.219109 0.905753\nvt 0.221220 0.905401\nvt 0.224924 0.905914\nvt 0.226931 0.907115\nvt 0.912120 0.915383\nvt 0.556647 0.754516\nvt 0.609381 0.692286\nvt 0.602238 0.699438\nvt 0.101861 0.734879\nvt 0.102937 0.735295\nvt 0.101691 0.736229\nvt 0.611281 0.676926\nvt 0.615707 0.673377\nvt 0.782348 0.888150\nvt 0.775403 0.881618\nvt 0.778751 0.883988\nvt 0.235789 0.942451\nvt 0.240803 0.938823\nvt 0.241744 0.940464\nvt 0.234597 0.940957\nvt 0.164166 0.782040\nvt 0.172602 0.772690\nvt 0.147377 0.794223\nvt 0.155485 0.789368\nvt 0.116231 0.822428\nvt 0.114255 0.829307\nvt 0.114623 0.836891\nvt 0.085201 0.833005\nvt 0.095429 0.832351\nvt 0.107568 0.827619\nvt 0.421810 0.923426\nvt 0.426414 0.914397\nvt 0.430438 0.915448\nvt 0.432618 0.909076\nvt 0.425411 0.933997\nvt 0.418620 0.932634\nvt 0.128829 0.840637\nvt 0.114346 0.834193\nvt 0.687010 0.895076\nvt 0.684898 0.890007\nvt 0.133107 0.803692\nvt 0.078662 0.829986\nvt 0.094454 0.827063\nvt 0.689549 0.896270\nvt 0.100849 0.827286\nvt 0.101646 0.832529\nvt 0.105207 0.843822\nvt 0.489502 0.804813\nvt 0.489279 0.807824\nvt 0.490081 0.815186\nvt 0.487540 0.823725\nvt 0.485991 0.831544\nvt 0.484086 0.841930\nvt 0.486121 0.859941\nvt 0.493883 0.880807\nvt 0.889554 0.792559\nvt 0.885412 0.761261\nvt 0.885831 0.722843\nvt 0.422012 0.839950\nvt 0.434888 0.821734\nvt 0.420197 0.837736\nvt 0.420250 0.833113\nvt 0.410070 0.828823\nvt 0.883313 0.790521\nvt 0.692222 0.892836\nvt 0.045430 0.692887\nvt 0.085566 0.959454\nvt 0.071117 0.931156\nvt 0.085566 0.915752\nvt 0.502738 0.255289\nvt 0.370469 0.345851\nvt 0.355851 0.348062\nvt 0.515342 0.244944\nvt 0.509352 0.241103\nvt 0.454047 0.200731\nvt 0.472711 0.196770\nvt 0.574311 0.266777\nvt 0.581392 0.257118\nvt 0.591438 0.274685\nvt 0.555891 0.282282\nvt 0.544586 0.287058\nvt 0.543254 0.266985\nvt 0.551754 0.263691\nvt 0.565868 0.248879\nvt 0.572322 0.238729\nvt 0.565902 0.275432\nvt 0.541927 0.248899\nvt 0.548628 0.245741\nvt 0.558264 0.231365\nvt 0.562534 0.216620\nvt 0.559366 0.257365\nvt 0.499886 0.166319\nvt 0.496646 0.173680\nvt 0.494555 0.183671\nvt 0.493425 0.193668\nvt 0.504269 0.142668\nvt 0.513293 0.149207\nvt 0.505571 0.157573\nvt 0.533176 0.268008\nvt 0.531028 0.288863\nvt 0.557170 0.194462\nvt 0.517891 0.235136\nvt 0.501899 0.205197\nvt 0.546581 0.176530\nvt 0.946129 0.668467\nvt 0.939681 0.664864\nvt 0.943733 0.660635\nvt 0.531984 0.151863\nvt 0.512087 0.168950\nvt 0.545347 0.201155\nvt 0.543981 0.190855\nvt 0.547092 0.191601\nvt 0.937163 0.728808\nvt 0.934862 0.721393\nvt 0.942908 0.723144\nvt 0.554043 0.240061\nvt 0.545879 0.231857\nvt 0.551266 0.193200\nvt 0.731171 0.987286\nvt 0.726802 0.987286\nvt 0.728045 0.980821\nvt 0.808371 0.938283\nvt 0.816638 0.938039\nvt 0.814961 0.943036\nvt 0.018680 0.935321\nvt 0.017033 0.942517\nvt 0.013185 0.939201\nvt 0.501864 0.192945\nvt 0.940832 0.745222\nvt 0.939284 0.739615\nvt 0.944152 0.741040\nvt 0.546080 0.208611\nvt 0.549165 0.203476\nvt 0.943131 0.673593\nvt 0.936182 0.671165\nvt 0.859095 0.877442\nvt 0.865844 0.884160\nvt 0.861019 0.887770\nvt 0.933924 0.711899\nvt 0.934116 0.704014\nvt 0.940231 0.705759\nvt 0.016848 0.948213\nvt 0.023237 0.944323\nvt 0.872562 0.886364\nvt 0.867386 0.879250\nvt 0.856296 0.860746\nvt 0.853677 0.847655\nvt 0.856729 0.847869\nvt 0.932988 0.726532\nvt 0.931063 0.721058\nvt 0.024129 0.936913\nvt 0.861304 0.872795\nvt 0.075201 0.981096\nvt 0.071117 0.973457\nvt 0.075201 0.970593\nvt 0.611809 0.541436\nvt 0.607063 0.541332\nvt 0.604842 0.538861\nvt 0.021617 0.955498\nvt 0.023978 0.961262\nvt 0.020415 0.961226\nvt 0.059113 0.931432\nvt 0.053180 0.932127\nvt 0.052308 0.923005\nvt 0.928249 0.682892\nvt 0.933599 0.680204\nvt 0.933480 0.691624\nvt 0.928515 0.704573\nvt 0.603998 0.547911\nvt 0.602244 0.545229\nvt 0.051383 0.916362\nvt 0.059983 0.915752\nvt 0.059884 0.922008\nvt 0.025724 0.929671\nvt 0.928644 0.710386\nvt 0.055870 0.941687\nvt 0.856102 0.838734\nvt 0.936041 0.736791\nvt 0.732503 0.934302\nvt 0.735780 0.928911\nvt 0.737800 0.932889\nvt 0.606335 0.575285\nvt 0.606462 0.582731\nvt 0.602189 0.581611\nvt 0.728246 0.947949\nvt 0.721174 0.948893\nvt 0.720129 0.942317\nvt 0.736918 0.908023\nvt 0.736166 0.900941\nvt 0.739163 0.900705\nvt 0.605449 0.558242\nvt 0.608166 0.553347\nvt 0.022237 0.950130\nvt 0.025614 0.946761\nvt 0.872763 0.875808\nvt 0.875109 0.882347\nvt 0.737908 0.889924\nvt 0.608717 0.559323\nvt 0.606713 0.568149\nvt 0.603912 0.564266\nvt 0.025934 0.940222\nvt 0.975793 0.907106\nvt 0.978423 0.905217\nvt 0.974598 0.918214\nvt 0.896349 0.818077\nvt 0.890831 0.820239\nvt 0.888901 0.814980\nvt 0.877987 0.876095\nvt 0.024807 0.956495\nvt 0.026523 0.961835\nvt 0.046246 0.977632\nvt 0.039608 0.977632\nvt 0.040975 0.970202\nvt 0.892805 0.829460\nvt 0.896349 0.827768\nvt 0.895714 0.836811\nvt 0.608430 0.590953\nvt 0.605630 0.594041\nvt 0.610650 0.548760\nvt 0.885970 0.810395\nvt 0.891253 0.807178\nvt 0.862414 0.869941\nvt 0.866473 0.874507\nvt 0.735077 0.911124\nvt 0.733436 0.905804\nvt 0.735365 0.906820\nvt 0.874497 0.869263\nvt 0.877549 0.864323\nvt 0.879908 0.868021\nvt 0.714017 0.931000\nvt 0.716125 0.934714\nvt 0.713863 0.936817\nvt 0.861315 0.867021\nvt 0.860519 0.864362\nvt 0.865434 0.867911\nvt 0.727811 0.930213\nvt 0.731752 0.924868\nvt 0.734022 0.926988\nvt 0.713137 0.901339\nvt 0.711539 0.906959\nvt 0.709817 0.905450\nvt 0.732182 0.900192\nvt 0.733513 0.900152\nvt 0.719209 0.890596\nvt 0.715205 0.896811\nvt 0.714113 0.893530\nvt 0.734997 0.920188\nvt 0.735911 0.920906\nvt 0.708642 0.928174\nvt 0.713168 0.926379\nvt 0.987840 0.875095\nvt 0.987840 0.878853\nvt 0.984542 0.877074\nvt 0.778381 0.976665\nvt 0.779407 0.975163\nvt 0.780645 0.981884\nvt 0.059130 0.982144\nvt 0.057982 0.982763\nvt 0.057380 0.970522\nvt 0.876882 0.815037\nvt 0.877619 0.812531\nvt 0.880692 0.815329\nvt 0.713627 0.917474\nvt 0.712220 0.918221\nvt 0.711369 0.910620\nvt 0.713149 0.907353\nvt 0.873084 0.813950\nvt 0.723745 0.886654\nvt 0.725545 0.889868\nvt 0.735730 0.916181\nvt 0.733588 0.919467\nvt 0.872677 0.865545\nvt 0.872017 0.869386\nvt 0.142471 0.989250\nvt 0.140353 0.985092\nvt 0.142471 0.984575\nvt 0.726884 0.906221\nvt 0.726286 0.903974\nvt 0.728291 0.904039\nvt 0.218688 0.961532\nvt 0.218898 0.964390\nvt 0.216485 0.963385\nvt 0.717027 0.890748\nvt 0.717353 0.887457\nvt 0.720708 0.888063\nvt 0.876297 0.847008\nvt 0.873663 0.850927\nvt 0.870898 0.847380\nvt 0.218065 0.969659\nvt 0.214249 0.966896\nvt 0.215641 0.965223\nvt 0.874404 0.839136\nvt 0.879441 0.839949\nvt 0.878021 0.842958\nvt 0.861811 0.854603\nvt 0.864805 0.852334\nvt 0.865794 0.856392\nvt 0.719980 0.895974\nvt 0.722466 0.890252\nvt 0.725359 0.898674\nvt 0.875083 0.836840\nvt 0.880056 0.836774\nvt 0.867207 0.831813\nvt 0.867386 0.833889\nvt 0.865543 0.834789\nvt 0.872369 0.844174\nvt 0.873155 0.841018\nvt 0.885407 0.839779\nvt 0.884711 0.843732\nvt 0.884928 0.835800\nvt 0.875281 0.826146\nvt 0.878371 0.826593\nvt 0.876525 0.831015\nvt 0.729365 0.907196\nvt 0.730176 0.904559\nvt 0.731050 0.908385\nvt 0.731355 0.912121\nvt 0.729112 0.910536\nvt 0.715667 0.971466\nvt 0.712582 0.960496\nvt 0.715667 0.960032\nvt 0.883862 0.831123\nvt 0.879936 0.833530\nvt 0.878589 0.831787\nvt 0.725108 0.885835\nvt 0.727701 0.897843\nvt 0.726429 0.915621\nvt 0.727902 0.913288\nvt 0.729921 0.915412\nvt 0.874286 0.856329\nvt 0.869683 0.855122\nvt 0.729429 0.901090\nvt 0.727114 0.901544\nvt 0.708642 0.964490\nvt 0.464376 0.969496\nvt 0.464442 0.962725\nvt 0.467316 0.962264\nvt 0.871556 0.826584\nvt 0.873992 0.830892\nvt 0.882008 0.847294\nvt 0.865552 0.832914\nvt 0.864656 0.830535\nvt 0.730086 0.932355\nvt 0.737362 0.922895\nvt 0.737839 0.918504\nvt 0.025319 0.951463\nvt 0.027103 0.952294\nvt 0.027353 0.956685\nvt 0.028474 0.962287\nvt 0.735714 0.892153\nvt 0.194691 0.610047\nvt 0.122532 0.574532\nvt 0.891967 0.276883\nvt 0.076692 0.566139\nvt 0.335597 0.205691\nvt 0.582956 0.284656\nvt 0.017379 0.954360\nvt 0.013010 0.951956\nvt 0.941216 0.713889\nvt 0.603128 0.575465\nvt 0.736523 0.912702\nvt 0.711238 0.899620\nvt 0.881176 0.828063\nvt 0.470841 0.971908\nvt 0.467573 0.971400\nvt 0.878603 0.851622\nvt 0.970880 0.484013\nvt 0.973968 0.481311\nvt 0.973968 0.494431\nvt 0.866462 0.870885\nvt 0.879743 0.857895\nvt 0.878337 0.855974\nvt 0.883476 0.851390\nvt 0.727775 0.920885\nvt 0.731935 0.917762\nvt 0.886805 0.825913\nvt 0.886361 0.828066\nvt 0.883022 0.823811\nvt 0.870351 0.863810\nvt 0.873492 0.861542\nvt 0.732640 0.909326\nvt 0.731189 0.904859\nvt 0.732418 0.905233\nvt 0.875648 0.858257\nvt 0.877395 0.861272\nvt 0.883387 0.820688\nvt 0.879110 0.821111\nvt 0.972368 0.888661\nvt 0.969786 0.890359\nvt 0.968479 0.887900\nvt 0.724952 0.923971\nvt 0.729261 0.923432\nvt 0.716537 0.904131\nvt 0.715055 0.908283\nvt 0.730512 0.900953\nvt 0.731256 0.900554\nvt 0.732913 0.913675\nvt 0.733778 0.910203\nvt 0.885399 0.852427\nvt 0.888301 0.847885\nvt 0.871558 0.872324\nvt 0.876166 0.872091\nvt 0.882988 0.873335\nvt 0.885891 0.867916\nvt 0.881778 0.863162\nvt 0.885451 0.857722\nvt 0.888697 0.860422\nvt 0.708816 0.910412\nvt 0.891424 0.854099\nvt 0.724356 0.913501\nvt 0.725285 0.911436\nvt 0.724548 0.901564\nvt 0.218219 0.958636\nvt 0.216516 0.961341\nvt 0.170936 0.958983\nvt 0.172338 0.956570\nvt 0.172338 0.969378\nvt 0.708922 0.918908\nvt 0.889546 0.852016\nvt 0.891429 0.846315\nvt 0.893706 0.847236\nvt 0.717531 0.939862\nvt 0.891838 0.841245\nvt 0.736911 0.917063\nvt 0.781836 0.975676\nvt 0.781836 0.982456\nvt 0.894661 0.838815\nvt 0.890307 0.832348\nvt 0.723391 0.938560\nvt 0.719042 0.937236\nvt 0.884920 0.817139\nvt 0.881800 0.813134\nvt 0.878104 0.809775\nvt 0.976524 0.522890\nvt 0.974723 0.529538\nvt 0.970132 0.528672\nvt 0.867992 0.850389\nvt 0.726329 0.908803\nvt 0.718738 0.893378\nvt 0.721454 0.909172\nvt 0.722660 0.907100\nvt 0.723902 0.905245\nvt 0.723613 0.903103\nvt 0.722652 0.901008\nvt 0.722083 0.898703\nvt 0.720423 0.898807\nvt 0.718888 0.897008\nvt 0.716831 0.895682\nvt 0.859959 0.851738\nvt 0.863200 0.851295\nvt 0.865469 0.849935\nvt 0.867541 0.847643\nvt 0.869383 0.844917\nvt 0.870139 0.841926\nvt 0.869945 0.839329\nvt 0.869911 0.837722\nvt 0.869929 0.836452\nvt 0.209700 0.962966\nvt 0.212393 0.961813\nvt 0.216835 0.959432\nvt 0.213515 0.960243\nvt 0.214573 0.956808\nvt 0.213053 0.955895\nvt 0.215860 0.954664\nvt 0.721571 0.911940\nvt 0.868401 0.841153\nvt 0.867809 0.838882\nvt 0.718681 0.910758\nvt 0.718549 0.907792\nvt 0.866621 0.828280\nvt 0.864698 0.824097\nvt 0.867901 0.843943\nvt 0.871198 0.831093\nvt 0.716028 0.907464\nvt 0.716884 0.905176\nvt 0.713911 0.907523\nvt 0.716105 0.910534\nvt 0.216238 0.956308\nvt 0.214467 0.958929\nvt 0.719476 0.905902\nvt 0.718011 0.901866\nvt 0.720942 0.900728\nvt 0.720877 0.903418\nvt 0.715960 0.897846\nvt 0.714647 0.904893\nvt 0.715460 0.901271\nvt 0.870598 0.833078\nvt 0.864298 0.841991\nvt 0.866535 0.841503\nvt 0.865092 0.845124\nvt 0.866042 0.839049\nvt 0.865994 0.836464\nvt 0.864136 0.839201\nvt 0.718220 0.899085\nvt 0.208146 0.958671\nvt 0.210161 0.957036\nvt 0.207077 0.960590\nvt 0.867258 0.836738\nvt 0.713455 0.901804\nvt 0.714040 0.897659\nvt 0.865991 0.847174\nvt 0.714618 0.894388\nvt 0.495516 0.987648\nvt 0.497103 0.985992\nvt 0.497103 0.990602\nvt 0.862244 0.848817\nvt 0.777354 0.979379\nvt 0.779712 0.982109\nvt 0.484382 0.969109\nvt 0.482020 0.968319\nvt 0.484382 0.956583\nvt 0.876027 0.820258\nvt 0.880132 0.817340\nvt 0.713072 0.910806\nvt 0.714612 0.911985\nvt 0.872613 0.816886\nvt 0.734249 0.914947\nvt 0.862595 0.866464\nvt 0.720640 0.893048\nvt 0.716742 0.899086\nvt 0.714809 0.925317\nvt 0.715722 0.929910\nvt 0.875048 0.864289\nvt 0.729620 0.886939\nvt 0.717559 0.932799\nvt 0.973408 0.887616\nvt 0.970971 0.884924\nvt 0.725343 0.927262\nvt 0.714767 0.902519\nvt 0.728756 0.897716\nvt 0.589881 0.962050\nvt 0.591268 0.961755\nvt 0.591268 0.973005\nvt 0.987225 0.504182\nvt 0.985102 0.501670\nvt 0.987225 0.500273\nvt 0.983231 0.658556\nvt 0.985457 0.657431\nvt 0.985457 0.667252\nvt 0.968973 0.876643\nvt 0.971852 0.875095\nvt 0.971563 0.877775\nvt 0.986440 0.680703\nvt 0.986440 0.686473\nvt 0.983231 0.682735\nvt 0.464617 0.957001\nvt 0.468215 0.956583\nvt 0.911942 0.981994\nvt 0.911942 0.987451\nvt 0.907484 0.985073\nvt 0.890778 0.843993\nvt 0.890221 0.840075\nvt 0.889064 0.834621\nvt 0.871670 0.820914\nvt 0.863438 0.827331\nvt 0.727076 0.917875\nvt 0.048136 0.941933\nvt 0.048053 0.934001\nvt 0.941117 0.682122\nvt 0.939150 0.693880\nvt 0.856285 0.879070\nvt 0.853813 0.861950\nvt 0.039977 0.923127\nvt 0.048348 0.922210\nvt 0.048306 0.925888\nvt 0.543768 0.981379\nvt 0.543854 0.987133\nvt 0.539355 0.987133\nvt 0.944494 0.730242\nvt 0.850219 0.834112\nvt 0.851310 0.846436\nvt 0.847281 0.844016\nvt 0.514960 0.170765\nvt 0.511524 0.177680\nvt 0.506266 0.175976\nvt 0.012289 0.944547\nvt 0.543802 0.176872\nvt 0.683138 0.971648\nvt 0.687765 0.970894\nvt 0.687765 0.980152\nvt 0.808200 0.943919\nvt 0.812999 0.951526\nvt 0.015131 0.935085\nvt 0.006185 0.933456\nvt 0.931195 0.980752\nvt 0.931195 0.987921\nvt 0.927396 0.986637\nvt 0.946214 0.746978\nvt 0.952521 0.740769\nvt 0.549265 0.212198\nvt 0.554484 0.208413\nvt 0.048100 0.917622\nvt 0.949652 0.657431\nvt 0.954687 0.662051\nvt 0.948720 0.665073\nvt 0.855008 0.887625\nvt 0.946877 0.706911\nvt 0.547420 0.219486\nvt 0.553525 0.219244\nvt 0.947519 0.715648\nvt 0.040809 0.943157\nvt 0.039731 0.933938\nvt 0.947284 0.683548\nvt 0.945839 0.694741\nvt 0.852061 0.879443\nvt 0.849330 0.861408\nvt 0.806201 0.950315\nvt 0.799115 0.952564\nvt 0.800462 0.946759\nvt 0.951546 0.731448\nvt 0.005567 0.939038\nvt 0.039608 0.928064\nvt 0.207669 0.964265\nvt 0.211376 0.969419\nvt 0.510502 0.231052\nvt 0.513662 0.233439\nvt 0.865795 0.818374\nvt 0.534307 0.249745\nvt 0.533635 0.236260\nvt 0.540270 0.234996\nvt 0.807188 0.959479\nvt 0.863808 0.820637\nvt 0.519762 0.153389\nvt 0.515805 0.159864\nvt 0.500512 0.229369\nvt 0.507873 0.225466\nvt 0.538724 0.159343\nvt 0.504186 0.184348\nvt 0.549974 0.226720\nvt 0.206011 0.962278\nvt 0.215036 0.972762\nvt 0.218898 0.975592\nvt 0.714855 0.917173\nvt 0.716291 0.923290\nvt 0.887343 0.822331\nvt 0.183611 0.961984\nvt 0.189924 0.963212\nvt 0.189201 0.973218\nvt 0.950153 0.674772\nvt 0.504744 0.216568\nvt 0.735268 0.939091\nvt 0.726162 0.940586\nvt 0.028474 0.918733\nvt 0.020503 0.927464\nvt 0.334737 0.971681\nvt 0.327253 0.968747\nvt 0.334737 0.959729\nvt 0.049808 0.950353\nvt 0.043702 0.951957\nvt 0.985459 0.089516\nvt 0.985956 0.129689\nvt 0.836147 0.789399\nvt 0.821548 0.790919\nvt 0.805987 0.790376\nvt 0.099899 0.735898\nvt 0.100588 0.734406\nvt 0.971203 0.595629\nvt 0.100038 0.733721\nvt 0.605861 0.677550\nvt 0.606957 0.675273\nvt 0.097806 0.733467\nvt 0.603057 0.686361\nvt 0.604708 0.680910\nvt 0.984894 0.745153\nvt 0.602189 0.692431\nvt 0.959056 0.489626\nvt 0.958430 0.491146\nvt 0.605755 0.708541\nvt 0.608601 0.712053\nvt 0.024895 0.980460\nvt 0.023962 0.980807\nvt 0.025532 0.980616\nvt 0.026259 0.980926\nvt 0.131840 0.729096\nvt 0.023045 0.981330\nvt 0.122030 0.734357\nvt 0.361366 0.988801\nvt 0.952379 0.839068\nvt 0.952321 0.832158\nvt 0.953533 0.832434\nvt 0.614314 0.761090\nvt 0.611987 0.755772\nvt 0.613623 0.755210\nvt 0.952556 0.845742\nvt 0.951352 0.839091\nvt 0.079832 0.362963\nvt 0.074761 0.365798\nvt 0.074313 0.363925\nvt 0.084013 0.358540\nvt 0.085324 0.359989\nvt 0.955122 0.851097\nvt 0.953480 0.845349\nvt 0.088928 0.355649\nvt 0.090445 0.356885\nvt 0.958872 0.854424\nvt 0.958604 0.855523\nvt 0.092072 0.353854\nvt 0.094043 0.354557\nvt 0.090565 0.353483\nvt 0.963818 0.859296\nvt 0.964448 0.861356\nvt 0.961727 0.859831\nvt 0.963543 0.857647\nvt 0.961179 0.857948\nvt 0.965990 0.859925\nvt 0.966892 0.861811\nvt 0.965316 0.858132\nvt 0.096686 0.349663\nvt 0.098666 0.348975\nvt 0.098218 0.350641\nvt 0.966408 0.857939\nvt 0.967201 0.859732\nvt 0.098164 0.347131\nvt 0.096067 0.348275\nvt 0.094936 0.350074\nvt 0.096411 0.345360\nvt 0.094386 0.346812\nvt 0.094120 0.348998\nvt 0.083442 0.341492\nvt 0.089169 0.342278\nvt 0.087433 0.344113\nvt 0.082314 0.343361\nvt 0.086542 0.345680\nvt 0.516118 0.945882\nvt 0.515177 0.944325\nvt 0.521301 0.943417\nvt 0.514820 0.942688\nvt 0.521324 0.941814\nvt 0.510217 0.947122\nvt 0.509466 0.945725\nvt 0.508771 0.944321\nvt 0.506338 0.948528\nvt 0.505443 0.947326\nvt 0.504304 0.946078\nvt 0.954661 0.825621\nvt 0.956008 0.826048\nvt 0.611540 0.748671\nvt 0.608983 0.742545\nvt 0.610410 0.741918\nvt 0.958303 0.819545\nvt 0.959529 0.820058\nvt 0.608966 0.736156\nvt 0.610532 0.735420\nvt 0.961634 0.814766\nvt 0.962800 0.815419\nvt 0.610235 0.731259\nvt 0.611203 0.731529\nvt 0.963879 0.811870\nvt 0.964635 0.812905\nvt 0.966484 0.807178\nvt 0.966641 0.808377\nvt 0.965076 0.809064\nvt 0.967033 0.809383\nvt 0.967406 0.810283\nvt 0.966255 0.811069\nvt 0.992231 0.794354\nvt 0.992231 0.795756\nvt 0.991332 0.795653\nvt 0.973999 0.432634\nvt 0.974092 0.431813\nvt 0.975015 0.432064\nvt 0.971985 0.434494\nvt 0.972500 0.433595\nvt 0.973884 0.433903\nvt 0.972767 0.432345\nvt 0.972777 0.431100\nvt 0.085186 0.339359\nvt 0.090938 0.340146\nvt 0.507424 0.942630\nvt 0.513720 0.940760\nvt 0.511995 0.938837\nvt 0.519230 0.937897\nvt 0.098295 0.343631\nvt 0.100240 0.345879\nvt 0.100902 0.348053\nvt 0.100314 0.350283\nvt 0.965258 0.863443\nvt 0.096125 0.355028\nvt 0.096587 0.352513\nvt 0.092111 0.358020\nvt 0.080845 0.364380\nvt 0.612877 0.761596\nvt 0.610245 0.756058\nvt 0.608062 0.750061\nvt 0.609693 0.749418\nvt 0.075447 0.367199\nvt 0.607575 0.736844\nvt 0.170936 0.980562\nvt 0.172449 0.980517\nvt 0.172449 0.987589\nvt 0.093777 0.358852\nvt 0.087154 0.362003\nvt 0.610051 0.727294\nvt 0.611747 0.724672\nvt 0.612587 0.725956\nvt 0.613685 0.723478\nvt 0.614137 0.724925\nvt 0.971560 0.435789\nvt 0.973830 0.434892\nvt 0.936860 0.834492\nvt 0.939341 0.831785\nvt 0.940218 0.833609\nvt 0.611888 0.728497\nvt 0.933354 0.838944\nvt 0.937837 0.836280\nvt 0.935090 0.831677\nvt 0.937756 0.828561\nvt 0.056195 0.363896\nvt 0.055501 0.360625\nvt 0.058491 0.359234\nvt 0.055058 0.357380\nvt 0.058216 0.356395\nvt 0.055404 0.354052\nvt 0.058661 0.353546\nvt 0.047580 0.369435\nvt 0.046829 0.365509\nvt 0.051733 0.365156\nvt 0.046343 0.361029\nvt 0.046340 0.356626\nvt 0.050956 0.357481\nvt 0.046642 0.351612\nvt 0.051315 0.353381\nvt 0.051134 0.361441\nvt 0.043014 0.369896\nvt 0.042433 0.365589\nvt 0.041768 0.360933\nvt 0.040572 0.355640\nvt 0.039397 0.348473\nvt 0.039082 0.370225\nvt 0.038800 0.366066\nvt 0.033579 0.341613\nvt 0.034205 0.350842\nvt 0.037871 0.361665\nvt 0.036345 0.356676\nvt 0.058339 0.741512\nvt 0.059917 0.757313\nvt 0.063104 0.745250\nvt 0.059531 0.745916\nvt 0.059909 0.751112\nvt 0.510005 0.936645\nvt 0.517983 0.935359\nvt 0.505469 0.940787\nvt 0.503366 0.939097\nvt 0.500822 0.943420\nvt 0.088347 0.333665\nvt 0.094864 0.334687\nvt 0.093026 0.337677\nvt 0.104470 0.352395\nvt 0.101314 0.352471\nvt 0.102841 0.349653\nvt 0.106582 0.345772\nvt 0.103422 0.347004\nvt 0.102729 0.344276\nvt 0.101055 0.356276\nvt 0.098326 0.355361\nvt 0.105973 0.348975\nvt 0.095830 0.359884\nvt 0.925715 0.876142\nvt 0.927520 0.875072\nvt 0.930818 0.882085\nvt 0.925770 0.849376\nvt 0.928828 0.842398\nvt 0.930041 0.844253\nvt 0.923803 0.867046\nvt 0.925679 0.867236\nvt 0.923619 0.857485\nvt 0.927677 0.851277\nvt 0.932306 0.836577\nvt 0.925707 0.858756\nvt 0.935606 0.887638\nvt 0.935485 0.890278\nvt 0.929786 0.883908\nvt 0.932380 0.827744\nvt 0.929433 0.832015\nvt 0.926461 0.826520\nvt 0.929512 0.822979\nvt 0.924566 0.820598\nvt 0.928283 0.817567\nvt 0.924605 0.813523\nvt 0.056309 0.737579\nvt 0.053256 0.733190\nvt 0.917272 0.841172\nvt 0.922103 0.832294\nvt 0.925642 0.838155\nvt 0.914190 0.852518\nvt 0.922243 0.846005\nvt 0.918003 0.878997\nvt 0.915365 0.866093\nvt 0.920068 0.866474\nvt 0.924811 0.890399\nvt 0.921979 0.877615\nvt 0.919791 0.855324\nvt 0.114546 0.348388\nvt 0.109903 0.348717\nvt 0.110128 0.344482\nvt 0.112654 0.353808\nvt 0.108004 0.352848\nvt 0.112757 0.338167\nvt 0.114616 0.343107\nvt 0.108414 0.359391\nvt 0.104356 0.357075\nvt 0.101207 0.365402\nvt 0.098207 0.361765\nvt 0.090717 0.370130\nvt 0.091799 0.376738\nvt 0.078344 0.381785\nvt 0.078990 0.374978\nvt 0.104237 0.370296\nvt 0.907484 0.849948\nvt 0.910353 0.833932\nvt 0.918983 0.825523\nvt 0.120399 0.348220\nvt 0.118316 0.355197\nvt 0.120128 0.341340\nvt 0.113347 0.362107\nvt 0.909413 0.865147\nvt 0.114300 0.330017\nvt 0.117762 0.335233\nvt 0.913592 0.880004\nvt 0.918500 0.815800\nvt 0.919335 0.807178\nvt 0.093250 0.383952\nvt 0.079528 0.389770\nvt 0.065798 0.393186\nvt 0.065588 0.384366\nvt 0.054753 0.397759\nvt 0.054562 0.387572\nvt 0.024349 0.710045\nvt 0.036825 0.706841\nvt 0.041037 0.718341\nvt 0.057752 0.407652\nvt 0.910365 0.819277\nvt 0.082906 0.398472\nvt 0.069257 0.402903\nvt 0.021557 0.698256\nvt 0.034046 0.695091\nvt 0.129755 0.439511\nvt 0.121012 0.432766\nvt 0.139038 0.416454\nvt 0.111263 0.453135\nvt 0.102969 0.444496\nvt 0.095287 0.463987\nvt 0.087845 0.453729\nvt 0.124258 0.331858\nvt 0.126965 0.339504\nvt 0.125177 0.356793\nvt 0.127872 0.348287\nvt 0.108003 0.375654\nvt 0.120120 0.325631\nvt 0.119018 0.365713\nvt 0.112725 0.381488\nvt 0.124805 0.369619\nvt 0.132422 0.358475\nvt 0.097010 0.391222\nvt 0.162895 0.402576\nvt 0.154059 0.399142\nvt 0.165140 0.378758\nvt 0.173252 0.407385\nvt 0.159230 0.427868\nvt 0.145251 0.396017\nvt 0.188875 0.364092\nvt 0.182269 0.385489\nvt 0.173382 0.381380\nvt 0.805273 0.142380\nvt 0.817251 0.191778\nvt 0.798778 0.188193\nvt 0.059513 0.801514\nvt 0.058938 0.797673\nvt 0.026675 0.311179\nvt 0.029572 0.316050\nvt 0.023119 0.317464\nvt 0.033961 0.310134\nvt 0.035994 0.313822\nvt 0.026368 0.322351\nvt 0.038007 0.317858\nvt 0.031969 0.320795\nvt 0.012862 0.319944\nvt 0.009301 0.315649\nvt 0.014040 0.314017\nvt 0.059120 0.792617\nvt 0.059741 0.787060\nvt 0.016626 0.324662\nvt 0.017437 0.318683\nvt 0.007346 0.312134\nvt 0.012082 0.310489\nvt 0.041326 0.310151\nvt 0.045949 0.304431\nvt 0.049090 0.306693\nvt 0.021265 0.323450\nvt 0.381102 0.947617\nvt 0.381823 0.943075\nvt 0.383917 0.944477\nvt 0.036359 0.297303\nvt 0.033448 0.295252\nvt 0.037535 0.291664\nvt 0.375987 0.938242\nvt 0.379954 0.936640\nvt 0.380807 0.940150\nvt 0.385705 0.940241\nvt 0.385604 0.935576\nvt 0.385648 0.937763\nvt 0.386703 0.941918\nvt 0.391164 0.940026\nvt 0.391088 0.935224\nvt 0.390939 0.937700\nvt 0.018668 0.294112\nvt 0.017399 0.293099\nvt 0.020894 0.288676\nvt 0.032468 0.288562\nvt 0.028057 0.289822\nvt 0.027046 0.286495\nvt 0.033116 0.291563\nvt 0.031526 0.291188\nvt 0.386057 0.952413\nvt 0.383567 0.948297\nvt 0.385303 0.948661\nvt 0.394185 0.956120\nvt 0.394884 0.958172\nvt 0.389922 0.955763\nvt 0.397515 0.956290\nvt 0.399499 0.958358\nvt 0.385474 0.945582\nvt 0.387935 0.943540\nvt 0.390990 0.942003\nvt 0.391205 0.943849\nvt 0.022859 0.291781\nvt 0.023930 0.293905\nvt 0.020169 0.294998\nvt 0.028081 0.292296\nvt 0.399762 0.955362\nvt 0.395361 0.960863\nvt 0.389307 0.958182\nvt 0.061863 0.808286\nvt 0.384432 0.953508\nvt 0.024311 0.307773\nvt 0.019656 0.312515\nvt 0.032293 0.307036\nvt 0.039031 0.304494\nvt 0.040236 0.307001\nvt 0.042639 0.301673\nvt 0.401163 0.960987\nvt 0.402210 0.956946\nvt 0.060355 0.289914\nvt 0.067146 0.291884\nvt 0.063384 0.302541\nvt 0.394031 0.935159\nvt 0.394057 0.937946\nvt 0.396556 0.954990\nvt 0.398042 0.954095\nvt 0.330142 0.985123\nvt 0.329133 0.983980\nvt 0.330565 0.982819\nvt 0.025016 0.296164\nvt 0.021702 0.296557\nvt 0.387168 0.946925\nvt 0.388643 0.945595\nvt 0.387053 0.951529\nvt 0.387077 0.949073\nvt 0.028286 0.294797\nvt 0.394015 0.954803\nvt 0.390653 0.954239\nvt 0.030558 0.293305\nvt 0.391347 0.945494\nvt 0.074973 0.825072\nvt 0.074587 0.821352\nvt 0.040551 0.256813\nvt 0.044634 0.252081\nvt 0.046172 0.254139\nvt 0.033568 0.235295\nvt 0.034770 0.232760\nvt 0.041343 0.237059\nvt 0.032567 0.285425\nvt 0.037901 0.286433\nvt 0.035589 0.289705\nvt 0.388696 0.951078\nvt 0.040107 0.239577\nvt 0.045295 0.239648\nvt 0.075001 0.839505\nvt 0.075357 0.836090\nvt 0.075589 0.830275\nvt 0.028313 0.296511\nvt 0.395835 0.953958\nvt 0.980198 0.796040\nvt 0.978924 0.796040\nvt 0.978943 0.794354\nvt 0.388651 0.948159\nvt 0.376582 0.992114\nvt 0.376833 0.994219\nvt 0.375350 0.994219\nvt 0.328468 0.986286\nvt 0.327253 0.985503\nvt 0.987406 0.430542\nvt 0.987377 0.427706\nvt 0.988688 0.427958\nvt 0.391630 0.947416\nvt 0.389526 0.947188\nvt 0.388386 0.949198\nvt 0.026269 0.297862\nvt 0.023571 0.298294\nvt 0.987509 0.425423\nvt 0.988928 0.424942\nvt 0.392445 0.950992\nvt 0.392229 0.952414\nvt 0.389900 0.950793\nvt 0.394378 0.952268\nvt 0.394131 0.953680\nvt 0.392208 0.949378\nvt 0.390320 0.949628\nvt 0.394440 0.950442\nvt 0.396413 0.953119\nvt 0.396399 0.951563\nvt 0.394076 0.948607\nvt 0.396006 0.949959\nvt 0.390558 0.948600\nvt 0.043718 0.232958\nvt 0.047948 0.235981\nvt 0.036166 0.228235\nvt 0.687423 0.954862\nvt 0.691759 0.956946\nvt 0.691202 0.958382\nvt 0.072255 0.830134\nvt 0.072317 0.824999\nvt 0.040078 0.254504\nvt 0.035005 0.258113\nvt 0.034692 0.255660\nvt 0.039627 0.252825\nvt 0.034707 0.253540\nvt 0.690388 0.951136\nvt 0.686864 0.948330\nvt 0.688446 0.947386\nvt 0.691759 0.950272\nvt 0.690650 0.946321\nvt 0.693233 0.949381\nvt 0.692463 0.945874\nvt 0.830503 0.984149\nvt 0.829538 0.983505\nvt 0.830856 0.982609\nvt 0.831415 0.984789\nvt 0.831466 0.983509\nvt 0.980229 0.994361\nvt 0.979762 0.993660\nvt 0.980229 0.993458\nvt 0.275708 0.694454\nvt 0.276076 0.696397\nvt 0.275471 0.696457\nvt 0.039098 0.242111\nvt 0.042992 0.243440\nvt 0.042473 0.244859\nvt 0.643957 0.892078\nvt 0.640709 0.892749\nvt 0.643028 0.889549\nvt 0.043989 0.250989\nvt 0.689275 0.952225\nvt 0.692609 0.954032\nvt 0.692063 0.955444\nvt 0.693335 0.952947\nvt 0.695455 0.951753\nvt 0.694272 0.952195\nvt 0.271653 0.699814\nvt 0.272159 0.696831\nvt 0.273594 0.698550\nvt 0.048585 0.245232\nvt 0.046953 0.245914\nvt 0.046666 0.244128\nvt 0.038644 0.244200\nvt 0.042569 0.246250\nvt 0.986305 0.411640\nvt 0.987862 0.409797\nvt 0.987862 0.413555\nvt 0.011662 0.271495\nvt 0.015503 0.269865\nvt 0.016245 0.273152\nvt 0.024577 0.258345\nvt 0.029427 0.256076\nvt 0.029187 0.258529\nvt 0.682004 0.940166\nvt 0.685034 0.944066\nvt 0.682924 0.945030\nvt 0.018844 0.278146\nvt 0.022634 0.275840\nvt 0.025413 0.281877\nvt 0.024470 0.264695\nvt 0.029614 0.261484\nvt 0.030775 0.264345\nvt 0.677675 0.932046\nvt 0.679417 0.936244\nvt 0.676165 0.936895\nvt 0.015820 0.262614\nvt 0.019911 0.260805\nvt 0.019474 0.264200\nvt 0.676243 0.927831\nvt 0.673868 0.932713\nvt 0.012272 0.263832\nvt 0.015334 0.266284\nvt 0.675620 0.923252\nvt 0.672384 0.928402\nvt 0.075726 0.843095\nvt 0.076966 0.846396\nvt 0.072906 0.846215\nvt 0.080764 0.846356\nvt 0.683177 0.935501\nvt 0.682178 0.931583\nvt 0.681121 0.927095\nvt 0.680488 0.922678\nvt 0.023942 0.261491\nvt 0.019584 0.267678\nvt 0.011749 0.267725\nvt 0.071877 0.842638\nvt 0.071334 0.839031\nvt 0.031995 0.243050\nvt 0.032693 0.239437\nvt 0.636636 0.898383\nvt 0.634815 0.897958\nvt 0.638816 0.892777\nvt 0.038666 0.246018\nvt 0.024377 0.237143\nvt 0.023819 0.241885\nvt 0.023911 0.245406\nvt 0.031852 0.245954\nvt 0.033166 0.247933\nvt 0.025175 0.247740\nvt 0.026287 0.249678\nvt 0.014884 0.242424\nvt 0.015269 0.237403\nvt 0.423704 0.942491\nvt 0.427799 0.942839\nvt 0.425897 0.953978\nvt 0.025634 0.232206\nvt 0.018355 0.250896\nvt 0.016976 0.249199\nvt 0.685168 0.949339\nvt 0.832231 0.985344\nvt 0.832004 0.984484\nvt 0.039495 0.247663\nvt 0.679253 0.941046\nvt 0.680623 0.945675\nvt 0.673445 0.937361\nvt 0.670772 0.933251\nvt 0.671508 0.923486\nvt 0.669088 0.928872\nvt 0.639475 0.898286\nvt 0.632500 0.905693\nvt 0.015566 0.246599\nvt 0.019565 0.251944\nvt 0.685863 0.930904\nvt 0.685835 0.926282\nvt 0.685048 0.939353\nvt 0.686713 0.934754\nvt 0.644098 0.897296\nvt 0.634946 0.906174\nvt 0.685385 0.921766\nvt 0.274627 0.691201\nvt 0.276909 0.691215\nvt 0.141655 0.956041\nvt 0.270232 0.697062\nvt 0.271090 0.694057\nvt 0.267566 0.713850\nvt 0.266381 0.716328\nvt 0.264895 0.714961\nvt 0.648509 0.891501\nvt 0.645924 0.889356\nvt 0.650725 0.895367\nvt 0.640923 0.904955\nvt 0.462512 0.797059\nvt 0.465976 0.797202\nvt 0.465688 0.799417\nvt 0.631564 0.913742\nvt 0.628395 0.914471\nvt 0.458712 0.796502\nvt 0.462350 0.798827\nvt 0.265708 0.712604\nvt 0.267022 0.710602\nvt 0.271584 0.703849\nvt 0.269474 0.701599\nvt 0.462921 0.807823\nvt 0.460040 0.807584\nvt 0.465659 0.808060\nvt 0.636632 0.913117\nvt 0.259837 0.706543\nvt 0.654970 0.889638\nvt 0.650864 0.888175\nvt 0.267239 0.690858\nvt 0.268949 0.686944\nvt 0.265124 0.694410\nvt 0.257313 0.709793\nvt 0.281103 0.707357\nvt 0.273853 0.707915\nvt 0.279359 0.695720\nvt 0.275488 0.680696\nvt 0.279181 0.680094\nvt 0.286419 0.696768\nvt 0.283222 0.690253\nvt 0.279352 0.676065\nvt 0.589147 0.935739\nvt 0.591268 0.934607\nvt 0.590769 0.943547\nvt 0.460401 0.815276\nvt 0.463535 0.815338\nvt 0.279015 0.715761\nvt 0.270637 0.715167\nvt 0.251260 0.704935\nvt 0.252420 0.701999\nvt 0.289970 0.685059\nvt 0.289737 0.690386\nvt 0.261032 0.687228\nvt 0.263425 0.683138\nvt 0.750298 0.979881\nvt 0.755694 0.977431\nvt 0.755694 0.983590\nvt 0.457266 0.815132\nvt 0.453990 0.815063\nvt 0.292101 0.696081\nvt 0.288386 0.706686\nvt 0.244955 0.868566\nvt 0.244760 0.880337\nvt 0.237089 0.871932\nvt 0.278973 0.672192\nvt 0.272555 0.676687\nvt 0.588905 0.943116\nvt 0.591268 0.950617\nvt 0.457392 0.822725\nvt 0.460743 0.822356\nvt 0.285610 0.715783\nvt 0.244119 0.703127\nvt 0.294384 0.684064\nvt 0.295298 0.689847\nvt 0.257145 0.680054\nvt 0.257497 0.693142\nvt 0.250705 0.690903\nvt 0.329252 0.877242\nvt 0.357139 0.864841\nvt 0.453832 0.822029\nvt 0.250063 0.674531\nvt 0.254152 0.684307\nvt 0.241465 0.686833\nvt 0.252476 0.793751\nvt 0.250757 0.727466\nvt 0.242853 0.706082\nvt 0.233694 0.701334\nvt 0.238252 0.863945\nvt 0.237387 0.848248\nvt 0.246000 0.852260\nvt 0.230741 0.867565\nvt 0.266638 0.824015\nvt 0.256437 0.823320\nvt 0.279598 0.666416\nvt 0.269485 0.672636\nvt 0.461635 0.831185\nvt 0.257563 0.854968\nvt 0.454908 0.831871\nvt 0.458370 0.831320\nvt 0.258810 0.873531\nvt 0.255254 0.884993\nvt 0.245288 0.700524\nvt 0.235527 0.698571\nvt 0.979147 0.939939\nvt 0.974598 0.934893\nvt 0.979147 0.929353\nvt 0.464340 0.850070\nvt 0.450010 0.832271\nvt 0.457613 0.852020\nvt 0.461724 0.851036\nvt 0.827773 0.947143\nvt 0.830333 0.947423\nvt 0.833507 0.968408\nvt 0.229496 0.847241\nvt 0.231268 0.861103\nvt 0.224165 0.859183\nvt 0.235965 0.665936\nvt 0.241613 0.662203\nvt 0.245648 0.680207\nvt 0.230609 0.669812\nvt 0.446023 0.831813\nvt 0.453756 0.852822\nvt 0.242986 0.823796\nvt 0.264137 0.892120\nvt 0.253612 0.889372\nvt 0.279621 0.653950\nvt 0.266401 0.666413\nvt 0.232882 0.824885\nvt 0.517130 0.974109\nvt 0.511670 0.968530\nvt 0.517130 0.962462\nvt 0.278392 0.635833\nvt 0.263539 0.654954\nvt 0.471842 0.871972\nvt 0.464912 0.875773\nvt 0.469470 0.874035\nvt 0.223405 0.678340\nvt 0.221664 0.680198\nvt 0.209095 0.653749\nvt 0.224575 0.825723\nvt 0.221072 0.847492\nvt 0.226547 0.643867\nvt 0.232651 0.640491\nvt 0.221739 0.646149\nvt 0.219832 0.683489\nvt 0.206976 0.656495\nvt 0.226866 0.795003\nvt 0.238742 0.793971\nvt 0.218247 0.741972\nvt 0.080635 0.865756\nvt 0.278187 0.605395\nvt 0.259304 0.634146\nvt 0.486490 0.890803\nvt 0.597623 0.387510\nvt 0.602767 0.387820\nvt 0.596114 0.419896\nvt 0.608012 0.388415\nvt 0.603007 0.420456\nvt 0.589699 0.388869\nvt 0.592324 0.388134\nvt 0.582649 0.419540\nvt 0.218126 0.797280\nvt 0.215412 0.827141\nvt 0.225193 0.607528\nvt 0.233151 0.605316\nvt 0.219689 0.609480\nvt 0.080156 0.861564\nvt 0.080219 0.858685\nvt 0.589287 0.419583\nvt 0.605523 0.420199\nvt 0.602908 0.457025\nvt 0.593004 0.458044\nvt 0.599529 0.457108\nvt 0.232132 0.732205\nvt 0.577105 0.420928\nvt 0.580459 0.458172\nvt 0.614430 0.929030\nvt 0.602564 0.929030\nvt 0.608291 0.891095\nvt 0.233231 0.574618\nvt 0.241426 0.572242\nvt 0.560758 0.425453\nvt 0.565682 0.423598\nvt 0.563967 0.461307\nvt 0.586798 0.458078\nvt 0.332019 0.854708\nvt 0.327253 0.838203\nvt 0.353568 0.845643\nvt 0.211253 0.757920\nvt 0.266272 0.568363\nvt 0.279897 0.571516\nvt 0.562961 0.499028\nvt 0.556272 0.501716\nvt 0.552254 0.466203\nvt 0.558391 0.463229\nvt 0.569070 0.497448\nvt 0.588848 0.494745\nvt 0.584405 0.494541\nvt 0.357268 0.831808\nvt 0.271719 0.542075\nvt 0.279801 0.541301\nvt 0.594622 0.494631\nvt 0.598757 0.494246\nvt 0.575518 0.459220\nvt 0.328493 0.822208\nvt 0.334628 0.809162\nvt 0.379621 0.826929\nvt 0.367023 0.821364\nvt 0.383125 0.837832\nvt 0.354665 0.857132\nvt 0.965822 0.659098\nvt 0.972097 0.657431\nvt 0.972097 0.695647\nvt 0.574894 0.524116\nvt 0.578670 0.522251\nvt 0.575637 0.495086\nvt 0.583251 0.522016\nvt 0.380356 0.832285\nvt 0.385032 0.804809\nvt 0.382075 0.811199\nvt 0.371331 0.793456\nvt 0.601758 0.520514\nvt 0.598346 0.521822\nvt 0.594486 0.521948\nvt 0.970573 0.609159\nvt 0.974407 0.637520\nvt 0.969491 0.637520\nvt 0.386606 0.844259\nvt 0.591198 0.522567\nvt 0.588099 0.522638\nvt 0.395413 0.810858\nvt 0.399236 0.809594\nvt 0.403112 0.812086\nvt 0.380530 0.822774\nvt 0.393108 0.809755\nvt 0.082048 0.472198\nvt 0.075182 0.461062\nvt 0.430072 0.954057\nvt 0.055193 0.243678\nvt 0.051173 0.244638\nvt 0.051426 0.240876\nvt 0.045612 0.227702\nvt 0.050954 0.231508\nvt 0.829988 0.981777\nvt 0.864016 0.340249\nvt 0.854169 0.347506\nvt 0.850892 0.334673\nvt 0.805050 0.410675\nvt 0.798396 0.419964\nvt 0.790738 0.407017\nvt 0.221971 0.206372\nvt 0.217544 0.225127\nvt 0.204080 0.217035\nvt 0.226270 0.185002\nvt 0.208701 0.199049\nvt 0.231886 0.165622\nvt 0.213949 0.178279\nvt 0.236267 0.147847\nvt 0.221055 0.159259\nvt 0.242942 0.129965\nvt 0.225847 0.140765\nvt 0.245365 0.107368\nvt 0.256822 0.114295\nvt 0.196780 0.192421\nvt 0.192578 0.208327\nvt 0.181569 0.201587\nvt 0.202569 0.172284\nvt 0.186312 0.187858\nvt 0.210253 0.153325\nvt 0.192556 0.168884\nvt 0.216305 0.135014\nvt 0.200357 0.147618\nvt 0.223050 0.117747\nvt 0.206332 0.129858\nvt 0.222194 0.094071\nvt 0.233378 0.100507\nvt 0.170001 0.215999\nvt 0.181868 0.227856\nvt 0.172276 0.232738\nvt 0.857632 0.362449\nvt 0.867228 0.354960\nvt 0.872265 0.372421\nvt 0.863170 0.378768\nvt 0.880217 0.392901\nvt 0.871705 0.398303\nvt 0.890104 0.412954\nvt 0.898865 0.427995\nvt 0.890655 0.433105\nvt 0.156519 0.113277\nvt 0.152828 0.132458\nvt 0.143577 0.131859\nvt 0.151835 0.092605\nvt 0.147706 0.112546\nvt 0.139935 0.111901\nvt 0.905914 0.440872\nvt 0.121926 0.958303\nvt 0.129218 0.956041\nvt 0.129218 0.975953\nvt 0.161020 0.093687\nvt 0.134125 0.131460\nvt 0.478460 0.548266\nvt 0.473046 0.554718\nvt 0.456449 0.548318\nvt 0.161930 0.134334\nvt 0.155986 0.158182\nvt 0.146090 0.155454\nvt 0.155886 0.073327\nvt 0.212801 0.111739\nvt 0.202388 0.107097\nvt 0.210762 0.088638\nvt 0.195819 0.124880\nvt 0.190072 0.143175\nvt 0.811431 0.400606\nvt 0.798663 0.397610\nvt 0.140515 0.447711\nvt 0.148376 0.421261\nvt 0.233044 0.123890\nvt 0.238911 0.192396\nvt 0.268788 0.119428\nvt 0.253318 0.135934\nvt 0.245646 0.154522\nvt 0.242610 0.172665\nvt 0.706734 0.573375\nvt 0.719774 0.551358\nvt 0.727609 0.561452\nvt 0.278711 0.122740\nvt 0.262979 0.140066\nvt 0.251468 0.178677\nvt 0.253900 0.160421\nvt 0.716788 0.587946\nvt 0.738765 0.571252\nvt 0.659741 0.138789\nvt 0.671537 0.142253\nvt 0.654716 0.157228\nvt 0.733863 0.542645\nvt 0.743317 0.550076\nvt 0.737423 0.526073\nvt 0.745712 0.532996\nvt 0.270480 0.143935\nvt 0.731951 0.598373\nvt 0.751334 0.578300\nvt 0.683418 0.151136\nvt 0.665203 0.164652\nvt 0.754813 0.555337\nvt 0.757186 0.538507\nvt 0.745889 0.515616\nvt 0.758322 0.521662\nvt 0.744391 0.605626\nvt 0.762119 0.583486\nvt 0.695450 0.163876\nvt 0.767074 0.559974\nvt 0.770112 0.542512\nvt 0.772459 0.525435\nvt 0.757196 0.610959\nvt 0.773771 0.588935\nvt 0.674302 0.175256\nvt 0.705592 0.182567\nvt 0.780175 0.564744\nvt 0.785226 0.545750\nvt 0.656976 0.183087\nvt 0.683244 0.191375\nvt 0.792034 0.620518\nvt 0.798328 0.595892\nvt 0.715617 0.224514\nvt 0.805551 0.572656\nvt 0.813140 0.551379\nvt 0.672152 0.224147\nvt 0.691195 0.225750\nvt 0.803820 0.047638\nvt 0.819817 0.043235\nvt 0.818405 0.086149\nvt 0.841119 0.041475\nvt 0.838376 0.085448\nvt 0.671330 0.815345\nvt 0.690738 0.837493\nvt 0.663134 0.852921\nvt 0.281174 0.385734\nvt 0.297650 0.405241\nvt 0.282981 0.418068\nvt 0.706372 0.854026\nvt 0.677478 0.870479\nvt 0.314218 0.424089\nvt 0.297155 0.438571\nvt 0.183900 0.303137\nvt 0.195350 0.301504\nvt 0.195641 0.321156\nvt 0.185161 0.321540\nvt 0.194003 0.342836\nvt 0.246036 0.453943\nvt 0.243701 0.429055\nvt 0.263314 0.426999\nvt 0.180234 0.285959\nvt 0.194131 0.283429\nvt 0.706202 0.679784\nvt 0.702683 0.695608\nvt 0.683415 0.686598\nvt 0.183781 0.341364\nvt 0.276175 0.505901\nvt 0.235074 0.511823\nvt 0.243233 0.485765\nvt 0.276824 0.477286\nvt 0.725661 0.688515\nvt 0.159880 0.219715\nvt 0.160229 0.240524\nvt 0.236638 0.216792\nvt 0.235086 0.236834\nvt 0.702685 0.613073\nvt 0.693379 0.591423\nvt 0.723406 0.621505\nvt 0.737484 0.626787\nvt 0.751991 0.631570\nvt 0.768226 0.614635\nvt 0.764859 0.634713\nvt 0.096181 0.307938\nvt 0.106122 0.312605\nvt 0.101805 0.319913\nvt 0.103280 0.339715\nvt 0.105447 0.342615\nvt 0.089554 0.329031\nvt 0.096905 0.330712\nvt 0.099920 0.336928\nvt 0.102549 0.333729\nvt 0.109823 0.334014\nvt 0.108710 0.340708\nvt 0.090609 0.323166\nvt 0.099135 0.325694\nvt 0.092442 0.316144\nvt 0.934749 0.893703\nvt 0.927724 0.887251\nvt 0.935050 0.824616\nvt 0.198392 0.247376\nvt 0.182576 0.247387\nvt 0.906929 0.423523\nvt 0.491003 0.559886\nvt 0.509373 0.564524\nvt 0.848029 0.326680\nvt 0.858110 0.320019\nvt 0.860843 0.328416\nvt 0.841002 0.344283\nvt 0.832011 0.355482\nvt 0.829217 0.344630\nvt 0.844574 0.357383\nvt 0.819882 0.354443\nvt 0.822975 0.367015\nvt 0.835151 0.368051\nvt 0.837527 0.406619\nvt 0.845537 0.397592\nvt 0.855318 0.414198\nvt 0.136241 0.154486\nvt 0.462572 0.540282\nvt 0.470359 0.532323\nvt 0.484864 0.542596\nvt 0.170966 0.095521\nvt 0.166197 0.074060\nvt 0.165872 0.115005\nvt 0.854389 0.388076\nvt 0.863336 0.405905\nvt 0.848287 0.372466\nvt 0.830830 0.392882\nvt 0.806425 0.387693\nvt 0.791933 0.380017\nvt 0.836937 0.436421\nvt 0.833312 0.444171\nvt 0.822050 0.432056\nvt 0.179962 0.139532\nvt 0.185278 0.120639\nvt 0.191125 0.102409\nvt 0.198934 0.084129\nvt 0.812491 0.421953\nvt 0.816731 0.440213\nvt 0.199649 0.230684\nvt 0.825772 0.423512\nvt 0.672553 0.574036\nvt 0.652859 0.588646\nvt 0.661712 0.565538\nvt 0.177041 0.210878\nvt 0.213918 0.240204\nvt 0.269745 0.395285\nvt 0.261034 0.375783\nvt 0.269864 0.367883\nvt 0.253503 0.359416\nvt 0.204425 0.299679\nvt 0.655331 0.792028\nvt 0.646185 0.827707\nvt 0.207402 0.267698\nvt 0.191338 0.267678\nvt 0.723345 0.791408\nvt 0.709304 0.816005\nvt 0.689832 0.799744\nvt 0.680237 0.619948\nvt 0.677893 0.602348\nvt 0.790944 0.659542\nvt 0.790320 0.641390\nvt 0.794016 0.690857\nvt 0.796818 0.707263\nvt 0.780517 0.704185\nvt 0.778248 0.687281\nvt 0.762808 0.699712\nvt 0.748097 0.647941\nvt 0.732511 0.643555\nvt 0.717599 0.639392\nvt 0.698145 0.634541\nvt 0.780340 0.618286\nvt 0.777373 0.638670\nvt 0.723185 0.706311\nvt 0.718809 0.729831\nvt 0.697531 0.717959\nvt 0.793931 0.757226\nvt 0.678627 0.706375\nvt 0.761206 0.719338\nvt 0.757234 0.747054\nvt 0.738564 0.739692\nvt 0.663725 0.695308\nvt 0.742675 0.713436\nvt 0.672921 0.727916\nvt 0.665233 0.744393\nvt 0.650540 0.726278\nvt 0.732409 0.766241\nvt 0.704538 0.779731\nvt 0.712922 0.756032\nvt 0.684277 0.763992\nvt 0.787098 0.786858\nvt 0.799329 0.820138\nvt 0.692305 0.743178\nvt 0.750711 0.774583\nvt 0.740536 0.801267\nvt 0.726983 0.827543\nvt 0.642833 0.736488\nvt 0.654690 0.757316\nvt 0.641984 0.768435\nvt 0.671247 0.779167\nvt 0.857000 0.195972\nvt 0.201036 0.509223\nvt 0.226370 0.530162\nvt 0.153708 0.457373\nvt 0.136126 0.476559\nvt 0.171622 0.435075\nvt 0.825006 0.141870\nvt 0.745148 0.694851\nvt 0.026127 0.627684\nvt 0.121073 0.490394\nvt 0.106564 0.476299\nvt 0.122330 0.463877\nvt 0.011810 0.632056\nvt 0.026539 0.640359\nvt 0.168617 0.468367\nvt 0.185234 0.442498\nvt 0.184083 0.413262\nvt 0.779740 0.724282\nvt 0.222676 0.453277\nvt 0.152017 0.489709\nvt 0.797813 0.728659\nvt 0.839046 0.382580\nvt 0.826623 0.379513\nvt 0.806725 0.430479\nvt 0.675239 0.587489\nvt 0.817424 0.412207\nvt 0.188247 0.219334\nvt 0.800443 0.437366\nvt 0.658772 0.601298\nvt 0.668121 0.623556\nvt 0.665246 0.611444\nvt 0.669123 0.679145\nvt 0.655420 0.687113\nvt 0.293773 0.348301\nvt 0.292544 0.362307\nvt 0.278494 0.351736\nvt 0.288587 0.374603\nvt 0.212300 0.484720\nvt 0.186834 0.477055\nvt 0.202164 0.448633\nvt 0.210644 0.424704\nvt 0.172229 0.501078\nvt 0.033506 0.570411\nvt 0.045219 0.566708\nvt 0.793890 0.569745\nvt 0.801049 0.549502\nvt 0.843484 0.141930\nvt 0.675607 0.654247\nvt 0.673107 0.664785\nvt 0.664235 0.661981\nvt 0.847133 0.230795\nvt 0.854973 0.259470\nvt 0.833658 0.253919\nvt 0.011627 0.711212\nvt 0.029496 0.591012\nvt 0.775039 0.752798\nvt 0.190535 0.526281\nvt 0.159796 0.517678\nvt 0.786837 0.593080\nvt 0.845872 0.008757\nvt 0.867430 0.233807\nvt 0.687859 0.209877\nvt 0.712561 0.204685\nvt 0.777607 0.816012\nvt 0.758381 0.809245\nvt 0.808991 0.529895\nvt 0.824088 0.531620\nvt 0.837451 0.194965\nvt 0.138824 0.505358\nvt 0.014854 0.720894\nvt 0.422308 0.954146\nvt 0.424691 0.963439\nvt 0.429000 0.963057\nvt 0.092225 0.882463\nvt 0.838496 0.334800\nvt 0.053067 0.349187\nvt 0.048764 0.346904\nvt 0.052850 0.342222\nvt 0.817520 0.343646\nvt 0.826770 0.335878\nvt 0.836165 0.327405\nvt 0.845507 0.319423\nvt 0.855837 0.313399\nvt 0.044043 0.302577\nvt 0.173964 0.163442\nvt 0.182747 0.165497\nvt 0.176234 0.184759\nvt 0.827729 0.451765\nvt 0.137447 0.175679\nvt 0.873627 0.423973\nvt 0.866437 0.431605\nvt 0.881760 0.417584\nvt 0.929691 0.958757\nvt 0.936184 0.969614\nvt 0.927396 0.969614\nvt 0.280231 0.341243\nvt 0.268750 0.342695\nvt 0.026669 0.610715\nvt 0.012259 0.615962\nvt 0.014740 0.597031\nvt 0.093030 0.485971\nvt 0.873694 0.260246\nvt 0.744381 0.837189\nvt 0.722391 0.865451\nvt 0.768101 0.781379\nvt 0.664200 0.196201\nvt 0.826270 0.226103\nvt 0.115984 0.524990\nvt 0.125983 0.516809\nvt 0.145587 0.529041\nvt 0.955471 0.839851\nvt 0.955520 0.832990\nvt 0.957930 0.833545\nvt 0.962812 0.854929\nvt 0.964611 0.855820\nvt 0.963732 0.856305\nvt 0.961715 0.853766\nvt 0.961398 0.855070\nvt 0.959070 0.850328\nvt 0.959695 0.853735\nvt 0.956597 0.845477\nvt 0.957026 0.850511\nvt 0.962847 0.795758\nvt 0.961393 0.794743\nvt 0.962847 0.794129\nvt 0.965567 0.814438\nvt 0.966992 0.813328\nvt 0.967432 0.815969\nvt 0.975067 0.430473\nvt 0.154027 0.988945\nvt 0.154974 0.987873\nvt 0.155056 0.990431\nvt 0.976128 0.429882\nvt 0.976242 0.432014\nvt 0.511085 0.949535\nvt 0.510711 0.948490\nvt 0.516768 0.947309\nvt 0.964004 0.816126\nvt 0.522006 0.947269\nvt 0.516474 0.948345\nvt 0.960896 0.820444\nvt 0.957620 0.826425\nvt 0.081919 0.347052\nvt 0.081401 0.346226\nvt 0.085972 0.346881\nvt 0.090227 0.348907\nvt 0.090030 0.348157\nvt 0.091702 0.348887\nvt 0.093403 0.350863\nvt 0.092769 0.350069\nvt 0.093163 0.349580\nvt 0.954587 0.845129\nvt 0.965945 0.855923\nvt 0.966118 0.856610\nvt 0.965367 0.856777\nvt 0.965434 0.856019\nvt 0.103693 0.945240\nvt 0.098561 0.946030\nvt 0.097764 0.940293\nvt 0.106250 0.926371\nvt 0.100083 0.927546\nvt 0.101744 0.923377\nvt 0.273906 0.918464\nvt 0.273155 0.917481\nvt 0.278088 0.915380\nvt 0.962240 0.841484\nvt 0.963960 0.847806\nvt 0.959406 0.846423\nvt 0.965575 0.821771\nvt 0.962574 0.821240\nvt 0.964815 0.817658\nvt 0.105575 0.950647\nvt 0.100313 0.950897\nvt 0.272642 0.916798\nvt 0.278062 0.914796\nvt 0.285751 0.922835\nvt 0.281028 0.921760\nvt 0.285437 0.919036\nvt 0.684329 0.991290\nvt 0.684329 0.994064\nvt 0.683138 0.993378\nvt 0.041293 0.991902\nvt 0.039608 0.990168\nvt 0.041293 0.988770\nvt 0.106145 0.953123\nvt 0.106161 0.954467\nvt 0.102362 0.955392\nvt 0.272272 0.916088\nvt 0.278378 0.914022\nvt 0.277239 0.920450\nvt 0.281717 0.917980\nvt 0.975246 0.425223\nvt 0.976242 0.424942\nvt 0.975874 0.427757\nvt 0.109883 0.917804\nvt 0.103508 0.919713\nvt 0.104026 0.918391\nvt 0.275283 0.919392\nvt 0.280020 0.917016\nvt 0.974436 0.425281\nvt 0.974912 0.428227\nvt 0.962031 0.834954\nvt 0.959721 0.826988\nvt 0.278802 0.916123\nvt 0.958111 0.840689\nvt 0.993783 0.831287\nvt 0.993783 0.834110\nvt 0.992700 0.833759\nvt 0.963248 0.827409\nvt 0.461056 0.923749\nvt 0.457138 0.917545\nvt 0.462981 0.917092\nvt 0.484382 0.913076\nvt 0.483954 0.919392\nvt 0.475794 0.916012\nvt 0.276737 0.907241\nvt 0.280893 0.904460\nvt 0.282664 0.911566\nvt 0.993354 0.807178\nvt 0.993365 0.810361\nvt 0.992465 0.810361\nvt 0.287235 0.929270\nvt 0.291146 0.924638\nvt 0.464535 0.928522\nvt 0.465625 0.922107\nvt 0.482494 0.924756\nvt 0.475516 0.921692\nvt 0.994106 0.854568\nvt 0.994433 0.857629\nvt 0.993744 0.857629\nvt 0.282126 0.926594\nvt 0.471799 0.926725\nvt 0.470047 0.933517\nvt 0.467460 0.931726\nvt 0.468357 0.925067\nvt 0.481270 0.927912\nvt 0.479752 0.930489\nvt 0.475214 0.925227\nvt 0.929285 0.795851\nvt 0.927255 0.795851\nvt 0.927640 0.793497\nvt 0.277971 0.924020\nvt 0.472954 0.927198\nvt 0.271706 0.912365\nvt 0.273117 0.910084\nvt 0.274361 0.914245\nvt 0.184883 0.984850\nvt 0.185464 0.987786\nvt 0.183611 0.988596\nvt 0.474379 0.934399\nvt 0.472272 0.934490\nvt 0.454296 0.911343\nvt 0.460732 0.911309\nvt 0.186899 0.984356\nvt 0.186899 0.987578\nvt 0.453043 0.906383\nvt 0.476835 0.933061\nvt 0.473750 0.927145\nvt 0.471592 0.938712\nvt 0.450887 0.922142\nvt 0.448375 0.915666\nvt 0.270510 0.925309\nvt 0.268310 0.922146\nvt 0.272800 0.919951\nvt 0.010439 0.981115\nvt 0.005567 0.979441\nvt 0.010439 0.973426\nvt 0.477986 0.937878\nvt 0.474546 0.938740\nvt 0.825063 0.897643\nvt 0.824497 0.889884\nvt 0.833192 0.890486\nvt 0.825204 0.916188\nvt 0.832530 0.914305\nvt 0.831613 0.919625\nvt 0.266813 0.919346\nvt 0.271717 0.918046\nvt 0.288646 0.937536\nvt 0.283044 0.934952\nvt 0.455477 0.928834\nvt 0.823777 0.884777\nvt 0.831853 0.885495\nvt 0.265954 0.916445\nvt 0.271112 0.916030\nvt 0.278084 0.931662\nvt 0.468357 0.938133\nvt 0.464573 0.936655\nvt 0.460174 0.933507\nvt 0.484382 0.932779\nvt 0.481818 0.935497\nvt 0.265640 0.913941\nvt 0.270749 0.914328\nvt 0.273730 0.928410\nvt 0.267378 0.908594\nvt 0.274767 0.921796\nvt 0.283991 0.942769\nvt 0.278807 0.939856\nvt 0.451377 0.933330\nvt 0.816757 0.890036\nvt 0.816574 0.884835\nvt 0.262644 0.921221\nvt 0.261710 0.917956\nvt 0.273969 0.935978\nvt 0.466642 0.942418\nvt 0.461874 0.940791\nvt 0.456713 0.938158\nvt 0.988481 0.398659\nvt 0.986305 0.393062\nvt 0.988481 0.392139\nvt 0.261242 0.914776\nvt 0.269871 0.932209\nvt 0.261949 0.909244\nvt 0.266133 0.911538\nvt 0.266688 0.928577\nvt 0.849621 0.988783\nvt 0.847281 0.985361\nvt 0.849621 0.983271\nvt 0.870782 0.936690\nvt 0.877691 0.932185\nvt 0.880195 0.936639\nvt 0.264222 0.924772\nvt 0.886313 0.930916\nvt 0.803608 0.500773\nvt 0.801681 0.504240\nvt 0.798419 0.502189\nvt 0.446023 0.926737\nvt 0.817677 0.917418\nvt 0.824751 0.922078\nvt 0.884147 0.926703\nvt 0.875656 0.928118\nvt 0.805262 0.498000\nvt 0.799586 0.498267\nvt 0.860995 0.935445\nvt 0.868660 0.932573\nvt 0.810890 0.890551\nvt 0.816639 0.898093\nvt 0.812119 0.917591\nvt 0.818132 0.923002\nvt 0.259748 0.922920\nvt 0.275290 0.942965\nvt 0.454249 0.940825\nvt 0.448711 0.936220\nvt 0.811551 0.885355\nvt 0.258858 0.919208\nvt 0.270904 0.938873\nvt 0.465031 0.945070\nvt 0.460010 0.943620\nvt 0.796226 0.491725\nvt 0.794948 0.495256\nvt 0.791946 0.492839\nvt 0.258061 0.915966\nvt 0.266937 0.935101\nvt 0.808957 0.500222\nvt 0.812795 0.501847\nvt 0.810252 0.504368\nvt 0.257989 0.913004\nvt 0.258576 0.910171\nvt 0.263865 0.930988\nvt 0.806972 0.502705\nvt 0.261549 0.926925\nvt 0.261840 0.932712\nvt 0.259456 0.928356\nvt 0.257776 0.924303\nvt 0.892644 0.483676\nvt 0.893950 0.487269\nvt 0.892062 0.488163\nvt 0.802509 0.492853\nvt 0.806874 0.495799\nvt 0.895352 0.490461\nvt 0.897117 0.493743\nvt 0.895240 0.494468\nvt 0.813264 0.923190\nvt 0.809954 0.923267\nvt 0.808256 0.917865\nvt 0.810562 0.898773\nvt 0.806253 0.899063\nvt 0.806975 0.891117\nvt 0.883847 0.915291\nvt 0.886077 0.917947\nvt 0.881715 0.923202\nvt 0.808045 0.886069\nvt 0.859655 0.932066\nvt 0.256708 0.920498\nvt 0.810816 0.497970\nvt 0.817246 0.503294\nvt 0.814965 0.499527\nvt 0.797777 0.489069\nvt 0.793203 0.488752\nvt 0.458323 0.945444\nvt 0.452685 0.942756\nvt 0.853472 0.933713\nvt 0.866683 0.929177\nvt 0.873444 0.924861\nvt 0.879628 0.920002\nvt 0.272407 0.944963\nvt 0.268299 0.940714\nvt 0.264646 0.936864\nvt 0.814503 0.926891\nvt 0.811369 0.926900\nvt 0.818709 0.926900\nvt 0.824684 0.925811\nvt 0.269922 0.905205\nvt 0.266085 0.942016\nvt 0.262804 0.937982\nvt 0.819664 0.500958\nvt 0.816860 0.497124\nvt 0.824623 0.501457\nvt 0.821759 0.498084\nvt 0.794674 0.486006\nvt 0.792300 0.482967\nvt 0.794480 0.480405\nvt 0.802586 0.899527\nvt 0.803530 0.891790\nvt 0.858388 0.928839\nvt 0.894714 0.482410\nvt 0.895835 0.486204\nvt 0.877294 0.917340\nvt 0.881505 0.913009\nvt 0.852668 0.930577\nvt 0.897499 0.489006\nvt 0.260002 0.933923\nvt 0.883808 0.908779\nvt 0.864960 0.925915\nvt 0.808728 0.493669\nvt 0.900430 0.497985\nvt 0.902713 0.496400\nvt 0.907711 0.500501\nvt 0.257779 0.929728\nvt 0.804243 0.490501\nvt 0.812675 0.495742\nvt 0.804857 0.886681\nvt 0.256235 0.925785\nvt 0.871503 0.921785\nvt 0.899274 0.492182\nvt 0.891892 0.479718\nvt 0.893816 0.478506\nvt 0.898389 0.484613\nvt 0.899803 0.487375\nvt 0.260639 0.939364\nvt 0.258197 0.935356\nvt 0.857060 0.925141\nvt 0.806696 0.487753\nvt 0.810790 0.490810\nvt 0.905300 0.494160\nvt 0.256121 0.931463\nvt 0.869206 0.918572\nvt 0.874576 0.914600\nvt 0.814726 0.492973\nvt 0.792675 0.475844\nvt 0.795945 0.473138\nvt 0.797440 0.477365\nvt 0.893340 0.474445\nvt 0.895982 0.473081\nvt 0.896378 0.477048\nvt 0.818962 0.494162\nvt 0.826439 0.498539\nvt 0.823594 0.494994\nvt 0.901911 0.490176\nvt 0.897064 0.480892\nvt 0.878750 0.910466\nvt 0.881099 0.906618\nvt 0.851668 0.927073\nvt 0.799226 0.480594\nvt 0.799115 0.900279\nvt 0.800114 0.892627\nvt 0.882625 0.903209\nvt 0.863092 0.922313\nvt 0.813960 0.486582\nvt 0.910373 0.498023\nvt 0.908988 0.490828\nvt 0.896402 0.469195\nvt 0.900494 0.468495\nvt 0.899977 0.471836\nvt 0.866402 0.914338\nvt 0.871285 0.910941\nvt 0.817468 0.488321\nvt 0.800751 0.469748\nvt 0.801824 0.473769\nvt 0.900186 0.475510\nvt 0.821551 0.489395\nvt 0.828040 0.495209\nvt 0.825613 0.490161\nvt 0.905581 0.487587\nvt 0.901356 0.479068\nvt 0.874727 0.907505\nvt 0.877081 0.904113\nvt 0.851139 0.921921\nvt 0.803328 0.476565\nvt 0.795383 0.467444\nvt 0.800243 0.464900\nvt 0.902471 0.482486\nvt 0.878514 0.900993\nvt 0.860908 0.917611\nvt 0.903594 0.485114\nvt 0.898012 0.465363\nvt 0.902047 0.464943\nvt 0.855822 0.920218\nvt 0.810098 0.483429\nvt 0.920224 0.481113\nvt 0.920972 0.482967\nvt 0.914048 0.486588\nvt 0.909958 0.482001\nvt 0.908999 0.479789\nvt 0.919460 0.477286\nvt 0.855025 0.912836\nvt 0.851409 0.914007\nvt 0.854800 0.905081\nvt 0.917468 0.467879\nvt 0.907257 0.467939\nvt 0.908630 0.465382\nvt 0.921924 0.491200\nvt 0.923412 0.486481\nvt 0.926388 0.486801\nvt 0.870702 0.901356\nvt 0.862940 0.900910\nvt 0.862704 0.899247\nvt 0.927788 0.485394\nvt 0.931154 0.490708\nvt 0.927131 0.491815\nvt 0.922553 0.484750\nvt 0.917644 0.489150\nvt 0.860779 0.905029\nvt 0.863069 0.908966\nvt 0.858967 0.911229\nvt 0.917815 0.469916\nvt 0.906872 0.470671\nvt 0.862932 0.903575\nvt 0.863006 0.902326\nvt 0.868997 0.903942\nvt 0.820299 0.467664\nvt 0.815202 0.476436\nvt 0.811762 0.473387\nvt 0.856912 0.905354\nvt 0.858928 0.905138\nvt 0.814590 0.463928\nvt 0.808275 0.468832\nvt 0.807284 0.466098\nvt 0.822995 0.469209\nvt 0.818333 0.479016\nvt 0.907377 0.473609\nvt 0.817784 0.465868\nvt 0.809493 0.470967\nvt 0.919737 0.479403\nvt 0.911627 0.483883\nvt 0.918512 0.472271\nvt 0.918954 0.474690\nvt 0.908320 0.476933\nvt 0.815941 0.464764\nvt 0.825269 0.470705\nvt 0.821378 0.480679\nvt 0.827922 0.482230\nvt 0.824632 0.481711\nvt 0.827493 0.471807\nvt 0.848048 0.914382\nvt 0.852838 0.904609\nvt 0.829580 0.490219\nvt 0.866756 0.906508\nvt 0.919608 0.496923\nvt 0.913601 0.494286\nvt 0.109255 0.325254\nvt 0.168867 0.254584\nvt 0.638744 0.610039\nvt 0.105605 0.329744\nvt 0.097841 0.339476\nvt 0.095466 0.341554\nvt 0.093432 0.343497\nvt 0.091706 0.345435\nvt 0.090401 0.347034\nvt 0.101781 0.919625\nvt 0.107955 0.922255\nvt 0.278729 0.912468\nvt 0.525503 0.425821\nvt 0.510445 0.425331\nvt 0.526368 0.387596\nvt 0.495662 0.426799\nvt 0.506253 0.390619\nvt 0.209185 0.062351\nvt 0.222185 0.068271\nvt 0.642966 0.056511\nvt 0.631672 0.066414\nvt 0.627595 0.023789\nvt 0.445503 0.459301\nvt 0.428991 0.481938\nvt 0.413981 0.455517\nvt 0.415861 0.500875\nvt 0.399698 0.480093\nvt 0.461864 0.444157\nvt 0.433934 0.418950\nvt 0.457647 0.519125\nvt 0.466952 0.510609\nvt 0.478311 0.526068\nvt 0.449301 0.529286\nvt 0.170051 0.054566\nvt 0.183756 0.055945\nvt 0.177041 0.075932\nvt 0.509631 0.474278\nvt 0.497618 0.470978\nvt 0.234300 0.074807\nvt 0.247516 0.082330\nvt 0.690337 0.125914\nvt 0.703932 0.134501\nvt 0.735251 0.221823\nvt 0.676359 0.120647\nvt 0.725235 0.172358\nvt 0.731876 0.196713\nvt 0.663542 0.118079\nvt 0.261354 0.089062\nvt 0.274399 0.095084\nvt 0.287034 0.101287\nvt 0.715905 0.150402\nvt 0.294092 0.075130\nvt 0.308289 0.080194\nvt 0.743602 0.161832\nvt 0.280238 0.068495\nvt 0.734342 0.135605\nvt 0.722975 0.115452\nvt 0.709117 0.103426\nvt 0.748074 0.219982\nvt 0.677146 0.089886\nvt 0.693495 0.094043\nvt 0.748752 0.189754\nvt 0.744699 0.093893\nvt 0.754977 0.121547\nvt 0.761990 0.152749\nvt 0.316118 0.052668\nvt 0.763076 0.184293\nvt 0.688499 0.054669\nvt 0.663286 0.090569\nvt 0.571394 0.588001\nvt 0.555722 0.586217\nvt 0.552254 0.561911\nvt 0.708209 0.063812\nvt 0.728941 0.075474\nvt 0.221188 0.035361\nvt 0.235525 0.042279\nvt 0.443952 0.502717\nvt 0.455168 0.489755\nvt 0.433507 0.516454\nvt 0.176207 0.031069\nvt 0.193084 0.030913\nvt 0.248722 0.051242\nvt 0.264994 0.060668\nvt 0.645102 0.106138\nvt 0.466214 0.480099\nvt 0.602189 0.610945\nvt 0.614265 0.610240\nvt 0.614265 0.659472\nvt 0.441564 0.540205\nvt 0.406682 0.515734\nvt 0.424767 0.528896\nvt 0.389548 0.500513\nvt 0.699536 0.021634\nvt 0.671092 0.050928\nvt 0.779604 0.145704\nvt 0.776822 0.180666\nvt 0.721629 0.036747\nvt 0.591055 0.590885\nvt 0.565951 0.563132\nvt 0.745773 0.055265\nvt 0.764727 0.079966\nvt 0.775400 0.110844\nvt 0.678466 0.008977\nvt 0.656412 0.050085\nvt 0.641613 0.009237\nvt 0.658841 0.005569\nvt 0.197266 0.058996\nvt 0.187741 0.079281\nvt 0.175281 0.117114\nvt 0.171018 0.136433\nvt 0.165167 0.161586\nvt 0.167053 0.183489\nvt 0.157942 0.180992\nvt 0.842189 0.429513\nvt 0.823109 0.403944\nvt 0.814537 0.378080\nvt 0.801110 0.371902\nvt 0.808100 0.350403\nvt 0.060555 0.804872\nvt 0.011116 0.307306\nvt 0.054024 0.234886\nvt 0.047240 0.241135\nvt 0.044718 0.244427\nvt 0.043842 0.241878\nvt 0.044455 0.245350\nvt 0.044449 0.246328\nvt 0.832058 0.986043\nvt 0.641344 0.889792\nvt 0.642392 0.887832\nvt 0.643880 0.888070\nvt 0.649516 0.886971\nvt 0.281734 0.682726\nvt 0.284687 0.680354\nvt 0.284096 0.686150\nvt 0.287185 0.678095\nvt 0.290533 0.673758\nvt 0.292656 0.662092\nvt 0.303399 0.646339\nvt 0.303560 0.669172\nvt 0.305299 0.618692\nvt 0.291792 0.640310\nvt 0.291064 0.577788\nvt 0.344910 0.795302\nvt 0.351951 0.780776\nvt 0.370099 0.807429\nvt 0.381283 0.816972\nvt 0.374566 0.783828\nvt 0.384845 0.780771\nvt 0.259633 0.543539\nvt 0.246200 0.603950\nvt 0.259387 0.603090\nvt 0.252313 0.658522\nvt 0.262936 0.676356\nvt 0.267301 0.679752\nvt 0.272709 0.692186\nvt 0.274676 0.694589\nvt 0.274659 0.697203\nvt 0.695873 0.953400\nvt 0.695081 0.954152\nvt 0.695870 0.954779\nvt 0.695721 0.955875\nvt 0.694693 0.955187\nvt 0.831893 0.981070\nvt 0.049353 0.249054\nvt 0.052506 0.249801\nvt 0.016089 0.305773\nvt 0.017456 0.308894\nvt 0.022743 0.304505\nvt 0.207209 0.032257\nvt 0.476154 0.473557\nvt 0.483465 0.398561\nvt 0.181286 0.098433\nvt 0.147870 0.178092\nvt 0.848170 0.421960\nvt 0.831029 0.415555\nvt 0.818511 0.390944\nvt 0.810776 0.363826\nvt 0.015223 0.302793\nvt 0.014787 0.299665\nvt 0.020804 0.298932\nvt 0.030914 0.303408\nvt 0.038315 0.300870\nvt 0.050552 0.238003\nvt 0.055382 0.238814\nvt 0.045748 0.245256\nvt 0.045674 0.243124\nvt 0.829806 0.985159\nvt 0.828737 0.984492\nvt 0.830924 0.985591\nvt 0.641588 0.887526\nvt 0.643555 0.887626\nvt 0.276261 0.694581\nvt 0.276154 0.696384\nvt 0.278127 0.691357\nvt 0.657180 0.881618\nvt 0.291430 0.612140\nvt 0.305299 0.583516\nvt 0.389147 0.807239\nvt 0.784725 0.964025\nvt 0.777354 0.938242\nvt 0.784725 0.936789\nvt 0.250973 0.546133\nvt 0.253868 0.570176\nvt 0.245183 0.635711\nvt 0.257766 0.670691\nvt 0.271610 0.683596\nvt 0.273327 0.695213\nvt 0.696814 0.952756\nvt 0.697507 0.953599\nvt 0.696543 0.954167\nvt 0.694420 0.956527\nvt 0.694768 0.958057\nvt 0.047313 0.248277\nvt 0.143696 0.345679\nvt 0.151758 0.343901\nvt 0.147983 0.358823\nvt 0.140059 0.359023\nvt 0.139865 0.374761\nvt 0.131919 0.372811\nvt 0.126769 0.390182\nvt 0.103184 0.398065\nvt 0.111287 0.403811\nvt 0.095872 0.413937\nvt 0.088255 0.406626\nvt 0.081892 0.421248\nvt 0.074734 0.412515\nvt 0.069466 0.427204\nvt 0.062715 0.417310\nvt 0.058979 0.432976\nvt 0.019445 0.686351\nvt 0.017534 0.675277\nvt 0.030268 0.671743\nvt 0.486556 0.469345\nvt 0.478222 0.434907\nvt 0.461188 0.406052\nvt 0.616060 0.760268\nvt 0.614628 0.754441\nvt 0.953604 0.839414\nvt 0.956029 0.850607\nvt 0.960927 0.856253\nvt 0.093880 0.350413\nvt 0.092625 0.347950\nvt 0.081573 0.345036\nvt 0.521873 0.944832\nvt 0.507205 0.949576\nvt 0.612364 0.748215\nvt 0.957288 0.819306\nvt 0.960988 0.814138\nvt 0.963286 0.811264\nvt 0.965177 0.810197\nvt 0.975093 0.432965\nvt 0.612567 0.729191\nvt 0.612004 0.731466\nvt 0.609159 0.756805\nvt 0.606818 0.750031\nvt 0.086858 0.336681\nvt 0.928727 0.874265\nvt 0.931611 0.880721\nvt 0.060134 0.355981\nvt 0.060253 0.358257\nvt 0.060565 0.353489\nvt 0.086521 0.360996\nvt 0.098690 0.352524\nvt 0.609024 0.731145\nvt 0.100814 0.341875\nvt 0.608633 0.726668\nvt 0.610650 0.723315\nvt 0.927250 0.866865\nvt 0.927064 0.859163\nvt 0.611087 0.727914\nvt 0.934416 0.840329\nvt 0.520459 0.940024\nvt 0.930819 0.845468\nvt 0.502919 0.944699\nvt 0.043450 0.297791\nvt 0.045677 0.296469\nvt 0.047912 0.296222\nvt 0.061703 0.327491\nvt 0.056488 0.324035\nvt 0.064777 0.315696\nvt 0.043592 0.343064\nvt 0.037554 0.338141\nvt 0.042493 0.334553\nvt 0.024346 0.328686\nvt 0.028465 0.334837\nvt 0.024771 0.336652\nvt 0.048394 0.338507\nvt 0.048492 0.330544\nvt 0.020154 0.329899\nvt 0.060280 0.781059\nvt 0.060186 0.773379\nvt 0.053390 0.333883\nvt 0.044122 0.290228\nvt 0.505740 0.929071\nvt 0.507884 0.933338\nvt 0.501252 0.936600\nvt 0.028992 0.661096\nvt 0.015259 0.665081\nvt 0.076007 0.436593\nvt 0.064741 0.442241\nvt 0.020704 0.283747\nvt 0.030465 0.279989\nvt 0.046747 0.285191\nvt 0.015617 0.292199\nvt 0.017392 0.288600\nvt 0.377995 0.942942\nvt 0.010163 0.304089\nvt 0.041976 0.259780\nvt 0.048990 0.256704\nvt 0.009841 0.301014\nvt 0.005567 0.305401\nvt 0.067052 0.811389\nvt 0.063827 0.811786\nvt 0.503484 0.949433\nvt 0.502268 0.948602\nvt 0.501109 0.947871\nvt 0.498820 0.942075\nvt 0.497723 0.945973\nvt 0.114444 0.319730\nvt 0.043545 0.313830\nvt 0.088989 0.429538\nvt 0.052172 0.297804\nvt 0.175390 0.269946\nvt 0.106341 0.337140\nvt 0.515864 0.925795\nvt 0.504473 0.924012\nvt 0.205232 0.280646\nvt 0.507704 0.950342\nvt 0.083773 0.992235\nvt 0.083725 0.993255\nvt 0.082925 0.993372\nvt 0.101687 0.953676\nvt 0.110510 0.916625\nvt 0.104669 0.917625\nvt 0.475454 0.924072\nvt 0.273090 0.915101\nvt 0.823579 0.881793\nvt 0.830951 0.882808\nvt 0.817012 0.881618\nvt 0.261425 0.912115\nvt 0.812147 0.882292\nvt 0.893333 0.491337\nvt 0.790738 0.485949\nvt 0.796629 0.483411\nvt 0.799576 0.486628\nvt 0.805931 0.479694\nvt 0.104262 0.420533\nvt 0.504668 0.950381\nvt 0.499730 0.946771\nvt 0.094122 0.895898\nvt 0.028979 0.300124\nvt 0.027315 0.297585\nvt 0.021607 0.301456\nvt 0.017472 0.284362\nvt 0.143499 0.333527\nvt 0.024277 0.221892\nvt 0.023734 0.215778\nvt 0.031835 0.215479\nvt 0.053670 0.287655\nvt 0.433884 0.963664\nvt 0.037424 0.222793\nvt 0.039829 0.217321\nvt 0.048060 0.220633\nvt 0.054932 0.225051\nvt 0.006300 0.308847\nvt 0.046970 0.317483\nvt 0.041770 0.293475\nvt 0.059206 0.229578\nvt 0.060846 0.235255\nvt 0.060330 0.241735\nvt 0.057109 0.249817\nvt 0.053454 0.258296\nvt 0.050339 0.266728\nvt 0.057339 0.300206\nvt 0.055198 0.277461\nvt 0.056653 0.268023\nvt 0.064462 0.268955\nvt 0.975170 0.404328\nvt 0.970179 0.400713\nvt 0.975170 0.392139\nvt 0.135763 0.393413\nvt 0.120634 0.408486\nvt 0.148861 0.376046\nvt 0.156447 0.358478\nvt 0.134345 0.280045\nvt 0.122767 0.271224\nvt 0.133857 0.262870\nvt 0.151880 0.330455\nvt 0.160475 0.327453\nvt 0.160297 0.342319\nvt 0.148707 0.317963\nvt 0.142916 0.306807\nvt 0.151809 0.300841\nvt 0.157633 0.313502\nvt 0.134895 0.296804\nvt 0.143936 0.289692\nvt 0.124961 0.287573\nvt 0.798340 0.355044\nvt 0.850803 0.301767\nvt 0.030072 0.344417\nvt 0.070947 0.247514\nvt 0.063277 0.248838\nvt 0.066364 0.239199\nvt 0.032625 0.332497\nvt 0.837737 0.301784\nvt 0.847477 0.295575\nvt 0.073505 0.236277\nvt 0.066929 0.231108\nvt 0.054689 0.206078\nvt 0.058250 0.200165\nvt 0.068097 0.205638\nvt 0.829566 0.308938\nvt 0.840659 0.307724\nvt 0.044850 0.201781\nvt 0.048215 0.195842\nvt 0.070364 0.217869\nvt 0.076253 0.212403\nvt 0.080837 0.221486\nvt 0.063486 0.211290\nvt 0.853154 0.307034\nvt 0.831535 0.314548\nvt 0.843168 0.313189\nvt 0.113476 0.280210\nvt 0.117109 0.296577\nvt 0.145430 0.272749\nvt 0.127036 0.304768\nvt 0.038160 0.329888\nvt 0.044212 0.326718\nvt 0.134925 0.313271\nvt 0.140285 0.322786\nvt 0.166517 0.309372\nvt 0.175504 0.306080\nvt 0.177010 0.323284\nvt 0.168708 0.325074\nvt 0.176126 0.341222\nvt 0.135008 0.336858\nvt 0.135462 0.347429\nvt 0.132198 0.327818\nvt 0.127353 0.319839\nvt 0.120511 0.312396\nvt 0.100592 0.299375\nvt 0.161747 0.295504\nvt 0.171646 0.290473\nvt 0.027699 0.651302\nvt 0.013874 0.655115\nvt 0.081852 0.445050\nvt 0.096111 0.437129\nvt 0.112567 0.427009\nvt 0.129832 0.412476\nvt 0.069852 0.451342\nvt 0.172283 0.359296\nvt 0.164375 0.358748\nvt 0.168332 0.341636\nvt 0.156906 0.376953\nvt 0.154473 0.282971\nvt 0.164349 0.276036\nvt 0.147396 0.252489\nvt 0.516746 0.931479\nvt 0.109192 0.264344\nvt 0.118606 0.252966\nvt 0.079608 0.245633\nvt 0.032541 0.207812\nvt 0.023980 0.208014\nvt 0.025985 0.199114\nvt 0.081549 0.232891\nvt 0.073733 0.226200\nvt 0.051248 0.213090\nvt 0.034762 0.199264\nvt 0.041967 0.209767\nvt 0.064412 0.223924\nvt 0.059277 0.218328\nvt 0.822746 0.320943\nvt 0.833703 0.320637\nvt 0.052059 0.321270\nvt 0.059514 0.313371\nvt 0.070498 0.303665\nvt 0.067457 0.258378\nvt 0.059297 0.258576\nvt 0.063304 0.195496\nvt 0.073852 0.200768\nvt 0.083399 0.207870\nvt 0.089723 0.216885\nvt 0.092627 0.229929\nvt 0.102855 0.212521\nvt 0.131585 0.240928\nvt 0.179898 0.361095\nvt 0.147429 0.227617\nvt 0.157171 0.264274\nvt 0.131249 0.216976\nvt 0.145461 0.210486\nvt 0.815610 0.334354\nvt 0.824423 0.327751\nvt 0.059882 0.346508\nvt 0.056785 0.344726\nvt 0.060975 0.340614\nvt 0.057031 0.350496\nvt 0.064120 0.332113\nvt 0.057698 0.337754\nvt 0.101688 0.275041\nvt 0.053510 0.310022\nvt 0.040409 0.322208\nvt 0.034627 0.325382\nvt 0.029629 0.327185\nvt 0.048187 0.274845\nvt 0.118901 0.386314\nvt 0.792228 0.675366\nvt 0.777474 0.671928\nvt 0.777279 0.656348\nvt 0.762176 0.668274\nvt 0.745094 0.679024\nvt 0.746459 0.663840\nvt 0.726695 0.673330\nvt 0.729053 0.658689\nvt 0.709171 0.666331\nvt 0.712729 0.653371\nvt 0.690924 0.659211\nvt 0.694117 0.647935\nvt 0.678036 0.645143\nvt 0.680051 0.633522\nvt 0.668177 0.643526\nvt 0.762821 0.652228\nvt 0.668754 0.633942\nvt 0.076250 0.257378\nvt 0.086141 0.257544\nvt 0.081522 0.270137\nvt 0.072808 0.269424\nvt 0.069864 0.281225\nvt 0.089769 0.244257\nvt 0.081612 0.196852\nvt 0.092960 0.203698\nvt 0.111943 0.229057\nvt 0.117561 0.206870\nvt 0.090880 0.271121\nvt 0.096543 0.259266\nvt 0.080791 0.294288\nvt 0.090075 0.295963\nvt 0.086379 0.305877\nvt 0.102909 0.246247\nvt 0.077386 0.305586\nvt 0.082499 0.315770\nvt 0.073674 0.293117\nvt 0.071881 0.319286\nvt 0.081818 0.323496\nvt 0.080985 0.334256\nvt 0.081532 0.329919\nvt 0.279821 0.972301\nvt 0.279659 0.964601\nvt 0.281602 0.965246\nvt 0.277612 0.971165\nvt 0.276254 0.970177\nvt 0.276173 0.963018\nvt 0.277654 0.963858\nvt 0.076162 0.345314\nvt 0.076682 0.343709\nvt 0.917199 0.501061\nvt 0.914790 0.503840\nvt 0.804789 0.917687\nvt 0.803221 0.909739\nvt 0.806800 0.909720\nvt 0.811131 0.909454\nvt 0.817234 0.909040\nvt 0.825635 0.908313\nvt 0.833648 0.907054\nvt 0.286303 0.903259\nvt 0.287224 0.911113\nvt 0.104980 0.932099\nvt 0.098118 0.933368\nvt 0.098430 0.927334\nvt 0.031654 0.682714\nvt 0.871743 0.898908\nvt 0.926618 0.497789\nvt 0.925194 0.501969\nvt 0.802071 0.483771\nvt 0.526242 0.924825\nvt 0.516267 0.918413\nvt 0.525356 0.931001\nvt 0.525536 0.935085\nvt 0.526052 0.938035\nvt 0.917665 0.466191\nvt 0.926328 0.465542\nvt 0.927920 0.467447\nvt 0.929364 0.469711\nvt 0.930468 0.472135\nvt 0.931154 0.474688\nvt 0.931092 0.477655\nvt 0.930541 0.480493\nvt 0.929698 0.482522\nvt 0.928809 0.484012\nvt 0.834031 0.897526\nvt 0.292721 0.911684\nvt 0.103940 0.939737\nvt 0.096701 0.933477\nvt 0.527960 0.944681\nvt 0.528221 0.945885\nvt 0.988395 0.364901\nvt 0.987120 0.357791\nvt 0.988395 0.357483\nvt 0.527571 0.943245\nvt 0.280261 0.956381\nvt 0.282166 0.956101\nvt 0.497359 0.949024\nvt 0.495516 0.948635\nvt 0.498663 0.949745\nvt 0.499466 0.950459\nvt 0.970179 0.431913\nvt 0.501464 0.951323\nvt 0.643231 0.991412\nvt 0.644210 0.991094\nvt 0.644123 0.992438\nvt 0.105687 0.956177\nvt 0.102635 0.956482\nvt 0.474551 0.926473\nvt 0.794501 0.499855\nvt 0.801073 0.495281\nvt 0.106089 0.290299\nvt 0.077120 0.282094\nvt 0.085198 0.282911\nvt 0.095433 0.285636\nvt 0.042007 0.270398\nvt 0.045333 0.263808\nvt 0.037393 0.265116\nvt 0.071868 0.835601\nvt 0.048306 0.242795\nvt 0.068222 0.836618\nvt 0.068787 0.831073\nvt 0.020516 0.270730\nvt 0.035553 0.260685\nvt 0.417771 0.942650\nvt 0.418067 0.954127\nvt 0.421265 0.963117\nvt 0.694699 0.959756\nvt 0.687228 0.942986\nvt 0.037453 0.277948\nvt 0.032675 0.269582\nvt 0.062625 0.279817\nvt 0.069066 0.825139\nvt 0.687711 0.937638\nvt 0.689756 0.941815\nvt 0.027362 0.272848\nvt 0.676746 0.941867\nvt 0.025297 0.267842\nvt 0.270383 0.708216\nvt 0.268692 0.711770\nvt 0.267991 0.706207\nvt 0.261417 0.703285\nvt 0.263093 0.699313\nvt 0.345871 0.969335\nvt 0.350231 0.967456\nvt 0.350231 0.975358\nvt 0.247897 0.695427\nvt 0.236557 0.696776\nvt 0.238743 0.691832\nvt 0.226898 0.673421\nvt 0.210705 0.652273\nvt 0.216703 0.648896\nvt 0.210265 0.614174\nvt 0.571467 0.422662\nvt 0.569671 0.460998\nvt 0.579868 0.495112\nvt 0.403248 0.816956\nvt 0.404977 0.819085\nvt 0.409450 0.819878\nvt 0.411115 0.822726\nvt 0.408953 0.826196\nvt 0.214898 0.611456\nvt 0.254871 0.697922\nvt 0.111079 0.304638\nvt 0.009094 0.701084\nvt 0.007463 0.690632\nvt 0.784873 0.852078\nvt 0.275388 0.360498\nvt 0.763052 0.845826\nvt 0.261690 0.353535\nvt 0.266436 0.347962\nvt 0.687629 0.671208\nvt 0.660471 0.673839\nvt 0.192472 0.390996\nvt 0.203508 0.397239\nvt 0.228214 0.404983\nvt 0.226610 0.428071\nvt 0.241249 0.405646\nvt 0.229529 0.384224\nvt 0.198731 0.368824\nvt 0.208877 0.375991\nvt 0.215453 0.402160\nvt 0.229131 0.364918\nvt 0.237244 0.365448\nvt 0.204847 0.342710\nvt 0.213538 0.355374\nvt 0.218924 0.381340\nvt 0.660851 0.640422\nvt 0.666395 0.653335\nvt 0.657815 0.659621\nvt 0.658639 0.624443\nvt 0.660601 0.633278\nvt 0.159802 0.973433\nvt 0.153762 0.968039\nvt 0.159802 0.956570\nvt 0.655019 0.669050\nvt 0.245341 0.363618\nvt 0.250252 0.381706\nvt 0.255433 0.402867\nvt 0.239614 0.384191\nvt 0.204605 0.319178\nvt 0.255953 0.345167\nvt 0.646445 0.668594\nvt 0.649473 0.681439\nvt 0.210813 0.297988\nvt 0.955493 0.591464\nvt 0.958998 0.594257\nvt 0.954952 0.598020\nvt 0.932805 0.766328\nvt 0.927426 0.760412\nvt 0.940921 0.758579\nvt 0.648151 0.633051\nvt 0.647346 0.623811\nvt 0.216012 0.311802\nvt 0.219317 0.309815\nvt 0.220727 0.320279\nvt 0.947017 0.540481\nvt 0.939766 0.541643\nvt 0.942852 0.533760\nvt 0.228904 0.350045\nvt 0.221166 0.361796\nvt 0.211066 0.315464\nvt 0.241925 0.343694\nvt 0.235930 0.342357\nvt 0.237166 0.339754\nvt 0.948605 0.776745\nvt 0.950259 0.782237\nvt 0.942024 0.781710\nvt 0.230010 0.340999\nvt 0.230971 0.335875\nvt 0.649833 0.657018\nvt 0.948913 0.522243\nvt 0.944904 0.523062\nvt 0.947536 0.516774\nvt 0.217149 0.324025\nvt 0.222728 0.327326\nvt 0.951212 0.587188\nvt 0.949018 0.595026\nvt 0.260369 0.341734\nvt 0.220905 0.268761\nvt 0.225942 0.270838\nvt 0.220533 0.279334\nvt 0.944441 0.557702\nvt 0.937847 0.559714\nvt 0.937980 0.551649\nvt 0.233561 0.330226\nvt 0.226673 0.332022\nvt 0.229403 0.275025\nvt 0.232888 0.266641\nvt 0.223315 0.308607\nvt 0.219343 0.296413\nvt 0.950463 0.419765\nvt 0.954541 0.419393\nvt 0.956760 0.424263\nvt 0.238993 0.334828\nvt 0.224116 0.283111\nvt 0.224009 0.296899\nvt 0.947033 0.369848\nvt 0.949171 0.362727\nvt 0.957231 0.366389\nvt 0.987689 0.616249\nvt 0.985542 0.614357\nvt 0.987689 0.609159\nvt 0.224625 0.317588\nvt 0.226257 0.323387\nvt 0.122339 0.925465\nvt 0.121926 0.916265\nvt 0.128202 0.916526\nvt 0.950826 0.382181\nvt 0.949293 0.391401\nvt 0.944310 0.391094\nvt 0.949229 0.404052\nvt 0.944373 0.403380\nvt 0.970009 0.747039\nvt 0.965822 0.747039\nvt 0.968965 0.742232\nvt 0.952093 0.357483\nvt 0.959044 0.360972\nvt 0.245396 0.338758\nvt 0.946739 0.410950\nvt 0.127029 0.925553\nvt 0.125343 0.935325\nvt 0.957073 0.434030\nvt 0.954875 0.436699\nvt 0.953352 0.426424\nvt 0.239357 0.331093\nvt 0.244981 0.334925\nvt 0.952858 0.401614\nvt 0.954226 0.408447\nvt 0.261992 0.338466\nvt 0.265075 0.343343\nvt 0.256980 0.344306\nvt 0.226823 0.307972\nvt 0.227041 0.315281\nvt 0.249321 0.275773\nvt 0.247803 0.270101\nvt 0.254770 0.278015\nvt 0.234659 0.326719\nvt 0.229703 0.326780\nvt 0.236524 0.276637\nvt 0.230373 0.279787\nvt 0.259698 0.281965\nvt 0.260362 0.286264\nvt 0.253759 0.280085\nvt 0.226399 0.285476\nvt 0.228255 0.297658\nvt 0.418283 0.974803\nvt 0.418283 0.981165\nvt 0.413344 0.981991\nvt 0.236797 0.269700\nvt 0.240822 0.266844\nvt 0.242490 0.274725\nvt 0.228786 0.320325\nvt 0.311729 0.919460\nvt 0.310039 0.912975\nvt 0.314859 0.909801\nvt 0.273768 0.314597\nvt 0.273449 0.305053\nvt 0.276719 0.306509\nvt 0.952143 0.393199\nvt 0.307820 0.907539\nvt 0.765436 0.940911\nvt 0.763639 0.941758\nvt 0.766220 0.936789\nvt 0.247247 0.281822\nvt 0.245464 0.286107\nvt 0.240111 0.282377\nvt 0.264056 0.333801\nvt 0.261522 0.332103\nvt 0.264445 0.327127\nvt 0.227029 0.288520\nvt 0.230921 0.283295\nvt 0.230826 0.286439\nvt 0.607134 0.812389\nvt 0.608697 0.809543\nvt 0.614166 0.813088\nvt 0.267743 0.298880\nvt 0.266858 0.300355\nvt 0.262936 0.295932\nvt 0.763445 0.947535\nvt 0.762366 0.947406\nvt 0.258347 0.289780\nvt 0.258090 0.293075\nvt 0.250700 0.289117\nvt 0.235497 0.324634\nvt 0.236131 0.323842\nvt 0.239115 0.328499\nvt 0.269617 0.323114\nvt 0.267434 0.328914\nvt 0.236128 0.280346\nvt 0.241567 0.279120\nvt 0.761148 0.951320\nvt 0.761392 0.946891\nvt 0.759289 0.962905\nvt 0.762439 0.952047\nvt 0.256566 0.333632\nvt 0.259914 0.330390\nvt 0.539570 0.960557\nvt 0.540436 0.953680\nvt 0.541838 0.953714\nvt 0.540942 0.950226\nvt 0.542441 0.950103\nvt 0.257984 0.335810\nvt 0.251821 0.335920\nvt 0.244971 0.289176\nvt 0.605134 0.805176\nvt 0.604165 0.806353\nvt 0.602564 0.802805\nvt 0.237472 0.286641\nvt 0.230057 0.288529\nvt 0.162229 0.936923\nvt 0.163519 0.933541\nvt 0.167112 0.936278\nvt 0.232810 0.968532\nvt 0.233726 0.966668\nvt 0.234871 0.968123\nvt 0.858633 0.962760\nvt 0.861491 0.960784\nvt 0.861737 0.963698\nvt 0.170554 0.934763\nvt 0.169365 0.940341\nvt 0.157920 0.923963\nvt 0.154260 0.926448\nvt 0.153762 0.922273\nvt 0.859149 0.956179\nvt 0.860806 0.958259\nvt 0.857377 0.961177\nvt 0.885526 0.955302\nvt 0.886694 0.957378\nvt 0.883157 0.958872\nvt 0.159445 0.934043\nvt 0.161038 0.930114\nvt 0.750298 0.950217\nvt 0.752832 0.947817\nvt 0.755665 0.948122\nvt 0.851782 0.958346\nvt 0.848733 0.957894\nvt 0.851602 0.953847\nvt 0.096701 0.991479\nvt 0.098581 0.990359\nvt 0.098581 0.993120\nvt 0.154278 0.918355\nvt 0.158714 0.917685\nvt 0.158085 0.920735\nvt 0.881565 0.955584\nvt 0.877445 0.958859\nvt 0.879802 0.952078\nvt 0.876076 0.954633\nvt 0.252591 0.318379\nvt 0.254850 0.322129\nvt 0.251848 0.323486\nvt 0.232151 0.970470\nvt 0.234504 0.970789\nvt 0.236808 0.315319\nvt 0.235478 0.316932\nvt 0.233887 0.313942\nvt 0.978581 0.313124\nvt 0.981000 0.312126\nvt 0.981000 0.325457\nvt 0.260172 0.316053\nvt 0.257630 0.319848\nvt 0.254858 0.316985\nvt 0.751284 0.955950\nvt 0.758088 0.949323\nvt 0.606334 0.800176\nvt 0.607126 0.797509\nvt 0.608991 0.799196\nvt 0.879956 0.971780\nvt 0.879460 0.967040\nvt 0.885605 0.967255\nvt 0.757825 0.945521\nvt 0.759782 0.946170\nvt 0.164872 0.939263\nvt 0.167372 0.945431\nvt 0.604224 0.797572\nvt 0.956619 0.970082\nvt 0.954466 0.966617\nvt 0.962633 0.967073\nvt 0.759614 0.943305\nvt 0.249810 0.319281\nvt 0.248106 0.324174\nvt 0.878677 0.962609\nvt 0.239586 0.322509\nvt 0.240209 0.319930\nvt 0.242658 0.320444\nvt 0.611650 0.816118\nvt 0.609631 0.818900\nvt 0.606214 0.814824\nvt 0.603836 0.809594\nvt 0.231590 0.323589\nvt 0.232749 0.321690\nvt 0.230657 0.318357\nvt 0.228848 0.313507\nvt 0.956921 0.884658\nvt 0.953013 0.882493\nvt 0.957345 0.875222\nvt 0.761922 0.683629\nvt 0.196382 0.419483\nvt 0.877954 0.276453\nvt 0.098157 0.508614\nvt 0.108256 0.501418\nvt 0.807628 0.693053\nvt 0.659767 0.650108\nvt 0.219855 0.332261\nvt 0.945369 0.549654\nvt 0.951737 0.409482\nvt 0.955707 0.414742\nvt 0.231232 0.316881\nvt 0.233655 0.320663\nvt 0.264341 0.293983\nvt 0.170807 0.944153\nvt 0.953580 0.963114\nvt 0.884310 0.963131\nvt 0.957345 0.893869\nvt 0.250155 0.291538\nvt 0.257930 0.295021\nvt 0.256146 0.296603\nvt 0.605743 0.803032\nvt 0.611180 0.804333\nvt 0.265215 0.320099\nvt 0.262924 0.326151\nvt 0.260836 0.323347\nvt 0.240298 0.287123\nvt 0.240488 0.290132\nvt 0.231230 0.972797\nvt 0.231603 0.971521\nvt 0.233749 0.974652\nvt 0.244806 0.292520\nvt 0.257289 0.327137\nvt 0.960382 0.951367\nvt 0.960669 0.954950\nvt 0.957140 0.954058\nvt 0.238377 0.328421\nvt 0.238830 0.325976\nvt 0.241986 0.328606\nvt 0.266124 0.300561\nvt 0.264876 0.301547\nvt 0.261302 0.298566\nvt 0.760718 0.946404\nvt 0.761827 0.942595\nvt 0.232181 0.315835\nvt 0.232810 0.314965\nvt 0.235012 0.318266\nvt 0.262391 0.296876\nvt 0.236061 0.283136\nvt 0.251503 0.285820\nvt 0.544029 0.948800\nvt 0.544029 0.953881\nvt 0.265526 0.291438\nvt 0.608561 0.794875\nvt 0.609747 0.796527\nvt 0.755869 0.945377\nvt 0.859015 0.964790\nvt 0.861641 0.966776\nvt 0.760671 0.963715\nvt 0.764791 0.953593\nvt 0.543395 0.962716\nvt 0.270248 0.297273\nvt 0.259714 0.338260\nvt 0.269586 0.303605\nvt 0.956449 0.875095\nvt 0.269981 0.312625\nvt 0.253261 0.338333\nvt 0.305247 0.903259\nvt 0.303856 0.909563\nvt 0.305367 0.914673\nvt 0.306750 0.920564\nvt 0.312560 0.926478\nvt 0.307927 0.927134\nvt 0.159042 0.927413\nvt 0.606973 0.792753\nvt 0.605119 0.795373\nvt 0.604293 0.792254\nvt 0.172477 0.939224\nvt 0.609724 0.789824\nvt 0.611409 0.791339\nvt 0.231461 0.966449\nvt 0.232488 0.964106\nvt 0.608056 0.788528\nvt 0.605838 0.790501\nvt 0.605841 0.788145\nvt 0.234259 0.963868\nvt 0.231085 0.960697\nvt 0.231958 0.959218\nvt 0.233093 0.962145\nvt 0.230032 0.957671\nvt 0.231456 0.957086\nvt 0.171093 0.931462\nvt 0.172200 0.932933\nvt 0.167053 0.931991\nvt 0.169479 0.931810\nvt 0.163495 0.930056\nvt 0.160834 0.925257\nvt 0.161451 0.927771\nvt 0.156273 0.931559\nvt 0.161068 0.919456\nvt 0.160498 0.922361\nvt 0.158797 0.915877\nvt 0.162985 0.915752\nvt 0.162268 0.917164\nvt 0.848332 0.962292\nvt 0.847281 0.961962\nvt 0.855470 0.959973\nvt 0.851784 0.964669\nvt 0.854563 0.965355\nvt 0.855860 0.966765\nvt 0.859582 0.966688\nvt 0.856966 0.967933\nvt 0.857329 0.970109\nvt 0.859202 0.970171\nvt 0.858791 0.972133\nvt 0.611696 0.794060\nvt 0.163099 0.919404\nvt 0.613909 0.791903\nvt 0.249374 0.329602\nvt 0.162691 0.922243\nvt 0.242939 0.324010\nvt 0.246818 0.319939\nvt 0.613360 0.786079\nvt 0.615159 0.787864\nvt 0.613544 0.788995\nvt 0.170806 0.917739\nvt 0.170764 0.920588\nvt 0.168639 0.919564\nvt 0.169536 0.926434\nvt 0.169915 0.922960\nvt 0.172255 0.923439\nvt 0.609004 0.783261\nvt 0.610689 0.780771\nvt 0.611298 0.783382\nvt 0.234112 0.954736\nvt 0.233564 0.957309\nvt 0.167518 0.925878\nvt 0.167643 0.922199\nvt 0.886650 0.984686\nvt 0.888764 0.985023\nvt 0.889030 0.988548\nvt 0.165107 0.924421\nvt 0.165047 0.920566\nvt 0.615784 0.790820\nvt 0.612078 0.787564\nvt 0.609843 0.785774\nvt 0.607526 0.786431\nvt 0.164493 0.917511\nvt 0.167578 0.916205\nvt 0.169118 0.916654\nvt 0.236575 0.955660\nvt 0.852503 0.971076\nvt 0.850376 0.969726\nvt 0.849171 0.967882\nvt 0.166375 0.918444\nvt 0.233716 0.960464\nvt 0.849510 0.963805\nvt 0.847325 0.964792\nvt 0.165956 0.915819\nvt 0.166151 0.928625\nvt 0.162857 0.925599\nvt 0.168251 0.929345\nvt 0.759623 0.949763\nvt 0.816638 0.970746\nvt 0.816638 0.982253\nvt 0.814292 0.980471\nvt 0.254013 0.328915\nvt 0.265406 0.305462\nvt 0.267002 0.303839\nvt 0.266972 0.310927\nvt 0.539355 0.950952\nvt 0.250954 0.333215\nvt 0.603105 0.801175\nvt 0.966155 0.960737\nvt 0.266316 0.321275\nvt 0.230862 0.973962\nvt 0.233440 0.976050\nvt 0.961558 0.951513\nvt 0.963826 0.955652\nvt 0.611164 0.807176\nvt 0.541239 0.945556\nvt 0.762828 0.942289\nvt 0.234440 0.319451\nvt 0.988800 0.380585\nvt 0.987120 0.379558\nvt 0.988800 0.376039\nvt 0.603586 0.799550\nvt 0.234377 0.972813\nvt 0.861701 0.986757\nvt 0.860756 0.986757\nvt 0.861513 0.983271\nvt 0.753720 0.960808\nvt 0.756254 0.962843\nvt 0.756046 0.965412\nvt 0.753191 0.963310\nvt 0.987032 0.714791\nvt 0.984605 0.707666\nvt 0.987032 0.706785\nvt 0.968627 0.962998\nvt 0.965400 0.963416\nvt 0.968470 0.966551\nvt 0.968627 0.970406\nvt 0.962912 0.970245\nvt 0.953580 0.985480\nvt 0.958063 0.981544\nvt 0.958063 0.987027\nvt 0.874601 0.966103\nvt 0.260718 0.303454\nvt 0.261293 0.307135\nvt 0.265375 0.311062\nvt 0.261305 0.311139\nvt 0.263649 0.318217\nvt 0.609867 0.801421\nvt 0.133452 0.927217\nvt 0.938134 0.571434\nvt 0.943962 0.569123\nvt 0.947607 0.579735\nvt 0.215884 0.296062\nvt 0.142627 0.916055\nvt 0.142627 0.920852\nvt 0.133557 0.919274\nvt 0.935520 0.777229\nvt 0.934183 0.772154\nvt 0.941930 0.775026\nvt 0.949235 0.533008\nvt 0.310547 0.934731\nvt 0.307109 0.934353\nvt 0.650589 0.640211\nvt 0.643222 0.639488\nvt 0.642386 0.632547\nvt 0.224974 0.337941\nvt 0.235044 0.351450\nvt 0.946578 0.768420\nvt 0.978924 0.856949\nvt 0.982609 0.854568\nvt 0.982609 0.863011\nvt 0.956026 0.523399\nvt 0.952080 0.515616\nvt 0.212697 0.330856\nvt 0.635006 0.693591\nvt 0.627595 0.692593\nvt 0.630542 0.687397\nvt 0.927255 0.770755\nvt 0.641465 0.656213\nvt 0.642269 0.648351\nvt 0.217045 0.340787\nvt 0.650048 0.648432\nvt 0.134742 0.935247\nvt 0.142441 0.926652\nvt 0.639089 0.667612\nvt 0.641678 0.679395\nvt 0.212634 0.279556\nvt 0.939937 0.768228\nvt 0.954417 0.533090\nvt 0.222909 0.346710\nvt 0.242475 0.333945\nvt 0.950259 0.759466\nvt 0.241712 0.332214\nvt 0.655230 0.615903\nvt 0.643137 0.693003\nvt 0.638152 0.699868\nvt 0.216558 0.270559\nvt 0.847829 0.966407\nvt 0.855617 0.971601\nvt 0.854800 0.954323\nvt 0.256531 0.314844\nvt 0.268031 0.311687\nvt 0.272709 0.324155\nvt 0.101947 0.979220\nvt 0.096701 0.972459\nvt 0.101947 0.970067\nvt 0.955307 0.372079\nvt 0.944699 0.379601\nvt 0.943837 0.589839\nvt 0.637801 0.688099\nvt 0.634609 0.679085\nvt 0.916262 0.958757\nvt 0.916262 0.970856\nvt 0.907484 0.967125\nvt 0.657425 0.713584\nvt 0.648349 0.702379\nvt 0.254949 0.338358\nvt 0.244020 0.343967\nvt 0.135432 0.944009\nvt 0.129441 0.944568\nvt 0.241421 0.350870\nvt 0.251382 0.346352\nvt 0.247993 0.347753\nvt 0.272393 0.450238\nvt 0.309054 0.463450\nvt 0.799085 0.090015\nvt 0.790738 0.143492\nvt 0.280400 0.915341\nvt 0.282302 0.915880\nvt 0.962116 0.850707\nvt 0.964461 0.853757\nvt 0.974050 0.428030\nvt 0.974105 0.430159\nvt 0.972995 0.428909\nvt 0.101943 0.956776\nvt 0.100814 0.954740\nvt 0.099597 0.951589\nvt 0.097837 0.946429\nvt 0.966377 0.816549\nvt 0.096836 0.940553\nvt 0.099851 0.923094\nvt 0.102488 0.918453\nvt 0.006557 0.992254\nvt 0.006557 0.993473\nvt 0.005567 0.993498\nvt 0.279406 0.914319\nvt 0.279690 0.914793\nvt 0.086069 0.347829\nvt 0.102830 0.917572\nvt 0.076616 0.347383\nvt 0.527968 0.946799\nvt 0.153762 0.986733\nvt 0.048122 0.727418\nvt 0.087745 0.860425\nvt 0.413344 0.942561\nvt 0.090418 0.878685\nvt 0.097804 0.877413\nvt 0.092691 0.888515\nvt 0.468717 0.797191\nvt 0.992134 0.313007\nvt 0.993040 0.312126\nvt 0.993040 0.315653\nvt 0.949102 0.311775\nvt 0.122455 0.712626\nvt 0.958482 0.288022\nvt 0.985707 0.760898\nvt 0.988029 0.758579\nvt 0.988029 0.765116\nvt 0.207241 0.991425\nvt 0.205825 0.991425\nvt 0.207025 0.986730\nvt 0.648521 0.973284\nvt 0.648415 0.976747\nvt 0.449768 0.956583\nvt 0.078786 0.816412\nvt 0.075337 0.818536\nvt 0.648521 0.979955\nvt 0.646864 0.979559\nvt 0.642671 0.979123\nvt 0.126338 0.842968\nvt 0.413981 0.993130\nvt 0.413981 0.994077\nvt 0.413344 0.993345\nvt 0.230489 0.987271\nvt 0.230032 0.990735\nvt 0.990281 0.933551\nvt 0.991346 0.929353\nvt 0.991346 0.934169\nvt 0.634815 0.947801\nvt 0.631263 0.940387\nvt 0.433884 0.915957\nvt 0.104948 0.848643\nvt 0.113160 0.846899\nvt 0.650864 0.956296\nvt 0.484172 0.802233\nvt 0.485147 0.803280\nvt 0.640923 0.941181\nvt 0.487449 0.783333\nvt 0.280473 0.727808\nvt 0.520083 0.790265\nvt 0.306258 0.848472\nvt 0.973471 0.731093\nvt 0.604665 0.879956\nvt 0.923152 0.544467\nvt 0.087966 0.854055\nvt 0.909640 0.795629\nvt 0.916120 0.762683\nvt 0.910842 0.646293\nvt 0.591429 0.780771\nvt 0.367295 0.897938\nvt 0.884228 0.660569\nvt 0.891976 0.661750\nvt 0.399570 0.883648\nvt 0.420036 0.806608\nvt 0.450532 0.034242\nvt 0.635361 0.336036\nvt 0.439721 0.030247\nvt 0.836147 0.554091\nvt 0.527498 0.575486\nvt 0.551964 0.021401\nvt 0.189135 0.580500\nvt 0.579838 0.312615\nvt 0.312250 0.951876\nvt 0.312250 0.974429\nvt 0.303856 0.955715\nvt 0.378759 0.122351\nvt 0.651792 0.274097\nvt 0.938649 0.011770\nvt 0.970132 0.597828\nvt 0.277527 0.990223\nvt 0.110326 0.736248\nvt 0.992636 0.290498\nvt 0.993585 0.288022\nvt 0.993585 0.291076\nvt 0.136236 0.725163\nvt 0.954505 0.452108\nvt 0.024302 0.973432\nvt 0.021573 0.974636\nvt 0.959746 0.452522\nvt 0.959746 0.487018\nvt 0.561288 0.768329\nvt 0.627595 0.973284\nvt 0.985542 0.627624\nvt 0.987913 0.627388\nvt 0.987913 0.634088\nvt 0.562237 0.728795\nvt 0.576734 0.725644\nvt 0.844363 0.498377\nvt 0.333553 0.944605\nvt 0.866786 0.503066\nvt 0.910074 0.942020\nvt 0.752426 0.892820\nvt 0.750462 0.897200\nvt 0.875607 0.500525\nvt 0.205825 0.926435\nvt 0.364216 0.921866\nvt 0.631672 0.449486\nvt 0.437567 0.727509\nvt 0.367135 0.746375\nvt 0.658841 0.504477\nvt 0.021573 0.993606\nvt 0.022343 0.992468\nvt 0.022422 0.993606\nvt 0.506963 0.809939\nvt 0.953580 0.908548\nvt 0.963463 0.905217\nvt 0.963463 0.940229\nvt 0.974573 0.782990\nvt 0.961393 0.782538\nvt 0.974573 0.758579\nvt 0.126021 0.841818\nvt 0.231388 0.987189\nvt 0.231727 0.990735\nvt 0.657180 0.962145\nvt 0.987188 0.733359\nvt 0.984605 0.732005\nvt 0.987188 0.725929\nvt 0.265038 0.969490\nvt 0.256121 0.969490\nvt 0.264075 0.956101\nvt 0.432358 0.862806\nvt 0.183611 0.919864\nvt 0.193599 0.915752\nvt 0.193599 0.950845\nvt 0.544224 0.886220\nvt 0.695338 0.881618\nvt 0.696874 0.993768\nvt 0.695463 0.993768\nvt 0.695999 0.991290\nvt 0.128730 0.721117\nvt 0.955131 0.449850\nvt 0.103901 0.723922\nvt 0.106250 0.716605\nvt 0.114260 0.715057\nvt 0.094800 0.722581\nvt 0.103344 0.736484\nvt 0.987901 0.454680\nvt 0.985383 0.454680\nvt 0.986600 0.447838\nvt 0.242706 0.933878\nvt 0.453241 0.971299\nvt 0.878534 0.288022\nvt 0.616461 0.142306\nvt 0.610655 0.250912\nvt 0.818366 0.693727\nvt 0.587784 0.007700\nvt 0.590609 0.051045\nvt 0.598085 0.085824\nvt 0.222974 0.905459\nvt 0.908455 0.916215\nvt 0.987020 0.481311\nvt 0.987020 0.489134\nvt 0.985102 0.482469\nvt 0.785855 0.893664\nvt 0.785889 0.900509\nvt 0.989947 0.538085\nvt 0.555358 0.958072\nvt 0.555995 0.934607\nvt 0.577771 0.958072\nvt 0.525338 0.234985\nvt 0.983103 0.956493\nvt 0.983103 0.961630\nvt 0.979762 0.957633\nvt 0.982921 0.951367\nvt 0.859403 0.859162\nvt 0.978423 0.918113\nvt 0.573872 0.975148\nvt 0.578678 0.969210\nvt 0.578678 0.979560\nvt 0.611905 0.536775\nvt 0.927255 0.691746\nvt 0.059983 0.939946\nvt 0.542064 0.200067\nvt 0.739037 0.909588\nvt 0.970880 0.460468\nvt 0.974249 0.458712\nvt 0.974249 0.470172\nvt 0.739163 0.926171\nvt 0.971600 0.447838\nvt 0.894496 0.812515\nvt 0.973445 0.536154\nvt 0.977046 0.538790\nvt 0.611905 0.599101\nvt 0.710882 0.933105\nvt 0.880035 0.860250\nvt 0.059130 0.970202\nvt 0.985383 0.468688\nvt 0.987763 0.465818\nvt 0.987763 0.470152\nvt 0.218837 0.967066\nvt 0.862792 0.858023\nvt 0.209138 0.970785\nvt 0.212968 0.974340\nvt 0.724780 0.916830\nvt 0.983021 0.982319\nvt 0.979762 0.980031\nvt 0.983021 0.972769\nvt 0.723647 0.883555\nvt 0.027002 0.948211\nvt 0.429417 0.976628\nvt 0.432547 0.974803\nvt 0.432547 0.984298\nvt 0.470841 0.958757\nvt 0.972064 0.496807\nvt 0.717957 0.927037\nvt 0.109715 0.992695\nvt 0.110667 0.990359\nvt 0.110667 0.993605\nvt 0.981566 0.831287\nvt 0.981566 0.843429\nvt 0.978924 0.832817\nvt 0.723108 0.935444\nvt 0.972136 0.522412\nvt 0.712899 0.891709\nvt 0.207116 0.966136\nvt 0.714119 0.910754\nvt 0.712372 0.910403\nvt 0.205825 0.963961\nvt 0.981502 0.288022\nvt 0.981502 0.300988\nvt 0.978581 0.289118\nvt 0.985655 0.882088\nvt 0.727310 0.881618\nvt 0.973408 0.882120\nvt 0.657005 0.993517\nvt 0.655344 0.992974\nvt 0.657005 0.991094\nvt 0.363893 0.959729\nvt 0.363893 0.973276\nvt 0.361366 0.961107\nvt 0.345871 0.988983\nvt 0.347839 0.986497\nvt 0.347839 0.990554\nvt 0.968873 0.879609\nvt 0.984835 0.678391\nvt 0.984350 0.572946\nvt 0.987525 0.568875\nvt 0.987525 0.576023\nvt 0.724624 0.920183\nvt 0.801939 0.943230\nvt 0.977046 0.515616\nvt 0.948576 0.724117\nvt 0.045710 0.959063\nvt 0.541071 0.227679\nvt 0.954688 0.747440\nvt 0.952582 0.669283\nvt 0.984350 0.550565\nvt 0.987539 0.549929\nvt 0.987539 0.557737\nvt 0.975986 0.381000\nvt 0.970179 0.370238\nvt 0.975986 0.357483\nvt 0.816638 0.959607\nvt 0.184632 0.973218\nvt 0.023016 0.915752\nvt 0.055491 0.950550\nvt 0.955798 0.452524\nvt 0.100306 0.732536\nvt 0.986456 0.744498\nvt 0.787980 0.911794\nvt 0.362591 0.990666\nvt 0.303856 0.986206\nvt 0.305069 0.985567\nvt 0.305069 0.990765\nvt 0.079145 0.361403\nvt 0.094593 0.352337\nvt 0.975671 0.434764\nvt 0.967790 0.863956\nvt 0.607515 0.743246\nvt 0.935496 0.885730\nvt 0.616060 0.723192\nvt 0.059159 0.362255\nvt 0.932370 0.820417\nvt 0.059597 0.764596\nvt 0.928083 0.811959\nvt 0.089421 0.365616\nvt 0.079636 0.370093\nvt 0.068783 0.377513\nvt 0.029135 0.722667\nvt 0.273474 0.522983\nvt 0.466805 0.983047\nvt 0.466805 0.988504\nvt 0.464376 0.984853\nvt 0.394000 0.932571\nvt 0.399533 0.953094\nvt 0.391507 0.953122\nvt 0.328750 0.988066\nvt 0.329491 0.986790\nvt 0.330565 0.988013\nvt 0.029416 0.296055\nvt 0.988928 0.431429\nvt 0.688325 0.953550\nvt 0.272923 0.701729\nvt 0.218811 0.987990\nvt 0.218375 0.987679\nvt 0.218811 0.986730\nvt 0.008195 0.267749\nvt 0.631263 0.905666\nvt 0.832622 0.985276\nvt 0.640562 0.889240\nvt 0.668426 0.923871\nvt 0.034967 0.249323\nvt 0.027877 0.251360\nvt 0.985939 0.597076\nvt 0.987098 0.589796\nvt 0.987098 0.597828\nvt 0.458723 0.798448\nvt 0.656787 0.884830\nvt 0.450741 0.822181\nvt 0.833507 0.938039\nvt 0.668314 0.976270\nvt 0.672004 0.970894\nvt 0.672004 0.981550\nvt 0.555358 0.973597\nvt 0.562738 0.969210\nvt 0.562738 0.977700\nvt 0.460585 0.876705\nvt 0.081760 0.870458\nvt 0.484670 0.893689\nvt 0.205825 0.616607\nvt 0.210014 0.800543\nvt 0.205825 0.766353\nvt 0.577532 0.523435\nvt 0.398283 0.782416\nvt 0.413606 0.793472\nvt 0.431270 0.943085\nvt 0.828440 0.982897\nvt 0.144053 0.092248\nvt 0.897602 0.446510\nvt 0.495939 0.554700\nvt 0.888621 0.451765\nvt 0.249475 0.199276\nvt 0.645103 0.153259\nvt 0.260932 0.165052\nvt 0.649834 0.172622\nvt 0.940218 0.894078\nvt 0.914754 0.437323\nvt 0.127837 0.154839\nvt 0.147202 0.073312\nvt 0.131126 0.203058\nvt 0.164836 0.204157\nvt 0.230272 0.250551\nvt 0.636060 0.799883\nvt 0.012571 0.644485\nvt 0.027960 0.229405\nvt 0.170549 0.197103\nvt 0.270237 0.334799\nvt 0.505293 0.951155\nvt 0.967555 0.812351\nvt 0.522219 0.946208\nvt 0.083773 0.994189\nvt 0.814292 0.993814\nvt 0.814730 0.993392\nvt 0.814730 0.994421\nvt 0.967790 0.818669\nvt 0.290214 0.920705\nvt 0.123360 0.991090\nvt 0.122377 0.991708\nvt 0.121926 0.988430\nvt 0.123360 0.987092\nvt 0.391423 0.991699\nvt 0.392690 0.991582\nvt 0.392690 0.994165\nvt 0.475266 0.911984\nvt 0.556663 0.992249\nvt 0.555358 0.990792\nvt 0.556663 0.988839\nvt 0.292721 0.930886\nvt 0.575628 0.993571\nvt 0.573872 0.992436\nvt 0.575628 0.990699\nvt 0.470484 0.925776\nvt 0.928385 0.793376\nvt 0.459705 0.906896\nvt 0.799115 0.976506\nvt 0.803103 0.970746\nvt 0.803103 0.981137\nvt 0.791709 0.497916\nvt 0.470302 0.942829\nvt 0.872872 0.985538\nvt 0.875516 0.982918\nvt 0.875516 0.988812\nvt 0.862649 0.939426\nvt 0.854654 0.936771\nvt 0.886313 0.910803\nvt 0.905363 0.502286\nvt 0.847281 0.922604\nvt 0.910368 0.462903\nvt 0.813389 0.462903\nvt 0.829580 0.472770\nvt 0.649497 0.613810\nvt 0.541120 0.387510\nvt 0.158613 0.054239\nvt 0.652944 0.095415\nvt 0.759625 0.217520\nvt 0.523072 0.477560\nvt 0.175553 0.005569\nvt 0.562119 0.536775\nvt 0.585521 0.564508\nvt 0.827773 0.986043\nvt 0.645846 0.888096\nvt 0.544134 0.933516\nvt 0.539355 0.930912\nvt 0.544134 0.906383\nvt 0.695681 0.956956\nvt 0.642566 0.886993\nvt 0.645430 0.887672\nvt 0.278998 0.691209\nvt 0.300533 0.680646\nvt 0.569504 0.525636\nvt 0.800081 0.992276\nvt 0.800081 0.993455\nvt 0.799115 0.992305\nvt 0.832221 0.982212\nvt 0.975248 0.433931\nvt 0.928336 0.852144\nvt 0.005567 0.679551\nvt 0.005620 0.301611\nvt 0.060024 0.350481\nvt 0.110792 0.915752\nvt 0.097552 0.903783\nvt 0.072192 0.820893\nvt 0.375350 0.979826\nvt 0.380289 0.972126\nvt 0.380289 0.980976\nvt 0.031002 0.220674\nvt 0.972473 0.413803\nvt 0.104598 0.199343\nvt 0.038216 0.193291\nvt 0.523737 0.906383\nvt 0.528221 0.917474\nvt 0.080214 0.337482\nvt 0.282166 0.973444\nvt 0.077814 0.341958\nvt 0.075970 0.346601\nvt 0.072891 0.332489\nvt 0.072100 0.326828\nvt 0.799706 0.909664\nvt 0.481823 0.906591\nvt 0.278578 0.956293\nvt 0.500341 0.951016\nvt 0.642596 0.993781\nvt 0.110792 0.958928\nvt 0.831807 0.979547\nvt 0.015953 0.279476\nvt 0.347141 0.959729\nvt 0.256121 0.983328\nvt 0.261268 0.980629\nvt 0.261268 0.986691\nvt 0.217373 0.278610\nvt 0.239401 0.264695\nvt 0.446023 0.987897\nvt 0.448415 0.982438\nvt 0.449427 0.987897\nvt 0.256461 0.350186\nvt 0.314859 0.936411\nvt 0.311444 0.940737\nvt 0.959044 0.422055\nvt 0.413430 0.975896\nvt 0.272089 0.336933\nvt 0.278351 0.315104\nvt 0.312536 0.903958\nvt 0.227561 0.291250\nvt 0.603894 0.807304\nvt 0.591130 0.990392\nvt 0.589881 0.989432\nvt 0.591130 0.984144\nvt 0.540617 0.961500\nvt 0.236531 0.323397\nvt 0.889030 0.982918\nvt 0.875965 0.950565\nvt 0.236575 0.971905\nvt 0.731190 0.969294\nvt 0.734470 0.960032\nvt 0.734470 0.969682\nvt 0.861737 0.952785\nvt 0.886694 0.971588\nvt 0.726802 0.966229\nvt 0.761109 0.942876\nvt 0.239381 0.329708\nvt 0.765536 0.946868\nvt 0.766220 0.956325\nvt 0.267312 0.290373\nvt 0.981331 0.820149\nvt 0.978924 0.817731\nvt 0.981331 0.807178\nvt 0.249168 0.293807\nvt 0.288662 0.987384\nvt 0.291027 0.984582\nvt 0.291027 0.988829\nvt 0.708642 0.983287\nvt 0.711647 0.982604\nvt 0.711647 0.988309\nvt 0.762000 0.966292\nvt 0.951352 0.880879\nvt 0.242862 0.988789\nvt 0.244296 0.987189\nvt 0.244296 0.990786\nvt 0.172477 0.921354\nvt 0.231895 0.954664\nvt 0.861006 0.970984\nvt 0.235454 0.958239\nvt 0.942484 0.795740\nvt 0.940419 0.795740\nvt 0.941524 0.793376\nvt 0.513304 0.990371\nvt 0.511670 0.988508\nvt 0.513304 0.985248\nvt 0.237257 0.288856\nvt 0.229651 0.312709\nvt 0.615784 0.809366\nvt 0.542891 0.944654\nvt 0.962951 0.960825\nvt 0.874381 0.970572\nvt 0.872872 0.962383\nvt 0.606460 0.987427\nvt 0.602564 0.986886\nvt 0.606460 0.982847\nvt 0.939347 0.582083\nvt 0.134273 0.915752\nvt 0.391423 0.979849\nvt 0.396572 0.972126\nvt 0.396572 0.980444\nvt 0.484290 0.980248\nvt 0.484290 0.987199\nvt 0.482020 0.982368\nvt 0.958998 0.516241\nvt 0.142156 0.935942\nvt 0.495516 0.971974\nvt 0.500536 0.962462\nvt 0.500536 0.974853\nvt 0.263767 0.337836\nvt 0.982053 0.336596\nvt 0.982053 0.345900\nvt 0.978581 0.338345\nvt 0.646156 0.617339\nvt 0.858371 0.950565\nvt 0.540153 0.970240\nvt 0.139721 0.944902\nvt 0.315562 0.486903\nvt 0.316118 0.504327\nvt 0.283844 0.916689\nvt 0.644210 0.993675\nvt 0.005603 0.992414\nvt 0.155056 0.984571\nvt 0.080381 0.856687\nvt 0.414327 0.932592\nvn -0.160100 -0.489100 0.857400\nvn -0.033100 -0.862000 0.505800\nvn -0.083700 -0.849000 0.521700\nvn -0.239600 0.313900 0.918700\nvn -0.224100 -0.103400 0.969100\nvn -0.032700 -0.032000 0.998900\nvn -0.364500 -0.097900 0.926000\nvn -0.428300 0.254800 0.866900\nvn -0.481100 -0.236500 0.844100\nvn -0.236600 -0.459200 0.856200\nvn -0.577100 -0.326400 0.748600\nvn -0.604700 0.115100 0.788000\nvn -0.460100 -0.460400 0.759100\nvn -0.364100 -0.494200 0.789400\nvn -0.660600 -0.442500 0.606400\nvn -0.718100 -0.067200 0.692600\nvn -0.510000 -0.597100 0.619200\nvn -0.548500 -0.597900 0.584400\nvn -0.733600 -0.261000 0.627400\nvn -0.467800 -0.704500 0.533700\nvn -0.517200 -0.535100 0.667900\nvn -0.605200 -0.467800 0.644100\nvn -0.451300 -0.606000 0.655000\nvn -0.561700 -0.288500 0.775400\nvn -0.531100 -0.467800 0.706400\nvn -0.510400 -0.259900 0.819700\nvn -0.564400 -0.259000 0.783800\nvn -0.625100 -0.050900 0.778800\nvn -0.642000 -0.039600 0.765600\nvn -0.692900 0.027100 0.720500\nvn -0.595600 0.117700 0.794500\nvn -0.694800 0.088000 0.713800\nvn -0.671200 -0.093800 0.735300\nvn -0.668300 -0.182700 0.721100\nvn -0.516700 -0.345700 0.783200\nvn -0.670800 -0.017500 0.741400\nvn -0.510300 -0.239000 0.826100\nvn 0.098600 -0.103300 0.989700\nvn -0.030100 -0.324300 0.945500\nvn -0.053200 -0.260800 0.963900\nvn -0.099300 -0.290600 0.951600\nvn 0.031200 -0.178700 0.983400\nvn 0.217500 0.094600 0.971400\nvn 0.076100 -0.128600 0.988800\nvn 0.165900 0.051600 0.984800\nvn 0.169900 0.336500 0.926200\nvn 0.166800 0.187100 0.968000\nvn 0.134300 -0.025700 0.990600\nvn 0.031900 -0.510000 0.859600\nvn -0.057500 -0.468200 0.881700\nvn -0.031400 0.222000 0.974500\nvn 0.099200 -0.180200 0.978600\nvn 0.048300 -0.342500 0.938300\nvn 0.048800 -0.074700 0.996000\nvn -0.078300 -0.614000 0.785400\nvn -0.106100 -0.845600 0.523100\nvn 0.007600 -0.337000 0.941400\nvn 0.044300 -0.415000 0.908700\nvn -0.211200 -0.588100 0.780700\nvn -0.240900 -0.822900 0.514500\nvn -0.043100 -0.345200 0.937500\nvn -0.030400 -0.388200 0.921000\nvn -0.246100 -0.530700 0.811000\nvn -0.479200 -0.759600 0.439700\nvn -0.212000 -0.178000 0.960900\nvn -0.065500 -0.287500 0.955500\nvn -0.054200 -0.352200 0.934300\nvn -0.546900 -0.385500 0.743200\nvn -0.309400 -0.577900 0.755200\nvn -0.514200 -0.625900 0.586300\nvn -0.375800 -0.292600 0.879200\nvn -0.456000 0.016300 0.889800\nvn -0.532100 0.034600 0.845900\nvn -0.499800 -0.373900 0.781300\nvn -0.259000 0.192600 0.946400\nvn -0.313500 0.033000 0.949000\nvn -0.270700 0.421600 0.865400\nvn -0.396300 0.046800 0.916900\nvn -0.520700 -0.395000 0.756800\nvn 0.085400 0.170700 0.981600\nvn 0.059000 -0.010600 0.998200\nvn -0.003500 -0.244200 0.969700\nvn -0.145600 -0.386700 0.910600\nvn -0.179700 -0.278600 0.943400\nvn -0.663700 -0.040000 0.746900\nvn -0.551600 -0.233000 0.800900\nvn -0.540900 -0.389000 0.745600\nvn -0.618900 -0.395900 0.678400\nvn -0.674800 -0.270900 0.686500\nvn -0.691800 -0.165900 0.702700\nvn -0.376100 -0.070200 0.923900\nvn -0.214500 -0.159500 0.963600\nvn -0.067500 -0.169300 0.983200\nvn -0.068100 -0.425100 0.902600\nvn -0.044600 -0.399100 0.915800\nvn -0.564500 -0.090000 0.820500\nvn -0.425600 -0.447800 0.786300\nvn -0.158700 -0.330300 0.930400\nvn -0.276400 0.045800 0.959900\nvn -0.248300 0.199700 0.947900\nvn -0.256100 -0.372800 0.891800\nvn -0.160800 -0.448900 0.879000\nvn -0.063300 -0.352000 0.933800\nvn -0.425500 -0.702700 0.570300\nvn -0.114300 -0.398000 0.910200\nvn -0.158600 -0.519500 0.839600\nvn -0.342400 -0.561700 0.753100\nvn -0.485100 -0.418600 0.767800\nvn -0.403500 -0.142600 0.903800\nvn -0.456600 0.091400 0.884900\nvn -0.663000 0.113400 0.740000\nvn -0.403500 0.275000 0.872700\nvn -0.600100 0.304100 0.739900\nvn -0.485500 -0.502100 0.715700\nvn -0.484000 -0.595300 0.641300\nvn -0.626400 -0.415500 0.659400\nvn -0.683700 -0.013300 0.729600\nvn -0.747300 -0.115000 0.654400\nvn -0.762400 0.150200 0.629400\nvn -0.707300 0.218700 0.672200\nvn -0.713700 0.312400 0.626900\nvn -0.609600 -0.296900 0.734900\nvn -0.354800 -0.354400 0.865100\nvn -0.441100 -0.148500 0.885100\nvn -0.521400 0.130400 0.843300\nvn -0.551600 0.319900 0.770300\nvn -0.699800 0.346700 0.624600\nvn -0.228600 -0.221300 0.948000\nvn -0.533200 0.479300 0.697100\nvn -0.266200 0.533700 0.802600\nvn -0.299300 0.463800 0.833800\nvn -0.281500 -0.031800 0.959000\nvn -0.306900 0.196400 0.931200\nvn -0.583800 0.416800 0.696800\nvn 0.000000 -0.172000 0.985100\nvn 0.000000 0.547300 0.836900\nvn 0.000000 0.462200 0.886700\nvn 0.000000 0.008100 0.999900\nvn -0.287900 0.345900 0.893000\nvn 0.000000 0.334900 0.942200\nvn -0.202600 -0.092000 0.974900\nvn -0.110700 0.018200 0.993700\nvn -0.051200 -0.149100 0.987500\nvn -0.037800 0.072800 0.996600\nvn -0.164000 0.229700 0.959300\nvn -0.145400 0.172600 0.974200\nvn -0.468400 -0.033300 0.882900\nvn -0.502400 -0.223800 0.835200\nvn -0.602300 -0.077900 0.794400\nvn -0.545600 -0.321300 0.774000\nvn -0.599600 -0.356900 0.716300\nvn -0.585300 -0.326800 0.742000\nvn -0.583900 -0.051200 0.810200\nvn -0.567300 -0.223200 0.792700\nvn -0.578100 -0.155700 0.800900\nvn -0.617900 -0.334800 0.711400\nvn -0.588100 -0.383100 0.712200\nvn -0.592900 -0.298300 0.747900\nvn -0.589000 -0.367700 0.719600\nvn -0.562400 -0.449100 0.694300\nvn -0.233200 -0.519600 0.821900\nvn -0.234300 -0.596100 0.768000\nvn -0.203600 -0.790300 0.577900\nvn -0.109700 -0.594800 0.796300\nvn -0.119400 -0.545300 0.829600\nvn -0.137700 -0.652500 0.745100\nvn -0.111700 -0.770900 0.627000\nvn -0.091500 -0.671900 0.735000\nvn -0.213400 -0.715800 0.664800\nvn -0.154700 -0.683500 0.713300\nvn -0.251500 -0.643100 0.723300\nvn -0.434300 -0.517700 0.737100\nvn -0.373600 -0.600200 0.707200\nvn -0.279100 -0.476500 0.833700\nvn -0.154800 -0.358800 0.920500\nvn 0.000000 -0.305400 0.952200\nvn -0.187400 -0.596300 0.780500\nvn -0.205100 -0.738900 0.641800\nvn -0.245800 -0.736800 0.629800\nvn -0.202900 -0.533700 0.821000\nvn -0.169400 -0.679700 0.713600\nvn -0.442700 -0.306200 0.842700\nvn -0.336400 -0.489500 0.804500\nvn -0.216500 -0.584100 0.782200\nvn -0.650300 -0.275600 0.707900\nvn -0.521400 -0.458500 0.719600\nvn -0.300700 -0.454500 0.838400\nvn -0.343000 -0.699000 0.627500\nvn -0.243200 -0.631200 0.736500\nvn -0.625300 -0.087400 0.775400\nvn -0.654700 -0.222600 0.722300\nvn -0.725600 -0.151600 0.671200\nvn -0.679500 -0.280000 0.678100\nvn -0.758600 -0.187400 0.624000\nvn -0.690100 0.038500 0.722600\nvn -0.617000 0.016500 0.786800\nvn -0.667000 -0.311400 0.676800\nvn -0.770700 -0.211200 0.601100\nvn -0.654500 -0.378000 0.654800\nvn -0.749000 -0.262700 0.608300\nvn -0.711600 -0.124200 0.691500\nvn -0.810600 -0.166100 0.561400\nvn -0.217300 -0.266200 0.939100\nvn -0.130500 -0.357400 0.924700\nvn -0.706200 -0.068500 0.704700\nvn -0.799700 -0.084900 0.594300\nvn -0.812100 -0.117000 0.571600\nvn -0.757400 -0.009900 0.652800\nvn -0.822800 -0.145800 0.549200\nvn -0.354600 -0.245200 0.902300\nvn -0.728000 0.138600 0.671300\nvn -0.656100 0.114900 0.745800\nvn -0.517700 -0.142000 0.843700\nvn -0.191800 -0.486500 0.852300\nvn -0.100300 -0.364900 0.925600\nvn 0.000000 -0.314700 0.949200\nvn -0.750600 0.045600 0.659100\nvn -0.388400 0.057200 0.919700\nvn 0.000000 -0.164300 0.986400\nvn -0.096300 0.014700 0.995200\nvn -0.023400 -0.210900 0.977200\nvn -0.237800 0.055800 0.969700\nvn -0.261600 0.275200 0.925100\nvn -0.563100 0.078600 0.822600\nvn -0.583700 0.244500 0.774300\nvn 0.000000 0.060700 0.998100\nvn -0.411400 0.265400 0.871900\nvn -0.110800 0.254300 0.960700\nvn 0.011100 0.049900 0.998700\nvn 0.009100 0.239800 0.970800\nvn -0.883600 0.200200 0.423300\nvn -0.762100 0.289700 0.578900\nvn -0.785100 0.292200 0.546000\nvn -0.591700 0.383900 0.708900\nvn -0.611700 0.416000 0.672800\nvn -0.405500 0.422500 0.810600\nvn -0.425400 0.499800 0.754400\nvn -0.836400 0.029900 0.547300\nvn -0.735900 0.059400 0.674400\nvn -0.870900 -0.061900 0.487600\nvn -0.856500 -0.023200 0.515600\nvn -0.856500 -0.040700 0.514500\nvn -0.827000 0.083300 0.555900\nvn -0.864600 -0.074100 0.497000\nvn -0.876500 0.068800 0.476500\nvn -0.903900 0.000200 0.427700\nvn -0.909200 -0.005200 0.416200\nvn -0.781700 0.196600 0.591800\nvn -0.975000 0.079100 0.207400\nvn -0.947100 0.125200 0.295500\nvn -0.952700 0.093700 0.288900\nvn -0.911700 0.184300 0.367000\nvn -0.960700 0.083500 0.264500\nvn -0.939900 0.163900 0.299400\nvn -0.976300 0.050300 0.210300\nvn -0.975700 0.027700 0.217300\nvn -0.982000 0.031500 0.186000\nvn -0.678800 0.733200 0.039200\nvn -0.479400 0.876500 0.044000\nvn -0.547700 0.820000 -0.166200\nvn 0.000000 0.527000 0.849800\nvn -0.275700 0.511500 0.813800\nvn -0.283700 0.273400 0.919100\nvn -0.763000 0.446500 0.467300\nvn -0.660700 0.437100 0.610200\nvn -0.651800 0.535100 0.537400\nvn -0.817700 0.482100 0.314400\nvn -0.776800 0.483100 0.404000\nvn -0.655000 0.513000 0.554800\nvn -0.779900 0.409600 0.473300\nvn -0.819800 0.457700 0.344100\nvn -0.499100 0.472800 0.726200\nvn -0.261100 0.627600 0.733400\nvn 0.000000 0.631300 0.775500\nvn -0.278700 0.619500 0.733800\nvn -0.495500 0.571600 0.654000\nvn -0.481900 0.587300 0.650200\nvn -0.500400 0.253300 0.827900\nvn 0.000000 0.653000 0.757300\nvn -0.632600 0.160700 0.757600\nvn -0.832400 0.191000 0.520100\nvn -0.859000 0.364200 0.359800\nvn -0.494100 -0.789700 0.363600\nvn -0.430200 -0.679400 0.594300\nvn -0.489600 -0.504600 0.711100\nvn -0.921900 -0.139700 0.361300\nvn -0.922900 -0.216300 0.318400\nvn -0.700400 -0.428800 0.570600\nvn -0.396200 -0.649300 0.649100\nvn -0.241900 -0.671800 0.700000\nvn -0.306500 -0.391200 0.867700\nvn -0.579400 -0.776000 0.249300\nvn -0.500800 -0.769300 0.396600\nvn 0.000000 -0.393400 0.919300\nvn -0.428600 -0.764400 0.481600\nvn -0.195500 -0.815900 0.544100\nvn -0.636600 -0.534000 0.556300\nvn -0.545400 -0.527800 0.651100\nvn 0.000000 -0.689500 0.724300\nvn -0.456500 -0.594200 0.662200\nvn -0.203000 -0.662800 0.720800\nvn -0.659600 -0.093100 0.745800\nvn -0.480500 -0.011700 0.876900\nvn 0.000000 -0.825300 0.564700\nvn -0.490200 0.081300 0.867800\nvn -0.478300 0.339700 0.809800\nvn -0.496200 0.285700 0.819800\nvn -0.388300 -0.162700 0.907000\nvn -0.344600 -0.506500 0.790300\nvn -0.278200 -0.948400 0.152100\nvn -0.419200 -0.787600 0.451600\nvn -0.371900 -0.781900 0.500300\nvn -0.023700 -0.902800 0.429300\nvn 0.027500 -0.972700 0.230300\nvn -0.447000 -0.753200 0.482500\nvn -0.133800 -0.797800 0.587900\nvn -0.478700 -0.733100 0.483100\nvn -0.502000 -0.850900 0.154600\nvn -0.606900 -0.762300 0.224700\nvn -0.744600 -0.491300 0.451800\nvn -0.741100 -0.106000 0.662900\nvn -0.553900 0.012800 0.832500\nvn -0.564500 0.119600 0.816700\nvn -0.405700 -0.685000 0.605200\nvn -0.734100 -0.484000 0.476300\nvn -0.699400 -0.446900 0.557700\nvn 0.000000 0.102600 0.994700\nvn -0.289100 0.076400 0.954200\nvn -0.306900 -0.102900 0.946100\nvn -0.571500 -0.469500 0.673000\nvn -0.765400 0.344800 0.543400\nvn -0.901200 0.380500 0.207700\nvn -0.931300 0.284000 0.227900\nvn -0.949100 0.204200 0.239800\nvn -0.967800 0.179200 0.176600\nvn -0.441100 -0.225800 0.868600\nvn -0.346500 0.187800 0.919000\nvn -0.408900 0.093700 0.907700\nvn -0.383000 0.114400 0.916600\nvn -0.297000 -0.149800 0.943100\nvn -0.149200 -0.151700 0.977100\nvn 0.000000 -0.619000 0.785300\nvn 0.011300 -0.526400 0.850100\nvn 0.294800 -0.737300 0.607900\nvn -0.863400 -0.411500 0.291800\nvn -0.799500 -0.120500 0.588400\nvn -0.142000 -0.989800 -0.001400\nvn -0.475400 -0.879700 -0.002500\nvn -0.680700 -0.732400 0.014500\nvn -0.068600 -0.970000 0.233000\nvn 0.225500 -0.958400 -0.175000\nvn -0.516200 0.020100 0.856200\nvn 0.546900 -0.804900 0.230300\nvn -0.246000 -0.194200 0.949600\nvn 0.000000 -0.119200 0.992900\nvn -0.063200 0.186600 0.980400\nvn -0.572100 -0.189000 0.798100\nvn -0.517900 -0.297000 0.802200\nvn -0.634500 -0.180200 0.751500\nvn -0.617100 -0.181900 0.765600\nvn -0.606900 -0.340700 0.718000\nvn -0.658500 -0.287300 0.695600\nvn 0.466100 -0.878800 -0.101500\nvn -0.569300 -0.091600 0.817000\nvn -0.647200 -0.072200 0.758900\nvn 0.000000 0.591200 0.806500\nvn -0.017500 0.581700 0.813200\nvn -0.110300 0.314600 0.942800\nvn 0.000000 0.154100 0.988000\nvn 0.040700 0.415900 0.908500\nvn -0.691500 -0.447700 0.566900\nvn -0.436300 -0.203900 0.876400\nvn 0.491000 -0.631700 0.599900\nvn -0.094000 -0.363100 0.927000\nvn 0.261900 -0.528000 0.807800\nvn -0.062200 -0.970800 -0.231500\nvn -0.302800 -0.897700 -0.319900\nvn -0.599800 -0.767900 -0.224600\nvn 0.270300 -0.928100 -0.255900\nvn -0.777900 -0.565000 0.275000\nvn 0.519800 -0.801200 0.296500\nvn 0.444700 -0.894400 -0.046800\nvn 0.142000 -0.979400 0.143700\nvn 0.226200 -0.831400 0.507500\nvn -0.034300 -0.985700 -0.165000\nvn -0.350400 -0.894900 0.276400\nvn -0.215100 -0.747700 0.628200\nvn -0.414700 -0.909500 -0.029200\nvn -0.570500 -0.182100 0.800800\nvn -0.584500 -0.218500 0.781400\nvn -0.524700 -0.313300 0.791500\nvn -0.385200 -0.484100 0.785700\nvn -0.602800 -0.299100 0.739700\nvn -0.103500 0.421600 0.900800\nvn -0.546900 -0.467900 0.694200\nvn -0.611000 -0.337600 0.716000\nvn -0.450100 -0.658600 0.603100\nvn -0.510300 -0.538600 0.670500\nvn -0.347100 -0.813100 0.467300\nvn -0.278100 -0.897900 0.341000\nvn -0.359100 -0.807800 0.467500\nvn -0.025400 -0.994400 -0.103000\nvn -0.185600 -0.968400 0.166200\nvn 0.372500 -0.723300 -0.581400\nvn 0.246800 -0.865800 -0.435300\nvn -0.031200 -0.139700 0.989700\nvn -0.185500 0.144600 0.971900\nvn 0.076200 0.308300 0.948200\nvn 0.169800 -0.242900 0.955000\nvn 0.336200 0.378500 0.862300\nvn 0.640400 -0.663700 0.386400\nvn 0.734400 0.241200 0.634400\nvn 0.903200 0.284400 0.321300\nvn 0.780400 -0.623800 0.042900\nvn 0.981100 0.087500 -0.172500\nvn -0.452600 0.471100 0.757100\nvn -0.492200 0.237900 0.837300\nvn -0.630400 0.153600 0.760900\nvn 0.085100 0.958100 -0.273400\nvn 0.192100 0.934900 -0.298300\nvn -0.073000 0.995500 0.060900\nvn -0.331800 -0.635700 0.697000\nvn -0.233000 -0.786900 0.571400\nvn 0.021200 -0.979100 0.202200\nvn 0.408900 -0.888300 -0.208900\nvn -0.422500 -0.164500 0.891300\nvn -0.448700 -0.118000 0.885800\nvn -0.355200 -0.047900 0.933500\nvn -0.347700 0.730400 0.587900\nvn -0.542000 0.402100 0.738000\nvn -0.145600 0.982500 0.116500\nvn -0.243800 0.895700 0.371700\nvn -0.333100 0.460800 0.822600\nvn -0.404200 0.201500 0.892200\nvn -0.221100 0.312700 0.923700\nvn -0.600100 -0.237300 0.763900\nvn -0.496700 -0.488900 0.717100\nvn -0.450500 -0.419400 0.788000\nvn -0.402000 -0.641600 0.653200\nvn -0.335200 -0.726600 0.599700\nvn -0.309000 -0.746600 0.589100\nvn -0.284400 0.470000 0.835500\nvn -0.353500 0.299700 0.886100\nvn -0.393600 0.397800 0.828700\nvn -0.634500 0.194500 0.748000\nvn -0.649500 0.040000 0.759200\nvn -0.593100 0.125800 0.795200\nvn -0.321200 -0.546100 0.773700\nvn -0.261200 -0.738400 0.621700\nvn -0.202000 -0.726200 0.657100\nvn -0.450800 -0.104500 0.886400\nvn -0.388700 -0.355900 0.849800\nvn -0.347600 -0.324700 0.879600\nvn -0.282300 -0.551900 0.784600\nvn -0.174100 -0.733700 0.656700\nvn -0.371300 -0.057100 0.926800\nvn -0.286000 -0.314100 0.905300\nvn -0.239800 -0.571200 0.785000\nvn -0.133400 -0.770700 0.623000\nvn -0.175400 -0.089800 0.980400\nvn -0.303100 -0.047900 0.951700\nvn 0.000000 -0.646500 0.762900\nvn -0.188600 -0.610700 0.769000\nvn 0.000000 -0.131000 0.991400\nvn -0.184100 -0.376200 0.908000\nvn -0.205600 -0.863500 0.460500\nvn -0.160700 -0.858000 0.487900\nvn -0.112600 -0.869400 0.481100\nvn -0.090000 -0.868700 0.487000\nvn 0.000000 -0.803500 0.595300\nvn -0.524800 -0.158300 0.836400\nvn -0.486900 0.186800 0.853200\nvn 0.000000 0.298400 0.954400\nvn -0.601900 0.206500 0.771400\nvn -0.185900 0.940700 0.283800\nvn -0.355700 0.792900 0.494700\nvn -0.495000 0.548800 0.673500\nvn -0.643100 -0.060900 0.763300\nvn -0.514200 -0.188500 0.836600\nvn -0.479000 0.081000 0.874000\nvn -0.396600 0.418500 0.817000\nvn -0.313700 0.669400 0.673400\nvn -0.336200 0.779400 0.528700\nvn -0.506900 0.487400 0.710900\nvn -0.292900 0.741900 0.603100\nvn -0.228700 0.045200 0.972400\nvn -0.261700 -0.246600 0.933100\nvn -0.135900 -0.766300 0.628000\nvn -0.414100 -0.587700 0.695100\nvn -0.314800 -0.442000 0.839900\nvn -0.504900 -0.505000 0.700000\nvn -0.232500 -0.657500 0.716700\nvn -0.182200 0.721700 0.667800\nvn -0.422700 -0.683000 0.595700\nvn 0.473700 -0.465000 0.747900\nvn -0.118300 -0.888100 0.444100\nvn -0.388200 -0.612800 0.688200\nvn 0.000000 -0.392200 0.919900\nvn -0.089200 0.973300 0.211600\nvn 0.123100 0.982800 -0.137900\nvn -0.202900 0.569600 0.796500\nvn -0.054900 0.941400 0.332600\nvn 0.046100 -0.978700 -0.200100\nvn -0.037700 -0.969800 -0.240900\nvn -0.012600 -0.929400 -0.368700\nvn -0.206700 -0.862100 0.462700\nvn 0.051700 -0.991000 -0.123500\nvn 0.342000 0.814700 -0.468200\nvn 0.436600 0.715100 -0.545800\nvn -0.058300 -0.930100 -0.362500\nvn 0.000000 -0.965100 -0.261800\nvn 0.000000 -0.866800 0.498600\nvn 0.858400 -0.235600 -0.455700\nvn 0.890200 -0.393000 -0.230200\nvn 0.074500 -0.428000 -0.900700\nvn 0.000000 -0.405700 -0.914000\nvn 0.493700 -0.610400 -0.619400\nvn 0.635900 -0.618100 -0.462100\nvn 0.297100 -0.612100 -0.732800\nvn 0.117600 -0.559300 -0.820600\nvn 0.283100 0.741900 -0.607700\nvn 0.592700 0.339500 -0.730300\nvn 0.572000 0.314200 -0.757700\nvn 0.085000 -0.499000 -0.862400\nvn 0.209800 0.891000 -0.402600\nvn 0.307200 -0.683800 -0.661800\nvn 0.419500 -0.659000 -0.624300\nvn 0.203600 -0.286100 -0.936300\nvn 0.000000 -0.388600 -0.921400\nvn 0.258900 -0.283500 -0.923300\nvn 0.170600 -0.297200 -0.939400\nvn 0.340400 0.430300 -0.836000\nvn 0.506000 -0.332500 -0.795800\nvn 0.583700 -0.301000 -0.754100\nvn 0.444300 0.636900 -0.630000\nvn 0.506900 0.333200 -0.794900\nvn 0.637900 -0.097900 -0.763900\nvn 0.755800 -0.379900 -0.533200\nvn 0.415700 -0.237200 -0.878000\nvn 0.617600 0.167200 -0.768500\nvn 0.818500 -0.209500 -0.534900\nvn 0.855600 0.103000 -0.507300\nvn 0.650000 0.202900 -0.732300\nvn 0.899300 -0.024900 -0.436500\nvn 0.923500 0.032700 -0.382300\nvn 0.188800 -0.046800 -0.980900\nvn 0.000000 -0.065300 -0.997900\nvn 0.169100 0.008000 -0.985500\nvn 0.125900 -0.022600 -0.991800\nvn 0.386400 0.204700 -0.899300\nvn 0.413200 0.118400 -0.902900\nvn 0.408300 0.049400 -0.911500\nvn 0.719000 0.211900 -0.661900\nvn 0.678100 0.271200 -0.683000\nvn 0.710500 0.148500 -0.687900\nvn 0.801000 -0.073600 -0.594100\nvn 0.520600 0.174000 -0.835800\nvn 0.572400 0.436400 -0.694100\nvn 0.580800 0.432300 -0.689700\nvn 0.454100 0.727100 -0.514800\nvn 0.567500 0.242500 -0.786900\nvn 0.845300 -0.069200 -0.529800\nvn 0.886700 0.045000 -0.460200\nvn 0.114200 -0.145600 -0.982700\nvn 0.000000 -0.182100 -0.983300\nvn 0.143500 -0.045500 -0.988600\nvn 0.058000 -0.085400 -0.994600\nvn 0.338200 0.043200 -0.940100\nvn 0.338100 -0.012800 -0.941000\nvn 0.748600 0.266700 -0.607000\nvn 0.820700 0.177200 -0.543100\nvn 0.830300 0.175200 -0.529000\nvn 0.709100 0.135000 -0.692000\nvn 0.542400 0.098000 -0.834400\nvn 0.372800 0.876800 0.303700\nvn 0.000000 0.968000 0.250600\nvn 0.000000 0.370300 0.928900\nvn 0.902700 -0.122000 -0.412500\nvn 0.767400 -0.298400 -0.567500\nvn 0.541600 -0.403100 -0.737600\nvn 0.351800 0.922000 -0.161600\nvn 0.000000 0.983500 -0.180600\nvn 0.119700 -0.425400 -0.897000\nvn 0.051500 -0.476300 -0.877800\nvn 0.433400 0.872200 -0.226700\nvn 0.282400 0.940900 -0.187200\nvn 0.354000 0.772700 -0.526800\nvn 0.540700 0.387800 -0.746500\nvn 0.420800 0.900600 -0.108600\nvn 0.836200 0.050300 -0.546000\nvn 0.868800 0.110000 -0.482700\nvn -0.292300 -0.446400 -0.845700\nvn 0.000000 -0.504000 -0.863700\nvn 0.302300 0.898800 -0.317400\nvn 0.000000 0.948900 -0.315600\nvn -0.099200 -0.470200 -0.876900\nvn 0.356600 0.525000 -0.772800\nvn 0.213600 0.787600 -0.578000\nvn 0.187500 -0.408200 -0.893400\nvn 0.788600 0.466300 -0.400900\nvn -0.501200 -0.690000 -0.522200\nvn 0.000000 -0.795400 -0.606100\nvn 0.000000 0.828500 -0.559900\nvn -0.019500 -0.802400 -0.596400\nvn -0.220900 -0.778400 -0.587600\nvn 0.372300 -0.773000 -0.513600\nvn 0.255500 -0.788700 -0.559100\nvn 0.455900 0.729600 -0.509600\nvn 0.463800 0.879100 -0.109700\nvn 0.562600 -0.698000 -0.442900\nvn 0.385800 -0.789100 -0.477900\nvn 0.000000 0.547100 -0.837100\nvn 0.486300 0.866600 -0.111700\nvn 0.000000 0.181600 -0.983400\nvn 0.876500 0.026700 -0.480700\nvn 0.946100 0.075900 -0.314700\nvn 0.593700 0.801700 -0.069200\nvn 0.000000 0.331900 -0.943300\nvn 0.930000 -0.081900 -0.358300\nvn 0.983700 0.084900 -0.158200\nvn -0.659700 -0.699600 -0.274400\nvn 0.000000 -0.925900 -0.377700\nvn 0.000000 0.860000 -0.510100\nvn -0.120500 -0.926500 -0.356400\nvn -0.357800 -0.873600 -0.329700\nvn 0.356000 -0.858700 -0.368600\nvn 0.160000 -0.912400 -0.376500\nvn 0.803800 0.578200 -0.140000\nvn 0.595100 0.802700 -0.039500\nvn 0.450500 -0.816600 -0.360900\nvn 0.779000 -0.486800 -0.395100\nvn 0.473200 -0.812000 -0.341500\nvn 0.000000 0.993800 0.111000\nvn 0.408900 0.899000 -0.156800\nvn 0.797700 0.578200 0.171200\nvn 0.621800 0.764000 -0.171900\nvn 0.000000 0.762400 0.647100\nvn 0.965400 -0.098400 -0.241400\nvn 0.979100 0.185900 -0.081900\nvn -0.655900 -0.754700 -0.010400\nvn 0.000000 -0.997700 -0.068500\nvn 0.000000 0.477100 0.878800\nvn -0.172600 -0.984900 -0.013100\nvn -0.367400 -0.930000 -0.010700\nvn 0.372600 -0.927100 -0.039900\nvn 0.152200 -0.987800 -0.032800\nvn 0.753300 0.653000 -0.078600\nvn 0.732400 0.674800 -0.090200\nvn 0.584700 -0.809100 -0.058900\nvn 0.628800 -0.687000 -0.364000\nvn 0.458000 -0.886400 -0.067000\nvn -0.203400 0.325500 0.923400\nvn -0.562000 -0.797400 0.219800\nvn 0.000000 -0.967800 0.251800\nvn 0.000000 0.059200 0.998200\nvn -0.129800 -0.943000 0.306500\nvn -0.317500 -0.906200 0.279200\nvn 0.607600 0.719900 0.335300\nvn 0.312100 -0.896800 0.313500\nvn 0.196400 -0.925900 0.322600\nvn 0.960500 0.245800 0.130500\nvn 0.830400 0.556600 -0.024800\nvn 0.508300 -0.820900 0.260200\nvn 0.783500 -0.619300 -0.050900\nvn 0.355800 -0.888700 0.288900\nvn 0.000000 -0.225700 0.974200\nvn 0.455100 0.294600 0.840300\nvn 0.947100 0.316100 0.054400\nvn 0.000000 -0.678100 0.734900\nvn 0.970200 -0.223400 0.094000\nvn 0.971400 -0.205700 -0.118700\nvn 0.215400 -0.768500 0.602400\nvn 0.715400 -0.668800 0.202200\nvn -0.016700 -0.810500 0.585400\nvn 0.168700 -0.759800 0.627800\nvn -0.020500 -0.782500 0.622300\nvn 0.693100 0.172700 0.699800\nvn 0.843500 -0.211900 0.493600\nvn 0.958100 0.275500 0.077900\nvn -0.488800 -0.678500 0.548300\nvn 0.000000 -0.793800 0.608100\nvn -0.272800 -0.763600 0.585200\nvn 0.054200 0.398400 0.915600\nvn 0.266100 -0.728200 0.631600\nvn 0.604100 0.324500 0.727900\nvn 0.067300 0.157600 0.985200\nvn 0.007700 0.026100 0.999600\nvn -0.014400 0.114300 0.993300\nvn 0.000000 0.003600 1.000000\nvn -0.062100 -0.001300 0.998000\nvn 0.392700 -0.706000 0.589300\nvn -0.024900 -0.303900 0.952400\nvn 0.108400 -0.179200 0.977800\nvn 0.261400 -0.285800 0.921900\nvn 0.129600 -0.793800 0.594200\nvn 0.241600 -0.162000 0.956800\nvn 0.788200 0.197500 0.582800\nvn -0.359400 -0.171200 0.917300\nvn 0.000000 -0.310300 0.950600\nvn 0.031900 -0.182800 0.982600\nvn -0.416200 -0.013900 0.909100\nvn 0.171100 0.435400 0.883800\nvn -0.111600 -0.250600 0.961600\nvn -0.021100 -0.179500 0.983500\nvn -0.117500 -0.384000 0.915800\nvn 0.009000 0.158100 0.987400\nvn -0.216900 0.454000 0.864200\nvn -0.222500 0.547600 0.806600\nvn -0.118600 -0.516400 0.848100\nvn -0.309500 -0.323400 0.894200\nvn -0.607000 -0.172100 0.775800\nvn -0.608400 -0.241800 0.755900\nvn -0.530100 -0.204500 0.822900\nvn -0.606000 -0.247000 0.756100\nvn -0.584800 -0.269200 0.765200\nvn -0.242400 -0.132700 0.961000\nvn -0.488000 -0.358600 0.795700\nvn -0.263800 -0.958600 0.107100\nvn -0.233200 -0.971400 -0.043800\nvn -0.072800 -0.997300 -0.012700\nvn -0.784400 -0.619800 0.022500\nvn -0.824300 -0.558100 0.095000\nvn -0.879900 -0.470400 0.066500\nvn -0.954300 -0.296200 0.037600\nvn -0.968600 -0.246300 -0.033500\nvn -0.986800 -0.161800 -0.001200\nvn -0.964900 -0.221000 0.141600\nvn -0.997000 -0.073200 0.025800\nvn -0.978100 -0.117800 0.171600\nvn -0.992600 0.074100 0.096300\nvn -0.971900 0.016000 0.234700\nvn -0.936000 0.264600 0.231900\nvn -0.904300 0.208800 0.372400\nvn -0.794500 0.478400 0.374000\nvn -0.641300 0.479200 0.599300\nvn -0.781100 0.389400 0.488100\nvn -0.858500 -0.470700 0.203600\nvn -0.920100 -0.372000 0.122700\nvn -0.910700 -0.296500 0.287600\nvn -0.829600 -0.382800 0.406400\nvn -0.909900 -0.195700 0.365700\nvn -0.838600 -0.220400 0.498100\nvn -0.933300 -0.022300 0.358400\nvn -0.870400 -0.050900 0.489700\nvn -0.873400 0.162500 0.458900\nvn -0.825700 0.095100 0.556000\nvn -0.761100 0.298500 0.575900\nvn -0.625100 0.343500 0.700800\nvn -0.729700 0.238900 0.640600\nvn -0.848000 -0.529800 -0.006400\nvn -0.917100 -0.395100 0.053300\nvn -0.198600 -0.978800 -0.050500\nvn -0.269300 -0.928000 0.257300\nvn -0.087600 -0.968100 0.234600\nvn -0.347100 -0.698200 0.626000\nvn -0.136800 -0.731100 0.668400\nvn -0.374300 -0.430200 0.821400\nvn -0.247700 -0.439800 0.863200\nvn -0.421400 -0.309800 0.852300\nvn -0.262900 -0.343800 0.901500\nvn -0.520800 -0.135700 0.842800\nvn -0.444900 -0.206400 0.871500\nvn -0.557400 -0.256600 0.789500\nvn -0.357900 -0.281200 0.890400\nvn -0.347200 -0.137500 0.927600\nvn -0.217100 -0.317500 0.923100\nvn -0.270000 -0.199600 0.941900\nvn -0.155600 -0.273100 0.949300\nvn -0.447300 -0.063000 0.892100\nvn -0.144600 -0.053500 0.988000\nvn -0.042500 -0.109200 0.993100\nvn -0.663100 -0.349900 0.661700\nvn -0.730100 -0.297000 0.615400\nvn -0.626800 -0.177600 0.758600\nvn 0.000000 -0.315300 0.948900\nvn 0.000000 -0.335000 0.942200\nvn -0.262800 0.017200 0.964700\nvn -0.599500 0.268200 0.754100\nvn -0.703900 0.175500 0.688200\nvn -0.774700 0.062700 0.629100\nvn -0.797100 -0.082900 0.598000\nvn 0.000000 -0.451100 0.892500\nvn -0.707700 -0.705400 0.038400\nvn -0.759500 -0.643700 0.093500\nvn -0.899500 0.177800 0.399100\nvn -0.806600 0.337100 0.485500\nvn -0.641500 0.404200 0.651900\nvn -0.975100 -0.122900 -0.184300\nvn -0.990100 -0.020100 -0.138700\nvn -0.800500 0.570500 0.183700\nvn -0.656300 0.729400 0.193100\nvn -0.665500 0.603800 0.438700\nvn -0.944300 0.327400 0.033000\nvn -0.992100 0.105000 -0.069100\nvn -0.905400 -0.117700 -0.407800\nvn -0.932600 0.027000 -0.359800\nvn -0.762400 0.645500 -0.044800\nvn -0.615300 0.787800 -0.027800\nvn -0.939300 0.159100 -0.303800\nvn -0.919300 0.351900 -0.176000\nvn -0.774100 -0.136700 -0.618100\nvn -0.777100 0.042800 -0.627900\nvn -0.691200 0.675100 -0.257700\nvn -0.544900 0.802300 -0.243800\nvn -0.787700 0.204500 -0.581100\nvn -0.809700 0.403000 -0.426600\nvn -0.624700 -0.163200 -0.763500\nvn -0.621000 0.023200 -0.783500\nvn -0.550200 0.675300 -0.491200\nvn -0.413900 0.784800 -0.461300\nvn -0.625400 0.211900 -0.751000\nvn -0.616100 0.454800 -0.643100\nvn -0.437500 -0.157600 -0.885300\nvn -0.512400 0.002500 -0.858700\nvn -0.393500 0.652100 -0.648000\nvn -0.282800 0.748500 -0.599700\nvn -0.521700 0.200600 -0.829200\nvn -0.475000 0.449900 -0.756200\nvn -0.324500 -0.152600 -0.933500\nvn -0.396400 0.005900 -0.918100\nvn -0.226600 0.612500 -0.757200\nvn -0.154000 0.678100 -0.718600\nvn -0.408500 0.186700 -0.893400\nvn -0.361200 0.416200 -0.834400\nvn -0.136100 -0.180500 -0.974100\nvn 0.000000 -0.210600 -0.977500\nvn 0.000000 0.056400 -0.998400\nvn 0.000000 0.491600 -0.870800\nvn 0.000000 0.565900 -0.824400\nvn 0.001000 0.584700 -0.811200\nvn -0.115500 0.048600 -0.992100\nvn 0.000000 0.142900 -0.989700\nvn -0.174600 0.150800 -0.973000\nvn 0.000000 0.306400 -0.951900\nvn -0.101200 0.340000 -0.935000\nvn -0.582100 0.453200 -0.675000\nvn -0.597600 0.676800 -0.429900\nvn -0.365500 0.792500 -0.488200\nvn -0.195200 0.840200 -0.505800\nvn -0.185500 0.622500 -0.760300\nvn -0.874000 0.218300 -0.434200\nvn -0.892900 0.363300 -0.265700\nvn -0.768600 0.525100 -0.365200\nvn -0.992300 0.051000 -0.113000\nvn -0.994500 0.086800 -0.058000\nvn -0.988000 0.126900 -0.087900\nvn -0.752100 0.333500 -0.568400\nvn -0.975000 0.067700 -0.211600\nvn -0.964500 0.204200 -0.167400\nvn -0.977400 -0.122000 0.172400\nvn -0.988600 -0.054900 0.139700\nvn -0.983700 -0.047100 0.173400\nvn -0.991100 0.010700 0.132700\nvn -0.985500 0.001800 0.169300\nvn -0.947900 0.315500 0.042800\nvn -0.956400 0.284300 -0.066100\nvn -0.986600 0.161500 -0.024000\nvn -0.957900 -0.225600 0.177600\nvn -0.976300 -0.128900 0.173600\nvn -0.869100 -0.330400 -0.368000\nvn -0.807400 -0.362900 -0.465100\nvn -0.748800 -0.485300 -0.451300\nvn -0.986400 0.056200 0.154600\nvn -0.847900 0.529100 0.032600\nvn -0.733000 0.667200 -0.132500\nvn -0.878500 0.468500 -0.093800\nvn -0.697000 -0.370000 -0.614300\nvn -0.639600 -0.529600 -0.557100\nvn -0.935600 -0.280000 0.214900\nvn -0.946000 -0.273600 -0.173400\nvn -0.867900 -0.316700 -0.382700\nvn -0.742900 -0.309400 -0.593600\nvn -0.598800 -0.317000 -0.735400\nvn -0.426600 -0.333400 -0.840700\nvn -0.563900 0.060200 0.823700\nvn -0.471800 0.169300 0.865200\nvn -0.543600 0.177000 0.820400\nvn -0.571400 0.015000 0.820500\nvn -0.552100 0.074100 0.830400\nvn -0.532500 0.058100 0.844400\nvn -0.507300 0.106200 0.855200\nvn -0.434700 0.098600 0.895100\nvn -0.542300 0.106200 0.833400\nvn -0.523500 0.095700 0.846600\nvn -0.434000 0.191800 0.880200\nvn -0.501800 0.166400 0.848800\nvn -0.611500 -0.162000 0.774500\nvn -0.894600 -0.444900 -0.041500\nvn -0.938200 -0.334600 0.088600\nvn -0.936000 -0.262400 0.234700\nvn 0.000000 -0.376300 0.926500\nvn 0.000000 -0.126300 0.992000\nvn -0.087700 -0.985700 0.144100\nvn -0.121400 -0.975500 0.183600\nvn -0.291200 -0.933100 0.210700\nvn -0.622600 -0.759600 0.187700\nvn -0.538300 -0.840400 0.063100\nvn -0.452300 -0.889000 0.071700\nvn -0.373400 -0.926400 -0.049500\nvn -0.688600 -0.695700 0.204600\nvn -0.601300 -0.794800 0.081600\nvn -0.536500 -0.843800 0.009800\nvn -0.451600 -0.892100 -0.013900\nvn -0.644900 -0.723500 0.246300\nvn -0.723000 -0.538600 0.432700\nvn -0.632300 -0.580600 0.512900\nvn -0.543100 -0.399100 0.738700\nvn -0.502000 -0.011200 0.864700\nvn -0.439700 0.143700 0.886500\nvn -0.366400 0.098200 0.925200\nvn -0.579900 -0.221700 0.783900\nvn -0.554200 -0.104000 0.825800\nvn -0.533500 -0.793900 0.291700\nvn -0.512200 -0.631400 0.582200\nvn -0.343800 -0.939000 0.010500\nvn -0.563000 -0.822500 0.080900\nvn -0.882000 -0.409900 0.232300\nvn -0.784500 -0.474300 0.399500\nvn -0.746400 -0.634600 0.200400\nvn -0.792200 -0.569900 0.218100\nvn -0.708400 0.018300 0.705500\nvn -0.727900 -0.102100 0.678000\nvn -0.643100 0.096700 0.759600\nvn -0.569500 0.201500 0.796900\nvn -0.791300 -0.606400 0.077800\nvn -0.851500 -0.521100 0.057300\nvn -0.917700 -0.390100 -0.075400\nvn -0.922400 -0.372800 -0.101200\nvn -0.907500 -0.419900 -0.007100\nvn -0.999100 0.029800 -0.030800\nvn -0.996600 -0.081600 0.006400\nvn -0.997300 0.002300 -0.073500\nvn -0.953400 -0.220500 0.205600\nvn -0.965100 -0.128500 0.228200\nvn 0.000000 0.860300 -0.509800\nvn -0.941100 0.112800 -0.318600\nvn -0.905400 -0.420200 -0.060900\nvn -0.933900 -0.305900 0.184900\nvn -0.835800 0.125700 -0.534400\nvn -0.709000 0.165100 -0.685600\nvn -0.654000 0.049000 -0.754900\nvn -0.902800 -0.371500 -0.216700\nvn -0.166000 -0.567900 -0.806200\nvn 0.000000 -0.580300 -0.814400\nvn 0.000000 -0.465300 -0.885100\nvn -0.233700 -0.644500 -0.728000\nvn -0.176900 -0.666000 -0.724700\nvn -0.158500 -0.688700 -0.707500\nvn -0.328000 -0.619200 -0.713400\nvn -0.215300 -0.687900 -0.693000\nvn -0.431700 -0.500500 -0.750500\nvn -0.341100 -0.550100 -0.762300\nvn -0.314600 -0.360400 -0.878100\nvn -0.583000 -0.456300 -0.672200\nvn -0.712400 -0.414700 -0.566100\nvn -0.814800 -0.401000 -0.418600\nvn -0.257600 -0.156300 -0.953500\nvn -0.844700 -0.231200 -0.482800\nvn -0.730200 -0.242100 -0.638900\nvn -0.208300 -0.217400 -0.953600\nvn 0.000000 -0.211600 -0.977300\nvn 0.000000 -0.442200 -0.896900\nvn -0.906700 -0.213100 -0.364000\nvn -0.597100 -0.258300 -0.759500\nvn -0.458100 -0.260200 -0.849900\nvn -0.423000 -0.436800 -0.793900\nvn -0.943500 -0.202100 -0.262400\nvn -0.544300 -0.398700 -0.738100\nvn -0.973900 -0.018500 -0.226300\nvn -0.950700 0.005400 -0.309900\nvn -0.934800 -0.079100 -0.346200\nvn -0.788100 0.024600 -0.615000\nvn -0.621400 -0.115800 -0.774800\nvn -0.905200 0.005800 -0.424800\nvn -0.760100 -0.121500 -0.638300\nvn -0.211700 -0.066300 -0.975100\nvn -0.252000 0.102100 -0.962300\nvn 0.000000 0.118600 -0.992900\nvn -0.873200 -0.102100 -0.476500\nvn -0.499100 0.060500 -0.864400\nvn -0.470600 -0.099900 -0.876600\nvn -0.544700 0.216600 -0.810100\nvn -0.982100 0.013800 -0.188000\nvn -0.928800 0.067800 -0.364300\nvn 0.000000 0.629800 -0.776800\nvn 0.000000 0.364700 -0.931100\nvn -0.956300 0.019800 -0.291600\nvn 0.000000 0.975300 0.220800\nvn 0.000000 0.999800 0.021200\nvn -0.168400 0.985000 0.038400\nvn -0.640200 0.744500 0.189600\nvn -0.450800 0.869400 0.202000\nvn -0.620800 0.491300 0.610900\nvn -0.624400 0.559100 0.545400\nvn -0.927500 0.215900 0.305200\nvn -0.966200 0.097700 0.238500\nvn -0.818700 0.386100 0.424900\nvn -0.362100 0.912200 -0.191500\nvn -0.458200 -0.567200 -0.684300\nvn -0.086300 0.552300 0.829100\nvn -0.084400 0.467400 0.880000\nvn 0.000000 0.478900 0.877800\nvn -0.434200 0.599200 0.672500\nvn -0.421200 0.676700 0.603900\nvn -0.823300 0.447100 0.349600\nvn -0.933200 0.252300 0.256000\nvn -0.967500 0.123400 0.220600\nvn -0.313300 -0.453500 -0.834300\nvn -0.939200 0.315900 0.134600\nvn -0.984300 0.167400 0.054600\nvn -0.833300 0.531300 0.152600\nvn -0.069100 -0.994700 -0.076100\nvn -0.213000 -0.457900 -0.863100\nvn -0.423400 -0.859100 0.287300\nvn -0.446700 -0.892800 0.057700\nvn -0.886800 -0.429700 -0.169900\nvn -0.713400 -0.695500 0.085700\nvn -0.925800 -0.360400 -0.113700\nvn -0.875400 -0.441700 -0.196600\nvn -0.960200 -0.211300 -0.182700\nvn -0.913800 -0.305600 -0.267500\nvn -0.986200 -0.049900 -0.157800\nvn -0.963900 -0.096800 -0.247900\nvn -0.935900 0.284900 0.206800\nvn -0.829800 0.494200 0.259000\nvn -0.978800 0.166100 0.120000\nvn -0.972700 0.146700 0.179800\nvn 0.000000 -0.676300 -0.736600\nvn -0.628200 0.708000 0.322600\nvn -0.162700 0.818800 0.550500\nvn -0.142200 0.736700 0.661100\nvn 0.000000 0.735300 0.677700\nvn -0.315900 0.162400 -0.934800\nvn 0.000000 0.979200 -0.202700\nvn -0.196100 0.959300 -0.203300\nvn -0.864300 -0.426000 -0.267400\nvn -0.901900 -0.391800 -0.181800\nvn -0.919300 -0.354400 -0.171100\nvn -0.305100 0.928300 0.212300\nvn -0.439200 0.825400 0.354700\nvn -0.113700 0.652000 0.749700\nvn 0.000000 0.645700 0.763500\nvn -0.338000 -0.244500 -0.908800\nvn -0.290400 0.025400 -0.956600\nvn -0.367000 0.553800 -0.747300\nvn -0.212000 0.318200 -0.924000\nvn 0.000000 0.919300 0.393500\nvn -0.154200 0.960800 0.230400\nvn -0.142900 0.540500 -0.829100\nvn -0.060000 0.496700 -0.865800\nvn -0.334700 0.080200 -0.938900\nvn -0.189900 -0.451400 -0.871800\nvn -0.418100 0.753300 0.507600\nvn 0.000000 -0.499800 0.866100\nvn -0.175500 -0.129700 0.975900\nvn 0.000000 -0.082900 0.996600\nvn -0.511600 -0.839900 0.180800\nvn 0.000000 -0.749400 0.662000\nvn 0.000000 -0.972400 0.233400\nvn 0.000000 -0.996500 -0.083900\nvn 0.000000 -1.000000 0.000500\nvn 0.000000 -0.991200 0.132500\nvn -0.616600 0.372000 0.693800\nvn -0.693400 0.376300 0.614500\nvn -0.619700 0.379700 0.686800\nvn -0.746400 -0.581700 0.323400\nvn -0.689200 -0.653800 0.312300\nvn -0.577400 -0.740400 0.344000\nvn -0.368900 -0.850300 0.375300\nvn -0.743000 -0.256800 0.618000\nvn -0.794800 -0.423900 0.434200\nvn -0.776500 -0.229000 0.586900\nvn -0.941100 -0.289000 -0.175400\nvn -0.874500 -0.319100 -0.365300\nvn -0.916000 -0.205400 -0.344600\nvn -0.989400 -0.034200 -0.141100\nvn -0.977100 -0.112700 -0.180100\nvn -0.255400 0.731100 0.632600\nvn -0.243800 0.650900 0.718900\nvn -0.271900 -0.415900 -0.867800\nvn -0.318700 0.946700 0.046800\nvn -0.261000 0.363900 -0.894100\nvn -0.271100 0.878400 0.393500\nvn -0.373500 0.263900 -0.889200\nvn -0.038800 0.621800 -0.782200\nvn -0.319700 -0.071200 -0.944800\nvn -0.136000 0.909000 0.394000\nvn 0.105900 -0.994300 -0.011400\nvn 0.144600 -0.986200 -0.080500\nvn -0.082100 -0.991900 -0.097100\nvn 0.576300 -0.801200 0.160700\nvn 0.051900 -0.893000 0.447000\nvn -0.012800 -0.882900 0.469300\nvn 0.495300 -0.862700 0.101600\nvn -0.031100 -0.831400 0.554800\nvn 0.365600 -0.923300 0.117300\nvn -0.037600 -0.837600 0.545000\nvn 0.264100 -0.963400 0.045100\nvn 0.008100 -0.857800 0.513900\nvn -0.079600 -0.996100 0.037400\nvn -0.191500 0.498700 0.845300\nvn -0.359000 0.019900 0.933100\nvn -0.546700 -0.660300 0.514800\nvn -0.765100 -0.519900 0.379700\nvn -0.769800 -0.492800 0.405700\nvn -0.417800 -0.233200 0.878000\nvn 0.164300 0.611400 0.774000\nvn 0.065900 0.676800 0.733100\nvn 0.024400 0.811100 0.584400\nvn 0.084400 0.400200 0.912500\nvn 0.213500 0.458000 0.862900\nvn 0.032200 0.897100 0.440700\nvn -0.042000 0.866300 0.497700\nvn -0.026300 0.259700 0.965300\nvn -0.409900 -0.896500 0.168200\nvn -0.234700 -0.971100 0.042000\nvn -0.512300 0.347700 0.785200\nvn -0.364200 0.424800 0.828800\nvn -0.052000 0.896900 0.439000\nvn -0.474000 0.486300 0.734100\nvn -0.498600 0.439500 0.747100\nvn 0.065000 0.881200 0.468200\nvn 0.652200 0.156000 0.741800\nvn -0.320500 -0.156600 0.934200\nvn -0.484900 0.342600 0.804700\nvn -0.127100 -0.655900 0.744100\nvn 0.653300 -0.703800 0.279000\nvn -0.030000 0.992300 0.120300\nvn -0.038000 0.989200 0.141500\nvn -0.102100 0.727700 -0.678200\nvn 0.353400 0.932700 0.071100\nvn 0.181600 0.979900 0.083100\nvn 0.485400 0.603500 -0.632600\nvn 0.758300 0.118600 -0.640900\nvn 0.868600 -0.495400 0.000700\nvn 0.998200 -0.042800 0.041900\nvn 0.311700 -0.591600 -0.743500\nvn 0.340400 -0.938600 -0.055900\nvn -0.616500 -0.750800 0.236900\nvn -0.489700 -0.869000 -0.070400\nvn -0.462300 -0.510700 -0.724900\nvn -0.082000 0.990400 0.111300\nvn 0.722900 0.194300 -0.663000\nvn 0.927500 0.371500 0.040100\nvn 0.535400 -0.523900 -0.662400\nvn 0.456800 -0.887800 -0.056100\nvn -0.855400 -0.298300 -0.423400\nvn -0.808400 -0.315800 -0.496800\nvn -0.710900 -0.354600 -0.607400\nvn -0.225500 0.671600 -0.705700\nvn -0.112200 0.980400 0.162000\nvn -0.184300 0.948200 0.258500\nvn 0.790400 0.612500 -0.008900\nvn 0.551300 0.032000 -0.833700\nvn 0.665600 -0.347000 -0.660700\nvn 0.600900 -0.796400 -0.068000\nvn -0.896500 -0.136300 -0.421500\nvn -0.729200 -0.105900 0.676000\nvn 0.600600 0.798800 0.034700\nvn 0.469100 0.881300 0.056200\nvn 0.734900 0.224900 -0.639700\nvn 0.738900 -0.196900 -0.644300\nvn 0.727800 -0.685100 -0.029500\nvn -0.819200 0.400300 -0.410700\nvn -0.589600 0.389300 0.707600\nvn -0.264200 -0.958700 -0.105400\nvn 0.067300 -0.623000 -0.779300\nvn 0.785500 -0.050100 -0.616700\nvn -0.314300 0.844100 0.434400\nvn -0.207300 -0.600400 -0.772400\nvn -0.420600 -0.257100 -0.870000\nvn 0.065700 0.478700 -0.875500\nvn 0.141400 0.690400 -0.709500\nvn 0.646600 0.147200 -0.748400\nvn 0.654700 0.410300 -0.634800\nvn 0.654000 0.076600 -0.752600\nvn 0.500000 -0.323300 -0.803400\nvn -0.598300 -0.189400 -0.778600\nvn -0.253600 0.446500 -0.858100\nvn -0.244000 0.671800 -0.699400\nvn 0.670700 0.232200 -0.704400\nvn 0.582300 0.159700 -0.797100\nvn 0.643500 -0.207500 -0.736700\nvn -0.725600 -0.087500 -0.682500\nvn -0.777500 0.027300 -0.628200\nvn -0.521400 0.358000 -0.774500\nvn -0.279100 0.722600 -0.632400\nvn 0.683800 -0.099500 -0.722800\nvn 0.684100 -0.077200 -0.725300\nvn 0.759100 0.015900 -0.650800\nvn 0.705500 -0.020700 -0.708400\nvn -0.794400 0.139300 -0.591200\nvn -0.190300 -0.321200 -0.927700\nvn 0.721900 0.053900 -0.689800\nvn 0.285000 -0.367200 -0.885400\nvn 0.077600 -0.377500 -0.922700\nvn -0.752600 0.237300 -0.614200\nvn -0.491600 0.711800 -0.501600\nvn -0.787500 0.089200 -0.609800\nvn -0.918000 0.064100 -0.391200\nvn -0.311300 -0.744800 -0.590100\nvn 0.882400 -0.358200 -0.304800\nvn 0.224900 -0.805100 -0.548800\nvn -0.020500 -0.822500 -0.568300\nvn -0.856400 0.373200 -0.356700\nvn -0.009000 0.862500 -0.505900\nvn 0.515400 0.306600 -0.800200\nvn 0.561200 0.699500 -0.442300\nvn 0.942900 -0.217700 -0.251800\nvn -0.576800 -0.599100 -0.555300\nvn -0.281300 0.820600 -0.497400\nvn -0.397900 0.388700 -0.831000\nvn 0.974200 -0.077000 -0.212300\nvn 0.516600 -0.709300 -0.479400\nvn -0.860900 -0.257800 -0.438600\nvn -0.900200 -0.114000 -0.420200\nvn -0.752300 -0.425400 -0.503000\nvn -0.623900 0.641400 -0.446500\nvn -0.639100 0.340700 -0.689500\nvn 0.975800 0.079200 -0.203800\nvn 0.659800 0.035100 -0.750600\nvn 0.685000 -0.587500 -0.430800\nvn 0.703300 0.056800 -0.708500\nvn 0.855400 0.423000 -0.298800\nvn 0.788800 -0.487000 -0.375000\nvn 0.188900 -0.912000 -0.363900\nvn -0.613600 -0.710300 -0.344800\nvn -0.302200 0.900000 -0.314100\nvn -0.457400 0.748500 -0.480000\nvn 0.996900 -0.078300 0.009900\nvn 0.485300 -0.817200 -0.310900\nvn -0.913600 -0.310900 -0.261900\nvn -0.967100 -0.130300 -0.218200\nvn -0.763100 0.512200 -0.394100\nvn -0.813800 0.538900 -0.217400\nvn 0.998300 0.049500 0.030700\nvn 0.958600 0.180200 -0.220100\nvn 0.673400 -0.699200 -0.239900\nvn 0.926200 0.280400 -0.251900\nvn 0.873400 0.485800 -0.033100\nvn 0.794400 -0.583100 -0.169800\nvn -0.902400 0.218200 -0.371400\nvn -0.978500 0.042500 -0.201900\nvn -0.327300 -0.869600 -0.369600\nvn 0.968500 -0.246500 -0.036100\nvn -0.055300 -0.923200 -0.380400\nvn -0.960000 0.223800 -0.168100\nvn 0.741300 0.560400 -0.369200\nvn 0.572100 0.799000 -0.185100\nvn 0.157100 -0.967700 -0.196900\nvn -0.078500 -0.972800 -0.217900\nvn -0.902200 0.393400 -0.176700\nvn -0.973200 0.227800 -0.031600\nvn -0.614000 -0.768200 -0.181200\nvn -0.027200 0.950000 -0.310900\nvn -0.325500 0.939300 -0.108200\nvn 0.763800 0.638000 -0.097600\nvn 0.566100 0.823800 0.028300\nvn 0.983400 -0.109700 0.144200\nvn 0.462400 -0.874100 -0.148200\nvn -0.800700 -0.581600 -0.143400\nvn -0.800200 -0.517600 -0.302900\nvn -0.488400 0.827700 -0.276300\nvn -0.529200 0.843200 -0.094300\nvn 0.990000 0.035500 0.136800\nvn 0.656300 -0.749400 -0.087700\nvn -0.930200 -0.348900 -0.113700\nvn -0.982300 -0.171400 -0.075000\nvn -0.656800 0.713400 -0.244100\nvn -0.825400 0.564100 -0.020400\nvn 0.984100 0.177100 0.014200\nvn 0.778000 -0.627900 -0.019200\nvn -0.997600 0.027600 -0.063500\nvn 0.923800 0.347500 0.160600\nvn 0.946500 0.322100 -0.017900\nvn 0.893400 -0.438200 -0.098700\nvn 0.876800 -0.477900 0.052300\nvn -0.338500 -0.918200 -0.205400\nvn 0.949900 -0.293500 0.107300\nvn 0.855600 -0.492400 0.159600\nvn 0.931100 -0.294900 0.214800\nvn 0.949900 -0.133100 0.282800\nvn 0.973900 0.163000 0.158100\nvn 0.934800 0.174400 0.309500\nvn 0.958400 0.013200 0.285100\nvn -0.921500 0.379200 0.083400\nvn -0.923500 0.381000 -0.045000\nvn 0.857300 0.502000 0.114100\nvn 0.847300 0.461900 0.262000\nvn 0.895100 0.305100 0.325100\nvn 0.753200 0.653800 0.071700\nvn 0.553100 0.808700 0.200000\nvn -0.028700 0.995100 -0.094300\nvn -0.346900 0.933700 0.088300\nvn 0.434800 -0.900200 0.022100\nvn -0.539600 0.837300 0.087400\nvn -0.354300 -0.934200 -0.041500\nvn -0.610600 -0.791700 -0.018400\nvn -0.998800 0.000300 0.048700\nvn -0.975600 0.211200 0.059300\nvn -0.920700 -0.387900 0.041600\nvn -0.979200 -0.197100 0.047900\nvn -0.690000 0.721900 -0.051700\nvn -0.824500 0.556400 0.102300\nvn -0.794900 -0.606600 0.011500\nvn -0.096300 -0.993800 -0.054400\nvn 0.142300 -0.989400 -0.027900\nvn 0.631600 -0.771100 0.080700\nvn 0.744300 -0.653900 0.135300\nvn 0.729900 0.645900 0.223700\nvn 0.707500 -0.663300 0.243800\nvn 0.591400 -0.775200 0.222100\nvn -0.892000 -0.415000 0.179200\nvn -0.955400 -0.237000 0.176100\nvn -0.778000 -0.613100 0.137200\nvn -0.711100 0.696600 0.094800\nvn -0.707000 0.674700 0.212000\nvn -0.554600 0.798100 0.235300\nvn -0.363100 0.896400 0.254200\nvn -0.070000 0.952200 0.297200\nvn -0.054800 0.992900 0.106000\nvn -0.359900 -0.923900 0.129600\nvn -0.600000 -0.788900 0.132200\nvn 0.899200 0.169600 0.403200\nvn 0.924100 -0.006700 0.382100\nvn 0.402500 -0.896700 0.183900\nvn 0.114800 -0.981100 0.155500\nvn 0.851900 0.294400 0.433000\nvn 0.816200 -0.502300 0.285500\nvn -0.104000 -0.988500 0.109300\nvn -0.985400 -0.041400 0.164900\nvn -0.969400 0.178400 0.168800\nvn 0.519200 0.767400 0.376100\nvn 0.691500 0.598300 0.404600\nvn 0.890900 -0.306600 0.335000\nvn -0.914600 0.362600 0.179000\nvn 0.921500 -0.140100 0.362200\nvn 0.797700 0.396000 0.454700\nvn 0.808300 0.281800 0.516900\nvn 0.843300 0.132000 0.520900\nvn 0.766800 -0.501000 0.401200\nvn 0.660400 -0.658500 0.360800\nvn -0.351600 -0.890600 0.288300\nvn -0.574900 -0.771200 0.273200\nvn -0.936300 0.136200 0.323600\nvn -0.891100 0.305300 0.335800\nvn -0.948000 -0.078600 0.308300\nvn 0.482100 0.702200 0.523800\nvn 0.653900 0.531100 0.538900\nvn 0.833100 -0.331200 0.443000\nvn 0.099400 -0.944900 0.311800\nvn -0.111300 -0.952700 0.282800\nvn -0.917800 -0.259200 0.300700\nvn -0.537900 0.743800 0.396600\nvn -0.366900 0.823400 0.432900\nvn 0.867300 -0.166500 0.469100\nvn -0.865100 -0.411500 0.286600\nvn -0.745100 -0.606200 0.278100\nvn 0.759500 0.371500 0.533900\nvn 0.867300 -0.023300 0.497200\nvn 0.538400 -0.767600 0.347700\nvn 0.346600 -0.871300 0.347400\nvn -0.674200 0.644600 0.360500\nvn -0.082500 0.872800 0.481100\nvn -0.865700 -0.113900 0.487400\nvn -0.862200 0.076400 0.500700\nvn 0.420000 0.591300 0.688500\nvn 0.572200 0.440700 0.691600\nvn 0.726700 -0.347500 0.592600\nvn 0.665900 -0.481600 0.569700\nvn 0.094600 -0.875600 0.473700\nvn -0.113100 -0.873200 0.473900\nvn -0.837800 -0.261000 0.479500\nvn -0.493300 0.642200 0.586700\nvn -0.332200 0.708000 0.623200\nvn 0.767300 -0.152800 0.622800\nvn -0.775800 -0.411700 0.478200\nvn -0.661500 -0.579100 0.476500\nvn 0.670800 0.312000 0.672700\nvn 0.744500 -0.034100 0.666700\nvn 0.446200 -0.723400 0.526800\nvn 0.286400 -0.811900 0.508700\nvn -0.522100 -0.715700 0.463900\nvn -0.617600 0.552700 0.559600\nvn -0.090900 0.753300 0.651400\nvn 0.735900 0.063900 0.674000\nvn 0.559300 -0.620300 0.549900\nvn -0.320700 -0.819700 0.474500\nvn 0.726400 0.188000 0.661100\nvn -0.818300 0.241200 0.521700\nvn 0.186300 0.173300 0.967100\nvn 0.476700 0.232100 0.847800\nvn 0.432500 0.309700 0.846700\nvn 0.534100 0.121300 0.836600\nvn 0.207700 0.080400 0.974900\nvn 0.193200 -0.001200 0.981100\nvn -0.391000 -0.617100 0.682800\nvn -0.139700 -0.541800 0.828800\nvn -0.199900 -0.454300 0.868100\nvn 0.389500 -0.550800 0.738200\nvn 0.473800 -0.443500 0.760800\nvn 0.167500 -0.357200 0.918900\nvn -0.002600 0.419100 0.907900\nvn 0.074200 0.356900 0.931200\nvn 0.138200 0.541400 0.829300\nvn 0.116400 -0.456200 0.882200\nvn 0.081700 -0.540400 0.837400\nvn 0.326600 -0.618700 0.714500\nvn -0.063900 0.570100 0.819100\nvn -0.261800 0.524900 0.809900\nvn -0.089400 0.312600 0.945600\nvn 0.159400 0.252800 0.954300\nvn 0.306900 0.431800 0.848100\nvn -0.239000 -0.699300 0.673700\nvn -0.096500 -0.743200 0.662000\nvn -0.068100 -0.593900 0.801700\nvn 0.528600 -0.309400 0.790400\nvn 0.174500 -0.298000 0.938400\nvn 0.030700 -0.597800 0.801000\nvn 0.057500 -0.748400 0.660800\nvn 0.207400 -0.691300 0.692100\nvn -0.558500 0.292900 0.776100\nvn -0.640500 0.138600 0.755300\nvn -0.268100 0.045600 0.962300\nvn -0.364800 0.479400 0.798200\nvn -0.132600 0.297700 0.945400\nvn -0.683200 -0.005900 0.730100\nvn -0.291200 -0.089100 0.952500\nvn 0.541300 -0.166400 0.824200\nvn 0.172500 -0.230700 0.957600\nvn -0.455200 0.420700 0.784700\nvn -0.217900 0.144200 0.965200\nvn 0.548000 -0.061600 0.834200\nvn -0.153400 0.271800 0.950000\nvn -0.679000 -0.142200 0.720100\nvn -0.585300 -0.393600 0.708900\nvn -0.242800 -0.349700 0.904800\nvn -0.273800 -0.270300 0.923000\nvn 0.195400 -0.111100 0.974400\nvn -0.505500 -0.518800 0.689300\nvn -0.299100 -0.213200 0.930100\nvn -0.647200 -0.261500 0.716000\nvn 0.558900 0.002900 0.829200\nvn 0.188200 0.711000 0.677500\nvn -0.660700 0.166300 0.731900\nvn -0.794400 0.103100 0.598500\nvn -0.691600 0.081300 0.717600\nvn -0.889100 -0.443600 0.112800\nvn -0.661900 -0.748700 -0.033900\nvn -0.574400 0.147500 0.805100\nvn -0.604400 -0.005400 0.796600\nvn -0.649500 -0.236200 0.722600\nvn -0.721500 -0.062100 0.689600\nvn -0.693700 0.048400 0.718600\nvn -0.691600 0.104200 0.714700\nvn 0.003600 0.798700 0.601600\nvn -0.012500 0.865800 0.500100\nvn 0.059100 0.779500 0.623500\nvn 0.041200 0.737400 0.674200\nvn 0.091500 0.700700 0.707500\nvn -0.441400 0.370300 0.817300\nvn -0.082900 0.873300 0.480100\nvn -0.081300 0.938300 0.336200\nvn -0.062600 0.543400 0.837100\nvn -0.030000 0.528200 0.848500\nvn -0.026800 0.505500 0.862400\nvn -0.044600 0.462400 0.885500\nvn -0.021100 0.515100 0.856800\nvn -0.061400 0.614700 0.786300\nvn -0.004800 0.595800 0.803100\nvn -0.198000 0.139900 0.970100\nvn -0.108800 0.093400 0.989700\nvn -0.319300 0.225100 0.920500\nvn -0.206900 0.628300 0.749900\nvn -0.487400 0.447600 0.749700\nvn -0.477400 0.834100 -0.276200\nvn 0.016100 0.532900 -0.846000\nvn -0.518800 0.847200 -0.114300\nvn 0.000000 0.536100 -0.844100\nvn -0.002800 0.601200 -0.799100\nvn -0.087600 0.683400 -0.724800\nvn -0.539200 0.824100 0.173200\nvn -0.520100 0.605400 0.602400\nvn -0.532900 0.717400 0.448700\nvn -0.216800 0.762400 -0.609700\nvn -0.397600 0.840800 0.367200\nvn -0.055200 0.641800 -0.764900\nvn -0.287400 0.760100 0.582800\nvn -0.368500 0.819100 -0.439600\nvn -0.191800 0.741600 -0.642800\nvn -0.305500 0.830400 -0.465800\nvn -0.373900 0.880200 -0.292100\nvn 0.037400 0.400700 -0.915400\nvn -0.434000 0.899200 0.054600\nvn 0.057300 0.520000 -0.852200\nvn 0.000000 0.384100 -0.923300\nvn 0.000000 0.330000 -0.944000\nvn -0.243900 0.812800 -0.528900\nvn -0.102200 0.723900 -0.682300\nvn 0.013500 0.557000 -0.830400\nvn -0.285400 0.942200 0.175300\nvn 0.105700 0.378200 -0.919700\nvn -0.359200 0.931500 -0.056300\nvn 0.076600 0.306300 -0.948800\nvn -0.412300 0.896100 -0.163900\nvn -0.392600 0.888600 -0.237000\nvn -0.386800 0.851300 -0.354300\nvn -0.197900 0.635500 0.746200\nvn -0.464100 0.403100 0.788700\nvn -0.152800 0.276200 0.948900\nvn -0.106800 0.217800 0.970100\nvn -0.228100 0.405000 0.885400\nvn -0.420600 0.295000 0.857900\nvn -0.505800 0.512100 0.694100\nvn 0.020300 0.705200 0.708700\nvn -0.205500 0.640100 0.740300\nvn -0.221400 0.669900 0.708700\nvn -0.239500 0.520100 0.819800\nvn -0.042400 0.420600 0.906200\nvn -0.176200 0.931800 0.317200\nvn -0.029700 0.092600 0.995200\nvn 0.000000 0.105100 0.994400\nvn -0.062900 0.221200 0.973200\nvn 0.000000 0.233600 0.972300\nvn -0.050200 0.404100 0.913300\nvn 0.000000 0.408500 0.912700\nvn -0.042100 0.515200 0.856000\nvn 0.000000 0.518600 0.855000\nvn 0.000000 0.328400 -0.944500\nvn -0.272100 0.948000 -0.165100\nvn 0.148200 0.304500 -0.940900\nvn 0.083400 0.552500 -0.829300\nvn -0.347000 0.881600 -0.319700\nvn 0.084700 0.264300 -0.960700\nvn -0.410600 0.818100 -0.402500\nvn -0.289600 0.774100 -0.562900\nvn -0.068000 0.727000 -0.683200\nvn -0.176600 0.984000 0.023400\nvn -0.443700 0.331700 0.832500\nvn -0.508100 0.160700 0.846200\nvn -0.558100 0.030500 0.829200\nvn -0.618600 -0.045700 0.784400\nvn -0.665000 -0.131600 0.735100\nvn -0.745200 -0.280300 0.605000\nvn -0.755200 -0.504700 0.418200\nvn -0.698900 -0.682300 0.214600\nvn -0.643800 -0.759300 0.094500\nvn -0.625800 -0.779700 0.023400\nvn -0.685900 -0.722600 0.085200\nvn -0.756100 -0.618400 0.214000\nvn -0.832100 -0.508100 0.222400\nvn -0.795700 -0.501800 0.339200\nvn 0.000000 0.280500 0.959800\nvn -0.481700 0.013900 0.876200\nvn -0.608600 -0.251800 0.752400\nvn -0.487600 -0.110900 0.866000\nvn -0.546900 -0.219800 0.807800\nvn -0.311100 0.271600 0.910700\nvn -0.453800 0.011100 0.891000\nvn -0.543400 0.045500 0.838200\nvn -0.180900 0.509000 0.841500\nvn -0.127800 0.718900 0.683200\nvn 0.098200 0.907700 0.407900\nvn 0.372300 0.921400 0.111500\nvn 0.613300 0.612600 -0.498600\nvn 0.642200 0.726200 -0.245000\nvn 0.800200 0.292600 -0.523400\nvn 0.865500 0.221300 -0.449200\nvn 0.879800 0.162500 -0.446700\nvn 0.895300 0.197900 -0.399100\nvn 0.912200 0.300700 -0.278200\nvn 0.946100 0.303400 -0.113300\nvn 0.931900 0.334300 0.140400\nvn 0.640900 0.440300 0.628700\nvn 0.098400 0.147400 0.984200\nvn 0.183600 0.163700 0.969200\nvn 0.580800 -0.579300 0.571800\nvn 0.827800 -0.543900 0.137600\nvn 0.914900 -0.397300 -0.070500\nvn 0.892700 -0.344800 -0.290000\nvn 0.925000 -0.174800 -0.337400\nvn 0.840300 0.170100 -0.514700\nvn 0.825700 0.065000 -0.560300\nvn 0.799700 -0.339400 -0.495200\nvn 0.792300 -0.149700 -0.591400\nvn 0.716900 -0.573700 -0.396000\nvn 0.538300 -0.835000 -0.113600\nvn 0.360100 -0.902900 0.234500\nvn 0.220200 -0.824100 0.521800\nvn 0.057500 -0.667700 0.742200\nvn -0.185700 -0.385800 0.903700\nvn -0.510900 -0.196000 0.837000\nvn -0.495300 -0.154900 0.854700\nvn -0.567200 -0.143700 0.810900\nvn -0.615800 0.018000 0.787700\nvn -0.655100 0.258100 0.710000\nvn -0.755300 0.141600 0.639900\nvn -0.217200 0.581800 0.783700\nvn -0.021700 0.659600 0.751300\nvn 0.053600 0.624800 0.778900\nvn -0.554100 -0.220800 0.802600\nvn -0.694300 -0.141500 0.705600\nvn -0.875600 0.195400 0.441700\nvn -0.841100 0.377200 0.387600\nvn 0.953700 0.299200 -0.030200\nvn -0.042900 -0.320600 0.946200\nvn 0.910100 0.074300 -0.407600\nvn -0.109000 -0.528500 0.841900\nvn -0.589800 -0.079100 0.803600\nvn -0.955000 0.107100 0.276700\nvn -0.945000 0.017000 0.326400\nvn -0.941000 0.035800 0.336300\nvn -0.959900 0.052000 0.275300\nvn -0.929700 0.049700 0.364900\nvn -0.947300 0.073700 0.311700\nvn -0.886700 0.132500 0.443000\nvn -0.902100 0.168000 0.397400\nvn -0.800900 0.277400 0.530600\nvn -0.618200 0.355900 0.700800\nvn -0.664000 0.390100 0.637900\nvn -0.424100 0.385400 0.819500\nvn -0.466000 0.423400 0.776800\nvn -0.280200 0.397200 0.873900\nvn -0.310200 0.421100 0.852300\nvn -0.149700 0.390100 0.908500\nvn -0.171300 0.417500 0.892400\nvn -0.016800 0.371000 0.928500\nvn -0.046800 0.421100 0.905800\nvn 0.000000 0.353800 0.935300\nvn 0.000000 0.387700 0.921800\nvn -0.695400 0.151000 0.702600\nvn -0.497800 -0.072900 0.864200\nvn -0.308100 0.272300 0.911500\nvn -0.018500 -0.241400 0.970200\nvn -0.246100 -0.132600 0.960100\nvn -0.700300 -0.124500 0.702900\nvn -0.586900 -0.003300 0.809600\nvn -0.610100 -0.072800 0.788900\nvn -0.033200 0.192400 0.980700\nvn -0.977900 0.036300 0.205900\nvn -0.564000 0.069300 0.822800\nvn -0.886500 -0.045700 0.460400\nvn -0.309600 0.241800 0.919600\nvn -0.501300 0.301300 0.811100\nvn -0.352400 0.285500 0.891200\nvn -0.708800 0.396600 0.583300\nvn -0.646200 0.436500 0.626000\nvn -0.683700 0.417500 0.598400\nvn -0.255200 0.524600 0.812200\nvn -0.504900 0.452800 0.734900\nvn -0.508900 0.491500 0.706700\nvn -0.683100 0.373700 0.627500\nvn -0.683200 0.417400 0.599100\nvn -0.276300 0.557700 0.782700\nvn 0.000000 0.558000 0.829800\nvn 0.000000 0.582800 0.812600\nvn -0.586700 0.403500 0.702100\nvn -0.682600 0.105100 0.723200\nvn -0.543800 0.189700 0.817500\nvn -0.232200 0.179100 0.956000\nvn -0.448900 0.326500 0.831800\nvn -0.269100 0.225200 0.936400\nvn 0.000000 0.381000 0.924500\nvn -0.071800 0.409300 0.909500\nvn -0.190500 0.411200 0.891400\nvn -0.346400 0.410000 0.843700\nvn -0.518500 0.410700 0.750000\nvn -0.475400 0.388800 0.789200\nvn -0.439600 0.306600 0.844200\nvn -0.511300 0.326900 0.794800\nvn -0.438300 -0.420600 0.794300\nvn -0.462800 -0.195000 0.864700\nvn -0.629800 -0.044900 0.775400\nvn -0.606200 0.076900 0.791500\nvn 0.000000 -0.072000 0.997400\nvn 0.092600 0.380500 0.920100\nvn -0.006800 0.287800 0.957700\nvn -0.127200 0.280200 0.951400\nvn -0.290000 0.315900 0.903300\nvn -0.307200 0.294500 0.904900\nvn -0.817100 0.305400 0.488800\nvn -0.797200 0.239400 0.554200\nvn -0.705500 0.357600 0.611900\nvn -0.353600 0.135000 0.925600\nvn -0.934600 -0.286700 0.210500\nvn -0.601900 0.085200 0.794000\nvn -0.239300 0.112800 0.964300\nvn -0.264700 0.175400 0.948200\nvn -0.935300 -0.224800 0.273200\nvn -0.156700 0.090900 0.983400\nvn 0.093500 0.843000 0.529700\nvn 0.280600 0.730200 0.622900\nvn -0.820300 0.544500 0.175000\nvn -0.800800 0.494600 0.337700\nvn -0.737200 0.404300 0.541300\nvn -0.839400 0.282400 0.464400\nvn -0.817900 0.301600 0.490000\nvn -0.186700 0.266800 0.945500\nvn 0.000000 0.051900 0.998600\nvn -0.849500 -0.073100 0.522500\nvn -0.210500 0.235600 0.948800\nvn -0.943200 -0.002600 0.332100\nvn -0.964800 0.025300 0.261500\nvn -0.400100 -0.133000 0.906700\nvn -0.351800 0.156100 0.922900\nvn -0.518400 -0.298200 0.801500\nvn -0.590000 -0.321700 0.740500\nvn -0.640900 -0.298700 0.707100\nvn -0.694100 0.170200 0.699400\nvn -0.449800 0.153900 0.879800\nvn -0.660700 -0.290700 0.692100\nvn -0.672900 -0.272900 0.687500\nvn -0.689000 -0.177900 0.702500\nvn -0.656900 -0.112600 0.745500\nvn -0.606300 -0.025100 0.794800\nvn -0.577300 0.125600 0.806800\nvn -0.294000 0.170700 0.940400\nvn -0.600400 0.010600 0.799600\nvn -0.549500 0.109000 0.828400\nvn -0.454400 0.168900 0.874600\nvn -0.922300 0.181900 0.340900\nvn -0.962700 0.089700 0.255200\nvn -0.971300 0.061300 0.229900\nvn -0.976900 0.021800 0.212700\nvn -0.924400 -0.333200 0.185200\nvn -0.922900 -0.331900 0.195100\nvn -0.929500 -0.306000 0.205700\nvn -0.980100 -0.042300 0.193900\nvn -0.967800 -0.012800 0.251400\nvn -0.970500 -0.062700 0.232900\nvn -0.979000 -0.102900 0.176100\nvn -0.971000 -0.167800 0.170000\nvn -0.966000 -0.106400 0.235700\nvn -0.942400 -0.275700 0.189600\nvn -0.952100 -0.179800 0.247300\nvn -0.921400 -0.265000 0.284200\nvn -0.899600 -0.348300 0.263300\nvn -0.853200 -0.395000 0.340500\nvn 0.000000 -0.495700 0.868500\nvn 0.000000 -0.193300 0.981100\nvn -0.283200 -0.161100 0.945400\nvn -0.783900 -0.158800 0.600200\nvn -0.803800 -0.211200 0.556200\nvn -0.765300 -0.197600 0.612500\nvn -0.644100 0.381400 0.663000\nvn -0.513500 -0.366000 0.776100\nvn -0.482500 -0.582400 0.654200\nvn -0.224600 -0.674700 0.703000\nvn -0.783100 -0.274400 0.558000\nvn -0.736400 -0.273600 0.618700\nvn -0.736000 -0.378600 0.561200\nvn -0.711200 -0.386000 0.587500\nvn -0.676000 -0.281700 0.680900\nvn -0.639600 -0.288600 0.712500\nvn -0.636200 -0.461800 0.618000\nvn -0.739700 -0.329600 0.586600\nvn -0.813400 -0.296600 0.500400\nvn 0.000000 -0.811100 0.584900\nvn 0.000000 -0.703600 0.710600\nvn -0.779500 -0.365600 0.508700\nvn -0.694600 -0.338700 0.634600\nvn -0.438100 -0.718600 0.540100\nvn -0.206200 -0.798300 0.565900\nvn -0.620700 -0.602100 0.502100\nvn -0.877500 -0.125900 0.462600\nvn -0.846000 -0.309700 0.434000\nvn -0.932000 -0.301400 0.201400\nvn -0.930800 -0.063800 0.360000\nvn -0.941000 -0.031900 0.336900\nvn -0.715200 0.321700 0.620400\nvn -0.720500 0.268100 0.639500\nvn -0.941200 -0.011400 0.337600\nvn -0.977800 -0.126000 0.167000\nvn -0.984600 -0.058800 0.164600\nvn -0.988300 -0.059800 0.140600\nvn -0.984900 0.018300 0.172200\nvn -0.990400 0.015500 0.136900\nvn -0.846400 0.011500 0.532400\nvn -0.906900 0.002500 0.421300\nvn -0.909300 -0.004200 0.416100\nvn -0.903700 0.014200 0.427900\nvn -0.898600 0.040400 0.436700\nvn -0.878000 0.023000 0.478000\nvn -0.801800 -0.023700 0.597200\nvn -0.679700 -0.074700 0.729600\nvn -0.963700 -0.196900 0.180100\nvn -0.976800 -0.121700 0.176000\nvn -0.086000 0.423400 0.901900\nvn 0.000000 0.425600 0.904900\nvn -0.206000 0.419200 0.884200\nvn -0.560400 0.394700 0.728100\nvn -0.378800 0.408700 0.830300\nvn -0.862000 0.244800 0.443900\nvn -0.736700 0.325700 0.592500\nvn -0.978900 0.068700 0.192100\nvn -0.984500 0.065400 0.162400\nvn -0.972800 0.095300 0.210900\nvn -0.958300 -0.209200 0.194600\nvn -0.922600 -0.311000 0.228200\nvn -0.922900 -0.296600 0.245300\nvn -0.940100 -0.250700 0.230800\nvn -0.223600 0.036600 0.974000\nvn -0.897500 -0.310600 0.313000\nvn -0.265200 -0.460600 0.847000\nvn -0.793600 -0.197500 0.575400\nvn -0.819900 -0.237400 0.520900\nvn -0.483800 -0.138700 0.864100\nvn -0.623300 -0.298000 0.722900\nvn -0.590400 -0.196500 0.782800\nvn -0.694900 -0.303300 0.652000\nvn -0.659800 -0.326000 0.677100\nvn -0.715500 -0.533200 0.451300\nvn -0.605200 0.234600 0.760700\nvn -0.355900 0.213900 0.909700\nvn -0.334500 0.169600 0.927000\nvn -0.390300 0.048500 0.919400\nvn -0.723800 -0.127800 0.678100\nvn -0.646400 -0.051400 0.761300\nvn -0.729500 -0.111500 0.674800\nvn -0.762100 -0.480900 0.433500\nvn -0.803000 -0.429600 0.413100\nvn -0.834800 -0.341100 0.432100\nvn 0.000000 -0.927000 0.375100\nvn -0.848000 -0.278800 0.450600\nvn -0.923800 -0.279500 0.261500\nvn -0.919400 -0.336600 0.203200\nvn 0.000000 0.550800 0.834600\nvn -0.469600 0.325700 0.820600\nvn -0.467500 0.375500 0.800300\nvn -0.851500 -0.331600 0.406100\nvn -0.764800 0.231700 0.601100\nvn -0.744100 0.333500 0.578800\nvn -0.664400 0.423400 0.615800\nvn -0.263800 0.045100 0.963500\nvn -0.527400 0.263900 0.807600\nvn 0.000000 -0.704100 -0.710000\nvn 0.000000 -0.642800 -0.766000\nvn -0.237700 -0.617700 -0.749600\nvn -0.173900 -0.628900 -0.757700\nvn -0.301000 -0.637400 -0.709300\nvn -0.266600 -0.565000 -0.780800\nvn -0.411900 -0.660800 -0.627400\nvn -0.263800 -0.674700 -0.689300\nvn -0.586000 -0.613300 -0.529500\nvn -0.418400 -0.637400 -0.647000\nvn -0.703300 -0.546400 -0.454700\nvn -0.570600 -0.574700 -0.586700\nvn -0.791200 -0.480100 -0.378800\nvn -0.700400 -0.508300 -0.500900\nvn -0.795800 -0.444700 -0.410900\nvn -0.872200 -0.401600 -0.279400\nvn -0.888700 -0.408000 -0.208900\nvn -0.893600 -0.376300 -0.244500\nvn -0.870800 -0.409600 -0.271700\nvn -0.758700 -0.166400 0.629800\nvn -0.676900 -0.096000 0.729800\nvn -0.639200 -0.208900 0.740100\nvn -0.509300 0.009000 0.860500\nvn -0.722600 -0.248100 0.645100\nvn -0.802800 -0.255600 0.538700\nvn -0.171000 -0.923000 0.344600\nvn 0.000000 -0.984500 0.175400\nvn -0.884200 -0.315500 0.344500\nvn -0.784500 -0.276300 0.555100\nvn -0.782500 -0.312200 0.538700\nvn -0.474500 0.021700 0.879900\nvn -0.338700 0.133000 0.931400\nvn -0.451000 0.078500 0.889000\nvn -0.847500 -0.309500 0.431200\nvn -0.347300 0.158200 0.924300\nvn -0.692500 -0.254100 0.675200\nvn -0.584700 -0.038200 0.810400\nvn -0.313900 0.178800 0.932400\nvn -0.335500 0.060600 0.940100\nvn -0.350400 -0.109300 0.930200\nvn -0.343100 -0.297900 0.890800\nvn -0.318400 -0.450700 0.833900\nvn -0.306700 -0.465100 0.830400\nvn -0.271100 -0.375500 0.886300\nvn 0.230400 0.835300 0.499100\nvn 0.262900 0.903200 0.339300\nvn 0.286200 0.946000 0.151800\nvn 0.295700 0.917600 -0.265400\nvn 0.295500 0.953900 -0.051300\nvn 0.303900 0.811700 -0.498600\nvn 0.321700 0.382500 -0.866100\nvn 0.303600 0.662700 -0.684500\nvn 0.024200 0.990900 0.132100\nvn -0.266200 -0.248900 0.931200\nvn -0.239100 0.262700 0.934800\nvn 0.075900 -0.532900 0.842800\nvn -0.103200 -0.539000 0.835900\nvn 0.104900 0.253800 0.961500\nvn -0.097300 0.843600 0.528100\nvn -0.700600 -0.169400 0.693100\nvn -0.762500 -0.190500 0.618300\nvn -0.527800 -0.103700 0.843000\nvn -0.602000 -0.140900 0.785900\nvn -0.568600 0.211100 0.795000\nvn -0.606300 0.153700 0.780200\nvn -0.658700 -0.166500 0.733800\nvn -0.113400 0.563800 0.818000\nvn -0.487600 0.373500 0.789100\nvn -0.575700 0.261300 0.774800\nvn 0.000000 -0.780100 0.625700\nvn -0.406700 -0.282200 0.868900\nvn -0.653000 0.008500 0.757300\nvn -0.206300 -0.877900 0.432100\nvn -0.461500 0.078800 0.883600\nvn 0.000000 0.431200 0.902200\nvn -0.425400 0.430800 0.795900\nvn 0.144100 -0.947700 -0.284700\nvn -0.541900 0.352800 0.762700\nvn -0.585000 0.293900 0.755900\nvn 0.357900 -0.626900 -0.692000\nvn 0.447500 -0.286600 -0.847100\nvn 0.390500 0.170000 -0.904800\nvn 0.407000 0.056500 -0.911600\nvn 0.366900 -0.430800 -0.824500\nvn 0.333300 -0.798800 -0.500800\nvn 0.462900 -0.814400 -0.350000\nvn 0.373100 -0.927000 -0.036700\nvn 0.256000 -0.908800 0.329400\nvn 0.000000 0.242300 0.970200\nvn -0.993200 -0.015700 -0.115500\nvn -0.998900 -0.044300 0.016200\nvn -0.998900 -0.030400 -0.034300\nvn -0.819200 -0.445200 -0.361400\nvn -0.879400 -0.388000 -0.275900\nvn -0.977300 0.035300 0.208700\nvn -0.975700 0.023900 0.217600\nvn -0.988000 0.091500 0.124100\nvn -0.992100 0.102400 0.072100\nvn -0.993400 0.066900 0.093300\nvn -0.986400 0.050300 0.156400\nvn -0.977600 0.012500 0.209800\nvn -0.979700 0.017600 0.199700\nvn -0.981800 0.063300 0.179000\nvn -0.994500 0.003200 0.104900\nvn -0.986400 0.014700 0.163700\nvn -0.973200 0.024100 0.228600\nvn -0.974300 0.003800 0.225000\nvn -0.978000 0.021200 0.207500\nvn -0.756200 -0.554200 -0.347700\nvn -0.773000 -0.473600 -0.422000\nvn -0.802700 -0.413800 -0.429400\nvn -0.840200 -0.388500 -0.378200\nvn -0.879800 -0.432600 -0.196700\nvn -0.676100 -0.705600 -0.212200\nvn -0.698000 -0.596500 -0.396100\nvn -0.997300 0.065600 0.033400\nvn -0.994500 0.104300 0.004400\nvn -0.974200 -0.066000 0.215800\nvn -0.724100 0.649500 -0.232000\nvn -0.471700 -0.268800 -0.839800\nvn -0.914200 -0.119100 0.387200\nvn 0.371700 0.409700 -0.833100\nvn 0.168000 0.504700 -0.846700\nvn 0.062800 0.703700 -0.707700\nvn -0.516600 -0.701700 0.490500\nvn -0.232900 -0.694800 -0.680500\nvn -0.964200 -0.069200 0.256100\nvn -0.970700 0.001600 0.240100\nvn -0.966300 -0.042000 0.253900\nvn 0.223400 -0.584200 -0.780200\nvn 0.254400 -0.629600 -0.734000\nvn 0.148300 -0.599600 -0.786400\nvn -0.973800 0.015200 0.226900\nvn -0.975100 0.147400 0.165700\nvn -0.963400 -0.072500 0.257900\nvn -0.338000 0.877300 0.340600\nvn -0.185300 0.765400 0.616300\nvn -0.480200 0.580800 0.657300\nvn -0.747700 -0.503100 0.433400\nvn -0.375000 -0.903200 -0.208900\nvn 0.092300 -0.973200 -0.210600\nvn -0.734200 0.140100 0.664300\nvn -0.887300 0.170800 0.428400\nvn -0.465000 -0.437200 -0.769800\nvn 0.031700 -0.704400 -0.709000\nvn 0.316000 -0.636100 -0.703900\nvn -0.911100 -0.091500 0.401800\nvn -0.973100 -0.069400 0.219500\nvn 0.463000 0.260800 -0.847100\nvn 0.221600 0.310200 -0.924500\nvn -0.818400 -0.070900 0.570200\nvn -0.783800 -0.157400 0.600700\nvn -0.436800 -0.583200 0.684800\nvn 0.414300 -0.504800 -0.757300\nvn 0.540600 -0.273000 -0.795700\nvn 0.394500 -0.345700 -0.851400\nvn -0.822200 0.012100 0.569000\nvn -0.751900 -0.086100 0.653600\nvn -0.854000 0.225200 0.468900\nvn -0.947800 -0.029700 0.317200\nvn -0.969500 0.014000 0.244800\nvn -0.620400 -0.635600 -0.459400\nvn -0.587200 -0.605600 -0.537000\nvn -0.820100 -0.008500 0.572200\nvn -0.937900 0.001000 0.346800\nvn -0.981200 -0.117600 -0.153000\nvn -0.998300 0.028500 -0.049800\nvn -0.939500 -0.061300 0.337100\nvn -0.856600 -0.515900 0.011300\nvn -0.829300 -0.209500 0.518000\nvn -0.939600 -0.093100 0.329200\nvn -0.963200 0.267800 -0.024000\nvn -0.013300 0.888200 -0.459200\nvn -0.856200 -0.151100 -0.494000\nvn 0.334800 0.090400 -0.938000\nvn 0.489600 -0.076500 -0.868500\nvn -0.359900 -0.447700 -0.818500\nvn -0.602700 -0.640100 -0.476400\nvn -0.989400 0.142100 -0.028400\nvn -0.878400 -0.037900 0.476400\nvn -0.603700 -0.508400 -0.614000\nvn -0.165900 0.971900 0.166800\nvn -0.720700 -0.681100 -0.129000\nvn -0.882400 -0.470200 -0.011400\nvn -0.977300 -0.045300 0.206800\nvn -0.978500 -0.187700 -0.085600\nvn -0.946600 0.151900 0.284300\nvn -0.576900 -0.747500 0.329300\nvn -0.916600 -0.142000 0.373600\nvn -0.999900 0.009600 0.004300\nvn -0.943700 -0.203000 0.261100\nvn -0.722600 -0.166500 0.670900\nvn -0.888100 -0.297200 0.350600\nvn -0.841200 0.185900 0.507800\nvn -0.935900 -0.024600 0.351400\nvn -0.970700 -0.029400 0.238400\nvn -0.967900 0.088600 0.235000\nvn -0.979900 0.131700 0.149800\nvn -0.539200 -0.323900 0.777400\nvn -0.491400 -0.430900 0.756900\nvn -0.940300 0.008400 0.340100\nvn -0.752000 -0.201300 0.627700\nvn -0.897800 -0.024100 0.439600\nvn -0.579800 -0.165400 -0.797800\nvn -0.993600 -0.072900 0.085700\nvn -0.501000 -0.602600 0.621200\nvn -0.875700 0.142800 0.461200\nvn -0.881600 -0.451500 0.137500\nvn -0.928100 -0.320700 -0.189300\nvn -0.962800 -0.269100 0.023300\nvn -0.937600 -0.182700 0.295800\nvn -0.988500 -0.063400 0.137300\nvn -0.892700 0.159400 0.421500\nvn -0.968100 0.250300 0.004900\nvn -0.969000 0.161400 0.187100\nvn -0.833200 -0.235200 0.500400\nvn -0.941700 0.235800 -0.239800\nvn -0.533000 0.139100 -0.834600\nvn -0.565900 0.523200 0.637200\nvn -0.528000 -0.794100 -0.301100\nvn -0.551100 -0.440300 -0.708800\nvn -0.729000 -0.530800 -0.432200\nvn -0.898600 -0.432800 0.072000\nvn -0.904100 -0.326500 -0.275500\nvn -0.970300 -0.118600 0.210800\nvn -0.835100 0.318400 -0.448500\nvn -0.947200 0.170400 -0.271600\nvn -0.979200 0.007800 0.202700\nvn -0.905200 -0.354500 0.234400\nvn -0.869000 0.164000 0.466900\nvn -0.930500 -0.287900 -0.226300\nvn -0.964200 -0.253100 0.079000\nvn -0.902400 -0.012900 0.430600\nvn -0.935900 0.289400 -0.200900\nvn -0.824000 -0.164700 0.542100\nvn -0.791800 -0.242700 0.560400\nvn -0.060900 0.259900 -0.963700\nvn -0.577500 0.111300 -0.808700\nvn -0.365800 0.034500 -0.930000\nvn -0.928800 0.006900 0.370400\nvn -0.973800 -0.000700 0.227400\nvn -0.994900 0.097000 -0.025500\nvn -0.935200 0.148100 -0.321500\nvn -0.923100 -0.085800 -0.374800\nvn -0.901200 -0.366500 -0.231200\nvn -0.895800 -0.385600 0.220700\nvn -0.972000 0.178500 0.152400\nvn -0.917400 -0.387500 0.090600\nvn -0.818300 -0.275200 -0.504600\nvn -0.650900 0.295100 0.699400\nvn -0.976200 0.157700 0.149100\nvn -0.887800 0.279900 0.365400\nvn -0.552000 0.761800 0.338900\nvn -0.806800 -0.536100 -0.248100\nvn -0.783300 -0.607000 -0.133800\nvn -0.802600 -0.591200 -0.078700\nvn -0.705300 -0.364500 0.608000\nvn -0.658300 -0.433200 0.615500\nvn -0.423400 -0.774300 0.470400\nvn -0.735700 0.608500 0.297300\nvn -0.968800 0.246300 0.027400\nvn -0.172500 0.240400 0.955200\nvn -0.161200 0.447300 0.879700\nvn -0.513600 -0.011000 0.857900\nvn -0.440600 -0.573300 0.690800\nvn -0.137200 -0.770200 0.622900\nvn -0.296600 -0.789100 0.537900\nvn -0.189900 -0.314200 0.930100\nvn -0.121400 -0.262900 0.957200\nvn -0.179900 0.023300 0.983400\nvn -0.741300 0.172100 0.648700\nvn -0.414000 0.763700 0.495300\nvn -0.882600 -0.463700 -0.077300\nvn -0.902900 -0.118100 -0.413200\nvn -0.721400 -0.434500 -0.539200\nvn -0.067700 -0.629200 0.774300\nvn -0.193500 -0.509300 0.838500\nvn -0.858000 -0.201200 0.472500\nvn -0.633000 -0.665100 0.396100\nvn -0.787700 -0.614800 -0.039900\nvn -0.502200 0.025900 0.864300\nvn -0.415800 -0.050100 0.908000\nvn -0.352400 -0.190900 0.916200\nvn -0.200500 0.144900 0.968900\nvn -0.501800 -0.296500 0.812500\nvn -0.745600 -0.007900 0.666300\nvn -0.772700 -0.000100 0.634800\nvn -0.806300 -0.586400 -0.076900\nvn -0.867800 -0.496200 0.025300\nvn -0.842500 -0.530000 0.096100\nvn -0.917600 -0.383800 -0.102900\nvn -0.891700 -0.396500 -0.218400\nvn 0.022600 0.948500 0.315800\nvn -0.751800 -0.201300 0.627900\nvn -0.583500 -0.479000 0.655800\nvn -0.811600 0.112800 -0.573200\nvn -0.461100 -0.072600 -0.884300\nvn -0.980300 -0.193700 -0.039400\nvn -0.909200 -0.306700 -0.281500\nvn -0.926500 -0.200100 -0.318700\nvn 0.152300 0.836800 0.525800\nvn -0.227700 0.701800 0.675000\nvn -0.875700 -0.184200 -0.446300\nvn -0.806400 -0.505000 -0.307600\nvn -0.692900 0.716800 0.077900\nvn 0.072100 0.934600 0.348200\nvn -0.708600 0.007100 0.705600\nvn -0.084000 0.484200 0.870900\nvn -0.989500 0.116500 -0.085300\nvn -0.443600 -0.813800 -0.375300\nvn -0.761000 -0.225600 0.608100\nvn -0.844600 -0.284000 0.453800\nvn -0.808400 -0.322100 0.492500\nvn -0.960600 -0.042600 0.274500\nvn -0.623300 0.639800 0.449600\nvn 0.000000 0.833600 0.552300\nvn -0.273400 0.790200 0.548400\nvn -0.959200 -0.058000 0.276600\nvn 0.293700 -0.477300 -0.828200\nvn -0.890500 -0.004400 0.455000\nvn -0.807900 -0.084000 0.583300\nvn 0.070300 0.719300 0.691100\nvn -0.988100 -0.002700 -0.153800\nvn -0.756600 0.011500 0.653800\nvn -0.966700 -0.023000 0.254800\nvn -0.419900 0.716700 0.556700\nvn -0.458500 0.474300 0.751500\nvn -0.968100 0.063800 -0.242200\nvn -0.904400 -0.112100 -0.411600\nvn -0.964400 0.262900 -0.029800\nvn -0.942900 0.099600 0.317600\nvn -0.909200 0.220500 0.353000\nvn 0.027200 0.870500 0.491300\nvn -0.218200 0.830700 0.512200\nvn -0.855700 -0.500600 0.130700\nvn -0.902900 -0.429400 -0.021800\nvn -0.930100 -0.349200 -0.113400\nvn -0.268400 0.879700 0.392500\nvn -0.940200 0.320500 0.115200\nvn -0.872500 0.185700 0.451800\nvn -0.590400 0.181100 -0.786500\nvn -0.452800 0.870300 -0.193800\nvn -0.931400 0.041300 0.361700\nvn -0.743300 -0.271500 -0.611300\nvn -0.749900 0.062500 0.658600\nvn -0.890300 -0.019800 0.454900\nvn -0.882400 -0.071200 -0.465000\nvn -0.785900 0.149400 -0.600000\nvn -0.914200 -0.396400 -0.084400\nvn -0.853600 -0.482000 0.197500\nvn -0.861600 -0.327300 0.387900\nvn -0.896500 0.069400 0.437500\nvn -0.851900 0.358800 0.381400\nvn -0.995100 -0.010300 0.098400\nvn -0.775700 -0.502400 -0.381900\nvn -0.733900 -0.676700 -0.058600\nvn -0.727400 -0.276300 0.628100\nvn -0.462300 -0.779600 0.422500\nvn -0.989600 0.138000 0.040400\nvn -0.757200 -0.582800 0.294800\nvn -0.626300 -0.779500 -0.008000\nvn -0.853200 -0.180700 0.489200\nvn -0.653900 -0.756500 -0.003100\nvn -0.507100 0.096900 0.856400\nvn -0.766400 -0.490000 -0.415300\nvn -0.988600 -0.127700 0.079300\nvn -0.716800 -0.544000 -0.436200\nvn -0.775900 -0.359000 -0.518700\nvn -0.831900 -0.372400 -0.411400\nvn -0.836500 -0.505600 -0.211300\nvn -0.683500 -0.728200 0.051300\nvn -0.729500 -0.665400 -0.158200\nvn -0.688600 -0.723400 0.050500\nvn -0.818100 -0.567700 0.090900\nvn -0.925100 -0.364500 0.106300\nvn -0.961200 -0.177100 0.211300\nvn -0.872200 -0.256700 0.416300\nvn -0.753500 -0.244500 0.610200\nvn -0.673100 -0.270100 0.688400\nvn -0.725400 -0.152000 0.671300\nvn -0.712500 0.051000 0.699900\nvn -0.607200 0.029500 0.794000\nvn -0.479400 -0.175800 0.859800\nvn -0.251600 -0.536400 0.805600\nvn -0.186200 -0.952600 0.240400\nvn -0.239000 -0.953200 0.185300\nvn -0.591900 -0.698800 0.401600\nvn -0.352600 -0.920800 0.166600\nvn -0.465900 -0.847300 0.255000\nvn -0.573100 -0.813000 -0.102800\nvn -0.809900 0.133600 0.571200\nvn -0.790900 0.069200 0.608000\nvn -0.560400 -0.819100 -0.122400\nvn -0.877400 -0.371200 -0.303800\nvn -0.854600 0.085300 0.512200\nvn -0.831900 -0.102100 0.545400\nvn -0.980800 -0.193200 -0.027600\nvn -0.997600 -0.049200 -0.048500\nvn -0.974200 -0.091400 0.206100\nvn -0.647200 -0.761600 0.031700\nvn -0.410700 -0.886300 0.214000\nvn -0.913000 -0.181100 -0.365500\nvn -0.924900 -0.365800 -0.103100\nvn -0.756800 -0.650100 -0.067000\nvn -0.887800 -0.268000 -0.374000\nvn -0.828300 -0.528500 0.185700\nvn -0.976200 -0.027800 0.215200\nvn -0.915000 -0.370000 0.160700\nvn -0.893600 0.088300 0.440100\nvn -0.867800 -0.243000 0.433400\nvn -0.908100 0.060900 0.414200\nvn -0.767700 -0.545100 0.336700\nvn -0.765000 -0.642000 0.049700\nvn -0.648900 -0.750300 0.126600\nvn -0.706400 -0.353700 0.613100\nvn -0.839100 -0.403500 0.364800\nvn -0.790600 -0.373200 0.485400\nvn -0.205200 0.252800 -0.945500\nvn -0.847000 0.069200 0.527000\nvn -0.939200 0.197900 0.280400\nvn -0.985600 -0.009100 -0.169000\nvn -0.827700 0.016400 0.560800\nvn -0.844700 -0.145300 0.515000\nvn -0.923100 -0.384100 -0.019800\nvn -0.299300 0.950300 -0.085700\nvn -0.907800 0.129300 0.398900\nvn -0.909800 -0.405500 0.087500\nvn -0.863100 -0.503900 0.032900\nvn 0.201700 0.886700 0.416100\nvn -0.869800 -0.024000 0.492800\nvn -0.722100 -0.019600 0.691500\nvn 0.217800 0.975500 -0.031100\nvn 0.417600 0.825400 -0.379700\nvn 0.457400 0.129100 -0.879800\nvn 0.449300 -0.077900 -0.890000\nvn -0.733400 -0.239500 0.636200\nvn -0.889400 -0.098800 0.446300\nvn -0.650200 0.377000 -0.659600\nvn 0.364200 0.568600 -0.737500\nvn -0.246300 -0.930800 0.270100\nvn 0.235000 -0.563000 -0.792300\nvn -0.413500 -0.637600 -0.649900\nvn -0.925200 0.002400 0.379400\nvn -0.730600 0.608400 0.309600\nvn -0.977000 0.203700 0.062700\nvn -0.064400 -0.943900 -0.323800\nvn -0.050800 -0.724400 -0.687500\nvn -0.969800 -0.044600 0.239500\nvn -0.968800 0.020700 0.247000\nvn -0.418000 -0.499100 -0.759000\nvn -0.770200 0.598100 -0.221100\nvn -0.528300 -0.033500 -0.848400\nvn -0.865400 -0.265000 0.425300\nvn -0.085000 -0.975100 0.205000\nvn -0.962500 0.085600 0.257400\nvn -0.672100 0.592200 -0.444500\nvn -0.255400 -0.822000 0.509000\nvn -0.998800 -0.036200 0.033400\nvn -0.941900 0.333700 -0.038200\nvn -0.963000 -0.101700 -0.249500\nvn -0.599800 0.127300 -0.789900\nvn 0.000000 -0.098100 -0.995100\nvn -0.191800 0.458400 0.867800\nvn -0.463800 -0.501900 0.730000\nvn 0.032300 0.859900 0.509400\nvn -0.542600 -0.745500 0.387000\nvn -0.019000 0.864600 0.502000\nvn 0.227100 0.856600 0.463200\nvn 0.682100 -0.447200 0.578600\nvn 0.160100 -0.489100 0.857400\nvn 0.057500 -0.468200 0.881700\nvn 0.083700 -0.849000 0.521700\nvn 0.239600 0.313900 0.918700\nvn 0.031400 0.222000 0.974500\nvn 0.032700 -0.032000 0.998900\nvn 0.364500 -0.097900 0.926000\nvn 0.224100 -0.103400 0.969100\nvn 0.428300 0.254800 0.866900\nvn 0.481100 -0.236500 0.844100\nvn 0.604700 0.115100 0.788000\nvn 0.236600 -0.459200 0.856200\nvn 0.577100 -0.326400 0.748600\nvn 0.718100 -0.067200 0.692600\nvn 0.460100 -0.460400 0.759100\nvn 0.660600 -0.442500 0.606400\nvn 0.734000 -0.260700 0.627000\nvn 0.510000 -0.597100 0.619200\nvn 0.548500 -0.597900 0.584400\nvn 0.605500 -0.467100 0.644200\nvn 0.467800 -0.704500 0.533700\nvn 0.517200 -0.535100 0.667900\nvn 0.531100 -0.467800 0.706400\nvn 0.451200 -0.606000 0.655000\nvn 0.561700 -0.288500 0.775400\nvn 0.564400 -0.259000 0.783800\nvn 0.510400 -0.259900 0.819700\nvn 0.625100 -0.050900 0.778800\nvn 0.642000 -0.039600 0.765600\nvn 0.692900 0.027100 0.720500\nvn 0.694800 0.088000 0.713800\nvn 0.595600 0.117700 0.794500\nvn 0.516700 -0.345700 0.783200\nvn 0.668300 -0.182700 0.721100\nvn 0.671200 -0.093800 0.735300\nvn 0.510300 -0.239000 0.826100\nvn 0.670800 -0.017500 0.741400\nvn -0.098600 -0.103300 0.989700\nvn -0.076100 -0.128600 0.988800\nvn 0.053200 -0.260800 0.963900\nvn -0.031200 -0.178700 0.983400\nvn 0.099300 -0.290600 0.951600\nvn -0.217500 0.094600 0.971400\nvn -0.165900 0.051600 0.984800\nvn -0.134300 -0.025700 0.990600\nvn -0.169900 0.336500 0.926200\nvn -0.166800 0.187100 0.968000\nvn -0.085400 0.170700 0.981600\nvn -0.031900 -0.510000 0.859600\nvn 0.106100 -0.845600 0.523100\nvn -0.099200 -0.180200 0.978600\nvn -0.048300 -0.342500 0.938300\nvn -0.044400 -0.415000 0.908700\nvn 0.078300 -0.614000 0.785400\nvn 0.240900 -0.822900 0.514500\nvn -0.007600 -0.337000 0.941400\nvn 0.030400 -0.388200 0.921000\nvn 0.211200 -0.588100 0.780700\nvn 0.479200 -0.759600 0.439700\nvn 0.043100 -0.345200 0.937500\nvn 0.063300 -0.352000 0.933800\nvn 0.246100 -0.530700 0.811000\nvn 0.425500 -0.702700 0.570300\nvn 0.212000 -0.178000 0.960900\nvn 0.375800 -0.292600 0.879200\nvn 0.054200 -0.352200 0.934300\nvn 0.546800 -0.385500 0.743200\nvn 0.499800 -0.373900 0.781300\nvn 0.514200 -0.625900 0.586300\nvn 0.456000 0.016300 0.889800\nvn 0.532100 0.034600 0.845900\nvn 0.396300 0.046800 0.916900\nvn 0.259000 0.192600 0.946400\nvn 0.308100 0.272300 0.911500\nvn 0.270700 0.421600 0.865400\nvn 0.191500 0.498700 0.845300\nvn 0.520700 -0.395000 0.756800\nvn 0.649500 -0.236200 0.722600\nvn -0.059000 -0.010600 0.998200\nvn 0.003500 -0.244200 0.969700\nvn 0.051200 -0.149100 0.987500\nvn 0.179700 -0.278600 0.943400\nvn 0.663700 -0.040000 0.746900\nvn 0.610100 -0.072800 0.788900\nvn 0.551600 -0.233000 0.800900\nvn 0.540900 -0.389000 0.745600\nvn 0.618700 -0.395600 0.678700\nvn 0.674500 -0.270700 0.686800\nvn 0.692000 -0.166000 0.702600\nvn 0.376100 -0.070200 0.923900\nvn 0.214500 -0.159500 0.963600\nvn 0.067500 -0.169300 0.983200\nvn 0.018500 -0.241400 0.970200\nvn -0.048800 -0.074700 0.996000\nvn 0.068100 -0.425100 0.902600\nvn 0.044600 -0.399100 0.915800\nvn 0.589000 -0.368100 0.719400\nvn 0.425600 -0.447800 0.786300\nvn 0.158700 -0.330300 0.930400\nvn 0.246100 -0.132600 0.960100\nvn 0.276400 0.045800 0.959900\nvn 0.313500 0.033000 0.949000\nvn 0.248300 0.199700 0.947900\nvn 0.160800 -0.448900 0.879000\nvn 0.256100 -0.372800 0.891800\nvn 0.158600 -0.519500 0.839600\nvn 0.114300 -0.398000 0.910200\nvn 0.342400 -0.561700 0.753100\nvn 0.485100 -0.418600 0.767800\nvn 0.611500 -0.162000 0.774500\nvn 0.403500 -0.142600 0.903800\nvn 0.663000 0.113400 0.740000\nvn 0.456600 0.091400 0.884900\nvn 0.600100 0.304100 0.739900\nvn 0.403500 0.275000 0.872700\nvn 0.485500 -0.502100 0.715700\nvn 0.609600 -0.296900 0.734900\nvn 0.626400 -0.415500 0.659400\nvn 0.683700 -0.013300 0.729600\nvn 0.707300 0.218700 0.672200\nvn 0.762400 0.150200 0.629400\nvn 0.699800 0.346700 0.624600\nvn 0.713700 0.312400 0.626900\nvn 0.747300 -0.115000 0.654400\nvn 0.354800 -0.354400 0.865100\nvn 0.441100 -0.148500 0.885100\nvn 0.521400 0.130400 0.843300\nvn 0.551600 0.319900 0.770300\nvn 0.583800 0.416800 0.696800\nvn 0.228600 -0.221300 0.948000\nvn 0.281500 -0.031800 0.959000\nvn 0.533200 0.479300 0.697100\nvn 0.299300 0.463800 0.833800\nvn 0.306900 0.196400 0.931200\nvn 0.287900 0.345900 0.893000\nvn 0.000000 0.188000 0.982100\nvn 0.110700 0.018200 0.993700\nvn 0.202600 -0.092000 0.974900\nvn 0.037800 0.072800 0.996600\nvn 0.145400 0.172600 0.974200\nvn 0.164000 0.229700 0.959300\nvn 0.468400 -0.033300 0.882900\nvn 0.532500 0.058100 0.844400\nvn 0.602300 -0.077900 0.794400\nvn 0.585300 -0.326800 0.742000\nvn 0.599600 -0.356900 0.716300\nvn 0.545600 -0.321300 0.774000\nvn 0.578100 -0.155700 0.800900\nvn 0.567300 -0.223200 0.792700\nvn 0.583900 -0.051200 0.810200\nvn 0.588100 -0.383100 0.712200\nvn 0.617200 -0.335200 0.711800\nvn 0.592900 -0.298300 0.747900\nvn 0.562400 -0.449100 0.694300\nvn 0.234300 -0.596100 0.768000\nvn 0.233200 -0.519600 0.821900\nvn 0.203600 -0.790300 0.577900\nvn 0.213400 -0.715800 0.664800\nvn 0.119400 -0.545300 0.829600\nvn 0.154700 -0.683500 0.713300\nvn 0.137700 -0.652500 0.745100\nvn 0.111700 -0.770900 0.627000\nvn 0.109700 -0.594800 0.796300\nvn 0.251500 -0.643100 0.723300\nvn 0.091500 -0.671900 0.735000\nvn 0.434300 -0.517700 0.737100\nvn 0.484000 -0.595300 0.641300\nvn 0.343000 -0.699000 0.627500\nvn 0.373600 -0.600200 0.707200\nvn 0.279100 -0.476500 0.833700\nvn 0.154800 -0.358800 0.920500\nvn 0.187400 -0.596300 0.780500\nvn 0.243200 -0.631200 0.736500\nvn 0.245800 -0.736800 0.629800\nvn 0.202900 -0.533700 0.821000\nvn 0.205100 -0.738900 0.641800\nvn 0.442700 -0.306200 0.842700\nvn 0.300700 -0.454500 0.838400\nvn 0.216500 -0.584100 0.782200\nvn 0.650300 -0.275600 0.707900\nvn 0.336400 -0.489500 0.804500\nvn 0.169400 -0.679700 0.713600\nvn 0.725600 -0.151600 0.671200\nvn 0.654700 -0.222600 0.722300\nvn 0.625300 -0.087400 0.775400\nvn 0.758600 -0.187400 0.624000\nvn 0.679500 -0.280000 0.678100\nvn 0.690100 0.038500 0.722600\nvn 0.706200 -0.068500 0.704700\nvn 0.770700 -0.211200 0.601100\nvn 0.667000 -0.311400 0.676800\nvn 0.749000 -0.262700 0.608300\nvn 0.654500 -0.378000 0.654800\nvn 0.711600 -0.124200 0.691500\nvn 0.517700 -0.142000 0.843700\nvn 0.810600 -0.166100 0.561400\nvn 0.217300 -0.266200 0.939100\nvn 0.130500 -0.357400 0.924700\nvn 0.191800 -0.486500 0.852300\nvn 0.799700 -0.084900 0.594300\nvn 0.812100 -0.117000 0.571600\nvn 0.757400 -0.009900 0.652800\nvn 0.822800 -0.145800 0.549200\nvn 0.354600 -0.245200 0.902300\nvn 0.728000 0.138600 0.671300\nvn 0.735900 0.059400 0.674400\nvn 0.100300 -0.364900 0.925600\nvn 0.750600 0.045600 0.659100\nvn 0.563100 0.078600 0.822600\nvn 0.388400 0.057200 0.919700\nvn 0.237800 0.055800 0.969700\nvn 0.096300 0.014700 0.995200\nvn -0.011100 0.049900 0.998700\nvn 0.023400 -0.210900 0.977200\nvn 0.261600 0.275200 0.925100\nvn 0.583700 0.244500 0.774300\nvn 0.411400 0.265400 0.871900\nvn 0.110800 0.254300 0.960700\nvn -0.009100 0.239800 0.970800\nvn 0.785100 0.292200 0.546000\nvn 0.762100 0.289700 0.578900\nvn 0.883600 0.200200 0.423300\nvn 0.611700 0.416000 0.672800\nvn 0.591700 0.383900 0.708900\nvn 0.425400 0.499800 0.754400\nvn 0.405500 0.422500 0.810600\nvn 0.836400 0.029900 0.547300\nvn 0.846400 0.011500 0.532400\nvn 0.870900 -0.061900 0.487600\nvn 0.856500 -0.023200 0.515600\nvn 0.856500 -0.040700 0.514500\nvn 0.827000 0.083300 0.555900\nvn 0.864600 -0.074100 0.497000\nvn 0.876500 0.068800 0.476500\nvn 0.903900 0.000200 0.427700\nvn 0.909200 -0.005200 0.416200\nvn 0.781700 0.196600 0.591800\nvn 0.952700 0.093700 0.288900\nvn 0.947100 0.125200 0.295500\nvn 0.975000 0.079100 0.207400\nvn 0.960700 0.083500 0.264500\nvn 0.911700 0.184300 0.367000\nvn 0.939900 0.163900 0.299400\nvn 0.982000 0.031500 0.186000\nvn 0.975700 0.027700 0.217300\nvn 0.976300 0.050300 0.210300\nvn 0.547700 0.820000 -0.166200\nvn 0.479400 0.876500 0.044000\nvn 0.678800 0.733200 0.039200\nvn 0.283700 0.273400 0.919100\nvn 0.275700 0.511500 0.813800\nvn 0.763000 0.446500 0.467300\nvn 0.776800 0.483100 0.404000\nvn 0.651800 0.535100 0.537400\nvn 0.817700 0.482100 0.314400\nvn 0.819800 0.457700 0.344100\nvn 0.655000 0.513000 0.554800\nvn 0.817100 0.305400 0.488800\nvn 0.779900 0.409600 0.473300\nvn 0.261100 0.627600 0.733400\nvn 0.499100 0.472800 0.726200\nvn 0.278700 0.619500 0.733800\nvn 0.481900 0.587300 0.650200\nvn 0.500400 0.253300 0.827900\nvn 0.859000 0.364200 0.359800\nvn 0.832400 0.191000 0.520100\nvn 0.632600 0.160700 0.757600\nvn 0.495500 0.571600 0.654000\nvn 0.489600 -0.504600 0.711100\nvn 0.430200 -0.679400 0.594300\nvn 0.494100 -0.789700 0.363600\nvn 0.921900 -0.139700 0.361300\nvn 0.734100 -0.484000 0.476300\nvn 0.700400 -0.428800 0.570600\nvn 0.306500 -0.391200 0.867700\nvn 0.241900 -0.671800 0.700000\nvn 0.396200 -0.649300 0.649100\nvn 0.500800 -0.769300 0.396600\nvn 0.195500 -0.815900 0.544100\nvn 0.428600 -0.764400 0.481600\nvn 0.579400 -0.776000 0.249300\nvn 0.545400 -0.527800 0.651100\nvn 0.203000 -0.662800 0.720800\nvn 0.456500 -0.594200 0.662200\nvn 0.636600 -0.534000 0.556300\nvn 0.480500 -0.011700 0.876900\nvn 0.490200 0.081300 0.867800\nvn 0.564500 0.119600 0.816700\nvn 0.496200 0.285700 0.819800\nvn 0.344600 -0.506500 0.790300\nvn 0.388300 -0.162700 0.907000\nvn 0.371900 -0.781900 0.500300\nvn 0.419200 -0.787600 0.451600\nvn 0.278200 -0.948400 0.152100\nvn 0.023700 -0.902800 0.429300\nvn 0.478700 -0.733100 0.483100\nvn 0.447000 -0.753200 0.482500\nvn 0.133800 -0.797800 0.587900\nvn 0.405700 -0.685000 0.605200\nvn 0.502000 -0.850900 0.154600\nvn 0.606900 -0.762300 0.224700\nvn 0.744600 -0.491300 0.451800\nvn 0.659600 -0.093100 0.745800\nvn 0.741100 -0.106000 0.662900\nvn 0.553900 0.012800 0.832500\nvn 0.699400 -0.446900 0.557700\nvn 0.306900 -0.102900 0.946100\nvn 0.571500 -0.469500 0.673000\nvn 0.765400 0.344800 0.543400\nvn 0.660700 0.437100 0.610200\nvn 0.841100 0.377200 0.387600\nvn 0.931300 0.284000 0.227900\nvn 0.901200 0.380500 0.207700\nvn 0.967800 0.179200 0.176600\nvn 0.441100 -0.225800 0.868600\nvn 0.383000 0.114400 0.916600\nvn 0.408900 0.093700 0.907700\nvn 0.346500 0.187800 0.919000\nvn 0.149200 -0.151700 0.977100\nvn 0.297000 -0.149800 0.943100\nvn -0.294800 -0.737300 0.607900\nvn -0.011300 -0.526400 0.850100\nvn 0.246000 -0.194200 0.949600\nvn 0.799500 -0.120500 0.588400\nvn 0.863400 -0.411500 0.291800\nvn 0.475400 -0.879700 -0.002500\nvn 0.680700 -0.732400 0.014500\nvn 0.068600 -0.970000 0.233000\nvn 0.142000 -0.989800 -0.001400\nvn 0.516200 0.020100 0.856200\nvn -0.546900 -0.804900 0.230300\nvn -0.027500 -0.972700 0.230300\nvn 0.063200 0.186600 0.980400\nvn 0.634500 -0.180200 0.751500\nvn 0.517900 -0.297000 0.802200\nvn 0.572100 -0.189000 0.798100\nvn 0.658500 -0.287300 0.695600\nvn 0.606900 -0.340700 0.718000\nvn 0.617100 -0.181900 0.765600\nvn 0.478300 0.339700 0.809800\nvn 0.543800 0.189700 0.817500\nvn -0.225500 -0.958400 -0.175000\nvn 0.647200 -0.072200 0.758900\nvn 0.569300 -0.091600 0.817000\nvn 0.110300 0.314600 0.942800\nvn 0.017500 0.581700 0.813200\nvn -0.040700 0.415900 0.908500\nvn 0.436300 -0.203900 0.876400\nvn -0.491000 -0.631700 0.599900\nvn 0.094000 -0.363100 0.927000\nvn 0.302800 -0.897700 -0.319900\nvn 0.599800 -0.767900 -0.224600\nvn -0.261900 -0.528000 0.807800\nvn -0.270300 -0.928100 -0.255900\nvn -0.444700 -0.894400 -0.046800\nvn -0.466100 -0.878800 -0.101500\nvn 0.777900 -0.565000 0.275000\nvn 0.062200 -0.970800 -0.231500\nvn 0.691500 -0.447700 0.566900\nvn -0.519800 -0.801200 0.296500\nvn -0.142000 -0.979400 0.143700\nvn -0.226200 -0.831400 0.507500\nvn 0.350400 -0.894900 0.276400\nvn 0.034300 -0.985700 -0.165000\nvn 0.215100 -0.747700 0.628200\nvn 0.414700 -0.909500 -0.029200\nvn 0.584500 -0.218500 0.781400\nvn 0.570500 -0.182100 0.800800\nvn 0.524700 -0.313300 0.791500\nvn 0.602800 -0.299100 0.739700\nvn 0.385200 -0.484100 0.785700\nvn 0.103500 0.421600 0.900800\nvn 0.210500 0.235600 0.948800\nvn 0.658700 -0.166500 0.733800\nvn 0.611000 -0.337600 0.716000\nvn 0.546900 -0.467900 0.694200\nvn 0.510300 -0.538600 0.670500\nvn 0.347100 -0.813100 0.467300\nvn 0.422700 -0.683000 0.595700\nvn 0.359100 -0.807800 0.467500\nvn 0.278100 -0.897900 0.341000\nvn 0.185600 -0.968400 0.166200\nvn 0.025400 -0.994400 -0.103000\nvn -0.246800 -0.865800 -0.435300\nvn -0.076200 0.308300 0.948200\nvn 0.185500 0.144600 0.971900\nvn 0.031200 -0.139700 0.989700\nvn -0.336200 0.378500 0.862300\nvn -0.169800 -0.242900 0.955000\nvn -0.903200 0.284400 0.321300\nvn -0.734400 0.241200 0.634400\nvn -0.640400 -0.663700 0.386400\nvn -0.981100 0.087500 -0.172500\nvn -0.780400 -0.623800 0.042900\nvn 0.630400 0.153600 0.760900\nvn 0.492200 0.237900 0.837300\nvn 0.452600 0.471100 0.757100\nvn -0.085100 0.958100 -0.273400\nvn 0.145600 0.982500 0.116500\nvn 0.073000 0.995500 0.060900\nvn 0.450100 -0.658600 0.603100\nvn 0.233000 -0.786900 0.571400\nvn 0.331800 -0.635700 0.697000\nvn 0.118300 -0.888100 0.444100\nvn -0.408900 -0.888300 -0.208900\nvn -0.021200 -0.979100 0.202200\nvn -0.372500 -0.723300 -0.581400\nvn -0.635900 -0.618100 -0.462100\nvn 0.422500 -0.164500 0.891300\nvn 0.242400 -0.132700 0.961000\nvn 0.355200 -0.047900 0.933500\nvn 0.542000 0.402100 0.738000\nvn 0.347700 0.730400 0.587900\nvn 0.355700 0.792900 0.494700\nvn 0.243800 0.895700 0.371700\nvn 0.221100 0.312700 0.923700\nvn 0.404200 0.201500 0.892200\nvn 0.333100 0.460800 0.822600\nvn 0.450500 -0.419400 0.788000\nvn 0.496700 -0.488900 0.717100\nvn 0.600100 -0.237300 0.763900\nvn 0.309000 -0.746600 0.589100\nvn 0.335200 -0.726600 0.599700\nvn 0.402000 -0.641600 0.653200\nvn 0.284400 0.470000 0.835500\nvn 0.425400 0.430800 0.795900\nvn 0.393600 0.397800 0.828700\nvn 0.593100 0.125800 0.795200\nvn 0.649500 0.040000 0.759200\nvn 0.634500 0.194500 0.748000\nvn 0.202000 -0.726200 0.657100\nvn 0.261200 -0.738400 0.621700\nvn 0.321200 -0.546100 0.773700\nvn 0.347600 -0.324700 0.879600\nvn 0.388700 -0.355900 0.849800\nvn 0.450800 -0.104500 0.886400\nvn 0.174100 -0.733700 0.656700\nvn 0.282300 -0.551900 0.784600\nvn 0.286000 -0.314100 0.905300\nvn 0.371300 -0.057100 0.926800\nvn 0.133400 -0.770700 0.623000\nvn 0.239800 -0.571200 0.785000\nvn 0.175400 -0.089800 0.980400\nvn 0.184100 -0.376200 0.908000\nvn 0.205600 -0.863500 0.460500\nvn 0.160700 -0.858000 0.487900\nvn 0.112600 -0.869400 0.481100\nvn 0.090000 -0.868700 0.487000\nvn 0.524800 -0.158300 0.836400\nvn 0.486900 0.186800 0.853200\nvn 0.303100 -0.047900 0.951700\nvn 0.601900 0.206500 0.771400\nvn 0.643100 -0.060900 0.763300\nvn 0.185900 0.940700 0.283800\nvn 0.336200 0.779400 0.528700\nvn 0.495000 0.548800 0.673500\nvn 0.514200 -0.188500 0.836600\nvn 0.479000 0.081000 0.874000\nvn 0.396600 0.418500 0.817000\nvn 0.506900 0.487400 0.710900\nvn 0.313700 0.669400 0.673400\nvn 0.292900 0.741900 0.603100\nvn 0.228700 0.045200 0.972400\nvn 0.261700 -0.246600 0.933100\nvn 0.135900 -0.766300 0.628000\nvn 0.118600 -0.516400 0.848100\nvn 0.314800 -0.442000 0.839900\nvn 0.504900 -0.505000 0.700000\nvn 0.182200 0.721700 0.667800\nvn 0.202900 0.569600 0.796500\nvn -0.473700 -0.465000 0.747900\nvn 0.388200 -0.612800 0.688200\nvn 0.188600 -0.610700 0.769000\nvn -0.123100 0.982800 -0.137900\nvn 0.089200 0.973300 0.211600\nvn 0.203400 0.325500 0.923400\nvn 0.054900 0.941400 0.332600\nvn 0.037700 -0.969800 -0.240900\nvn 0.012600 -0.929400 -0.368700\nvn 0.206700 -0.862100 0.462700\nvn -0.046100 -0.978700 -0.200100\nvn -0.436600 0.715100 -0.545800\nvn -0.342000 0.814700 -0.468200\nvn 0.058300 -0.930100 -0.362500\nvn -0.858400 -0.235600 -0.455700\nvn -0.855600 0.103000 -0.507300\nvn -0.493700 -0.610400 -0.619400\nvn -0.755800 -0.379900 -0.533200\nvn -0.117600 -0.559300 -0.820600\nvn -0.283100 0.741900 -0.607700\nvn -0.192100 0.934900 -0.298300\nvn -0.572000 0.314200 -0.757700\nvn -0.592700 0.339500 -0.730300\nvn -0.074500 -0.428000 -0.900700\nvn -0.209800 0.891000 -0.402600\nvn -0.085000 -0.499000 -0.862400\nvn -0.297100 -0.612100 -0.732800\nvn -0.307200 -0.683800 -0.661800\nvn -0.419500 -0.659000 -0.624300\nvn -0.170600 -0.297200 -0.939400\nvn -0.258900 -0.283500 -0.923300\nvn -0.203600 -0.286100 -0.936300\nvn -0.340400 0.430300 -0.836000\nvn -0.583700 -0.301000 -0.754100\nvn -0.506900 0.333200 -0.794900\nvn -0.444300 0.636900 -0.630000\nvn -0.637900 -0.097900 -0.763900\nvn -0.801000 -0.073600 -0.594100\nvn -0.415700 -0.237200 -0.878000\nvn -0.617600 0.167200 -0.768500\nvn -0.818500 -0.209500 -0.534900\nvn -0.899300 -0.024900 -0.436500\nvn -0.650000 0.202900 -0.732300\nvn -0.923500 0.032700 -0.382300\nvn -0.125900 -0.022600 -0.991800\nvn -0.188800 -0.046800 -0.980900\nvn -0.386400 0.204700 -0.899300\nvn -0.408300 0.049400 -0.911500\nvn -0.413200 0.118400 -0.902900\nvn -0.719000 0.211900 -0.661900\nvn -0.567500 0.242500 -0.786900\nvn -0.710500 0.148500 -0.687900\nvn -0.820700 0.177200 -0.543100\nvn -0.520600 0.174000 -0.835800\nvn -0.169100 0.008000 -0.985500\nvn -0.580800 0.432300 -0.689700\nvn -0.572400 0.436400 -0.694100\nvn -0.454100 0.727100 -0.514800\nvn -0.886700 0.045000 -0.460200\nvn -0.845300 -0.069200 -0.529800\nvn -0.058000 -0.085400 -0.994600\nvn -0.114200 -0.145600 -0.982700\nvn -0.356600 0.525000 -0.772800\nvn -0.338100 -0.012800 -0.941000\nvn -0.748600 0.266700 -0.607000\nvn -0.540700 0.387800 -0.746500\nvn -0.830300 0.175200 -0.529000\nvn -0.542400 0.098000 -0.834400\nvn -0.372800 0.876800 0.303700\nvn -0.054200 0.398400 0.915600\nvn -0.143500 -0.045500 -0.988600\nvn -0.902700 -0.122000 -0.412500\nvn -0.709100 0.135000 -0.692000\nvn -0.541600 -0.403100 -0.737600\nvn -0.351800 0.922000 -0.161600\nvn -0.051500 -0.476300 -0.877800\nvn -0.354000 0.772700 -0.526800\nvn -0.282400 0.940900 -0.187200\nvn -0.433400 0.872200 -0.226700\nvn 0.000000 0.989500 -0.144700\nvn -0.420800 0.900600 -0.108600\nvn -0.868800 0.110000 -0.482700\nvn -0.836200 0.050300 -0.546000\nvn -0.302300 0.898800 -0.317400\nvn 0.099200 -0.470200 -0.876900\nvn 0.292300 -0.446400 -0.845700\nvn -0.213600 0.787600 -0.578000\nvn -0.338200 0.043200 -0.940100\nvn -0.119700 -0.425400 -0.897000\nvn -0.788600 0.466300 -0.400900\nvn -0.455900 0.729600 -0.509600\nvn 0.220900 -0.778400 -0.587600\nvn 0.501200 -0.690000 -0.522200\nvn -0.187500 -0.408200 -0.893400\nvn -0.255500 -0.788700 -0.559100\nvn -0.463800 0.879100 -0.109700\nvn -0.562600 -0.698000 -0.442900\nvn -0.779000 -0.486800 -0.395100\nvn -0.767400 -0.298400 -0.567500\nvn -0.385800 -0.789100 -0.477900\nvn 0.019500 -0.802400 -0.596400\nvn -0.486300 0.866600 -0.111700\nvn -0.946100 0.075900 -0.314700\nvn -0.876500 0.026700 -0.480700\nvn -0.593700 0.801700 -0.069200\nvn -0.983700 0.084900 -0.158200\nvn -0.930000 -0.081900 -0.358300\nvn 0.357800 -0.873600 -0.329700\nvn 0.659700 -0.699600 -0.274400\nvn -0.372300 -0.773000 -0.513600\nvn -0.160000 -0.912400 -0.376500\nvn -0.595100 0.802700 -0.039500\nvn -0.803800 0.578200 -0.140000\nvn -0.450500 -0.816600 -0.360900\nvn -0.628800 -0.687000 -0.364000\nvn -0.473200 -0.812000 -0.341500\nvn 0.120500 -0.926500 -0.356400\nvn -0.621800 0.764000 -0.171900\nvn -0.408900 0.899000 -0.156800\nvn -0.797700 0.578200 0.171200\nvn -0.979100 0.185900 -0.081900\nvn -0.965400 -0.098400 -0.241400\nvn 0.367400 -0.930000 -0.010700\nvn 0.655900 -0.754700 -0.010400\nvn -0.356000 -0.858700 -0.368600\nvn -0.152200 -0.987800 -0.032800\nvn -0.732400 0.674800 -0.090200\nvn -0.753300 0.653000 -0.078600\nvn -0.584700 -0.809100 -0.058900\nvn -0.783500 -0.619300 -0.050900\nvn -0.458000 -0.886400 -0.067000\nvn 0.172600 -0.984900 -0.013100\nvn 0.317500 -0.906200 0.279200\nvn 0.562000 -0.797400 0.219800\nvn -0.607600 0.719900 0.335300\nvn -0.372600 -0.927100 -0.039900\nvn -0.196400 -0.925900 0.322600\nvn -0.960500 0.245800 0.130500\nvn -0.947100 0.316100 0.054400\nvn -0.508300 -0.820900 0.260200\nvn -0.715400 -0.668800 0.202200\nvn -0.355800 -0.888700 0.288900\nvn 0.129800 -0.943000 0.306500\nvn -0.455100 0.294600 0.840300\nvn -0.970200 -0.223400 0.094000\nvn -0.958100 0.275500 0.077900\nvn -0.215400 -0.768500 0.602400\nvn -0.392700 -0.706000 0.589300\nvn 0.016700 -0.810500 0.585400\nvn 0.020500 -0.782500 0.622300\nvn -0.168700 -0.759800 0.627800\nvn -0.693100 0.172700 0.699800\nvn -0.843500 -0.211900 0.493600\nvn -0.788200 0.197500 0.582800\nvn 0.272800 -0.763600 0.585200\nvn 0.488800 -0.678500 0.548300\nvn -0.312100 -0.896800 0.313500\nvn -0.067300 0.157600 0.985200\nvn -0.604100 0.324500 0.727900\nvn -0.007700 0.026100 0.999600\nvn -0.171100 0.435400 0.883800\nvn 0.062100 -0.001300 0.998000\nvn 0.024900 -0.303900 0.952400\nvn -0.261400 -0.285800 0.921900\nvn -0.129600 -0.793800 0.594200\nvn 0.117500 -0.384000 0.915800\nvn 0.014400 0.114300 0.993300\nvn -0.241600 -0.162000 0.956800\nvn -0.183600 0.163700 0.969200\nvn 0.359400 -0.171200 0.917300\nvn 0.416200 -0.013900 0.909100\nvn -0.031900 -0.182800 0.982600\nvn 0.021100 -0.179500 0.983500\nvn 0.111600 -0.250600 0.961600\nvn -0.108400 -0.179200 0.977800\nvn -0.009000 0.158100 0.987400\nvn 0.222500 0.547600 0.806600\nvn 0.216900 0.454000 0.864200\nvn 0.309500 -0.323400 0.894200\nvn 0.607000 -0.172100 0.775800\nvn 0.495300 -0.154900 0.854700\nvn 0.530100 -0.204500 0.822900\nvn 0.584800 -0.269200 0.765200\nvn 0.606000 -0.247000 0.756100\nvn 0.072800 -0.997300 -0.012700\nvn 0.233200 -0.971400 -0.043800\nvn 0.263800 -0.958600 0.107100\nvn 0.784400 -0.619800 0.022500\nvn 0.848000 -0.529800 -0.006400\nvn 0.879900 -0.470400 0.066500\nvn 0.986800 -0.161800 -0.001200\nvn 0.968600 -0.246300 -0.033500\nvn 0.954300 -0.296200 0.037600\nvn 0.997000 -0.073200 0.025800\nvn 0.964900 -0.221000 0.141600\nvn 0.992600 0.074100 0.096300\nvn 0.978100 -0.117800 0.171600\nvn 0.936000 0.264600 0.231900\nvn 0.971900 0.016000 0.234700\nvn 0.794500 0.478400 0.374000\nvn 0.904300 0.208800 0.372400\nvn 0.641300 0.479200 0.599300\nvn 0.665500 0.603800 0.438700\nvn 0.910700 -0.296500 0.287600\nvn 0.920100 -0.372000 0.122700\nvn 0.858500 -0.470700 0.203600\nvn 0.909900 -0.195700 0.365700\nvn 0.829600 -0.382800 0.406400\nvn 0.933300 -0.022300 0.358400\nvn 0.838600 -0.220400 0.498100\nvn 0.873400 0.162500 0.458900\nvn 0.870400 -0.050900 0.489700\nvn 0.761100 0.298500 0.575900\nvn 0.825700 0.095100 0.556000\nvn 0.625100 0.343500 0.700800\nvn 0.641500 0.404200 0.651900\nvn 0.894600 -0.444900 -0.041500\nvn 0.917100 -0.395100 0.053300\nvn 0.198600 -0.978800 -0.050500\nvn 0.069100 -0.994700 -0.076100\nvn 0.087600 -0.968100 0.234600\nvn 0.269300 -0.928000 0.257300\nvn 0.136800 -0.731100 0.668400\nvn 0.347100 -0.698200 0.626000\nvn 0.247900 -0.440000 0.863100\nvn 0.264500 -0.343600 0.901100\nvn 0.421800 -0.309600 0.852200\nvn 0.520800 -0.135700 0.842800\nvn 0.579900 -0.221700 0.783900\nvn 0.556300 -0.256900 0.790200\nvn 0.347200 -0.137500 0.927600\nvn 0.444600 -0.206200 0.871600\nvn 0.357900 -0.280500 0.890600\nvn 0.217400 -0.317100 0.923100\nvn 0.155600 -0.273100 0.949300\nvn 0.447300 -0.063000 0.892100\nvn 0.270000 -0.199600 0.941900\nvn 0.042500 -0.109200 0.993100\nvn 0.626800 -0.177600 0.758600\nvn 0.730100 -0.297000 0.615400\nvn 0.663100 -0.349900 0.661700\nvn 0.262800 0.017200 0.964700\nvn 0.729700 0.238900 0.640600\nvn 0.703900 0.175500 0.688200\nvn 0.599500 0.268200 0.754100\nvn 0.774700 0.062700 0.629100\nvn 0.797100 -0.082900 0.598000\nvn 0.707700 -0.705400 0.038400\nvn 0.824300 -0.558100 0.095000\nvn 0.806600 0.337100 0.485500\nvn 0.899500 0.177800 0.399100\nvn 0.781100 0.389400 0.488100\nvn 0.990100 -0.020100 -0.138700\nvn 0.656300 0.729400 0.193100\nvn 0.800500 0.570500 0.183700\nvn 0.944300 0.327400 0.033000\nvn 0.992100 0.105000 -0.069100\nvn 0.975100 -0.122900 -0.184300\nvn 0.932600 0.027000 -0.359800\nvn 0.615300 0.787800 -0.027800\nvn 0.762400 0.645500 -0.044800\nvn 0.939300 0.159100 -0.303800\nvn 0.919300 0.351900 -0.176000\nvn 0.905400 -0.117700 -0.407800\nvn 0.777100 0.042800 -0.627900\nvn 0.544900 0.802300 -0.243800\nvn 0.691200 0.675100 -0.257700\nvn 0.787700 0.204500 -0.581100\nvn 0.809700 0.403000 -0.426600\nvn 0.774100 -0.136700 -0.618100\nvn 0.621000 0.023200 -0.783500\nvn 0.413900 0.784800 -0.461300\nvn 0.550200 0.675300 -0.491200\nvn 0.625400 0.211900 -0.751000\nvn 0.616000 0.454800 -0.643100\nvn 0.624700 -0.163200 -0.763500\nvn 0.512400 0.002500 -0.858700\nvn 0.282800 0.748500 -0.599700\nvn 0.521700 0.200600 -0.829200\nvn 0.475000 0.449900 -0.756200\nvn 0.393500 0.652100 -0.648000\nvn 0.437500 -0.157600 -0.885300\nvn 0.396400 0.005900 -0.918100\nvn 0.154000 0.678100 -0.718600\nvn 0.408500 0.186700 -0.893400\nvn 0.361200 0.416200 -0.834400\nvn 0.226600 0.612500 -0.757200\nvn 0.136100 -0.180500 -0.974100\nvn 0.115500 0.048600 -0.992100\nvn -0.001000 0.584700 -0.811200\nvn 0.174600 0.150800 -0.973000\nvn 0.101200 0.340000 -0.935000\nvn 0.060000 0.496700 -0.865800\nvn 0.582100 0.453200 -0.675000\nvn 0.367000 0.553800 -0.747300\nvn 0.365500 0.792500 -0.488200\nvn 0.185500 0.622500 -0.760300\nvn 0.195200 0.840200 -0.505800\nvn 0.874000 0.218300 -0.434200\nvn 0.752100 0.333500 -0.568400\nvn 0.768600 0.525100 -0.365200\nvn 0.992300 0.051000 -0.113000\nvn 0.975000 0.067700 -0.211600\nvn 0.988000 0.126900 -0.087900\nvn 0.597600 0.676800 -0.429900\nvn 0.941100 0.112800 -0.318600\nvn 0.964500 0.204200 -0.167400\nvn 0.977400 -0.122000 0.172400\nvn 0.976300 -0.128900 0.173600\nvn 0.983700 -0.047100 0.173400\nvn 0.988600 -0.054900 0.139700\nvn 0.985500 0.001800 0.169300\nvn 0.947900 0.315500 0.042800\nvn 0.984300 0.167400 0.054600\nvn 0.986600 0.161500 -0.024000\nvn 0.957900 -0.225600 0.177600\nvn 0.953400 -0.220500 0.205600\nvn 0.748800 -0.485300 -0.451300\nvn 0.807400 -0.362900 -0.465100\nvn 0.869100 -0.330400 -0.368000\nvn 0.991100 0.010700 0.132700\nvn 0.733000 0.667200 -0.132500\nvn 0.847900 0.529100 0.032600\nvn 0.878500 0.468500 -0.093800\nvn 0.639600 -0.529600 -0.557100\nvn 0.935600 -0.280000 0.214900\nvn 0.946000 -0.273600 -0.173400\nvn 0.867900 -0.316700 -0.382700\nvn 0.742900 -0.309400 -0.593600\nvn 0.598800 -0.317000 -0.735400\nvn 0.426600 -0.333400 -0.840700\nvn 0.324500 -0.152600 -0.933500\nvn 0.314600 -0.360400 -0.878100\nvn 0.563900 0.060200 0.823700\nvn 0.691600 0.081300 0.717600\nvn 0.543600 0.177000 0.820400\nvn 0.552100 0.074100 0.830400\nvn 0.571400 0.015000 0.820500\nvn 0.434700 0.098600 0.895100\nvn 0.507300 0.106200 0.855200\nvn 0.523500 0.095700 0.846600\nvn 0.542300 0.106200 0.833400\nvn 0.656100 0.114900 0.745800\nvn 0.617000 0.016500 0.786800\nvn 0.434000 0.191800 0.880200\nvn 0.501800 0.166400 0.848800\nvn 0.471800 0.169300 0.865200\nvn 0.521400 -0.458500 0.719600\nvn 0.905400 -0.420200 -0.060900\nvn 0.938200 -0.334600 0.088600\nvn 0.291200 -0.933100 0.210700\nvn 0.121400 -0.975500 0.183600\nvn 0.087700 -0.985700 0.144100\nvn 0.452300 -0.889000 0.071700\nvn 0.538300 -0.840400 0.063100\nvn 0.622600 -0.759600 0.187700\nvn 0.373400 -0.926400 -0.049500\nvn 0.688600 -0.695700 0.204600\nvn 0.601300 -0.794800 0.081600\nvn 0.451600 -0.892100 -0.013900\nvn 0.644900 -0.723500 0.246300\nvn 0.533500 -0.793900 0.291700\nvn 0.632300 -0.580600 0.512900\nvn 0.542900 -0.399300 0.738700\nvn 0.144600 -0.053500 0.988000\nvn 0.502000 -0.011200 0.864700\nvn 0.366400 0.098200 0.925200\nvn 0.554200 -0.104000 0.825800\nvn 0.423400 -0.859100 0.287300\nvn 0.512200 -0.631400 0.582200\nvn 0.343800 -0.939000 0.010500\nvn 0.563000 -0.822500 0.080900\nvn 0.759500 -0.643700 0.093500\nvn 0.882000 -0.409900 0.232300\nvn 0.784500 -0.474300 0.399500\nvn 0.794800 -0.423900 0.434200\nvn 0.792200 -0.569900 0.218100\nvn 0.727900 -0.102100 0.678000\nvn 0.708400 0.018300 0.705500\nvn 0.643100 0.096700 0.759600\nvn 0.569500 0.201500 0.796900\nvn 0.791300 -0.606400 0.077800\nvn 0.917700 -0.390100 -0.075400\nvn 0.746400 -0.634600 0.200400\nvn 0.851500 -0.521100 0.057300\nvn 0.922400 -0.372800 -0.101200\nvn 0.994500 0.086800 -0.058000\nvn 0.999100 0.029800 -0.030800\nvn 0.997300 0.002300 -0.073500\nvn 0.996600 -0.081600 0.006400\nvn 0.965100 -0.128500 0.228200\nvn 0.892900 0.363300 -0.265700\nvn 0.889100 -0.443600 0.112800\nvn 0.933900 -0.305900 0.184900\nvn 0.654000 0.049000 -0.754900\nvn 0.709000 0.165100 -0.685600\nvn 0.835800 0.125700 -0.534400\nvn 0.902800 -0.371500 -0.216700\nvn 0.925800 -0.360400 -0.113700\nvn 0.166000 -0.567900 -0.806200\nvn 0.189900 -0.451400 -0.871800\nvn 0.158500 -0.688700 -0.707500\nvn 0.176900 -0.666000 -0.724700\nvn 0.233700 -0.644500 -0.728000\nvn 0.215300 -0.687900 -0.693000\nvn 0.328000 -0.619200 -0.713400\nvn 0.431700 -0.500500 -0.750500\nvn 0.583000 -0.456300 -0.672200\nvn 0.712400 -0.414700 -0.566100\nvn 0.814800 -0.401000 -0.418600\nvn 0.257600 -0.156300 -0.953500\nvn 0.271900 -0.415900 -0.867800\nvn 0.697000 -0.370000 -0.614300\nvn 0.730200 -0.242100 -0.638900\nvn 0.844700 -0.231200 -0.482800\nvn 0.208300 -0.217400 -0.953600\nvn 0.906700 -0.213100 -0.364000\nvn 0.423000 -0.436800 -0.793900\nvn 0.458100 -0.260200 -0.849900\nvn 0.597100 -0.258300 -0.759500\nvn 0.943500 -0.202100 -0.262400\nvn 0.544300 -0.398700 -0.738100\nvn 0.934800 -0.079100 -0.346200\nvn 0.950700 0.005400 -0.309900\nvn 0.973900 -0.018500 -0.226300\nvn 0.621400 -0.115800 -0.774800\nvn 0.788100 0.024600 -0.615000\nvn 0.760100 -0.121500 -0.638300\nvn 0.905200 0.005800 -0.424800\nvn 0.211700 -0.066300 -0.975100\nvn 0.873200 -0.102100 -0.476500\nvn 0.470600 -0.099900 -0.876600\nvn 0.499100 0.060500 -0.864400\nvn 0.544700 0.216600 -0.810100\nvn 0.982100 0.013800 -0.188000\nvn 0.956300 0.019800 -0.291600\nvn 0.928800 0.067800 -0.364300\nvn 0.168400 0.985000 0.038400\nvn 0.640200 0.744500 0.189600\nvn 0.818700 0.386100 0.424900\nvn 0.624400 0.559100 0.545400\nvn 0.927500 0.215900 0.305200\nvn 0.362100 0.912200 -0.191500\nvn 0.458200 -0.567200 -0.684300\nvn 0.086300 0.552300 0.829100\nvn 0.421200 0.676700 0.603900\nvn 0.434200 0.599200 0.672500\nvn 0.620800 0.491300 0.610900\nvn 0.084400 0.467400 0.880000\nvn 0.823300 0.447100 0.349600\nvn 0.933200 0.252300 0.256000\nvn 0.966200 0.097700 0.238500\nvn 0.313300 -0.453500 -0.834300\nvn 0.939200 0.315900 0.134600\nvn 0.623300 0.639800 0.449600\nvn 0.213000 -0.457900 -0.863100\nvn 0.446700 -0.892800 0.057700\nvn 0.536500 -0.843800 0.009800\nvn 0.713400 -0.695500 0.085700\nvn 0.907500 -0.419900 -0.007100\nvn 0.886800 -0.429700 -0.169900\nvn 0.875400 -0.441700 -0.196600\nvn 0.879800 -0.432600 -0.196700\nvn 0.913800 -0.305600 -0.267500\nvn 0.960200 -0.211300 -0.182700\nvn 0.963900 -0.096800 -0.247900\nvn 0.986200 -0.049900 -0.157800\nvn 0.833300 0.531300 0.152600\nvn 0.829800 0.494200 0.259000\nvn 0.935900 0.284900 0.206800\nvn 0.972700 0.146700 0.179800\nvn 0.628200 0.708000 0.322600\nvn 0.162700 0.818800 0.550500\nvn 0.315900 0.162400 -0.934800\nvn 0.261000 0.363900 -0.894100\nvn 0.196100 0.959300 -0.203300\nvn 0.864300 -0.426000 -0.267400\nvn 0.879400 -0.388000 -0.275900\nvn 0.919300 -0.354400 -0.171100\nvn 0.305100 0.928300 0.212300\nvn 0.271100 0.878400 0.393500\nvn 0.439200 0.825400 0.354700\nvn 0.142200 0.736700 0.661100\nvn 0.338000 -0.244500 -0.908800\nvn 0.450800 0.869400 0.202000\nvn 0.290400 0.025400 -0.956600\nvn 0.212000 0.318200 -0.924000\nvn 0.154200 0.960800 0.230400\nvn 0.142900 0.540500 -0.829100\nvn 0.038800 0.621800 -0.782200\nvn 0.252000 0.102100 -0.962300\nvn 0.334700 0.080200 -0.938900\nvn 0.318700 0.946700 0.046800\nvn 0.418100 0.753300 0.507600\nvn 0.414100 -0.587700 0.695100\nvn 0.488000 -0.358600 0.795700\nvn 0.175500 -0.129700 0.975900\nvn 0.511600 -0.839900 0.180800\nvn 0.619700 0.379700 0.686800\nvn 0.693400 0.376300 0.614500\nvn 0.616600 0.372000 0.693800\nvn 0.746400 -0.581700 0.323400\nvn 0.689200 -0.653800 0.312300\nvn 0.577400 -0.740400 0.344000\nvn 0.368900 -0.850300 0.375300\nvn 0.171000 -0.923000 0.344600\nvn 0.949100 0.204200 0.239800\nvn 0.743000 -0.256800 0.618000\nvn 0.776500 -0.229000 0.586900\nvn 0.374300 -0.430800 0.821100\nvn 0.916000 -0.205400 -0.344600\nvn 0.874500 -0.319100 -0.365300\nvn 0.941100 -0.289000 -0.175400\nvn 0.977100 -0.112700 -0.180100\nvn 0.989400 -0.034200 -0.141100\nvn 0.113700 0.652000 0.749700\nvn 0.243800 0.650900 0.718900\nvn 0.255400 0.731100 0.632600\nvn 0.136000 0.909000 0.394000\nvn 0.373500 0.263900 -0.889200\nvn 0.319700 -0.071200 -0.944800\nvn 0.273400 0.790200 0.548400\nvn -0.105900 -0.994300 -0.011400\nvn 0.079600 -0.996100 0.037400\nvn 0.082100 -0.991900 -0.097100\nvn -0.576300 -0.801200 0.160700\nvn -0.653300 -0.703800 0.279000\nvn 0.012800 -0.882900 0.469300\nvn -0.495300 -0.862700 0.101600\nvn -0.051900 -0.893000 0.447000\nvn -0.365600 -0.923300 0.117300\nvn 0.031100 -0.831400 0.554800\nvn -0.264100 -0.963400 0.045100\nvn 0.037500 -0.837600 0.545000\nvn 0.359000 0.019900 0.933100\nvn 0.546700 -0.660300 0.514800\nvn 0.463800 -0.501900 0.730000\nvn 0.769800 -0.492800 0.405700\nvn 0.417800 -0.233200 0.878000\nvn -0.024400 0.811100 0.584400\nvn -0.065900 0.676800 0.733100\nvn -0.164300 0.611400 0.774000\nvn -0.032200 0.897100 0.440700\nvn -0.213500 0.458000 0.862900\nvn -0.084400 0.400200 0.912500\nvn 0.542600 -0.745500 0.387000\nvn 0.042000 0.866300 0.497700\nvn -0.032300 0.859900 0.509400\nvn 0.409900 -0.896500 0.168200\nvn 0.234700 -0.971100 0.042000\nvn 0.052000 0.896900 0.439000\nvn 0.364200 0.424800 0.828800\nvn 0.512300 0.347700 0.785200\nvn -0.065000 0.881200 0.468200\nvn 0.498600 0.439500 0.747100\nvn 0.474000 0.486300 0.734100\nvn -0.652200 0.156000 0.741800\nvn -0.280600 0.730200 0.622900\nvn 0.484900 0.342600 0.804700\nvn -0.008100 -0.857800 0.513900\nvn 0.320500 -0.156600 0.934200\nvn 0.127100 -0.655900 0.744100\nvn -0.682100 -0.447100 0.578600\nvn 0.102100 0.727700 -0.678200\nvn 0.038000 0.989200 0.141500\nvn 0.030000 0.992300 0.120300\nvn -0.485400 0.603500 -0.632600\nvn -0.181600 0.979900 0.083100\nvn -0.353400 0.932700 0.071100\nvn -0.758300 0.118600 -0.640900\nvn -0.722900 0.194300 -0.663000\nvn -0.998200 -0.042800 0.041900\nvn -0.311700 -0.591600 -0.743500\nvn -0.535400 -0.523900 -0.662400\nvn -0.340400 -0.938600 -0.055900\nvn 0.462300 -0.510700 -0.724900\nvn 0.489700 -0.869000 -0.070400\nvn 0.616500 -0.750800 0.236900\nvn 0.244000 0.671800 -0.699400\nvn 0.082000 0.990400 0.111300\nvn -0.670700 0.232200 -0.704400\nvn -0.927500 0.371500 0.040100\nvn -0.665600 -0.347000 -0.660700\nvn -0.456800 -0.887800 -0.056100\nvn 0.808400 -0.315800 -0.496800\nvn 0.855400 -0.298300 -0.423400\nvn 0.710900 -0.354600 -0.607400\nvn 0.765100 -0.519900 0.379700\nvn 0.225500 0.671600 -0.705700\nvn 0.279100 0.722600 -0.632400\nvn 0.184300 0.948200 0.258500\nvn -0.551300 0.032000 -0.833700\nvn -0.790400 0.612500 -0.008900\nvn -0.738900 -0.196900 -0.644300\nvn -0.600900 -0.796400 -0.068000\nvn 0.896500 -0.136300 -0.421500\nvn -0.734900 0.224900 -0.639700\nvn -0.469100 0.881300 0.056200\nvn -0.600600 0.798800 0.034700\nvn -0.785500 -0.050100 -0.616700\nvn -0.727800 -0.685100 -0.029500\nvn 0.819200 0.400300 -0.410700\nvn 0.729200 -0.105900 0.676000\nvn -0.067300 -0.623000 -0.779300\nvn 0.264200 -0.958700 -0.105400\nvn -0.868600 -0.495400 0.000700\nvn -0.144600 -0.986200 -0.080500\nvn 0.589600 0.389300 0.707600\nvn 0.314300 0.844100 0.434400\nvn 0.207300 -0.600400 -0.772400\nvn 0.420600 -0.257100 -0.870000\nvn 0.190300 -0.321200 -0.927700\nvn -0.065700 0.478700 -0.875500\nvn 0.253600 0.446500 -0.858100\nvn -0.646600 0.147200 -0.748400\nvn -0.515400 0.306600 -0.800200\nvn -0.654000 0.076600 -0.752600\nvn -0.500000 -0.323300 -0.803400\nvn 0.598300 -0.189400 -0.778600\nvn 0.397900 0.388700 -0.831000\nvn -0.582300 0.159700 -0.797100\nvn -0.643500 -0.207500 -0.736700\nvn 0.777500 0.027300 -0.628200\nvn 0.725600 -0.087500 -0.682500\nvn 0.521400 0.358000 -0.774500\nvn 0.639100 0.340700 -0.689500\nvn -0.659800 0.035100 -0.750600\nvn -0.683800 -0.099500 -0.722800\nvn -0.684100 -0.077200 -0.725300\nvn -0.703300 0.056800 -0.708500\nvn -0.705500 -0.020700 -0.708400\nvn 0.794400 0.139300 -0.591200\nvn 0.787500 0.089200 -0.609800\nvn -0.077600 -0.377500 -0.922700\nvn -0.721900 0.053900 -0.689800\nvn -0.285000 -0.367200 -0.885400\nvn 0.752600 0.237300 -0.614200\nvn 0.918000 0.064100 -0.391200\nvn 0.311300 -0.744800 -0.590100\nvn 0.020500 -0.822500 -0.568300\nvn -0.882400 -0.358200 -0.304800\nvn -0.942900 -0.217700 -0.251800\nvn 0.856400 0.373200 -0.356700\nvn 0.902400 0.218200 -0.371400\nvn 0.009000 0.862500 -0.505900\nvn 0.281300 0.820600 -0.497400\nvn -0.561200 0.699500 -0.442300\nvn -0.974200 -0.077000 -0.212300\nvn -0.224900 -0.805100 -0.548800\nvn -0.516600 -0.709300 -0.479400\nvn 0.576800 -0.599100 -0.555300\nvn 0.457400 0.748500 -0.480000\nvn -0.975800 0.079200 -0.203800\nvn -0.685000 -0.587500 -0.430800\nvn 0.900200 -0.114000 -0.420200\nvn 0.860900 -0.257800 -0.438600\nvn 0.752300 -0.425400 -0.503000\nvn 0.623900 0.641400 -0.446500\nvn 0.763100 0.512200 -0.394100\nvn -0.958600 0.180200 -0.220100\nvn -0.788800 -0.487000 -0.375000\nvn -0.855400 0.423000 -0.298800\nvn -0.188900 -0.912000 -0.363900\nvn -0.485300 -0.817200 -0.310900\nvn 0.613600 -0.710300 -0.344800\nvn 0.302200 0.900000 -0.314100\nvn 0.488400 0.827700 -0.276300\nvn -0.996900 -0.078300 0.009900\nvn -0.998300 0.049500 0.030700\nvn -0.673400 -0.699200 -0.239900\nvn 0.967100 -0.130300 -0.218200\nvn 0.913600 -0.310900 -0.261900\nvn 0.800200 -0.517600 -0.302900\nvn 0.813800 0.538900 -0.217400\nvn -0.984100 0.177100 0.014200\nvn -0.794400 -0.583100 -0.169800\nvn -0.873400 0.485800 -0.033100\nvn -0.926200 0.280400 -0.251900\nvn -0.893400 -0.438200 -0.098700\nvn 0.978500 0.042500 -0.201900\nvn 0.327300 -0.869600 -0.369600\nvn 0.055300 -0.923200 -0.380400\nvn -0.968500 -0.246500 -0.036100\nvn 0.960000 0.223800 -0.168100\nvn -0.572100 0.799000 -0.185100\nvn -0.741300 0.560400 -0.369200\nvn 0.078500 -0.972800 -0.217900\nvn 0.973200 0.227800 -0.031600\nvn 0.902200 0.393400 -0.176700\nvn 0.614000 -0.768200 -0.181200\nvn 0.338500 -0.918200 -0.205400\nvn 0.325500 0.939300 -0.108200\nvn 0.027200 0.950000 -0.310900\nvn -0.566100 0.823800 0.028300\nvn -0.763800 0.638000 -0.097600\nvn -0.983400 -0.109700 0.144200\nvn -0.462400 -0.874100 -0.148200\nvn 0.800700 -0.581600 -0.143400\nvn 0.529200 0.843200 -0.094300\nvn -0.990000 0.035500 0.136800\nvn -0.656300 -0.749400 -0.087700\nvn 0.982300 -0.171400 -0.075000\nvn 0.930200 -0.348900 -0.113700\nvn 0.825400 0.564100 -0.020400\nvn 0.656800 0.713400 -0.244100\nvn -0.973900 0.163000 0.158100\nvn -0.778000 -0.627900 -0.019200\nvn 0.997600 0.027600 -0.063500\nvn -0.923800 0.347500 0.160600\nvn -0.857300 0.502000 0.114100\nvn -0.876800 -0.477900 0.052300\nvn -0.949900 -0.293500 0.107300\nvn -0.855600 -0.492400 0.159600\nvn -0.931100 -0.294900 0.214800\nvn -0.949900 -0.133100 0.282800\nvn -0.958400 0.013200 0.285100\nvn -0.934800 0.174400 0.309500\nvn 0.921500 0.379200 0.083400\nvn 0.975600 0.211200 0.059300\nvn -0.895100 0.305100 0.325100\nvn -0.847300 0.461900 0.262000\nvn -0.753200 0.653800 0.071700\nvn -0.729900 0.645900 0.223700\nvn -0.553100 0.808700 0.200000\nvn 0.028700 0.995100 -0.094300\nvn 0.054800 0.992900 0.106000\nvn 0.346900 0.933700 0.088300\nvn -0.434800 -0.900200 0.022100\nvn -0.157100 -0.967700 -0.196900\nvn 0.539600 0.837300 0.087400\nvn 0.610600 -0.791700 -0.018400\nvn 0.998800 0.000300 0.048700\nvn 0.979200 -0.197100 0.047900\nvn 0.824500 0.556400 0.102300\nvn 0.690000 0.721900 -0.051700\nvn 0.920700 -0.387900 0.041600\nvn 0.794900 -0.606600 0.011500\nvn 0.354300 -0.934200 -0.041500\nvn 0.096300 -0.993800 -0.054400\nvn -0.142300 -0.989400 -0.027900\nvn -0.631600 -0.771100 0.080700\nvn -0.744300 -0.653900 0.135300\nvn -0.591400 -0.775200 0.222100\nvn -0.707500 -0.663300 0.243800\nvn 0.955400 -0.237000 0.176100\nvn 0.892000 -0.415000 0.179200\nvn 0.711100 0.696600 0.094800\nvn 0.554600 0.798100 0.235300\nvn 0.070000 0.952200 0.297200\nvn 0.363100 0.896400 0.254200\nvn 0.600000 -0.788900 0.132200\nvn -0.924100 -0.006700 0.382100\nvn -0.899200 0.169600 0.403200\nvn -0.114800 -0.981100 0.155500\nvn -0.402500 -0.896700 0.183900\nvn 0.778000 -0.613100 0.137200\nvn -0.851900 0.294400 0.433000\nvn -0.816200 -0.502300 0.285500\nvn 0.359900 -0.923900 0.129600\nvn 0.969400 0.178400 0.168800\nvn -0.691500 0.598300 0.404600\nvn -0.519200 0.767400 0.376100\nvn -0.890900 -0.306600 0.335000\nvn 0.914600 0.362600 0.179000\nvn 0.985400 -0.041400 0.164900\nvn -0.921500 -0.140100 0.362200\nvn 0.104000 -0.988500 0.109300\nvn -0.797700 0.396000 0.454700\nvn -0.843300 0.132000 0.520900\nvn -0.808300 0.281800 0.516900\nvn -0.660400 -0.658500 0.360800\nvn -0.766800 -0.501000 0.401200\nvn 0.574900 -0.771200 0.273200\nvn 0.891100 0.305300 0.335800\nvn 0.936300 0.136200 0.323600\nvn -0.653900 0.531100 0.538900\nvn -0.833100 -0.331200 0.443000\nvn 0.111300 -0.952700 0.282800\nvn -0.099400 -0.944900 0.311800\nvn 0.948000 -0.078600 0.308300\nvn 0.366900 0.823400 0.432900\nvn 0.537900 0.743800 0.396600\nvn -0.867300 -0.166500 0.469100\nvn 0.917800 -0.259200 0.300700\nvn 0.865100 -0.411500 0.286600\nvn -0.759500 0.371500 0.533900\nvn -0.867300 -0.023300 0.497200\nvn -0.346600 -0.871300 0.347400\nvn -0.538400 -0.767600 0.347700\nvn 0.745100 -0.606200 0.278100\nvn 0.674200 0.644600 0.360500\nvn 0.082500 0.872800 0.481100\nvn 0.351600 -0.890600 0.288300\nvn 0.862200 0.076400 0.500700\nvn -0.482100 0.702200 0.523800\nvn -0.572200 0.440700 0.691600\nvn -0.665900 -0.481600 0.569700\nvn -0.726700 -0.347500 0.592600\nvn 0.113100 -0.873200 0.473900\nvn -0.094600 -0.875600 0.473700\nvn 0.865700 -0.113900 0.487400\nvn 0.332200 0.708000 0.623200\nvn 0.493300 0.642200 0.586700\nvn -0.767300 -0.152800 0.622800\nvn 0.837800 -0.261000 0.479500\nvn 0.775800 -0.411700 0.478200\nvn -0.670800 0.312000 0.672700\nvn -0.744500 -0.034100 0.666700\nvn -0.286400 -0.811900 0.508700\nvn -0.446200 -0.723400 0.526800\nvn 0.661500 -0.579100 0.476500\nvn 0.617600 0.552700 0.559600\nvn 0.090900 0.753300 0.651400\nvn -0.735900 0.063900 0.674000\nvn -0.559300 -0.620300 0.549900\nvn 0.320700 -0.819700 0.474500\nvn -0.726400 0.188000 0.661100\nvn 0.522100 -0.715700 0.463900\nvn 0.818300 0.241200 0.521700\nvn -0.186300 0.173300 0.967100\nvn -0.159400 0.252800 0.954300\nvn -0.432500 0.309700 0.846700\nvn -0.534100 0.121300 0.836600\nvn -0.558900 0.002900 0.829200\nvn -0.193200 -0.001200 0.981100\nvn 0.391000 -0.617100 0.682800\nvn 0.505500 -0.518800 0.689300\nvn 0.199900 -0.454300 0.868100\nvn -0.167500 -0.357200 0.918900\nvn -0.473800 -0.443500 0.760800\nvn -0.389500 -0.550800 0.738200\nvn -0.138200 0.541400 0.829300\nvn -0.074200 0.356900 0.931200\nvn 0.002600 0.419100 0.907900\nvn -0.326600 -0.618700 0.714500\nvn -0.081700 -0.540400 0.837400\nvn -0.116400 -0.456200 0.882200\nvn 0.089400 0.312600 0.945600\nvn 0.261800 0.524900 0.809900\nvn 0.063900 0.570100 0.819100\nvn -0.104900 0.253800 0.961500\nvn -0.306900 0.431800 0.848100\nvn 0.068100 -0.593900 0.801700\nvn 0.096500 -0.743200 0.662000\nvn 0.239000 -0.699300 0.673700\nvn -0.174500 -0.298000 0.938400\nvn -0.528600 -0.309400 0.790400\nvn -0.030700 -0.597800 0.801000\nvn -0.075900 -0.532900 0.842800\nvn -0.207400 -0.691300 0.692100\nvn 0.268100 0.045600 0.962300\nvn 0.640500 0.138600 0.755300\nvn 0.558500 0.292900 0.776100\nvn 0.139700 -0.541800 0.828800\nvn 0.103200 -0.539000 0.835900\nvn 0.132600 0.297700 0.945400\nvn 0.364800 0.479400 0.798200\nvn 0.291200 -0.089100 0.952500\nvn 0.683200 -0.005900 0.730100\nvn -0.541300 -0.166400 0.824200\nvn 0.217900 0.144200 0.965200\nvn 0.455200 0.420700 0.784700\nvn -0.207700 0.080400 0.974900\nvn -0.476700 0.232100 0.847800\nvn -0.172500 -0.230700 0.957600\nvn -0.195400 -0.111100 0.974400\nvn -0.548000 -0.061600 0.834200\nvn 0.153400 0.271800 0.950000\nvn 0.299100 -0.213200 0.930100\nvn 0.679000 -0.142200 0.720100\nvn 0.585300 -0.393600 0.708900\nvn 0.647200 -0.261500 0.716000\nvn 0.273800 -0.270300 0.923000\nvn 0.242800 -0.349700 0.904800\nvn -0.057500 -0.748400 0.660800\nvn -0.188200 0.711000 0.677500\nvn -0.420000 0.591300 0.688500\nvn 0.660700 0.166300 0.731900\nvn 0.936000 -0.262400 0.234700\nvn 0.574400 0.147500 0.805100\nvn 0.604400 -0.005400 0.796600\nvn 0.700300 -0.124500 0.702900\nvn 0.721500 -0.062100 0.689600\nvn 0.693700 0.048400 0.718600\nvn 0.691600 0.104200 0.714700\nvn -0.654700 0.410300 -0.634800\nvn -0.003600 0.798700 0.601600\nvn -0.041200 0.737400 0.674200\nvn -0.059100 0.779500 0.623500\nvn -0.020300 0.705200 0.708700\nvn -0.091500 0.700700 0.707500\nvn 0.441400 0.370300 0.817300\nvn 0.464100 0.403100 0.788700\nvn 0.082900 0.873300 0.480100\nvn 0.012500 0.865800 0.500100\nvn 0.062600 0.543400 0.837100\nvn 0.044600 0.462400 0.885500\nvn 0.026800 0.505500 0.862400\nvn 0.042400 0.420600 0.906200\nvn 0.021100 0.515100 0.856800\nvn 0.061400 0.614700 0.786300\nvn 0.030000 0.528200 0.848500\nvn 0.198000 0.139900 0.970100\nvn 0.319300 0.225100 0.920500\nvn 0.108800 0.093400 0.989700\nvn 0.420600 0.295000 0.857900\nvn 0.439700 0.143700 0.886500\nvn 0.206900 0.628300 0.749900\nvn 0.205500 0.640100 0.740300\nvn 0.487400 0.447600 0.749700\nvn 0.505800 0.512100 0.694100\nvn 0.477400 0.834100 -0.276200\nvn 0.368500 0.819100 -0.439600\nvn -0.016100 0.532900 -0.846000\nvn 0.518800 0.847200 -0.114300\nvn 0.087600 0.683400 -0.724800\nvn 0.002800 0.601200 -0.799100\nvn 0.539200 0.824100 0.173200\nvn 0.520100 0.605400 0.602400\nvn 0.532900 0.717400 0.448700\nvn 0.216800 0.762400 -0.609700\nvn 0.397600 0.840800 0.367200\nvn 0.434000 0.899200 0.054600\nvn 0.055200 0.641800 -0.764900\nvn 0.287400 0.760100 0.582800\nvn 0.191800 0.741600 -0.642800\nvn 0.305500 0.830400 -0.465800\nvn 0.373900 0.880200 -0.292100\nvn -0.037400 0.400700 -0.915400\nvn 0.412300 0.896100 -0.163900\nvn -0.057300 0.520000 -0.852200\nvn 0.243900 0.812800 -0.528900\nvn 0.102200 0.723900 -0.682300\nvn -0.013500 0.557000 -0.830400\nvn 0.285400 0.942200 0.175300\nvn -0.105700 0.378200 -0.919700\nvn 0.359200 0.931500 -0.056300\nvn -0.076600 0.306300 -0.948800\nvn 0.392600 0.888600 -0.237000\nvn 0.386800 0.851300 -0.354300\nvn 0.197900 0.635500 0.746200\nvn 0.152800 0.276200 0.948900\nvn 0.228100 0.405000 0.885400\nvn 0.106800 0.217800 0.970100\nvn 0.239500 0.520100 0.819800\nvn 0.221400 0.669900 0.708700\nvn 0.029700 0.092600 0.995200\nvn 0.050200 0.404100 0.913300\nvn 0.062900 0.221200 0.973200\nvn 0.042100 0.515200 0.856000\nvn 0.272100 0.948000 -0.165100\nvn -0.083400 0.552500 -0.829300\nvn -0.148200 0.304500 -0.940900\nvn 0.347000 0.881600 -0.319700\nvn -0.084700 0.264300 -0.960700\nvn 0.410600 0.818100 -0.402500\nvn 0.289600 0.774100 -0.562900\nvn 0.068000 0.727000 -0.683200\nvn 0.176600 0.984000 0.023400\nvn 0.176200 0.931800 0.317200\nvn 0.081300 0.938300 0.336200\nvn 0.140800 0.979200 0.146300\nvn 0.443700 0.331700 0.832500\nvn 0.508100 0.160700 0.846200\nvn 0.618600 -0.045700 0.784400\nvn 0.665000 -0.131600 0.735100\nvn 0.745200 -0.280300 0.605000\nvn 0.755200 -0.504700 0.418200\nvn 0.643800 -0.759300 0.094500\nvn 0.685900 -0.722600 0.085200\nvn 0.832100 -0.508100 0.222400\nvn 0.795700 -0.501800 0.339200\nvn 0.289100 0.076400 0.954200\nvn 0.481700 0.013900 0.876200\nvn 0.608600 -0.251800 0.752400\nvn 0.487600 -0.110900 0.866000\nvn 0.311100 0.271600 0.910700\nvn 0.543400 0.045500 0.838200\nvn 0.180900 0.509000 0.841500\nvn 0.127800 0.718900 0.683200\nvn -0.098200 0.907700 0.407900\nvn -0.372300 0.921400 0.111500\nvn -0.613300 0.612600 -0.498600\nvn -0.800200 0.292600 -0.523400\nvn -0.865500 0.221300 -0.449200\nvn -0.678100 0.271200 -0.683000\nvn -0.879800 0.162500 -0.446700\nvn -0.895300 0.197900 -0.399100\nvn -0.912200 0.300700 -0.278200\nvn -0.830400 0.556600 -0.024800\nvn -0.946100 0.303400 -0.113300\nvn -0.931900 0.334300 0.140400\nvn -0.640900 0.440300 0.628700\nvn -0.098400 0.147400 0.984200\nvn -0.580800 -0.579300 0.571800\nvn -0.914900 -0.397300 -0.070500\nvn -0.971400 -0.205700 -0.118700\nvn -0.925000 -0.174800 -0.337400\nvn -0.840300 0.170100 -0.514700\nvn -0.825700 0.065000 -0.560300\nvn -0.799700 -0.339400 -0.495200\nvn -0.890200 -0.393000 -0.230200\nvn -0.538400 -0.835000 -0.113600\nvn -0.360100 -0.902900 0.234500\nvn -0.220200 -0.824100 0.521800\nvn -0.057500 -0.667700 0.742200\nvn 0.185700 -0.385800 0.903700\nvn 0.510900 -0.196000 0.837000\nvn 0.567200 -0.143700 0.810900\nvn 0.615800 0.018000 0.787700\nvn 0.655100 0.258100 0.710000\nvn 0.755300 0.141600 0.639900\nvn 0.217200 0.581800 0.783700\nvn -0.053600 0.624800 0.778900\nvn 0.558100 0.030500 0.829200\nvn 0.723000 -0.538600 0.432700\nvn 0.698900 -0.682300 0.214600\nvn 0.625800 -0.779700 0.023400\nvn 0.756100 -0.618400 0.214000\nvn 0.554100 -0.220800 0.802600\nvn 0.875600 0.195400 0.441700\nvn 0.955000 0.107100 0.276700\nvn 0.546900 -0.219800 0.807800\nvn 0.608400 -0.241800 0.755900\nvn 0.453800 0.011100 0.891000\nvn -0.642200 0.726200 -0.245000\nvn -0.953700 0.299200 -0.030200\nvn 0.042900 -0.320600 0.946200\nvn -0.827800 -0.543900 0.137600\nvn -0.892700 -0.344800 -0.290000\nvn -0.910100 0.074300 -0.407600\nvn -0.792300 -0.149700 -0.591400\nvn -0.716900 -0.573700 -0.396000\nvn 0.109000 -0.528500 0.841900\nvn 0.406700 -0.282200 0.868900\nvn 0.945000 0.017000 0.326400\nvn 0.964800 0.025300 0.261500\nvn 0.959900 0.052000 0.275300\nvn 0.941000 0.035800 0.336300\nvn 0.947300 0.073700 0.311700\nvn 0.929700 0.049700 0.364900\nvn 0.902100 0.168000 0.397400\nvn 0.800900 0.277400 0.530600\nvn 0.817900 0.301600 0.490000\nvn 0.664000 0.390100 0.637900\nvn 0.618200 0.355900 0.700800\nvn 0.466000 0.423400 0.776800\nvn 0.424100 0.385400 0.819500\nvn 0.310200 0.421100 0.852300\nvn 0.280200 0.397200 0.873900\nvn 0.171300 0.417500 0.892400\nvn 0.149700 0.390100 0.908500\nvn 0.046800 0.421100 0.905800\nvn 0.021700 0.659600 0.751300\nvn 0.004800 0.595800 0.803100\nvn 0.033100 -0.862000 0.505800\nvn 0.364100 -0.494200 0.789400\nvn 0.695400 0.151000 0.702600\nvn 0.497800 -0.072900 0.864200\nvn 0.030100 -0.324300 0.945500\nvn 0.309400 -0.577900 0.755200\nvn 0.502400 -0.223800 0.835200\nvn 0.564500 -0.090000 0.820500\nvn 0.586900 -0.003300 0.809600\nvn 0.065400 -0.287500 0.955500\nvn 0.145600 -0.386700 0.910600\nvn 0.033200 0.192400 0.980700\nvn 0.977900 0.036300 0.205900\nvn 0.886500 -0.045700 0.460400\nvn 0.564000 0.069300 0.822800\nvn 0.352400 0.285500 0.891200\nvn 0.501300 0.301300 0.811100\nvn 0.309600 0.241800 0.919600\nvn 0.683700 0.417500 0.598400\nvn 0.646200 0.436500 0.626000\nvn 0.708800 0.396600 0.583300\nvn 0.508900 0.491500 0.706700\nvn 0.504900 0.452800 0.734900\nvn 0.255200 0.524600 0.812200\nvn 0.683200 0.417400 0.599100\nvn 0.683100 0.373700 0.627500\nvn 0.276300 0.557700 0.782700\nvn 0.586700 0.403500 0.702100\nvn 0.682600 0.105100 0.723200\nvn 0.232200 0.179100 0.956000\nvn 0.156700 0.090900 0.983400\nvn 0.269100 0.225200 0.936400\nvn 0.071800 0.409300 0.909500\nvn 0.190500 0.411200 0.891400\nvn 0.346400 0.410000 0.843700\nvn 0.353500 0.299700 0.886100\nvn 0.475400 0.388800 0.789200\nvn 0.439600 0.306600 0.844200\nvn 0.438300 -0.420600 0.794300\nvn 0.462800 -0.195000 0.864700\nvn 0.629800 -0.044900 0.775400\nvn 0.589800 -0.079100 0.803600\nvn -0.092600 0.380500 0.920100\nvn 0.006800 0.287800 0.957700\nvn 0.127200 0.280200 0.951400\nvn 0.307200 0.294500 0.904900\nvn 0.290000 0.315900 0.903300\nvn 0.794400 0.103100 0.598500\nvn 0.797200 0.239400 0.554200\nvn 0.518500 0.410700 0.750000\nvn 0.353600 0.135000 0.925600\nvn 0.934600 -0.286700 0.210500\nvn 0.601900 0.085200 0.794000\nvn 0.239300 0.112800 0.964300\nvn 0.935300 -0.224800 0.273200\nvn -0.093500 0.843000 0.529700\nvn -0.227100 0.856600 0.463200\nvn 0.112200 0.980400 0.162000\nvn -0.759100 0.015900 -0.650800\nvn -0.946500 0.322100 -0.017900\nvn 0.707000 0.674700 0.212000\nvn 0.820300 0.544500 0.175000\nvn 0.737200 0.404300 0.541300\nvn 0.705500 0.357600 0.611900\nvn 0.186700 0.266800 0.945500\nvn 0.283200 -0.161100 0.945400\nvn 0.849500 -0.073100 0.522500\nvn 0.694300 -0.141500 0.705600\nvn 0.943200 -0.002600 0.332100\nvn 0.263800 0.045100 0.963500\nvn 0.400100 -0.133000 0.906700\nvn 0.351800 0.156100 0.922900\nvn 0.518400 -0.298200 0.801500\nvn 0.590000 -0.321700 0.740500\nvn 0.640900 -0.298700 0.707100\nvn 0.694100 0.170200 0.699400\nvn 0.922900 -0.216300 0.318400\nvn 0.660700 -0.290700 0.692100\nvn 0.672900 -0.272900 0.687500\nvn 0.689000 -0.177900 0.702500\nvn 0.656900 -0.112600 0.745500\nvn 0.606300 -0.025100 0.794800\nvn 0.577300 0.125600 0.806800\nvn 0.294000 0.170700 0.940400\nvn 0.454400 0.168900 0.874600\nvn 0.549500 0.109000 0.828400\nvn 0.600400 0.010600 0.799600\nvn 0.449800 0.153900 0.879800\nvn 0.922300 0.181900 0.340900\nvn 0.839400 0.282400 0.464400\nvn 0.962700 0.089700 0.255200\nvn 0.971300 0.061300 0.229900\nvn 0.924400 -0.333200 0.185200\nvn 0.899600 -0.348300 0.263300\nvn 0.929500 -0.306000 0.205700\nvn 0.967800 -0.012800 0.251400\nvn 0.980100 -0.042300 0.193900\nvn 0.976900 0.021800 0.212700\nvn 0.970500 -0.062700 0.232900\nvn 0.966000 -0.106400 0.235700\nvn 0.971000 -0.167800 0.170000\nvn 0.979000 -0.102900 0.176100\nvn 0.952100 -0.179800 0.247300\nvn 0.942400 -0.275700 0.189600\nvn 0.921400 -0.265000 0.284200\nvn 0.853200 -0.395000 0.340500\nvn 0.224600 -0.674700 0.703000\nvn 0.266200 0.533700 0.802600\nvn 0.783900 -0.158800 0.600200\nvn 0.723800 -0.127800 0.678100\nvn 0.765300 -0.197600 0.612500\nvn 0.644100 0.381400 0.663000\nvn 0.513500 -0.366000 0.776100\nvn 0.265200 -0.460600 0.847000\nvn 0.803800 -0.211200 0.556200\nvn 0.736400 -0.273600 0.618700\nvn 0.676000 -0.281700 0.680900\nvn 0.711200 -0.386000 0.587500\nvn 0.736000 -0.378600 0.561200\nvn 0.639600 -0.288600 0.712500\nvn 0.482500 -0.582400 0.654200\nvn 0.636200 -0.461800 0.618000\nvn 0.739700 -0.329600 0.586600\nvn 0.779500 -0.365600 0.508700\nvn 0.813400 -0.296600 0.500400\nvn 0.694600 -0.338700 0.634600\nvn 0.206200 -0.798300 0.565900\nvn 0.438100 -0.718600 0.540100\nvn 0.846000 -0.309700 0.434000\nvn 0.877500 -0.125900 0.462600\nvn 0.922900 -0.331900 0.195100\nvn 0.930800 -0.063800 0.360000\nvn 0.715200 0.321700 0.620400\nvn 0.720500 0.268100 0.639500\nvn 0.941000 -0.031900 0.336900\nvn 0.941200 -0.011400 0.337600\nvn 0.977800 -0.126000 0.167000\nvn 0.976800 -0.121700 0.176000\nvn 0.988300 -0.059800 0.140600\nvn 0.984600 -0.058800 0.164600\nvn 0.990400 0.015500 0.136900\nvn 0.909300 -0.004200 0.416100\nvn 0.906900 0.002500 0.421300\nvn 0.903700 0.014200 0.427900\nvn 0.898600 0.040400 0.436700\nvn 0.878000 0.023000 0.478000\nvn 0.679700 -0.074700 0.729600\nvn 0.963700 -0.196900 0.180100\nvn 0.958300 -0.209200 0.194600\nvn 0.086000 0.423400 0.901900\nvn 0.206000 0.419200 0.884200\nvn 0.378800 0.408700 0.830300\nvn 0.560400 0.394700 0.728100\nvn 0.736700 0.325700 0.592500\nvn 0.862000 0.244800 0.443900\nvn 0.984500 0.065400 0.162400\nvn 0.978900 0.068700 0.192100\nvn 0.984900 0.018300 0.172200\nvn 0.972800 0.095300 0.210900\nvn 0.932000 -0.301400 0.201400\nvn 0.922600 -0.311000 0.228200\nvn 0.940100 -0.250700 0.230800\nvn 0.223600 0.036600 0.974000\nvn 0.851500 -0.331600 0.406100\nvn 0.897500 -0.310600 0.313000\nvn 0.793600 -0.197500 0.575400\nvn 0.483800 -0.138700 0.864100\nvn 0.819900 -0.237400 0.520900\nvn 0.783100 -0.274400 0.558000\nvn 0.623300 -0.298000 0.722900\nvn 0.590400 -0.196500 0.782800\nvn 0.694900 -0.303300 0.652000\nvn 0.659800 -0.326000 0.677100\nvn 0.620700 -0.602100 0.502100\nvn 0.605200 0.234600 0.760700\nvn 0.355900 0.213900 0.909700\nvn 0.334500 0.169600 0.927000\nvn 0.729500 -0.111500 0.674800\nvn 0.646400 -0.051400 0.761300\nvn 0.715500 -0.533200 0.451300\nvn 0.762100 -0.480900 0.433500\nvn 0.803000 -0.429600 0.413100\nvn 0.834800 -0.341100 0.432100\nvn 0.848000 -0.278800 0.450600\nvn 0.923800 -0.279500 0.261500\nvn 0.986400 0.056200 0.154600\nvn 0.919400 -0.336600 0.203200\nvn 0.922900 -0.296600 0.245300\nvn 0.469600 0.325700 0.820600\nvn 0.467500 0.375500 0.800300\nvn 0.448900 0.326500 0.831800\nvn 0.784500 -0.276300 0.555100\nvn 0.764800 0.231700 0.601100\nvn 0.744100 0.333500 0.578800\nvn 0.664400 0.423400 0.615800\nvn 0.527400 0.263900 0.807600\nvn 0.886700 0.132500 0.443000\nvn 0.173900 -0.628900 -0.757700\nvn 0.237700 -0.617700 -0.749600\nvn 0.266600 -0.565000 -0.780800\nvn 0.301000 -0.637400 -0.709300\nvn 0.411900 -0.660800 -0.627400\nvn 0.418400 -0.637400 -0.647000\nvn 0.586000 -0.613300 -0.529500\nvn 0.570600 -0.574700 -0.586700\nvn 0.703300 -0.546400 -0.454700\nvn 0.700400 -0.508300 -0.500900\nvn 0.791200 -0.480100 -0.378800\nvn 0.795800 -0.444700 -0.410900\nvn 0.870800 -0.409600 -0.271700\nvn 0.872200 -0.401600 -0.279400\nvn 0.893600 -0.376300 -0.244500\nvn 0.341100 -0.550100 -0.762300\nvn 0.888700 -0.408000 -0.208900\nvn 0.758700 -0.166400 0.629800\nvn 0.722600 -0.248100 0.645100\nvn 0.639200 -0.208900 0.740100\nvn 0.676900 -0.096000 0.729800\nvn 0.509300 0.009000 0.860500\nvn 0.802800 -0.255600 0.538700\nvn 0.884200 -0.315500 0.344500\nvn 0.692500 -0.254100 0.675200\nvn 0.782500 -0.312200 0.538700\nvn 0.474500 0.021700 0.879900\nvn 0.584700 -0.038200 0.810400\nvn 0.451000 0.078500 0.889000\nvn 0.847500 -0.309500 0.431200\nvn 0.338700 0.133000 0.931400\nvn 0.347300 0.158200 0.924300\nvn 0.390300 0.048500 0.919400\nvn 0.264700 0.175400 0.948200\nvn 0.313900 0.178800 0.932400\nvn 0.350400 -0.109300 0.930200\nvn 0.335500 0.060600 0.940100\nvn 0.318400 -0.450700 0.833900\nvn 0.343100 -0.297900 0.890800\nvn 0.271100 -0.375500 0.886300\nvn 0.306700 -0.465100 0.830400\nvn 0.266200 -0.248900 0.931200\nvn -0.230400 0.835300 0.499100\nvn -0.262900 0.903200 0.339300\nvn -0.286200 0.946000 0.151800\nvn -0.295500 0.953900 -0.051300\nvn -0.295700 0.917600 -0.265400\nvn -0.303900 0.811700 -0.498600\nvn -0.321700 0.382500 -0.866100\nvn -0.303600 0.662700 -0.684500\nvn -0.024200 0.990900 0.132100\nvn 0.016800 0.371000 0.928500\nvn 0.800800 0.494600 0.337700\nvn -0.141400 0.690400 -0.709500\nvn 0.097300 0.843600 0.528100\nvn 0.239100 0.262700 0.934800\nvn 0.491600 0.711800 -0.501600\nvn 0.923500 0.381000 -0.045000\nvn 0.762500 -0.190500 0.618300\nvn 0.527800 -0.103700 0.843000\nvn 0.602000 -0.140900 0.785900\nvn 0.700600 -0.169400 0.693100\nvn 0.568600 0.211100 0.795000\nvn 0.606200 0.076900 0.791500\nvn 0.606300 0.153700 0.780200\nvn 0.113400 0.563800 0.818000\nvn 0.448700 -0.118000 0.885800\nvn 0.487600 0.373500 0.789100\nvn 0.653000 0.008500 0.757300\nvn 0.232500 -0.657500 0.716700\nvn 0.206300 -0.877900 0.432100\nvn 0.511300 0.326900 0.794800\nvn 0.575700 0.261300 0.774800\nvn 0.461500 0.078800 0.883600\nvn -0.051700 -0.991000 -0.123500\nvn -0.144100 -0.947700 -0.284700\nvn 0.541900 0.352800 0.762700\nvn 0.585000 0.293900 0.755900\nvn -0.357900 -0.626900 -0.692000\nvn -0.506000 -0.332500 -0.795800\nvn -0.447500 -0.286600 -0.847100\nvn -0.390500 0.170000 -0.904800\nvn -0.407000 0.056500 -0.911600\nvn -0.366900 -0.430800 -0.824500\nvn -0.333300 -0.798800 -0.500800\nvn -0.462900 -0.814400 -0.350000\nvn -0.373100 -0.927000 -0.036700\nvn -0.256000 -0.908800 0.329400\nvn -0.266100 -0.728200 0.631600\nvn 0.801800 -0.023700 0.597200\nvn 0.993200 -0.015700 -0.115500\nvn 0.998900 -0.044300 0.016200\nvn 0.998900 -0.030400 -0.034300\nvn 0.819200 -0.445200 -0.361400\nvn 0.975700 0.023900 0.217600\nvn 0.977300 0.035300 0.208700\nvn 0.988000 0.091500 0.124100\nvn 0.978800 0.166100 0.120000\nvn 0.992100 0.102400 0.072100\nvn 0.986400 0.050300 0.156400\nvn 0.979700 0.017600 0.199700\nvn 0.977600 0.012500 0.209800\nvn 0.981800 0.063300 0.179000\nvn 0.986400 0.014700 0.163700\nvn 0.994500 0.003200 0.104900\nvn 0.974300 0.003800 0.225000\nvn 0.973200 0.024100 0.228600\nvn 0.978000 0.021200 0.207500\nvn 0.773000 -0.473600 -0.422000\nvn 0.901900 -0.391800 -0.181800\nvn 0.840200 -0.388500 -0.378200\nvn 0.698000 -0.596500 -0.396100\nvn 0.756200 -0.554200 -0.347700\nvn 0.676100 -0.705600 -0.212200\nvn 0.661900 -0.748700 -0.033900\nvn 0.998800 -0.036200 0.033400\nvn 0.997300 0.065600 0.033400\nvn 0.994500 0.104300 0.004400\nvn 0.993400 0.066900 0.093300\nvn 0.974200 -0.066000 0.215800\nvn 0.724100 0.649500 -0.232000\nvn 0.471700 -0.268800 -0.839800\nvn 0.914200 -0.119100 0.387200\nvn -0.371700 0.409700 -0.833100\nvn -0.364200 0.568600 -0.737500\nvn -0.062800 0.703700 -0.707700\nvn 0.516600 -0.701700 0.490500\nvn 0.232900 -0.694800 -0.680500\nvn 0.050800 -0.724400 -0.687500\nvn 0.966300 -0.042000 0.253900\nvn 0.970700 0.001600 0.240100\nvn 0.964200 -0.069200 0.256100\nvn -0.148300 -0.599600 -0.786400\nvn -0.254400 -0.629600 -0.734000\nvn -0.223400 -0.584200 -0.780200\nvn 0.975100 0.147400 0.165700\nvn 0.973800 0.015200 0.226900\nvn 0.963400 -0.072500 0.257900\nvn 0.338000 0.877300 0.340600\nvn 0.730600 0.608400 0.309600\nvn 0.480200 0.580800 0.657300\nvn -0.092300 -0.973200 -0.210600\nvn 0.375000 -0.903200 -0.208900\nvn 0.747700 -0.503100 0.433400\nvn 0.887300 0.170800 0.428400\nvn 0.734200 0.140100 0.664300\nvn 0.465000 -0.437200 -0.769800\nvn -0.316000 -0.636100 -0.703900\nvn -0.031700 -0.704400 -0.709000\nvn 0.973100 -0.069400 0.219500\nvn 0.911100 -0.091500 0.401800\nvn -0.463000 0.260800 -0.847100\nvn -0.168000 0.504700 -0.846700\nvn 0.672100 0.592200 -0.444500\nvn 0.436800 -0.583200 0.684800\nvn 0.783800 -0.157400 0.600700\nvn 0.818400 -0.070900 0.570200\nvn -0.394500 -0.345700 -0.851400\nvn -0.540600 -0.273000 -0.795700\nvn -0.414300 -0.504800 -0.757300\nvn 0.751900 -0.086100 0.653600\nvn 0.822200 0.012100 0.569000\nvn 0.854000 0.225200 0.468900\nvn 0.969500 0.014000 0.244800\nvn 0.947800 -0.029700 0.317200\nvn 0.587200 -0.605600 -0.537000\nvn 0.620400 -0.635600 -0.459400\nvn 0.820100 -0.008500 0.572200\nvn 0.937900 0.001000 0.346800\nvn 0.935900 -0.024600 0.351400\nvn -0.221600 0.310200 -0.924500\nvn 0.998300 0.028500 -0.049800\nvn 0.856600 -0.515900 0.011300\nvn 0.939500 -0.061300 0.337100\nvn 0.939600 -0.093100 0.329200\nvn 0.829300 -0.209500 0.518000\nvn 0.963200 0.267800 -0.024000\nvn 0.989400 0.142100 -0.028400\nvn 0.856200 -0.151100 -0.494000\nvn 0.579800 -0.165400 -0.797800\nvn -0.489600 -0.076500 -0.868500\nvn 0.359900 -0.447700 -0.818500\nvn 0.602700 -0.640100 -0.476400\nvn 0.878400 -0.037900 0.476400\nvn 0.013300 0.888200 -0.459200\nvn 0.165900 0.971900 0.166800\nvn 0.882400 -0.470200 -0.011400\nvn 0.720700 -0.681100 -0.129000\nvn 0.978500 -0.187700 -0.085600\nvn 0.977300 -0.045300 0.206800\nvn 0.576900 -0.747500 0.329300\nvn 0.946600 0.151900 0.284300\nvn 0.999900 0.009600 0.004300\nvn 0.916600 -0.142000 0.373600\nvn 0.943700 -0.203000 0.261100\nvn 0.888100 -0.297200 0.350600\nvn 0.722600 -0.166500 0.670900\nvn 0.841200 0.185900 0.507800\nvn 0.875700 0.142800 0.461200\nvn 0.967900 0.088600 0.235000\nvn 0.970700 -0.029400 0.238400\nvn 0.979900 0.131700 0.149800\nvn 0.960600 -0.042600 0.274500\nvn 0.981200 -0.117600 -0.153000\nvn 0.491400 -0.430900 0.756900\nvn 0.940300 0.008400 0.340100\nvn 0.752000 -0.201300 0.627700\nvn 0.501000 -0.602600 0.621200\nvn 0.897800 -0.024100 0.439600\nvn 0.993600 -0.072900 0.085700\nvn 0.962800 -0.269100 0.023300\nvn 0.928100 -0.320700 -0.189300\nvn 0.881600 -0.451500 0.137500\nvn 0.892700 0.159400 0.421500\nvn 0.988500 -0.063400 0.137300\nvn 0.937600 -0.182700 0.295800\nvn 0.833200 -0.235200 0.500400\nvn 0.969000 0.161400 0.187100\nvn 0.968100 0.250300 0.004900\nvn 0.941700 0.235800 -0.239800\nvn 0.756600 0.011500 0.653800\nvn 0.565900 0.523200 0.637200\nvn 0.729000 -0.530800 -0.432200\nvn 0.551100 -0.440300 -0.708800\nvn 0.528000 -0.794100 -0.301100\nvn 0.970300 -0.118600 0.210800\nvn 0.904100 -0.326500 -0.275500\nvn 0.898600 -0.432800 0.072000\nvn 0.947200 0.170400 -0.271600\nvn 0.835100 0.318400 -0.448500\nvn 0.869000 0.164000 0.466900\nvn 0.905200 -0.354500 0.234400\nvn 0.979200 0.007800 0.202700\nvn 0.964200 -0.253100 0.079000\nvn 0.930500 -0.287900 -0.226300\nvn 0.902400 -0.012900 0.430600\nvn 0.853200 -0.180700 0.489200\nvn 0.824000 -0.164700 0.542100\nvn 0.896500 0.069400 0.437500\nvn 0.060900 0.259900 -0.963700\nvn 0.785900 0.149400 -0.600000\nvn 0.365800 0.034500 -0.930000\nvn 0.577500 0.111300 -0.808700\nvn 0.928800 0.006900 0.370400\nvn 0.939200 0.197900 0.280400\nvn 0.994900 0.097000 -0.025500\nvn 0.985600 -0.009100 -0.169000\nvn 0.923100 -0.085800 -0.374800\nvn 0.901200 -0.366500 -0.231200\nvn 0.973800 -0.000700 0.227400\nvn 0.895800 -0.385600 0.220700\nvn 0.972000 0.178500 0.152400\nvn 0.818300 -0.275200 -0.504600\nvn 0.917400 -0.387500 0.090600\nvn 0.650900 0.295100 0.699400\nvn 0.299300 0.950300 -0.085700\nvn 0.552000 0.761800 0.338900\nvn 0.887800 0.279900 0.365400\nvn 0.976200 0.157700 0.149100\nvn 0.802600 -0.591200 -0.078700\nvn 0.783300 -0.607000 -0.133800\nvn 0.806800 -0.536100 -0.248100\nvn 0.423400 -0.774300 0.470400\nvn 0.658300 -0.433200 0.615500\nvn 0.705300 -0.364500 0.608000\nvn 0.988600 -0.127700 0.079300\nvn 0.968800 0.246300 0.027400\nvn 0.513600 -0.011000 0.857900\nvn 0.161200 0.447300 0.879700\nvn 0.172500 0.240400 0.955200\nvn 0.440600 -0.573300 0.690800\nvn 0.583500 -0.479000 0.655800\nvn 0.296600 -0.789100 0.537900\nvn 0.189900 -0.314200 0.930100\nvn 0.415800 -0.050100 0.908000\nvn 0.179900 0.023300 0.983400\nvn 0.414000 0.763700 0.495300\nvn 0.741300 0.172100 0.648700\nvn 0.882600 -0.463700 -0.077300\nvn 0.729500 -0.665400 -0.158200\nvn 0.721400 -0.434500 -0.539200\nvn 0.067700 -0.629200 0.774300\nvn 0.121400 -0.262900 0.957200\nvn 0.858000 -0.201200 0.472500\nvn 0.980300 -0.193700 -0.039400\nvn 0.787700 -0.614800 -0.039900\nvn 0.502200 0.025900 0.864300\nvn 0.200500 0.144900 0.968900\nvn 0.193500 -0.509300 0.838500\nvn 0.352400 -0.190900 0.916200\nvn 0.772700 -0.000100 0.634800\nvn 0.745600 -0.007900 0.666300\nvn 0.867800 -0.496200 0.025300\nvn 0.806300 -0.586400 -0.076900\nvn 0.891700 -0.396500 -0.218400\nvn 0.917600 -0.383800 -0.102900\nvn 0.842500 -0.530000 0.096100\nvn -0.022600 0.948500 0.315800\nvn -0.201700 0.886700 0.416100\nvn 0.751800 -0.201300 0.627900\nvn 0.807900 -0.084000 0.583300\nvn 0.902900 -0.118100 -0.413200\nvn 0.461100 -0.072600 -0.884300\nvn 0.926500 -0.200100 -0.318700\nvn 0.909200 -0.306700 -0.281500\nvn -0.152300 0.836800 0.525800\nvn -0.070300 0.719300 0.691100\nvn 0.806400 -0.505000 -0.307600\nvn 0.875700 -0.184200 -0.446300\nvn 0.735700 0.608500 0.297300\nvn 0.692900 0.716800 0.077900\nvn 0.227700 0.701800 0.675000\nvn -0.072100 0.934600 0.348200\nvn 0.708600 0.007100 0.705600\nvn 0.084000 0.484200 0.870900\nvn 0.989500 0.116500 -0.085300\nvn 0.443600 -0.813800 -0.375300\nvn 0.761000 -0.225600 0.608100\nvn 0.844600 -0.284000 0.453800\nvn 0.808400 -0.322100 0.492500\nvn 0.988100 -0.002700 -0.153800\nvn 0.263800 -0.674700 -0.689300\nvn 0.967500 0.123400 0.220600\nvn 0.802700 -0.413800 -0.429400\nvn 0.959200 -0.058000 0.276600\nvn -0.293700 -0.477300 -0.828200\nvn 0.603700 -0.508400 -0.614000\nvn 0.890500 -0.004400 0.455000\nvn 0.811600 0.112800 -0.573200\nvn 0.966700 -0.023000 0.254800\nvn 0.861600 -0.327200 0.387900\nvn 0.458500 0.474300 0.751500\nvn 0.904400 -0.112100 -0.411600\nvn 0.968100 0.063800 -0.242200\nvn 0.964400 0.262900 -0.029800\nvn 0.940200 0.320500 0.115200\nvn 0.909200 0.220500 0.353000\nvn 0.907800 0.129300 0.398900\nvn 0.218200 0.830700 0.512200\nvn 0.930100 -0.349200 -0.113400\nvn 0.902900 -0.429400 -0.021800\nvn 0.855700 -0.500600 0.130700\nvn 0.268400 0.879700 0.392500\nvn 0.872500 0.185700 0.451800\nvn 0.452800 0.870300 -0.193800\nvn 0.743300 -0.271500 -0.611300\nvn 0.931400 0.041300 0.361700\nvn 0.890300 -0.019800 0.454900\nvn 0.749900 0.062500 0.658600\nvn 0.882400 -0.071200 -0.465000\nvn 0.853600 -0.482000 0.197500\nvn 0.914200 -0.396400 -0.084400\nvn 0.863100 -0.503900 0.032900\nvn 0.791800 -0.242700 0.560400\nvn 0.851900 0.358800 0.381400\nvn 0.995100 -0.010300 0.098400\nvn 0.775700 -0.502400 -0.381900\nvn 0.733900 -0.676700 -0.058600\nvn 0.462300 -0.779600 0.422500\nvn 0.727400 -0.276300 0.628100\nvn 0.533000 0.139200 -0.834600\nvn 0.989600 0.138000 0.040400\nvn 0.757200 -0.582800 0.294800\nvn 0.626300 -0.779500 -0.008000\nvn 0.539200 -0.323900 0.777400\nvn 0.653900 -0.756500 -0.003100\nvn 0.507100 0.096900 0.856400\nvn 0.766400 -0.490000 -0.415300\nvn 0.775900 -0.359000 -0.518700\nvn 0.716800 -0.544000 -0.436200\nvn 0.831900 -0.372400 -0.411400\nvn 0.836500 -0.505600 -0.211300\nvn 0.688600 -0.723400 0.050500\nvn 0.683500 -0.728200 0.051300\nvn 0.818100 -0.567700 0.090900\nvn 0.961200 -0.177100 0.211300\nvn 0.925100 -0.364500 0.106300\nvn 0.872200 -0.256700 0.416300\nvn 0.673100 -0.270100 0.688400\nvn 0.753500 -0.244500 0.610200\nvn 0.712500 0.051000 0.699900\nvn 0.725400 -0.152000 0.671300\nvn 0.479400 -0.175800 0.859800\nvn 0.607200 0.029500 0.794000\nvn 0.251600 -0.536400 0.805600\nvn 0.137200 -0.770200 0.622900\nvn 0.186200 -0.952600 0.240400\nvn 0.239000 -0.953200 0.185300\nvn 0.352600 -0.920800 0.166600\nvn 0.591900 -0.698800 0.401600\nvn 0.410700 -0.886300 0.214000\nvn 0.465900 -0.847300 0.255000\nvn 0.633000 -0.665100 0.396100\nvn 0.573100 -0.813000 -0.102800\nvn 0.809900 0.133600 0.571200\nvn 0.560400 -0.819100 -0.122400\nvn 0.722100 -0.019600 0.691500\nvn 0.831900 -0.102100 0.545400\nvn 0.854600 0.085300 0.512200\nvn 0.997600 -0.049200 -0.048500\nvn 0.980800 -0.193200 -0.027600\nvn 0.877400 -0.371200 -0.303800\nvn 0.647200 -0.761600 0.031700\nvn 0.974200 -0.091400 0.206100\nvn 0.924900 -0.365800 -0.103100\nvn 0.913000 -0.181100 -0.365500\nvn 0.756800 -0.650100 -0.067000\nvn 0.765000 -0.642000 0.049700\nvn 0.828300 -0.528500 0.185700\nvn 0.915000 -0.370000 0.160700\nvn 0.976200 -0.027800 0.215200\nvn 0.867800 -0.243000 0.433400\nvn 0.893600 0.088300 0.440100\nvn 0.887800 -0.268000 -0.374000\nvn 0.790900 0.069200 0.608000\nvn 0.767700 -0.545100 0.336700\nvn 0.648900 -0.750300 0.126600\nvn 0.908100 0.060900 0.414200\nvn 0.255400 -0.822000 0.509000\nvn 0.706400 -0.353700 0.613100\nvn 0.839100 -0.403500 0.364800\nvn 0.790600 -0.373200 0.485400\nvn 0.205200 0.252800 -0.945500\nvn 0.590400 0.181100 -0.786500\nvn 0.847000 0.069200 0.527000\nvn 0.827700 0.016400 0.560800\nvn 0.844700 -0.145300 0.515000\nvn 0.923100 -0.384100 -0.019800\nvn -0.027200 0.870500 0.491300\nvn 0.935900 0.289400 -0.200900\nvn 0.419900 0.716700 0.556700\nvn 0.869800 -0.024000 0.492800\nvn 0.501800 -0.296500 0.812500\nvn 0.942900 0.099600 0.317600\nvn -0.417600 0.825400 -0.379700\nvn -0.449300 -0.077900 -0.890000\nvn -0.457400 0.129100 -0.879800\nvn 0.889400 -0.098800 0.446300\nvn 0.650200 0.377000 -0.659600\nvn 0.246300 -0.930800 0.270100\nvn -0.235000 -0.563000 -0.792300\nvn 0.413500 -0.637600 -0.649900\nvn 0.925200 0.002400 0.379400\nvn 0.977000 0.203700 0.062700\nvn 0.064400 -0.943900 -0.323800\nvn 0.969800 -0.044600 0.239500\nvn 0.733400 -0.239500 0.636200\nvn 0.968800 0.020700 0.247000\nvn 0.418000 -0.499100 -0.759000\nvn -0.217800 0.975500 -0.031100\nvn 0.528300 -0.033500 -0.848400\nvn 0.865400 -0.265000 0.425300\nvn 0.085000 -0.975100 0.205000\nvn 0.962500 0.085600 0.257400\nvn 0.909800 -0.405500 0.087500\nvn 0.963000 -0.101700 -0.249500\nvn 0.935200 0.148100 -0.321500\nvn -0.334800 0.090400 -0.938000\nvn 0.599800 0.127300 -0.789900\nvn 0.185300 0.765400 0.616300\nvn 0.941900 0.333700 -0.038200\nvn 0.770200 0.598100 -0.221100\nvn 0.956400 0.284300 -0.066100\nvn 0.191800 0.458400 0.867800\nvn 0.019000 0.864600 0.502000\nvn 0.000000 0.258300 0.966000\nvn -0.140800 0.979200 0.146300\nvn 0.026300 0.259700 0.965300\ns 1\nf 1508/1/1 1/2/2 2/3/3\nf 5/4/4 3/5/5 4/6/6\nf 1508/7/1 3/5/5 8/8/7\nf 3/5/5 5/4/4 9/9/8\nf 11/10/9 8/8/7 9/9/8\nf 1509/11/10 8/8/7 11/10/9\nf 14/12/11 11/10/9 12/13/12\nf 1511/14/13 1510/15/14 11/10/9\nf 17/16/15 14/12/11 15/17/16\nf 1512/18/17 1511/14/13 14/12/11\nf 20/19/18 17/16/15 18/20/19\nf 1513/21/20 1512/22/17 17/23/15\nf 23/24/21 20/25/18 21/26/22\nf 1514/27/23 1513/21/20 20/25/18\nf 26/28/24 23/29/21 24/30/25\nf 1515/31/26 1514/32/23 23/29/21\nf 26/28/24 27/33/27 30/34/28\nf 1515/31/26 26/28/24 29/35/29\nf 29/35/29 30/34/28 1586/36/30\nf 1516/37/31 29/35/29 1587/38/32\nf 35/39/33 36/40/34 39/41/35\nf 1518/42/36 35/39/33 38/43/37\nf 1522/44/38 1521/45/39 44/46/40\nf 44/47/40 43/48/41 46/49/42\nf 1523/50/43 1522/51/38 47/52/44\nf 50/53/45 47/52/44 46/49/42\nf 1638/54/46 1523/50/43 50/53/45\nf 1589/55/47 50/53/45 49/56/48\nf 1525/57/49 1507/58/50 2/3/3\nf 6/59/51 4/6/6 56/60/52\nf 60/61/53 57/62/54 56/60/52\nf 1526/63/55 1525/57/49 55/64/56\nf 63/65/57 60/61/53 59/66/58\nf 1527/67/59 1526/63/55 58/68/60\nf 102/69/61 63/65/57 62/70/62\nf 1532/71/63 1527/67/59 61/72/64\nf 69/73/65 66/74/66 65/75/67\nf 1529/76/68 1528/77/69 64/78/70\nf 69/73/65 68/79/71 71/80/72\nf 1530/81/73 1529/82/68 67/83/74\nf 75/84/75 72/85/76 71/80/72\nf 1531/86/77 1530/81/73 70/87/78\nf 1545/88/79 39/41/35 36/40/34\nf 1591/89/80 49/56/48 1549/90/81\nf 49/56/48 46/49/42 1547/91/82\nf 1547/91/82 1546/92/83 79/93/84\nf 1639/94/85 1586/36/30 30/34/28\nf 30/34/28 27/33/27 1541/95/86\nf 27/33/27 24/30/25 1540/96/87\nf 24/30/25 21/97/22 1539/98/88\nf 21/97/22 18/20/19 1538/99/89\nf 18/20/19 15/17/16 1537/100/90\nf 12/13/12 9/9/8 1536/101/91\nf 1556/102/92 5/4/4 6/59/51\nf 1557/103/93 6/59/51 57/62/54\nf 9/9/8 5/4/4 1556/102/92\nf 60/61/53 63/65/57 1535/104/94\nf 57/62/54 60/61/53 1534/105/95\nf 1537/100/90 1558/106/96 93/107/97\nf 1553/108/98 66/74/66 69/73/65\nf 69/73/65 72/85/76 1552/109/99\nf 72/85/76 75/84/75 1533/110/100\nf 1553/108/98 97/111/101 104/112/102\nf 102/69/61 101/113/103 65/75/67\nf 1532/114/63 103/115/104 64/78/70\nf 1551/116/105 104/112/102 96/117/106\nf 109/118/107 104/112/102 97/111/101\nf 105/119/108 97/111/101 98/120/109\nf 98/120/109 99/121/110 107/122/111\nf 99/121/110 100/123/112 108/124/113\nf 119/125/114 114/126/115 110/127/116\nf 116/128/117 111/129/118 112/130/119\nf 117/131/120 112/130/119 113/132/121\nf 115/133/122 110/127/116 111/129/118\nf 125/134/123 119/125/114 115/133/122\nf 121/135/124 115/133/122 116/128/117\nf 122/136/125 116/128/117 117/131/120\nf 123/137/126 117/131/120 118/138/127\nf 131/139/128 125/134/123 121/135/124\nf 120/140/129 126/141/130 130/142/131\nf 127/143/132 121/135/124 122/136/125\nf 128/144/133 122/136/125 123/137/126\nf 123/137/126 124/145/134 130/142/131\nf 137/146/135 131/139/128 127/143/132\nf 132/147/136 136/148/137 130/142/131\nf 133/149/138 127/143/132 128/144/133\nf 128/144/133 129/150/139 135/151/140\nf 129/150/139 130/142/131 136/148/137\nf 141/152/141 142/153/142 80/154/143\nf 81/155/144 80/154/143 142/153/142\nf 1592/156/145 81/155/144 143/157/146\nf 139/158/147 77/159/148 76/160/149\nf 86/161/150 85/162/151 147/163/152\nf 88/164/153 87/165/154 149/166/155\nf 85/162/151 84/167/156 146/168/157\nf 87/165/154 86/161/150 148/169/158\nf 84/167/156 83/170/159 145/171/160\nf 93/172/97 92/173/161 154/174/162\nf 156/175/163 94/176/164 95/177/165\nf 154/174/162 92/173/161 90/178/166\nf 153/179/167 91/180/168 94/176/164\nf 157/181/169 95/177/165 96/182/106\nf 152/183/170 90/178/166 91/180/168\nf 158/184/171 96/117/106 104/112/102\nf 83/170/159 93/107/97 155/185/172\nf 114/186/115 119/187/114 167/188/173\nf 119/125/114 125/134/123 168/189/174\nf 125/134/123 131/139/128 169/190/175\nf 131/139/128 137/146/135 170/191/176\nf 181/192/177 175/193/178 176/194/179\nf 178/195/180 172/196/181 175/193/178\nf 179/197/182 173/198/183 171/199/184\nf 180/200/185 174/201/186 173/198/183\nf 177/202/187 171/203/184 172/196/181\nf 166/204/188 167/188/173 182/205/189\nf 187/206/190 186/207/191 194/208/192\nf 186/207/191 159/209/193 189/210/194\nf 196/211/195 188/212/196 187/206/190\nf 159/209/193 160/213/197 190/214/198\nf 160/213/197 161/215/199 191/216/200\nf 180/200/185 191/216/200 161/215/199\nf 208/217/201 180/200/185 179/197/182\nf 180/200/185 208/217/201 213/218/202\nf 206/219/203 178/220/180 181/221/177\nf 209/222/204 181/192/177 182/205/189\nf 195/223/205 194/208/192 216/224/206\nf 194/208/192 189/210/194 211/225/207\nf 196/211/195 195/223/205 217/226/208\nf 189/210/194 190/214/198 212/227/209\nf 205/228/210 177/229/187 178/220/180\nf 1599/230/211 1597/231/212 196/211/195\nf 190/214/198 191/216/200 213/218/202\nf 207/232/213 179/197/182 177/229/187\nf 167/233/173 168/189/174 210/234/214\nf 168/189/174 169/190/175 222/235/215\nf 169/190/175 170/191/176 221/236/216\nf 226/237/217 208/217/201 207/232/213\nf 207/232/213 205/228/210 223/238/218\nf 223/238/218 205/228/210 206/219/203\nf 222/235/215 221/236/216 228/239/219\nf 234/240/220 209/241/204 229/242/221\nf 223/238/218 224/243/222 231/244/223\nf 210/234/214 222/235/215 229/242/221\nf 226/237/217 225/245/224 232/246/225\nf 229/242/221 228/239/219 235/247/226\nf 225/245/224 223/238/218 230/248/227\nf 237/249/228 234/240/220 236/250/229\nf 239/251/230 236/250/229 235/247/226\nf 243/252/231 242/253/232 1739/254/233\nf 242/253/232 240/255/234 1741/256/235\nf 240/255/234 241/257/236 1742/258/237\nf 259/259/238 218/260/239 217/226/208\nf 216/224/206 211/225/207 254/261/240\nf 217/226/208 216/224/206 257/262/241\nf 212/227/209 213/218/202 256/263/242\nf 1601/264/243 1599/230/211 218/260/239\nf 211/225/207 212/227/209 255/265/244\nf 255/265/244 256/263/242 263/266/245\nf 254/261/240 255/265/244 262/267/246\nf 257/262/241 254/261/240 261/268/247\nf 256/263/242 213/218/202 208/217/201\nf 233/269/248 263/266/245 256/263/242\nf 266/270/249 267/271/250 1744/272/251\nf 250/273/252 273/274/253 1744/272/251\nf 243/252/231 267/271/250 1710/275/254\nf 1743/276/255 272/277/256 872/278/257\nf 972/279/258 971/280/259 879/281/260\nf 1644/282/261 900/283/262 294/284/263\nf 281/285/264 279/286/265 280/287/266\nf 1604/288/267 281/285/264 282/289/268\nf 199/290/269 203/291/270 282/289/268\nf 1603/292/271 282/289/268 203/291/270\nf 1580/293/272 900/283/262 291/294/273\nf 202/295/274 201/296/275 291/294/273\nf 201/296/275 200/297/276 290/298/277\nf 293/299/278 294/284/263 900/283/262\nf 292/300/279 291/294/273 900/283/262\nf 204/301/280 1579/302/281 284/303/282\nf 200/297/276 199/290/269 280/287/266\nf 299/304/283 300/305/284 276/306/285\nf 337/307/286 338/308/287 319/309/288\nf 306/310/289 307/311/290 302/312/291\nf 299/304/283 304/313/292 305/314/293\nf 303/315/294 302/316/291 307/317/290\nf 311/318/295 312/319/296 307/317/290\nf 304/313/292 309/320/297 310/321/298\nf 308/322/299 307/317/290 312/319/296\nf 316/323/300 317/324/301 312/319/296\nf 309/325/297 314/326/302 315/327/303\nf 313/328/304 312/319/296 317/324/301\nf 334/329/305 361/330/306 360/331/307\nf 334/329/305 335/332/308 321/333/309\nf 328/334/310 275/335/311 365/336/312\nf 325/337/313 322/338/314 323/339/315\nf 326/340/316 325/337/313 324/341/317\nf 275/335/311 328/334/310 329/342/318\nf 304/313/292 299/304/283 329/342/318\nf 309/320/297 304/313/292 330/343/319\nf 314/326/302 309/325/297 331/344/320\nf 314/326/302 332/345/321 333/346/322\nf 286/347/323 333/346/322 335/332/308\nf 321/348/309 326/340/316 327/349/324\nf 327/349/324 324/341/317 320/350/325\nf 324/341/317 323/339/315 288/351/326\nf 1564/352/327 1562/353/328 297/354/329\nf 368/355/330 288/351/326 323/339/315\nf 279/286/265 281/285/264 339/356/331\nf 1604/288/267 283/357/332 340/358/333\nf 283/357/332 285/359/334 341/360/335\nf 287/361/336 327/349/324 319/362/288\nf 1657/363/337 1658/364/338 1578/365/339\nf 342/366/340 343/367/341 317/368/301\nf 318/369/342 317/324/301 343/370/341\nf 345/371/343 348/372/344 326/340/316\nf 345/373/343 321/333/309 335/332/308\nf 352/374/345 353/375/346 332/345/321\nf 328/334/310 349/376/347 350/377/348\nf 325/337/313 326/340/316 348/372/344\nf 329/342/318 350/377/348 351/378/349\nf 366/379/350 367/380/351 349/376/347\nf 332/345/321 353/375/346 354/381/352\nf 322/338/314 325/337/313 347/382/353\nf 355/383/354 335/332/308 333/346/322\nf 351/384/349 352/385/345 331/386/320\nf 344/387/355 343/367/341 1581/388/356\nf 379/389/357 369/390/358 364/391/359\nf 372/392/360 371/393/361 407/394/362\nf 360/331/307 315/327/303 314/326/302\nf 361/330/306 334/329/305 287/395/336\nf 322/338/314 366/379/350 365/336/312\nf 275/335/311 276/306/285 368/355/330\nf 322/338/314 346/396/363 367/380/351\nf 374/397/364 372/392/360 406/398/365\nf 363/399/366 358/400/367 455/401/368\nf 1582/402/369 1581/388/356 1853/403/370\nf 353/375/346 390/404/371 391/405/372\nf 347/382/353 348/372/344 385/406/373\nf 392/407/374 355/383/354 354/381/352\nf 345/371/343 382/408/375 385/406/373\nf 349/376/347 386/409/376 387/410/377\nf 387/411/377 388/412/378 351/384/349\nf 382/413/375 345/373/343 355/383/354\nf 393/414/379 367/380/351 346/396/363\nf 388/412/378 389/415/380 352/385/345\nf 367/380/351 393/414/379 386/409/376\nf 389/416/380 390/404/371 353/375/346\nf 346/396/363 347/382/353 384/417/381\nf 393/414/379 383/418/382 394/419/383\nf 383/418/382 384/417/381 395/420/384\nf 396/421/385 394/419/383 397/422/386\nf 394/419/383 395/420/384 398/423/387\nf 396/421/385 387/410/377 386/409/376\nf 384/417/381 385/406/373 382/408/375\nf 392/424/374 398/423/387 395/420/384\nf 398/425/387 392/407/374 391/405/372\nf 397/422/386 398/423/387 390/426/371\nf 399/427/388 397/422/386 389/428/380\nf 399/429/388 388/412/378 387/411/377\nf 400/430/389 401/431/390 372/392/360\nf 401/431/390 402/432/391 371/393/361\nf 369/390/358 408/433/392 409/434/393\nf 1854/435/394 1853/403/370 1581/388/356\nf 409/434/393 413/436/395 414/437/396\nf 413/436/395 415/438/397 416/439/398\nf 499/440/399 417/441/400 418/442/401\nf 417/441/400 419/443/402 420/444/403\nf 419/445/402 421/446/404 422/447/405\nf 423/448/406 424/449/407 427/450/408\nf 426/451/409 427/452/408 502/453/410\nf 429/454/411 430/455/412 433/456/413\nf 432/457/414 433/458/413 436/459/415\nf 443/460/416 442/461/417 441/462/418\nf 447/463/419 446/464/420 445/465/421\nf 413/436/395 409/434/393 408/433/392\nf 415/438/397 413/436/395 425/466/422\nf 499/440/399 415/467/397 428/468/423\nf 419/443/402 417/441/400 431/469/424\nf 421/446/404 419/445/402 434/470/425\nf 370/471/426 362/472/427 404/473/428\nf 504/474/429 443/460/416 440/475/430\nf 438/476/431 445/465/421 444/477/432\nf 406/398/365 441/462/418 442/461/417\nf 356/478/433 457/479/434 451/480/435\nf 448/481/436 449/482/437 1862/483/438\nf 505/484/439 450/485/440 1863/486/441\nf 1855/487/442 1648/488/443 1583/489/444\nf 1850/490/445 411/491/446 1864/492/447\nf 506/493/448 454/494/449 460/495/450\nf 452/496/451 453/497/452 459/498/453\nf 507/499/454 460/495/450 463/500/455\nf 458/501/456 459/498/453 462/502/457\nf 508/503/458 463/500/455 466/504/459\nf 464/505/460 461/506/461 462/502/457\nf 510/507/462 509/508/463 466/504/459\nf 467/509/464 464/505/460 465/510/465\nf 471/511/466 454/494/449 1863/486/441\nf 454/494/449 471/511/466 472/512/467\nf 460/495/450 472/512/467 473/513/468\nf 463/500/455 473/513/468 474/514/469\nf 469/515/470 466/504/459 474/514/469\nf 411/491/446 448/481/436 1861/516/471\nf 458/501/456 457/479/434 410/517/472\nf 457/479/434 458/501/456 461/506/461\nf 461/506/461 464/505/460 455/401/368\nf 456/518/473 455/401/368 464/505/460\nf 478/519/474 440/475/430 441/462/418\nf 476/520/475 438/476/431 439/521/476\nf 503/522/477 440/475/430 478/519/474\nf 406/398/365 407/394/362 479/523/478\nf 485/524/479 479/523/478 407/394/362\nf 479/523/478 485/524/479 484/525/480\nf 478/519/474 484/525/480 512/526/481\nf 483/527/482 477/528/483 511/529/484\nf 477/528/483 483/527/482 482/530/485\nf 512/526/481 484/525/480 490/531/486\nf 484/525/480 485/524/479 491/532/487\nf 1846/533/488 1845/534/489 480/535/490\nf 481/536/491 487/537/492 491/532/487\nf 488/538/493 482/530/485 483/527/482\nf 415/467/397 499/440/399 498/539/494\nf 501/540/495 502/541/410 430/542/412\nf 417/441/400 499/440/399 500/543/496\nf 439/521/476 444/477/432 504/544/429\nf 449/545/437 505/484/439 1871/546/497\nf 453/497/452 506/547/448 507/548/454\nf 459/498/453 507/548/454 508/549/458\nf 462/502/457 508/549/458 509/550/463\nf 468/551/498 465/552/465 509/508/463\nf 477/528/483 439/553/476 503/522/477\nf 519/554/499 520/555/500 476/520/475\nf 489/556/501 483/527/482 512/526/481\nf 482/530/485 488/538/493 518/557/502\nf 471/511/466 516/558/503 515/559/504\nf 515/559/504 523/560/505 473/513/468\nf 1872/561/506 1870/562/507 516/558/503\nf 536/563/508 537/564/509 520/555/500\nf 438/476/431 476/520/475 520/555/500\nf 522/565/510 521/566/511 475/567/512\nf 523/560/505 522/565/510 474/514/469\nf 527/568/513 435/569/514 436/570/415\nf 522/571/510 539/572/515 538/573/516\nf 525/574/517 421/446/404 437/575/518\nf 516/576/503 533/577/519 532/578/520\nf 446/464/420 447/463/419 531/579/521\nf 553/580/522 554/581/523 537/582/509\nf 523/583/505 540/584/524 539/572/515\nf 519/554/499 518/585/502 535/586/525\nf 515/587/504 532/578/520 540/584/524\nf 447/463/419 520/555/500 537/564/509\nf 1869/588/526 533/577/519 516/576/503\nf 421/446/404 525/574/517 526/589/527\nf 539/572/515 556/590/528 555/591/529\nf 549/592/530 557/593/531 540/584/524\nf 557/593/531 556/590/528 539/572/515\nf 536/563/508 535/586/525 552/594/532\nf 1869/588/526 1860/595/533 550/596/534\nf 530/597/535 531/598/521 548/599/536\nf 542/600/537 525/574/517 529/601/538\nf 525/574/517 542/600/537 543/602/539\nf 533/577/519 550/596/534 549/592/530\nf 554/581/523 553/580/522 570/603/540\nf 531/598/521 537/582/509 554/581/523\nf 544/604/541 527/568/513 528/605/542\nf 548/599/536 554/581/523 571/606/543\nf 544/604/541 545/607/544 562/608/545\nf 556/590/528 573/609/546 572/610/547\nf 549/592/530 566/611/548 574/612/549\nf 557/593/531 574/612/549 573/609/546\nf 553/580/522 552/613/532 569/614/550\nf 1859/615/551 567/616/552 550/596/534\nf 564/617/553 547/618/554 548/599/536\nf 559/619/555 542/600/537 546/620/556\nf 542/600/537 559/619/555 560/621/557\nf 567/616/552 566/611/548 549/592/530\nf 587/622/558 588/623/559 571/606/543\nf 588/623/559 587/622/558 604/624/560\nf 565/625/561 571/606/543 588/623/559\nf 561/626/562 562/608/545 579/627/563\nf 573/609/546 590/628/564 589/629/565\nf 566/611/548 583/630/566 591/631/567\nf 574/612/549 591/631/567 590/628/564\nf 587/622/558 570/603/540 569/614/550\nf 1859/615/551 1858/632/568 584/633/569\nf 581/634/570 564/617/553 565/625/561\nf 559/619/555 563/635/571 580/636/572\nf 559/619/555 576/637/573 577/638/574\nf 671/639/575 677/640/576 694/641/577\nf 567/616/552 584/633/569 583/630/566\nf 576/637/573 580/636/572 597/642/578\nf 576/637/573 593/643/579 594/644/580\nf 654/645/581 660/646/582 677/647/576\nf 584/633/569 601/648/583 600/649/584\nf 621/650/585 622/651/586 605/652/587\nf 582/653/588 588/623/559 605/654/587\nf 660/646/582 654/645/581 637/655/589\nf 578/656/590 579/627/563 596/657/591\nf 590/658/564 607/659/592 606/660/593\nf 637/655/589 620/661/594 626/662/595\nf 583/630/566 600/649/584 608/663/596\nf 591/631/567 608/663/596 607/664/592\nf 587/665/558 586/666/597 603/667/598\nf 1858/632/568 1857/668/599 601/648/583\nf 598/669/600 581/634/570 582/653/588\nf 607/659/592 624/670/601 623/671/602\nf 620/661/594 603/667/598 609/672/603\nf 600/649/584 617/673/604 625/674/605\nf 608/675/596 625/676/605 624/670/601\nf 604/677/560 603/667/598 620/661/594\nf 1857/668/599 1868/678/606 618/679/607\nf 598/680/600 599/681/608 616/682/609\nf 610/683/610 593/643/579 597/642/578\nf 593/643/579 610/683/610 611/684/611\nf 592/685/612 609/672/603 603/667/598\nf 601/648/583 618/679/607 617/673/604\nf 622/651/586 621/650/585 638/686/613\nf 599/681/608 605/652/587 622/651/586\nf 569/614/550 575/687/614 592/688/612\nf 595/689/615 596/657/591 613/690/616\nf 616/682/609 622/651/586 639/691/617\nf 569/614/550 552/613/532 558/692/618\nf 612/693/619 613/690/616 630/694/620\nf 624/670/601 641/695/621 640/696/622\nf 535/586/525 541/697/623 558/698/618\nf 617/699/604 634/700/624 642/701/625\nf 625/676/605 642/701/625 641/695/621\nf 621/650/585 620/661/594 637/655/589\nf 1868/678/606 1867/702/626 635/703/627\nf 615/704/628 616/705/609 633/706/629\nf 627/707/630 610/683/610 614/708/631\nf 610/683/610 627/707/630 628/709/632\nf 518/585/502 524/710/633 541/697/623\nf 618/679/607 635/703/627 634/711/624\nf 639/691/617 638/686/613 655/712/634\nf 673/713/635 656/714/636 655/712/634\nf 633/715/629 639/691/617 656/714/636\nf 488/716/493 494/717/637 524/718/633\nf 629/719/638 630/720/620 647/721/639\nf 641/695/621 658/722/640 657/723/641\nf 489/556/501 495/724/642 494/725/637\nf 634/726/624 651/727/643 659/728/644\nf 642/701/625 659/729/644 658/722/640\nf 638/686/613 637/655/589 654/645/581\nf 1867/730/626 1866/731/645 652/732/646\nf 632/733/647 633/734/629 650/735/648\nf 644/736/649 627/737/630 631/738/650\nf 627/737/630 644/736/649 645/739/651\nf 495/724/642 489/556/501 513/740/652\nf 635/741/627 652/732/646 651/727/643\nf 658/722/640 675/742/653 674/743/654\nf 513/740/652 490/531/486 496/744/655\nf 651/727/643 668/745/656 676/746/657\nf 659/728/644 676/746/657 675/747/653\nf 672/748/658 655/712/634 654/645/581\nf 1866/731/645 1865/749/659 669/750/660\nf 666/751/661 649/752/662 650/753/648\nf 661/754/663 644/736/649 648/755/664\nf 644/736/649 661/754/663 662/756/665\nf 490/531/486 491/532/487 497/757/666\nf 652/732/646 669/750/660 668/745/656\nf 690/758/667 673/759/635 672/760/658\nf 667/761/668 650/753/648 656/762/636\nf 493/763/669 497/757/666 491/532/487\nf 663/764/670 646/765/671 647/721/639\nf 678/766/672 661/754/663 665/767/673\nf 661/754/663 678/766/672 679/768/674\nf 686/769/675 685/770/676 668/745/656\nf 684/771/677 667/761/668 673/759/635\nf 680/772/678 663/764/670 664/773/679\nf 675/747/653 692/774/680 691/775/681\nf 685/770/676 693/776/682 676/746/657\nf 676/746/657 693/776/682 692/774/680\nf 672/777/658 671/778/575 688/779/683\nf 1865/749/659 1876/780/684 686/769/675\nf 666/751/661 667/761/668 684/771/677\nf 683/781/685 684/771/677 701/782/686\nf 706/783/687 707/784/688 690/785/667\nf 694/641/577 711/786/689 705/787/690\nf 678/766/672 682/788/691 699/789/692\nf 678/790/672 695/791/693 696/792/694\nf 687/793/695 679/768/674 696/794/694\nf 684/771/677 690/758/667 707/795/688\nf 697/796/696 680/772/678 681/797/697\nf 709/798/698 708/799/699 691/800/681\nf 702/801/700 710/802/701 693/776/682\nf 710/803/701 709/804/698 692/805/680\nf 689/806/702 688/807/683 705/787/690\nf 1875/808/703 703/809/704 686/769/675\nf 702/801/700 685/770/676 686/769/675\nf 704/810/705 696/811/694 695/812/693\nf 700/813/706 701/814/686 695/812/693\nf 241/257/236 251/815/707 1755/816/708\nf 486/817/709 480/535/490 723/818/710\nf 713/819/711 726/820/712 381/821/713\nf 730/822/714 731/823/715 401/431/390\nf 403/824/716 404/473/428 424/449/407\nf 731/823/715 722/825/717 402/432/391\nf 728/826/718 747/827/719 745/828/720\nf 742/829/721 894/830/722 895/831/723\nf 746/832/724 749/833/725 751/834/726\nf 750/835/727 751/834/726 753/836/728\nf 752/837/729 753/836/728 755/838/730\nf 754/839/731 755/840/730 757/841/732\nf 756/842/733 757/841/732 759/843/734\nf 760/844/735 758/845/736 759/843/734\nf 762/846/737 763/847/738 765/848/739\nf 764/849/740 765/850/739 767/851/741\nf 766/852/742 767/851/741 769/853/743\nf 768/854/744 769/853/743 771/855/745\nf 770/856/746 771/855/745 773/857/747\nf 774/858/748 772/859/749 773/857/747\nf 741/860/750 895/831/723 896/861/751\nf 991/862/752 783/863/753 782/864/754\nf 783/863/753 787/865/755 786/866/756\nf 787/867/755 791/868/757 790/869/758\nf 796/870/759 794/871/760 790/869/758\nf 801/872/761 809/873/762 815/874/763\nf 802/875/764 809/873/762 803/876/765\nf 796/870/759 802/875/764 800/877/766\nf 802/875/764 808/878/767 806/879/768\nf 807/880/769 803/876/765 809/873/762\nf 796/870/759 815/874/763 809/873/762\nf 808/878/767 814/881/770 812/882/771\nf 1038/883/772 793/884/773 799/885/774\nf 806/879/768 810/886/775 804/887/776\nf 797/888/777 803/876/765 807/880/769\nf 772/859/749 774/858/748 780/889/778\nf 772/859/749 779/890/779 778/891/780\nf 770/856/746 778/891/780 777/892/781\nf 786/866/756 790/893/758 792/894/782\nf 743/895/783 893/896/784 894/830/722\nf 1740/897/785 1739/254/233 249/898/786\nf 750/835/727 765/848/739 763/847/738\nf 752/837/729 767/899/741 765/848/739\nf 754/900/731 769/901/743 767/899/741\nf 756/842/733 771/855/745 769/853/743\nf 758/845/736 773/857/747 771/855/745\nf 758/845/736 760/844/735 775/902/787\nf 751/834/726 818/903/788 819/904/789\nf 822/905/790 823/906/791 761/907/792\nf 757/841/732 821/908/793 822/905/790\nf 755/838/730 820/909/794 821/910/793\nf 753/836/728 819/904/789 820/909/794\nf 818/903/788 824/911/795 825/912/796\nf 828/913/797 829/914/798 823/915/791\nf 819/904/789 825/912/796 826/916/799\nf 820/909/794 826/916/799 827/917/800\nf 821/910/793 827/917/800 828/918/797\nf 824/911/795 830/919/801 831/920/802\nf 834/921/803 835/922/804 829/914/798\nf 825/912/796 831/920/802 832/923/805\nf 826/916/799 832/923/805 833/924/806\nf 827/925/800 833/926/806 834/921/803\nf 830/919/801 836/927/807 837/928/808\nf 840/929/809 841/930/810 835/922/804\nf 831/920/802 837/928/808 838/931/811\nf 832/923/805 838/931/811 839/932/812\nf 833/926/806 839/933/812 840/929/809\nf 836/927/807 842/934/813 843/935/814\nf 840/929/809 846/936/815 847/937/816\nf 837/928/808 843/935/814 844/938/817\nf 838/931/811 844/938/817 845/939/818\nf 839/933/812 845/940/818 846/936/815\nf 842/934/813 848/941/819 849/942/820\nf 846/936/815 852/943/821 853/944/822\nf 843/935/814 849/942/820 850/945/823\nf 844/938/817 850/945/823 851/946/824\nf 845/940/818 851/947/824 852/943/821\nf 1019/948/825 854/949/826 855/950/827\nf 858/951/828 859/952/829 1018/953/830\nf 1020/954/831 855/950/827 856/955/832\nf 1032/956/833 856/955/832 857/957/834\nf 1031/958/835 857/959/834 858/951/828\nf 969/960/836 863/961/837 1881/962/838\nf 1881/962/838 1880/963/839 1022/964/840\nf 967/965/841 1877/966/842 862/967/843\nf 1008/968/844 1879/969/845 864/970/846\nf 968/971/847 862/972/843 863/961/837\nf 965/973/848 864/970/846 865/974/849\nf 1745/975/850 1746/976/851 868/977/852\nf 1746/976/851 1747/978/853 871/979/854\nf 976/980/855 978/981/856 979/982/857\nf 1756/983/858 1745/975/850 869/984/859\nf 944/985/860 945/986/861 938/987/862\nf 1747/978/853 1749/988/863 872/278/257\nf 975/989/864 972/279/258 881/990/865\nf 976/980/855 975/991/864 878/992/866\nf 945/986/861 946/993/867 939/994/868\nf 1751/995/869 896/861/751 895/831/723\nf 749/833/725 886/996/870 818/903/788\nf 824/911/795 818/903/788 886/996/870\nf 830/919/801 824/911/795 887/997/871\nf 836/927/807 830/919/801 888/998/872\nf 842/934/813 836/927/807 889/999/873\nf 848/941/819 842/934/813 890/1000/874\nf 220/1001/875 214/1002/876 902/1003/877\nf 88/164/153 150/1004/878 1595/1005/879\nf 138/1006/880 904/1007/881 184/1008/882\nf 905/1009/883 151/1010/884 1595/1005/879\nf 188/212/196 196/211/195 1597/231/212\nf 906/1011/885 184/1008/882 904/1007/881\nf 214/1002/876 906/1011/885 907/1012/886\nf 145/171/160 155/185/172 174/201/186\nf 148/169/158 147/163/152 159/209/193\nf 105/119/108 110/127/116 114/126/115\nf 149/166/155 187/206/190 188/212/196\nf 157/181/169 176/194/179 175/193/178\nf 107/122/111 112/130/119 111/129/118\nf 153/179/167 172/196/181 171/203/184\nf 146/168/157 145/171/160 161/215/199\nf 106/1013/887 111/129/118 110/127/116\nf 149/166/155 148/169/158 186/207/191\nf 158/1014/171 166/204/188 176/194/179\nf 156/175/163 175/193/178 172/196/181\nf 155/1015/172 154/174/162 173/1016/183\nf 166/204/188 158/1014/171 109/1017/107\nf 147/163/152 146/168/157 160/213/197\nf 152/183/170 171/203/184 173/1016/183\nf 107/122/111 108/124/113 113/132/121\nf 740/1018/888 896/861/751 913/1019/889\nf 1751/995/869 1752/1020/890 913/1019/889\nf 790/869/758 794/871/760 798/1021/891\nf 804/887/776 798/1021/891 794/871/760\nf 806/879/768 812/882/771 816/1022/892\nf 727/1023/893 920/1024/894 919/1025/895\nf 917/1026/896 923/1027/897 922/1028/898\nf 914/1029/899 922/1028/898 923/1027/897\nf 923/1030/897 917/1031/896 918/1032/900\nf 892/1033/901 744/1034/902 921/1035/903\nf 785/1036/904 789/1037/905 925/1038/906\nf 815/874/763 1039/1039/907 1038/883/772\nf 796/870/759 791/868/757 1039/1039/907\nf 803/876/765 797/888/777 814/881/770\nf 811/1040/908 817/1041/909 813/1042/910\nf 811/1040/908 807/880/769 801/872/761\nf 795/1043/911 799/885/774 805/1044/912\nf 924/1045/913 925/1038/906 926/1046/914\nf 994/1047/915 914/1029/899 921/1035/903\nf 996/1048/916 785/1036/904 924/1045/913\nf 738/1049/917 894/830/722 893/896/784\nf 1035/1050/918 928/1051/919 776/1052/920\nf 778/891/780 930/1053/921 929/1054/922\nf 779/890/779 931/1055/923 930/1053/921\nf 779/890/779 780/889/778 932/1056/924\nf 1000/1057/925 1002/1058/926 762/846/737\nf 998/1059/927 997/1060/928 749/833/725\nf 1000/1057/925 776/1052/920 928/1051/919\nf 998/1059/927 999/1061/929 740/1018/888\nf 1002/1058/926 999/1061/929 763/847/738\nf 886/996/870 749/833/725 997/1060/928\nf 861/1062/930 1879/969/845 1008/968/844\nf 866/1063/931 861/1062/930 964/1064/932\nf 1608/1065/933 869/984/859 860/1066/934\nf 1022/964/840 1880/963/839 1878/1067/935\nf 966/1068/936 865/974/849 1877/966/842\nf 912/1069/937 913/1019/889 870/1070/938\nf 1887/1071/939 1884/1072/940 961/1073/941\nf 1003/1074/942 887/997/871 886/996/870\nf 1793/1075/943 1794/1076/944 935/1077/945\nf 1044/1078/946 1029/1079/947 2055/1080/948\nf 941/1081/949 1044/1078/946 2056/1082/950\nf 1790/1083/951 1791/1084/952 891/1085/953\nf 1789/1086/954 1790/1083/951 890/1000/874\nf 1788/1087/955 1789/1086/954 889/999/873\nf 1795/1088/956 1788/1087/955 888/998/872\nf 1040/1089/957 848/941/819 891/1085/953\nf 952/1090/958 953/1091/959 946/993/867\nf 1027/1092/960 956/1093/961 949/1094/962\nf 951/1095/963 952/1090/958 945/986/861\nf 954/1096/964 955/1097/965 948/1098/966\nf 1006/1099/967 951/1095/963 944/985/860\nf 953/1091/959 954/1096/964 947/1100/968\nf 1007/1101/969 958/1102/970 1894/1103/971\nf 960/1104/972 961/1073/941 1896/1105/973\nf 959/1106/974 960/1104/972 1897/1107/975\nf 1902/1108/976 1023/1109/977 963/1110/978\nf 958/1102/970 959/1106/974 1898/1111/979\nf 961/1073/941 962/1112/980 1900/1113/981\nf 968/1114/847 969/1115/836 1883/1116/982\nf 1890/1117/983 1008/968/844 965/973/848\nf 1887/1071/939 967/965/841 968/1114/847\nf 1888/1118/984 966/1068/936 967/965/841\nf 1022/964/840 970/1119/985 1889/1120/986\nf 1885/1121/987 965/973/848 966/1068/936\nf 883/1122/988 882/1123/989 1025/1124/990\nf 973/1125/991 884/1126/992 971/280/259\nf 249/898/786 247/1127/993 981/1128/994\nf 974/1129/995 274/1130/996 273/274/253\nf 250/273/252 249/898/786 977/1131/997\nf 1051/1132/998 879/281/260 971/280/259\nf 946/993/867 947/1100/968 940/1133/999\nf 947/1100/968 948/1098/966 941/1081/949\nf 1754/1134/1000 253/1135/1001 252/1136/1002\nf 247/1127/993 248/1137/1003 982/1138/1004\nf 1755/816/708 251/815/707 253/1135/1001\nf 974/1129/995 977/1131/997 2058/1139/1005\nf 2061/1140/1006 2062/1141/1007 274/1130/996\nf 948/1098/966 1049/1142/1008 1044/1078/946\nf 986/1143/1009 976/980/855 988/1144/1010\nf 986/1143/1009 987/1145/1011 975/991/864\nf 2058/1139/1005 977/1131/997 981/1128/994\nf 747/827/719 991/862/752 990/1146/1012\nf 1049/1142/1008 1028/1147/1013 1029/1079/947\nf 927/1148/1014 994/1047/915 995/1149/1015\nf 744/1034/902 996/1048/916 995/1149/1015\nf 741/860/750 1002/1058/926 1000/1057/925\nf 912/1069/937 739/1150/1016 997/1060/928\nf 742/829/721 1000/1057/925 1001/1151/1017\nf 746/832/724 763/847/738 999/1061/929\nf 741/860/750 740/1018/888 999/1061/929\nf 993/1152/1018 997/1060/928 739/1150/1016\nf 934/1153/1019 1003/1074/942 993/1152/1018\nf 1795/1088/956 887/997/871 1003/1074/942\nf 950/1154/1020 1006/1099/967 1005/1155/1021\nf 957/1156/1022 1007/1101/969 1901/1157/1023\nf 964/1064/932 1008/968/844 1890/1117/983\nf 1011/1158/1024 1010/1159/1025 987/1160/1011\nf 986/1143/1009 989/1161/1026 1012/1162/1027\nf 1028/1163/1013 949/1094/962 942/1164/1028\nf 1010/1159/1025 1013/1165/1029 973/1166/991\nf 2066/1167/1030 1015/1168/1031 1016/1169/1032\nf 1045/1170/1033 1032/1171/833 1031/1172/835\nf 880/1173/1034 1026/1174/1035 1025/1124/990\nf 2068/1175/1036 2069/1176/1037 936/1177/1038\nf 1042/1178/1039 884/1126/992 1017/1179/1040\nf 224/243/222 234/240/220 237/249/228\nf 1015/1168/1031 985/1180/1041 984/1181/1042\nf 1048/1182/1043 1027/1183/960 1028/1147/1013\nf 884/1126/992 973/1125/991 1013/1184/1029\nf 1054/1185/1044 1020/954/831 1032/956/833\nf 1050/1186/1045 1022/964/840 1891/1187/1046\nf 987/1188/1011 973/1125/991 972/279/258\nf 1014/1189/1047 883/1122/988 1030/1190/1048\nf 1041/1191/1049 1033/1192/1050 1018/953/830\nf 1040/1193/957 1019/948/825 1020/954/831\nf 1047/1194/1051 1023/1109/977 1902/1108/976\nf 854/949/826 1019/948/825 1024/1195/1052\nf 1031/958/835 1033/1192/1050 1041/1191/1049\nf 1042/1178/1039 1030/1190/1048 1025/1124/990\nf 2065/1196/1053 1017/1197/1040 1013/1165/1029\nf 206/219/203 209/241/204 234/240/220\nf 402/432/391 480/535/490 1845/534/489\nf 480/535/490 402/432/391 722/825/717\nf 1846/1198/488 486/1199/709 492/1200/1054\nf 486/817/709 724/1201/1055 725/1202/1056\nf 915/1203/1057 922/1028/898 728/826/718\nf 922/1028/898 914/1029/899 747/827/719\nf 991/862/752 747/827/719 914/1029/899\nf 994/1047/915 927/1148/1014 783/863/753\nf 787/865/755 783/863/753 927/1148/1014\nf 782/864/754 786/866/756 788/1204/1058\nf 990/1146/1012 782/864/754 784/1205/1059\nf 992/1206/1060 781/1207/1061 745/828/720\nf 781/1207/1061 748/1208/1062 727/1023/893\nf 920/1024/894 727/1023/893 748/1208/1062\nf 1817/1209/1063 910/1210/1064 1757/1211/1065\nf 1805/1212/1066 918/1032/900 917/1031/896\nf 1804/1213/1067 917/1031/896 915/1214/1057\nf 1803/1215/1068 915/1203/1057 919/1025/895\nf 1802/1216/1069 919/1025/895 920/1024/894\nf 283/357/332 284/303/282 1579/302/281\nf 1037/1217/1070 1035/1218/918 1034/1219/1071\nf 764/1220/740 1034/1221/1071 776/1052/920\nf 766/852/742 1036/1222/1072 1034/1219/1071\nf 925/1223/906 789/1224/905 793/884/773\nf 925/1223/906 1038/883/772 1039/1039/907\nf 791/868/757 787/867/755 926/1225/914\nf 1037/1217/1070 1036/1222/1072 777/892/781\nf 768/854/744 777/892/781 1036/1222/1072\nf 943/1226/1073 876/1227/1074 877/1228/1075\nf 875/1229/1076 957/1156/1022 1895/1230/1077\nf 1890/1117/983 1885/1121/987 958/1102/970\nf 985/1180/1041 1015/1168/1031 227/1231/1078\nf 983/1232/1079 227/1231/1078 982/1138/1004\nf 1019/948/825 1040/1193/957 1043/1233/1080\nf 1026/1174/1035 1051/1132/998 1053/1234/1081\nf 850/945/823 1045/1170/1033 1052/1235/1082\nf 1030/1190/1048 1042/1178/1039 1055/1236/1083\nf 955/1097/965 1048/1182/1043 1049/1142/1008\nf 849/942/820 1054/1237/1044 1045/1170/1033\nf 969/960/836 1050/1186/1045 1892/1238/1084\nf 852/943/821 1041/1191/1049 1046/1239/1085\nf 848/941/819 1040/1089/957 1054/1237/1044\nf 962/1112/980 1047/1194/1051 1903/1240/1086\nf 851/947/824 1052/1241/1082 1041/1191/1049\nf 884/1126/992 1042/1178/1039 1053/1234/1081\nf 2066/1242/1030 1021/1243/1087 1055/1236/1083\nf 1055/1244/1083 1017/1197/1040 2065/1196/1053\nf 2282/1245/1088 1056/1246/1089 1057/1247/1090\nf 2284/1248/1091 16/1249/1092 19/1250/1093\nf 2285/1251/1094 13/1252/1095 16/1249/1092\nf 2286/1253/1096 10/1254/1097 13/1252/1095\nf 2287/1255/1098 7/1256/1099 10/1254/1097\nf 55/64/56 2/3/3 2281/1257/1100\nf 73/1258/1101 70/87/78 2289/1259/1102\nf 2293/1260/1103 1081/1261/1104 1077/1262/1105\nf 70/87/78 67/83/74 2294/1263/1106\nf 1590/1264/1107 54/1265/1108 2291/1266/1109\nf 2294/1263/1106 67/83/74 64/1267/70\nf 48/1268/1110 51/1269/1111 2296/1270/1112\nf 2293/1271/1103 103/115/104 61/1272/64\nf 2299/1273/1113 45/1274/1114 48/1268/1110\nf 61/72/64 58/68/60 2300/1275/1115\nf 58/68/60 55/64/56 2288/1276/1116\nf 34/1277/1117 37/1278/1118 2302/1279/1119\nf 1588/1280/1120 31/1281/1121 2295/1282/1122\nf 2305/1283/1123 25/1284/1124 28/1285/1125\nf 2282/1245/1088 1/2/2 7/1256/1099\nf 22/1286/1126 25/1287/1124 2305/1288/1123\nf 2283/1289/1127 19/1250/1093 22/1286/1126\nf 1070/1290/1128 1071/1291/1129 1097/1292/1130\nf 1067/1293/1131 1068/1294/1132 1094/1295/1133\nf 1088/1296/1134 1062/1297/1135 1063/1298/1136\nf 1082/1299/1137 1056/1246/1089 1058/1300/1138\nf 1076/1301/1139 1075/1302/1140 1101/1303/1141\nf 1097/1292/1130 1071/1291/1129 1072/1304/1142\nf 1089/1305/1143 1063/1298/1136 1064/1306/1144\nf 1084/1307/1145 1058/1300/1138 1059/1308/1146\nf 1107/1309/1147 1103/1310/1148 1077/1311/1105\nf 1081/1312/1104 1076/1301/1139 1102/1313/1149\nf 1614/1314/1150 1612/1315/1151 1073/1316/1152\nf 1064/1306/1144 1065/1317/1153 1091/1318/1154\nf 1085/1319/1155 1059/1308/1146 1060/1320/1156\nf 1104/1321/1157 1078/1322/1158 1077/1311/1105\nf 1611/1323/1159 1066/1324/1160 1092/1325/1161\nf 1086/1326/1162 1060/1320/1156 1061/1327/1163\nf 1105/1328/1164 1079/1329/1165 1078/1322/1158\nf 1074/1330/1166 1057/1247/1090 1083/1331/1167\nf 1087/1332/1168 1061/1333/1163 1062/1334/1135\nf 1056/1246/1089 1082/1299/1137 1083/1331/1167\nf 1080/1335/1169 1079/1336/1165 1105/1337/1164\nf 1075/1338/1140 1074/1330/1166 1100/1339/1170\nf 1127/1340/1171 1101/1341/1141 1100/1342/1170\nf 1122/1343/1172 1096/1344/1173 1097/1345/1130\nf 1119/1346/1174 1093/1347/1175 1094/1348/1133\nf 1088/1349/1134 1089/1350/1143 1115/1351/1176\nf 1082/1352/1137 1084/1353/1145 1110/1354/1177\nf 1128/1355/1178 1102/1313/1149 1101/1303/1141\nf 1123/1356/1179 1097/1357/1130 1098/1358/1180\nf 1089/1359/1143 1090/1360/1181 1116/1361/1182\nf 1084/1353/1145 1085/1362/1155 1111/1363/1183\nf 1133/1364/1184 1129/1365/1185 1103/1310/1148\nf 1133/1364/1184 1107/1309/1147 1102/1313/1149\nf 1616/1366/1186 1614/1367/1150 1099/1368/1187\nf 1116/1369/1182 1090/1370/1181 1091/1371/1154\nf 1085/1362/1155 1086/1372/1162 1112/1373/1188\nf 1104/1321/1157 1103/1310/1148 1129/1365/1185\nf 1615/1374/1189 1613/1375/1190 1092/1376/1161\nf 1086/1372/1162 1087/1332/1168 1113/1377/1191\nf 1131/1378/1192 1105/1328/1164 1104/1321/1157\nf 1126/1379/1193 1100/1342/1170 1083/1380/1167\nf 1087/1332/1168 1088/1349/1134 1114/1381/1194\nf 1108/1382/1195 1109/1383/1196 1083/1380/1167\nf 1132/1384/1197 1106/1385/1198 1105/1337/1164\nf 1131/1378/1192 1130/1386/1199 1156/1387/1200\nf 1152/1388/1201 1126/1389/1193 1109/1390/1196\nf 1139/1391/1202 1113/1377/1191 1114/1381/1194\nf 1108/1382/1195 1134/1392/1203 1135/1393/1204\nf 1158/1394/1205 1132/1395/1197 1131/1378/1192\nf 1127/1396/1171 1126/1389/1193 1152/1388/1201\nf 1148/1397/1206 1122/1398/1172 1123/1399/1179\nf 1119/1346/1174 1120/1400/1207 1146/1401/1208\nf 1140/1402/1209 1114/1381/1194 1115/1351/1176\nf 1134/1392/1203 1108/1382/1195 1110/1354/1177\nf 1128/1355/1178 1127/1396/1171 1153/1403/1210\nf 1149/1404/1211 1123/1399/1179 1124/1405/1212\nf 1141/1406/1213 1115/1351/1176 1116/1369/1182\nf 1136/1407/1214 1110/1354/1177 1111/1363/1183\nf 1159/1408/1215 1155/1409/1216 1129/1365/1185\nf 1133/1364/1184 1128/1355/1178 1154/1410/1217\nf 1618/1411/1218 1616/1412/1186 1125/1413/1219\nf 1142/1414/1220 1116/1369/1182 1117/1415/1221\nf 1137/1416/1222 1111/1363/1183 1112/1373/1188\nf 1130/1386/1199 1129/1365/1185 1155/1409/1216\nf 1615/1374/1189 1118/1417/1223 1144/1418/1224\nf 1138/1419/1225 1112/1373/1188 1113/1377/1191\nf 1160/1420/1226 1134/1392/1203 1136/1407/1214\nf 1154/1410/1217 1153/1403/1210 1179/1421/1227\nf 1175/1422/1228 1149/1404/1211 1150/1423/1229\nf 1167/1424/1230 1141/1425/1213 1142/1426/1220\nf 1162/1427/1231 1136/1407/1214 1137/1416/1222\nf 1159/1408/1215 1185/1428/1232 1181/1429/1233\nf 1185/1428/1232 1159/1408/1215 1154/1410/1217\nf 1618/1411/1218 1151/1430/1234 1177/1431/1235\nf 1168/1432/1236 1142/1426/1220 1143/1433/1237\nf 1163/1434/1238 1137/1416/1222 1138/1419/1225\nf 1156/1387/1200 1155/1409/1216 1181/1429/1233\nf 1617/1435/1239 1144/1436/1224 1170/1437/1240\nf 1164/1438/1241 1138/1419/1225 1139/1391/1202\nf 1157/1439/1242 1156/1387/1200 1182/1440/1243\nf 1178/1441/1244 1152/1388/1201 1135/1442/1204\nf 1139/1391/1202 1140/1402/1209 1166/1443/1245\nf 1134/1444/1203 1160/1445/1226 1161/1446/1246\nf 1158/1394/1205 1157/1439/1242 1183/1447/1247\nf 1179/1421/1227 1153/1403/1210 1152/1388/1201\nf 1148/1397/1206 1149/1404/1211 1175/1422/1228\nf 1145/1448/1248 1146/1449/1208 1172/1450/1249\nf 1166/1451/1245 1140/1452/1209 1141/1425/1213\nf 1160/1445/1226 1186/1453/1250 1187/1454/1251\nf 1184/1455/1252 1183/1447/1247 1209/1456/1253\nf 1205/1457/1254 1179/1421/1227 1178/1441/1244\nf 1174/1458/1255 1175/1422/1228 1201/1459/1256\nf 1171/1460/1257 1172/1461/1249 1198/1462/1258\nf 1166/1451/1245 1167/1424/1230 1193/1463/1259\nf 1160/1445/1226 1162/1464/1231 1188/1465/1260\nf 1206/1466/1261 1180/1467/1262 1179/1421/1227\nf 1175/1422/1228 1176/1468/1263 1202/1469/1264\nf 1167/1424/1230 1168/1432/1236 1194/1470/1265\nf 1162/1464/1231 1163/1471/1238 1189/1472/1266\nf 1185/1428/1232 1211/1473/1267 1207/1474/1268\nf 1211/1473/1267 1185/1428/1232 1180/1467/1262\nf 1620/1475/1269 1177/1431/1235 1203/1476/1270\nf 1194/1470/1265 1168/1432/1236 1169/1477/1271\nf 1163/1471/1238 1164/1478/1241 1190/1479/1272\nf 1208/1480/1273 1182/1440/1243 1181/1429/1233\nf 1621/1481/1274 1619/1482/1275 1170/1437/1240\nf 1164/1478/1241 1165/1483/1276 1191/1484/1277\nf 1183/1447/1247 1182/1440/1243 1208/1480/1273\nf 1204/1485/1278 1178/1486/1244 1161/1446/1246\nf 1165/1487/1276 1166/1451/1245 1192/1488/1279\nf 1190/1479/1272 1191/1484/1277 1217/1489/1280\nf 1191/1490/1277 1192/1488/1279 1229/1491/1281\nf 1192/1488/1279 1193/1463/1259 1218/1492/1282\nf 1195/1493/1283 1226/1494/1284 1219/1495/1285\nf 1236/1496/1286 1210/1497/1287 1209/1456/1253\nf 1196/1498/1288 1221/1499/1289 1623/1500/1290\nf 1197/1501/1291 1198/1462/1258 1223/1502/1292\nf 1200/1503/1293 1201/1459/1256 1220/1504/1294\nf 1186/1453/1250 1188/1465/1260 1214/1505/1295\nf 1201/1459/1256 1202/1469/1264 1227/1506/1296\nf 1204/1507/1278 1231/1508/1297 1230/1509/1298\nf 1193/1463/1259 1194/1470/1265 1219/1495/1285\nf 1208/1480/1273 1213/1510/1299 1235/1511/1300\nf 1211/1473/1267 1237/1512/1301 1233/1513/1302\nf 1207/1474/1268 1233/1513/1302 1213/1510/1299\nf 1622/1514/1303 1203/1476/1270 1228/1515/1304\nf 1206/1466/1261 1215/1516/1305 1237/1512/1301\nf 1205/1457/1254 1230/1509/1298 1215/1516/1305\nf 1204/1485/1278 1187/1454/1251 1234/1517/1306\nf 1212/1518/1307 1234/1517/1306 1187/1454/1251\nf 1188/1465/1260 1189/1472/1266 1232/1519/1308\nf 1190/1479/1272 1216/1520/1309 1232/1519/1308\nf 1196/1498/1288 1197/1501/1291 1222/1521/1310\nf 1197/1501/1291 1196/1498/1288 1170/1437/1240\nf 1171/1460/1257 1170/1437/1240 1144/1436/1224\nf 1118/1417/1223 1119/1346/1174 1145/1522/1248\nf 1242/1523/1311 1258/1524/1312 1232/1519/1308\nf 1237/1512/1301 1263/1525/1313 1259/1526/1314\nf 1215/1516/1305 1241/1527/1315 1263/1525/1313\nf 1624/1528/1316 1626/1529/1317 1253/1530/1318\nf 1246/1531/1319 1251/1532/1320 1225/1533/1321\nf 1231/1534/1297 1257/1535/1322 1256/1536/1323\nf 1252/1537/1324 1245/1538/1325 1219/1495/1285\nf 1240/1539/1326 1238/1540/1327 1212/1518/1307\nf 1230/1509/1298 1256/1541/1323 1241/1527/1315\nf 1625/1542/1328 1252/1537/1324 1226/1494/1284\nf 1243/1543/1329 1242/1523/1311 1216/1520/1309\nf 1258/1524/1312 1240/1539/1326 1214/1505/1295\nf 1234/1517/1306 1260/1544/1330 1257/1535/1322\nf 1213/1510/1299 1239/1545/1331 1261/1546/1332\nf 1249/1547/1333 1248/1548/1334 1222/1521/1310\nf 1255/1549/1335 1243/1550/1329 1217/1551/1280\nf 1235/1511/1300 1261/1546/1332 1262/1552/1336\nf 1233/1513/1302 1259/1526/1314 1239/1545/1331\nf 1253/1530/1318 1246/1531/1319 1220/1504/1294\nf 1244/1553/1337 1255/1549/1335 1229/1491/1281\nf 1238/1540/1327 1260/1544/1330 1234/1517/1306\nf 1248/1548/1334 1247/1554/1338 1221/1499/1289\nf 1245/1538/1325 1244/1553/1337 1218/1492/1282\nf 1627/1555/1339 1278/1556/1340 1252/1537/1324\nf 1269/1557/1341 1268/1558/1342 1242/1523/1311\nf 1257/1535/1322 1283/1559/1343 1282/1560/1344\nf 1261/1561/1332 1287/1562/1345 1288/1563/1346\nf 1239/1545/1331 1265/1564/1347 1287/1565/1345\nf 1249/1547/1333 1275/1566/1348 1274/1567/1349\nf 1281/1568/1350 1269/1569/1341 1243/1550/1329\nf 1264/1570/1351 1286/1571/1352 1260/1544/1330\nf 1259/1526/1314 1285/1572/1353 1265/1564/1347\nf 1279/1573/1354 1272/1574/1355 1246/1531/1319\nf 1270/1575/1356 1281/1568/1350 1255/1549/1335\nf 1263/1525/1313 1289/1576/1357 1285/1572/1353\nf 1241/1527/1315 1267/1577/1358 1289/1576/1357\nf 1274/1567/1349 1273/1578/1359 1247/1554/1338\nf 1271/1579/1360 1270/1575/1356 1244/1553/1337\nf 1284/1580/1361 1266/1581/1362 1240/1539/1326\nf 1256/1541/1323 1282/1582/1344 1267/1577/1358\nf 1628/1583/1363 1279/1584/1354 1253/1585/1318\nf 1272/1574/1355 1277/1586/1364 1251/1532/1320\nf 1278/1556/1340 1271/1579/1360 1245/1538/1325\nf 1266/1581/1362 1264/1570/1351 1238/1540/1327\nf 1268/1558/1342 1284/1580/1361 1258/1524/1312\nf 1260/1544/1330 1286/1571/1352 1283/1559/1343\nf 1265/1587/1347 1291/1588/1365 1313/1589/1366\nf 1275/1566/1348 1301/1590/1367 1300/1591/1368\nf 1307/1592/1369 1295/1593/1370 1269/1569/1341\nf 1290/1594/1371 1312/1595/1372 1286/1571/1352\nf 1285/1596/1353 1311/1597/1373 1291/1588/1365\nf 1305/1598/1374 1298/1599/1375 1272/1600/1355\nf 1296/1601/1376 1307/1592/1369 1281/1568/1350\nf 1289/1602/1357 1315/1603/1377 1311/1597/1373\nf 1267/1604/1358 1293/1605/1378 1315/1603/1377\nf 1274/1567/1349 1300/1591/1368 1299/1606/1379\nf 1297/1607/1380 1296/1601/1376 1270/1575/1356\nf 1310/1608/1381 1292/1609/1382 1266/1581/1362\nf 1282/1560/1344 1308/1610/1383 1293/1611/1378\nf 1630/1612/1384 1305/1598/1374 1279/1584/1354\nf 1298/1599/1375 1303/1613/1385 1277/1614/1364\nf 1304/1615/1386 1297/1607/1380 1271/1579/1360\nf 1292/1609/1382 1290/1594/1371 1264/1570/1351\nf 1294/1616/1387 1310/1608/1381 1284/1580/1361\nf 1286/1571/1352 1312/1595/1372 1309/1617/1388\nf 1629/1618/1389 1304/1615/1386 1278/1556/1340\nf 1295/1619/1370 1294/1616/1387 1268/1558/1342\nf 1283/1559/1343 1309/1617/1388 1308/1610/1383\nf 1313/1589/1366 1314/1620/1390 1288/1563/1346\nf 1818/1621/1391 1352/1622/1392 1351/1623/1393\nf 1335/1624/1394 1332/1625/1395 1320/1626/1396\nf 1343/1627/1397 1324/1628/1398 1824/1629/1399\nf 1632/1630/1400 1631/1631/1401 1822/1632/1402\nf 1319/1633/1403 1318/1634/1404 1349/1635/1405\nf 1823/1636/1406 1326/1637/1407 1341/1638/1408\nf 1348/1639/1409 1353/1640/1410 1819/1641/1411\nf 1316/1642/1412 1351/1623/1393 1350/1643/1413\nf 1342/1644/1414 1339/1645/1415 1328/1646/1416\nf 1631/1631/1401 1344/1647/1417 1323/1648/1418\nf 1827/1649/1419 1636/1650/1420 1634/1651/1421\nf 1345/1652/1422 1337/1653/1423 1330/1654/1424\nf 1324/1628/1398 1343/1627/1397 1342/1644/1414\nf 1353/1640/1410 1346/1655/1425 1321/1656/1426\nf 1337/1653/1423 1338/1657/1427 1329/1658/1428\nf 1355/1659/1429 1821/1660/1430 1323/1661/1418\nf 1334/1662/1431 1345/1652/1422 1322/1663/1432\nf 1332/1625/1395 1335/1624/1394 1352/1622/1392\nf 1827/1649/1419 1328/1646/1416 1339/1645/1415\nf 1821/1660/1430 1355/1659/1429 1354/1664/1433\nf 1333/1665/1434 1321/1656/1426 1346/1655/1425\nf 1329/1658/1428 1338/1657/1427 1635/1666/1435\nf 1336/1667/1436 1331/1668/1437 1327/1669/1438\nf 1320/1626/1396 1820/1670/1439 1354/1664/1433\nf 1633/1671/1440 1824/1672/1399 1331/1668/1437\nf 1350/1673/1413 1349/1635/1405 1318/1634/1404\nf 1826/1674/1441 1635/1666/1435 1340/1675/1442\nf 1290/1594/1371 1292/1609/1382 1634/1651/1421\nf 1347/1676/1443 1354/1664/1433 1297/1607/1380\nf 1298/1599/1375 1305/1598/1374 1346/1655/1425\nf 1308/1610/1383 1343/1627/1397 1633/1677/1440\nf 1292/1609/1382 1310/1608/1381 1341/1638/1408\nf 1334/1662/1431 1346/1655/1425 1305/1598/1374\nf 1355/1659/1429 1296/1601/1376 1297/1607/1380\nf 1303/1613/1385 1298/1599/1375 1353/1640/1410\nf 1293/1605/1378 1633/1671/1440 1336/1667/1436\nf 1315/1603/1377 1336/1667/1436 1340/1675/1442\nf 1335/1624/1394 1629/1618/1389 1299/1606/1379\nf 1296/1601/1376 1355/1659/1429 1344/1678/1417\nf 1352/1622/1392 1299/1606/1379 1300/1591/1368\nf 1635/1666/1435 1291/1588/1365 1311/1597/1373\nf 1636/1650/1420 1339/1645/1415 1312/1595/1372\nf 1348/1639/1409 1349/1635/1405 1302/1679/1444\nf 1295/1593/1370 1307/1592/1369 1344/1678/1417\nf 1351/1623/1393 1300/1591/1368 1301/1590/1367\nf 1338/1657/1427 1313/1589/1366 1291/1588/1365\nf 219/1680/1445 260/1681/1446 903/1682/1447\nf 870/1070/938 913/1019/889 1752/1020/890\nf 867/1683/1448 933/1684/1449 739/1150/1016\nf 197/1685/1450 219/1680/1445 902/1003/877\nf 907/1012/886 904/1007/881 905/1009/883\nf 904/1007/881 138/1006/880 151/1010/884\nf 89/1686/1451 151/1010/884 138/1006/880\nf 1550/1687/1452 36/40/34 33/1688/1453\nf 32/1689/1454 33/1688/1453 36/40/34\nf 1517/1690/1455 32/1689/1454 35/39/33\nf 1067/1293/1131 1066/1324/1160 2295/1691/1122\nf 1093/1692/1175 1092/1325/1161 1066/1324/1160\nf 1093/1347/1175 1119/1346/1174 1118/1417/1223\nf 1367/1693/1456 1366/1694/1457 1357/1695/1458\nf 1362/1696/1459 1357/1695/1458 1356/1697/1460\nf 1370/1698/1461 932/1056/924 780/889/778\nf 1363/1699/1462 1358/1700/1463 1366/1701/1457\nf 1365/1702/1464 1360/1703/1465 1379/1704/1466\nf 1409/1705/1467 1379/1704/1466 1408/1706/1468\nf 1364/1707/1469 1359/1708/1470 1360/1703/1465\nf 1369/1709/1471 797/888/777 813/1042/910\nf 1410/1710/1472 814/881/770 797/888/777\nf 1368/1711/1473 813/1042/910 817/1041/909\nf 1419/1712/1474 1367/1693/1456 1362/1696/1459\nf 1372/1713/1475 774/858/748 775/902/787\nf 1403/1714/1476 835/922/804 841/930/810\nf 1046/1239/1085 1018/953/830 1398/1715/1477\nf 1404/1716/1478 829/914/798 835/922/804\nf 1018/953/830 859/952/829 1399/1717/1479\nf 1397/1718/1480 1400/1719/1481 853/944/822\nf 1405/1720/1482 823/915/791 829/914/798\nf 1407/1721/1483 760/844/735 761/907/792\nf 847/937/816 853/944/822 1400/1719/1481\nf 1406/1722/1484 761/907/792 823/906/791\nf 841/930/810 847/937/816 1401/1723/1485\nf 1387/1724/1486 1406/1725/1484 1405/1720/1482\nf 1401/1723/1485 1400/1719/1481 1393/1726/1487\nf 1386/1727/1488 1407/1721/1483 1406/1722/1484\nf 1402/1728/1489 1401/1723/1485 1392/1729/1490\nf 1403/1714/1476 1402/1728/1489 1391/1730/1491\nf 1404/1716/1478 1403/1714/1476 1390/1731/1492\nf 1397/1718/1480 1398/1715/1477 1395/1732/1493\nf 1388/1733/1494 1405/1720/1482 1404/1716/1478\nf 1396/1734/1495 1393/1726/1487 1400/1719/1481\nf 1398/1715/1477 1399/1717/1479 1394/1735/1496\nf 1395/1736/1493 1394/1737/1496 1375/1738/1497\nf 1390/1731/1492 1391/1730/1491 1378/1739/1498\nf 1391/1730/1491 1392/1729/1490 1377/1740/1499\nf 1392/1729/1490 1393/1726/1487 1376/1741/1500\nf 1386/1727/1488 1387/1742/1486 1384/1743/1501\nf 1373/1744/1502 1376/1741/1500 1393/1726/1487\nf 1387/1724/1486 1388/1733/1494 1383/1745/1503\nf 1396/1746/1495 1395/1736/1493 1374/1747/1504\nf 1388/1733/1494 1389/1748/1505 1382/1749/1506\nf 1389/1748/1505 1390/1731/1492 1381/1750/1507\nf 1417/1751/1508 1370/1698/1461 1371/1752/1509\nf 1416/1753/1510 1369/1709/1471 1368/1711/1473\nf 1414/1754/1511 1410/1710/1472 1369/1709/1471\nf 1415/1755/1512 1368/1711/1473 1411/1756/1513\nf 774/858/748 1372/1713/1475 1371/1752/1509\nf 1419/1712/1474 1372/1713/1475 1412/1757/1514\nf 1361/1758/1515 1417/1751/1508 1418/1759/1516\nf 1407/1721/1483 1386/1727/1488 1420/1760/1517\nf 1367/1693/1456 1419/1712/1474 1420/1760/1517\nf 1365/1702/1464 1415/1755/1512 1413/1761/1518\nf 1372/1713/1475 1419/1712/1474 1418/1759/1516\nf 1380/1762/1519 1414/1754/1511 1416/1753/1510\nf 1409/1705/1467 1416/1753/1510 1415/1755/1512\nf 1386/1763/1488 1385/1764/1520 1363/1699/1462\nf 1412/1757/1514 775/902/787 760/844/735\nf 812/882/771 1421/1765/1521 1422/1766/1522\nf 1421/1765/1521 1423/1767/1523 1424/1768/1524\nf 1423/1767/1523 1425/1769/1525 1426/1770/1526\nf 1425/1769/1525 1427/1771/1527 1428/1772/1528\nf 1421/1765/1521 812/882/771 814/881/770\nf 1423/1767/1523 1421/1765/1521 1410/1710/1472\nf 1414/1754/1511 1380/1762/1519 1425/1769/1525\nf 1380/1762/1519 1408/1706/1468 1427/1771/1527\nf 1374/1747/1504 1375/1738/1497 1431/1773/1529\nf 1384/1774/1501 1383/1745/1503 1437/1775/1530\nf 1429/1776/1531 1432/1777/1532 1376/1778/1500\nf 1383/1745/1503 1382/1749/1506 1436/1779/1533\nf 1373/1780/1502 1374/1747/1504 1430/1781/1534\nf 1382/1749/1506 1381/1750/1507 1435/1782/1535\nf 1381/1750/1507 1378/1739/1498 1434/1783/1536\nf 1378/1739/1498 1377/1740/1499 1433/1784/1537\nf 1377/1740/1499 1376/1741/1500 1432/1785/1532\nf 1385/1764/1520 1384/1774/1501 1438/1786/1538\nf 1358/1700/1463 1363/1699/1462 1385/1764/1520\nf 1440/1787/1539 1441/1788/1540 932/1056/924\nf 1441/1788/1540 1442/1789/1541 931/1055/923\nf 1443/1790/1542 930/1053/921 931/1055/923\nf 1444/1791/1543 929/1054/922 930/1053/921\nf 1445/1792/1544 1037/1217/1070 929/1054/922\nf 1446/1793/1545 1035/1218/918 1037/1217/1070\nf 1446/1794/1545 1447/1795/1546 928/1051/919\nf 1448/1796/1547 1447/1795/1546 785/1797/904\nf 1448/1796/1547 1449/1798/1548 743/895/783\nf 1450/1799/1549 1449/1798/1548 744/1800/902\nf 1450/1799/1549 1451/1801/1550 916/1802/1551\nf 1807/1803/1552 1451/1801/1550 918/1032/900\nf 295/1804/1553 294/284/263 1562/353/328\nf 1563/1805/1554 1562/353/328 294/284/263\nf 1453/1806/1555 730/822/714 400/430/389\nf 1848/1807/1556 1454/1808/1557 400/430/389\nf 1456/1809/1558 1455/1810/1559 405/1811/1560\nf 1457/1812/1561 1456/1809/1558 442/461/417\nf 1458/1813/1562 1457/1812/1561 443/460/416\nf 1459/1814/1563 430/1815/412 502/1816/410\nf 1459/1817/1563 444/477/432 445/465/421\nf 1460/1818/1564 445/465/421 446/464/420\nf 1462/1819/1565 1461/1820/1566 446/464/420\nf 1463/1821/1567 545/607/544 528/605/542\nf 1464/1822/1568 1463/1821/1567 547/618/554\nf 1465/1823/1569 1464/1822/1568 564/617/553\nf 1466/1824/1570 596/657/591 579/627/563\nf 1467/1825/1571 613/690/616 596/657/591\nf 1467/1826/1571 615/1827/628 632/1828/647\nf 1468/1829/1572 632/1828/647 649/752/662\nf 1470/1830/1573 664/773/679 647/721/639\nf 1470/1830/1573 1471/1831/1574 681/797/697\nf 1471/1831/1574 1472/1832/1575 698/1833/1576\nf 1472/1834/1575 700/813/706 699/1835/692\nf 1474/1836/1577 680/1837/678 697/1838/696\nf 1474/1836/1577 1475/1839/1578 663/1840/670\nf 1476/1841/1579 1475/1839/1578 665/767/673\nf 1476/1842/1579 1477/1843/1580 629/1844/638\nf 1478/1845/1581 1477/1846/1580 631/1847/650\nf 1478/1845/1581 614/708/631 597/642/578\nf 1480/1848/1582 578/656/590 595/689/615\nf 1481/1849/1583 561/626/562 578/656/590\nf 1481/1849/1583 563/635/571 546/620/556\nf 1483/1850/1584 1482/1851/1585 546/620/556\nf 1483/1850/1584 1484/1852/1586 435/569/514\nf 1485/1853/1587 1484/1852/1586 437/575/518\nf 1486/1854/1588 1485/1855/1587 434/1856/425\nf 1487/1857/1589 1486/1854/1588 431/469/424\nf 1488/1858/1590 426/1859/409 501/1860/495\nf 1488/1858/1590 428/468/423 425/1861/422\nf 1490/1862/1591 403/824/716 423/448/406\nf 1491/1863/1592 380/1864/1593 370/471/426\nf 1492/1865/1594 713/819/711 380/1864/1593\nf 1560/1866/1595 1563/1805/1554 293/299/278\nf 278/1867/1596 339/356/331 1567/1868/1597\nf 1504/1869/1598 1440/1787/1539 1370/1698/1461\nf 1504/1869/1598 1505/1870/1599 1364/1707/1469\nf 1506/1871/1600 1505/1870/1599 1361/1758/1515\nf 1411/1756/1513 817/1041/909 1441/1788/1540\nf 817/1041/909 811/1040/908 1442/1789/1541\nf 811/1040/908 805/1044/912 1443/1790/1542\nf 799/885/774 1444/1791/1543 1443/1790/1542\nf 793/884/773 1445/1792/1544 1444/1791/1543\nf 789/1224/905 1446/1793/1545 1445/1792/1544\nf 789/1872/905 785/1797/904 1447/1795/1546\nf 1001/1151/1017 928/1051/919 1447/1795/1546\nf 996/1873/916 744/1800/902 1449/1798/1548\nf 893/896/784 743/895/783 1449/1798/1548\nf 892/1874/901 918/1032/900 1451/1801/1550\nf 277/1875/1601 336/1876/1602 368/1877/330\nf 1641/1878/1603 1567/1868/1597 339/356/331\nf 1641/1878/1603 1606/1879/1604 340/358/333\nf 726/820/712 1453/1806/1555 1454/1808/1557\nf 381/821/713 1454/1808/1557 1848/1807/1556\nf 424/449/407 404/473/428 1455/1810/1559\nf 427/450/408 424/449/407 1456/1809/1558\nf 502/1880/410 427/450/408 1457/1812/1561\nf 444/477/432 1459/1817/1563 1458/1881/1562\nf 433/1882/413 430/1815/412 1459/1814/1563\nf 436/459/415 433/458/413 1460/1883/1564\nf 528/605/542 436/570/415 1461/1884/1566\nf 530/597/535 547/618/554 1463/1821/1567\nf 545/607/544 1463/1821/1567 1464/1822/1568\nf 562/608/545 1464/1822/1568 1465/1823/1569\nf 581/634/570 598/669/600 1466/1824/1570\nf 615/1885/628 1467/1825/1571 1466/1824/1570\nf 613/1886/616 1467/1826/1571 1468/1829/1572\nf 630/720/620 1468/1829/1572 1469/1887/1605\nf 666/751/661 1470/1830/1573 1469/1887/1605\nf 683/781/685 1471/1831/1574 1470/1830/1573\nf 683/1888/685 700/813/706 1472/1834/1575\nf 698/1889/1576 1472/1834/1575 1473/1890/1606\nf 682/788/691 1474/1836/1577 1473/1891/1606\nf 682/788/691 665/767/673 1475/1839/1578\nf 646/1892/671 663/1840/670 1475/1839/1578\nf 648/1893/664 631/1847/650 1477/1846/1580\nf 629/1894/638 1477/1846/1580 1478/1845/1581\nf 595/689/615 612/693/619 1478/1845/1581\nf 580/636/572 1480/1848/1582 1479/1895/1607\nf 563/635/571 1481/1849/1583 1480/1848/1582\nf 561/626/562 1481/1849/1583 1482/1851/1585\nf 527/568/513 544/604/541 1482/1851/1585\nf 529/601/538 437/575/518 1484/1852/1586\nf 432/1896/414 435/569/514 1484/1852/1586\nf 432/1897/414 1485/1855/1587 1486/1854/1588\nf 429/454/411 1486/1854/1588 1487/1857/1589\nf 428/468/423 1488/1858/1590 1487/1857/1589\nf 426/1859/409 1488/1858/1590 1489/1898/1608\nf 408/1899/392 1490/1900/1591 1489/1901/1608\nf 369/390/358 379/389/357 1491/1863/1592\nf 379/389/357 712/1902/1609 1492/1865/1594\nf 1565/1903/1610 340/1904/333 341/1905/335\nf 1774/1906/1611 1773/1907/1612 1494/1908/1613\nf 1773/1907/1612 1772/1909/1614 1495/1910/1615\nf 1772/1909/1614 1771/1911/1616 1496/1912/1617\nf 1770/1913/1618 1769/1914/1619 1498/1915/1620\nf 1769/1914/1619 897/1916/1621 1499/1917/1622\nf 897/1916/1621 1828/1918/1623 1500/1919/1624\nf 1828/1918/1623 1775/1920/1625 1501/1921/1626\nf 1775/1920/1625 1829/1922/1627 1502/1923/1628\nf 1830/1924/1629 1503/1925/1630 1502/1923/1628\nf 1413/1761/1518 1411/1756/1513 1440/1787/1539\nf 1417/1751/1508 1361/1758/1515 1505/1870/1599\nf 1359/1708/1470 1364/1707/1469 1505/1870/1599\nf 3/5/5 1508/7/1 1507/1926/50\nf 1/2/2 1508/1/1 1509/1927/10\nf 7/1256/1099 1509/1927/10 1510/1928/14\nf 10/1254/1097 1510/1928/14 1511/1929/13\nf 13/1930/1095 1511/14/13 1512/18/17\nf 19/1250/1093 16/1249/1092 1512/22/17\nf 22/1286/1126 19/1250/1093 1513/21/20\nf 22/1931/1126 1514/32/23 1515/31/26\nf 25/1284/1124 1515/31/26 1516/37/31\nf 28/1285/1125 1516/37/31 1637/1932/1631\nf 34/1277/1117 1518/42/36 1519/1933/1632\nf 48/1268/1110 45/1274/1114 1521/1934/39\nf 51/1269/1111 48/1268/1110 1522/51/38\nf 1590/1935/1107 51/1936/1111 1523/1937/43\nf 56/60/52 4/6/6 1507/1926/50\nf 59/1938/58 56/1939/52 1525/57/49\nf 62/1940/62 59/1938/58 1526/63/55\nf 101/113/103 62/70/62 1527/1941/59\nf 65/1942/67 1528/77/69 1529/76/68\nf 71/80/72 68/79/71 1529/82/68\nf 74/1943/1633 71/80/72 1530/81/73\nf 101/113/103 1532/1944/63 1528/1945/69\nf 31/1281/1121 1517/1690/1455 1518/42/36\nf 91/180/168 1557/1946/93 1555/1947/1634\nf 1538/99/89 1537/100/90 83/170/159\nf 1549/90/81 1547/91/82 80/154/143\nf 77/159/148 1545/88/79 1550/1687/1452\nf 1558/106/96 1536/101/91 92/1948/161\nf 1554/1949/1635 1552/109/99 99/121/110\nf 1552/109/99 1533/110/100 100/123/112\nf 15/17/16 12/13/12 1558/106/96\nf 1540/96/87 1539/98/88 85/162/151\nf 63/65/57 102/69/61 1551/116/105\nf 1541/95/86 1540/96/87 86/161/150\nf 76/160/149 1550/1687/1452 1542/1950/1636\nf 1593/1951/1637 1639/94/85 1543/1952/1638\nf 97/111/101 1553/108/98 1554/1949/1635\nf 1536/1953/91 1556/1954/92 90/178/166\nf 90/178/166 1556/1954/92 1557/1946/93\nf 66/74/66 1553/108/98 1551/116/105\nf 95/177/165 1534/1955/95 1535/1956/94\nf 1539/98/88 1538/99/89 84/167/156\nf 46/49/42 43/48/41 1546/92/83\nf 94/1957/164 1555/1958/1634 1534/105/95\nf 1640/1959/1639 1549/90/81 81/155/144\nf 1543/1952/1638 1541/95/86 87/165/154\nf 1587/38/32 1586/36/30 33/1688/1453\nf 1566/1960/1640 341/1905/335 285/1961/334\nf 1649/1962/1641 1561/1963/1642 285/359/334\nf 1569/1964/1643 1568/1965/1644 1571/1966/1645\nf 183/1967/1646 215/1968/1647 1600/1969/1648\nf 1572/1970/1649 1574/1971/1650 163/1972/1651\nf 908/1973/1652 183/1967/1646 1610/1974/1653\nf 164/1975/1654 163/1972/1651 200/297/276\nf 337/1976/286 1565/1903/1610 1566/1960/1640\nf 1573/1977/1655 1572/1970/1649 164/1975/1654\nf 165/1978/1656 164/1975/1654 201/296/275\nf 1568/1965/1644 908/1973/1652 1596/1979/1657\nf 289/1980/1658 359/1981/1659 319/309/288\nf 1813/1982/1660 1816/1983/1661 1758/1984/1662\nf 1503/1925/1630 245/1985/1663 246/1986/1664\nf 1501/1921/1626 1502/1923/1628 246/1986/1664\nf 1500/1919/1624 1501/1921/1626 244/1987/1665\nf 714/1988/1666 715/1989/1667 1499/1917/1622\nf 360/331/307 1583/489/444 1648/488/443\nf 1645/1990/1668 1583/489/444 360/331/307\nf 1646/1991/1669 1647/1992/1670 359/1981/1659\nf 310/1993/298 315/327/303 342/366/340\nf 310/321/298 316/323/300 311/318/295\nf 305/314/293 311/318/295 306/1994/289\nf 301/1995/1671 276/1996/285 300/1997/284\nf 276/1996/285 301/1995/1671 296/1998/1672\nf 1580/293/272 279/286/265 278/1867/1596\nf 378/1999/1673 377/2000/1674 712/1902/1609\nf 301/1995/1671 302/312/291 297/354/329\nf 298/2001/1675 297/354/329 302/312/291\nf 1637/1932/1631 1587/38/32 32/1689/1454\nf 1524/2002/1676 1638/54/46 1589/55/47\nf 53/2003/1677 1589/55/47 1591/89/80\nf 52/2004/1678 1591/89/80 1640/1959/1639\nf 1542/1950/1636 33/1688/1453 1586/36/30\nf 82/2005/1679 1592/156/145 1594/2006/1680\nf 219/1680/1445 197/1685/1450 1597/231/212\nf 260/1681/1446 219/1680/1445 1599/230/211\nf 1604/288/267 1603/292/271 284/303/282\nf 1603/292/271 1598/2007/1681 198/2008/1682\nf 715/1989/1667 716/2009/1683 1498/1915/1620\nf 1656/2010/1684 1649/1962/1641 1579/302/281\nf 281/285/264 1604/288/267 1606/1879/1604\nf 1748/2011/1685 1756/983/858 1608/1065/933\nf 1593/1951/1637 1595/1005/879 151/1010/884\nf 1609/2012/1686 1595/1005/879 150/1004/878\nf 1609/2012/1686 1597/231/212 197/1685/1450\nf 1759/2013/1687 1570/2014/1688 1571/1966/1645\nf 870/1070/938 1608/1065/933 1607/2015/1689\nf 143/157/146 142/153/142 1719/2016/1690\nf 51/1936/1111 1590/1935/1107 2307/2017/1691\nf 2304/2018/1692 28/1285/1125 1588/1280/1120\nf 1098/2019/1180 1072/1304/1142 1612/1315/1151\nf 1065/1317/1153 1611/2020/1159 1613/2021/1190\nf 1124/2022/1212 1098/2023/1180 1614/2024/1150\nf 1117/1415/1221 1091/1371/1154 1613/1375/1190\nf 1150/1423/1229 1124/1405/1212 1616/1412/1186\nf 1117/1415/1221 1615/1374/1189 1617/2025/1239\nf 1150/1423/1229 1618/1411/1218 1620/1475/1269\nf 1143/1433/1237 1617/1435/1239 1619/1482/1275\nf 1176/1468/1263 1620/1475/1269 1622/1514/1303\nf 1195/1493/1283 1169/1477/1271 1619/1482/1275\nf 1621/1481/1274 1623/1500/1290 1226/1494/1284\nf 1202/1469/1264 1622/1514/1303 1624/1528/1316\nf 1228/1515/1304 1254/2026/1693 1626/1529/1317\nf 1247/1554/1338 1625/1542/1328 1623/1500/1290\nf 1273/1578/1359 1627/1555/1339 1625/1542/1328\nf 1254/2027/1693 1280/2028/1694 1628/1583/1363\nf 1306/2029/1695 1630/1612/1384 1628/1583/1363\nf 1273/1578/1359 1299/1606/1379 1629/1618/1389\nf 1314/1620/1390 1313/1589/1366 1338/1657/1427\nf 1343/1627/1397 1308/1610/1383 1309/1617/1388\nf 1294/1616/1387 1295/1619/1370 1631/1631/1401\nf 1629/1618/1389 1335/1624/1394 1347/1676/1443\nf 1301/1590/1367 1302/2030/1444 1349/2031/1405\nf 1306/2029/1695 1314/1620/1390 1337/1653/1423\nf 1630/1612/1384 1306/2029/1695 1345/1652/1422\nf 716/2009/1683 717/2032/1696 1497/2033/1697\nf 1588/1280/1120 1637/1932/1631 1517/1690/1455\nf 54/2034/1108 1590/2035/1107 1638/54/46\nf 89/1686/1451 1542/1950/1636 1639/94/85\nf 1548/2036/1698 1640/1959/1639 1592/156/145\nf 734/2037/1699 725/1202/1056 724/1201/1055\nf 1759/2013/1687 1813/1982/1660 1719/2016/1690\nf 1605/2038/1700 337/307/286 320/2039/325\nf 290/298/277 280/287/266 279/286/265\nf 288/2040/326 368/1877/330 336/1876/1602\nf 1584/2041/1701 342/366/340 315/327/303\nf 1839/2042/1702 1774/1906/1611 1493/2043/1703\nf 289/1980/1658 1561/1963/1642 1649/1962/1641\nf 1584/2041/1701 1581/388/356 343/367/341\nf 724/1201/1055 723/818/710 729/2044/1704\nf 1649/1962/1641 1656/2010/1684 1585/2045/1705\nf 735/2046/1706 729/2044/1704 723/818/710\nf 722/825/717 731/823/715 899/2047/1707\nf 898/2048/1708 899/2047/1707 731/823/715\nf 296/1998/1672 297/354/329 1562/353/328\nf 277/1875/1601 296/1998/1672 1563/1805/1554\nf 1560/1866/1595 1567/1868/1597 336/1876/1602\nf 1605/2038/1700 336/1876/1602 1567/1868/1597\nf 1641/1878/1603 1565/2049/1610 337/307/286\nf 162/2050/1709 185/2051/1710 204/301/280\nf 338/2052/287 1566/1960/1640 1561/2053/1642\nf 1452/2054/1711 898/2048/1708 730/822/714\nf 1453/1806/1555 726/820/712 1652/2055/1712\nf 1653/2056/1713 1652/2055/1712 726/820/712\nf 1654/2057/1714 1653/2056/1713 713/819/711\nf 1492/1865/1594 712/1902/1609 1655/2058/1715\nf 712/1902/1609 377/2000/1674 1768/2059/1716\nf 1577/2060/1717 1578/365/339 1585/2045/1705\nf 1651/2061/1718 901/2062/1719 1831/2063/1720\nf 1656/2010/1684 204/301/280 185/2051/1710\nf 1600/1969/1648 124/145/134 118/138/127\nf 1496/1912/1617 1497/2033/1697 717/2032/1696\nf 721/2064/1721 720/2065/1722 1495/1910/1615\nf 1610/1974/1653 1600/1969/1648 910/1210/1064\nf 720/2066/1722 718/2067/1723 1494/2068/1613\nf 718/2067/1723 719/2069/1724 1493/2070/1703\nf 1596/1979/1657 1610/1974/1653 1817/1209/1063\nf 1687/2071/1725 1715/2072/1726 1716/2073/1727\nf 719/2069/1724 1699/2074/1728 1698/2075/1729\nf 1695/2076/1730 1698/2075/1729 1699/2074/1728\nf 1696/2077/1731 1693/2078/1732 1692/2079/1733\nf 1693/2078/1732 1690/2080/1734 1689/2081/1735\nf 1687/2071/1725 1686/2082/1736 1689/2081/1735\nf 1686/2082/1736 1687/2071/1725 1664/2083/1737\nf 1808/2084/1738 916/1802/1551 1451/1801/1550\nf 1721/2085/1739 1672/2086/1740 1667/2087/1741\nf 132/147/136 126/141/130 1572/1970/1649\nf 126/141/130 120/140/129 1574/1971/1650\nf 1728/2088/1742 1717/2089/1743 1666/2090/1744\nf 1767/2091/1745 1574/1971/1650 120/140/129\nf 1725/2092/1746 1677/2093/1747 1678/2094/1748\nf 1717/2089/1743 1722/2095/1749 1674/2096/1750\nf 1682/2097/1751 1675/2098/1752 1720/2099/1753\nf 1723/2100/1754 1676/2101/1755 1677/2093/1747\nf 1675/2098/1752 1676/2101/1755 1723/2100/1754\nf 1726/2102/1756 1722/2095/1749 1679/2103/1757\nf 1735/2104/1758 1681/2105/1759 1678/2106/1748\nf 1680/2107/1760 1682/2097/1751 1727/2108/1761\nf 1677/2109/1747 1731/2110/1762 1730/2111/1763\nf 1676/2101/1755 1732/2112/1764 1731/2113/1762\nf 1835/2114/1765 1686/2115/1736 1662/2116/1766\nf 1690/2080/1734 1714/2117/1767 1715/2072/1726\nf 1835/2114/1765 1836/2118/1768 1689/2119/1735\nf 1836/2120/1768 1837/2121/1769 1692/2079/1733\nf 1765/2122/1770 1767/2091/1745 215/1968/1647\nf 183/1967/1646 908/1973/1652 1763/2123/1771\nf 1837/2124/1769 1838/2125/1772 1695/2126/1730\nf 1838/2125/1772 1839/2042/1702 1698/2127/1729\nf 1711/2128/1773 1712/2129/1774 269/2130/1775\nf 1712/2129/1774 1705/2131/1776 268/2132/1777\nf 258/2133/1778 257/262/241 264/2134/1779\nf 259/259/238 258/2133/1778 1697/2135/1780\nf 1601/264/243 259/259/238 1694/2136/1781\nf 1691/2137/1782 1688/2138/1783 260/1681/1446\nf 1688/2138/1783 1685/2139/1784 903/1682/1447\nf 1576/2140/1785 220/1001/875 903/1682/1447\nf 1713/2141/1786 1711/2128/1773 270/2142/1787\nf 1703/2143/1788 1702/2144/1789 252/1136/1002\nf 1704/2145/1790 1703/2143/1788 253/1135/1001\nf 1700/2146/1791 1706/2147/1792 241/257/236\nf 1701/2148/1793 1707/2149/1794 242/253/232\nf 1707/2149/1794 1700/2146/1791 240/255/234\nf 1706/2147/1792 1704/2145/1790 251/815/707\nf 1705/2131/1776 1708/2150/1795 265/2151/1796\nf 1708/2150/1795 1709/2152/1797 266/2153/249\nf 1709/2154/1797 1710/275/254 267/271/250\nf 1602/2155/1798 271/2156/1799 1714/2117/1767\nf 271/2156/1799 911/2157/1800 1715/2072/1726\nf 737/2158/1801 1716/2073/1727 1715/2072/1726\nf 1729/2159/1802 1719/2016/1690 142/153/142\nf 1664/2083/1737 1716/2073/1727 1718/2160/1803\nf 1681/2105/1759 1721/2161/1739 1724/2162/1804\nf 1683/2163/1805 1684/2164/1806 1717/2089/1743\nf 1668/2165/1807 1725/2092/1746 1724/2166/1804\nf 1684/2164/1806 1679/2103/1757 1722/2095/1749\nf 1727/2108/1761 1720/2099/1753 1670/2167/1808\nf 1723/2100/1754 1725/2092/1746 1668/2165/1807\nf 1720/2099/1753 1723/2100/1754 1669/2168/1809\nf 1673/2169/1810 1674/2096/1750 1722/2095/1749\nf 1726/2102/1756 1727/2108/1761 1671/2170/1811\nf 1675/2098/1752 1733/2171/1812 1732/2112/1764\nf 1761/2172/1813 1763/2123/1771 908/1973/1652\nf 1760/2173/1814 1761/2172/1813 1568/1965/1644\nf 1657/363/337 1760/2173/1814 1569/1964/1643\nf 1559/2174/1815 1660/2175/1816 1658/364/338\nf 1665/2176/1817 1659/2177/1818 1650/2178/1819\nf 1682/2097/1751 1734/2179/1820 1733/2171/1812\nf 1680/2107/1760 1736/2180/1821 1734/2179/1820\nf 1680/2107/1760 1679/2103/1757 1737/2181/1822\nf 1806/2182/1823 1735/2104/1758 1730/2111/1763\nf 1679/2103/1757 1684/2164/1806 1738/2183/1824\nf 1808/2184/1738 1737/2181/1822 1738/2183/1824\nf 1716/2073/1727 737/2158/1801 736/2185/1825\nf 1739/254/233 1741/256/235 247/1127/993\nf 1741/256/235 1742/258/237 248/1137/1003\nf 1743/276/255 1744/2186/251 273/2187/253\nf 1740/897/785 1744/272/251 267/271/250\nf 265/2151/1796 266/2153/249 1743/276/255\nf 1742/258/237 1755/816/708 983/1232/1079\nf 270/2142/1787 269/2130/1775 1746/976/851\nf 269/2130/1775 268/2132/1777 1747/978/853\nf 1602/2155/1798 270/2142/1787 1745/975/850\nf 268/2132/1777 265/2151/1796 1749/988/863\nf 737/2158/1801 1751/995/869 1750/2188/1826\nf 737/2158/1801 911/2157/1800 1752/1020/890\nf 985/1180/1041 1754/1134/1000 1753/2189/1827\nf 983/1232/1079 1755/816/708 1754/1134/1000\nf 1748/2011/1685 1752/1020/890 911/2157/1800\nf 271/2156/1799 1602/2155/1798 1756/983/858\nf 1750/2188/1826 895/831/723 894/830/722\nf 1734/2190/1820 1805/1212/1066 1804/1213/1067\nf 1758/1984/1662 1642/2191/1828 1594/2006/1680\nf 1642/2191/1828 1757/1211/1065 144/2192/1829\nf 1571/1966/1645 1596/1979/1657 1816/1983/1661\nf 120/140/129 124/145/134 1600/1969/1648\nf 1662/2193/1766 1664/2083/1737 1663/2194/1830\nf 1651/2061/1718 1650/2178/1819 1659/2177/1818\nf 1577/2060/1717 185/2051/1710 1760/2173/1814\nf 1659/2177/1818 1665/2176/1817 1654/2057/1714\nf 1665/2176/1817 1666/2090/1744 1653/2056/1713\nf 1761/2172/1813 1760/2173/1814 185/2051/1710\nf 162/2050/1709 1762/2195/1831 1763/2123/1771\nf 1666/2090/1744 1674/2096/1750 1652/2055/1712\nf 1674/2096/1750 1673/2169/1810 1452/2054/1711\nf 1762/2195/1831 162/2050/1709 198/2008/1682\nf 1673/2169/1810 1671/2170/1811 898/2048/1708\nf 1762/2195/1831 1764/2196/1832 1765/2122/1770\nf 899/2047/1707 898/2048/1708 1671/2170/1811\nf 1598/2007/1681 203/291/270 1764/2196/1832\nf 1766/2197/1833 1764/2196/1832 203/291/270\nf 163/1972/1651 1766/2197/1833 199/290/269\nf 1767/2091/1745 1765/2122/1770 1764/2196/1832\nf 1766/2197/1833 163/1972/1651 1574/1971/1650\nf 735/2046/1706 899/2047/1707 1670/2167/1808\nf 729/2044/1704 735/2046/1706 1669/2168/1809\nf 1668/2165/1807 1667/2087/1741 732/2198/1834\nf 1672/2086/1740 734/2037/1699 732/2198/1834\nf 901/2062/1719 1768/2059/1716 1840/2199/1835\nf 1497/2033/1697 1496/1912/1617 1771/1911/1616\nf 2055/1080/948 2054/2200/1836 1776/2201/1837\nf 1778/2202/1838 1777/2203/1839 1793/2204/943\nf 1779/2205/1840 1778/2202/1838 1792/2206/1841\nf 2060/2207/1842 2057/2208/1843 1779/2205/1840\nf 2063/2209/1844 2060/2207/1842 1780/2210/1845\nf 2067/2211/1846 2063/2209/1844 1781/2212/1847\nf 2071/2213/1848 2067/2211/1846 1782/2214/1849\nf 2068/1175/1036 2071/2213/1848 1783/2215/1850\nf 1787/2216/1851 1786/2217/1852 1785/2218/1853\nf 1780/2210/1845 1779/2205/1840 1791/1084/952\nf 1777/2219/1839 1776/2220/1837 1794/1076/944\nf 1783/2215/1850 1782/2214/1849 1788/1087/955\nf 1784/2221/1854 1783/2215/1850 1795/1088/956\nf 1792/2206/1841 1793/2204/943 1024/2222/1052\nf 1781/2212/1847 1780/2210/1845 1790/1083/951\nf 1782/2214/1849 1781/2212/1847 1789/1086/954\nf 1791/1084/952 1792/2206/1841 1043/2223/1080\nf 1003/1074/942 934/1153/1019 1786/2217/1852\nf 901/2062/1719 1659/2177/1818 1655/2058/1715\nf 1798/2224/1855 1796/2225/1856 1797/2226/1857\nf 1728/2088/1742 1650/2178/1819 1798/2224/1855\nf 1796/2225/1856 1798/2224/1855 1650/2178/1819\nf 1842/2227/1858 1796/2225/1856 1651/2061/1718\nf 1799/2228/1859 1800/2229/1860 1683/2163/1805\nf 1800/2229/1860 1738/2183/1824 1684/2164/1806\nf 1733/2230/1812 1804/1213/1067 1803/2231/1068\nf 1732/2232/1764 1803/1215/1068 1802/1216/1069\nf 1731/2110/1762 1802/1216/1069 1801/2233/1861\nf 1736/2234/1821 1807/1803/1552 1805/1212/1066\nf 1737/2181/1822 1808/2184/1738 1807/2235/1552\nf 733/2236/1862 1806/2182/1823 1801/2233/1861\nf 916/1802/1551 1808/2084/1738 1809/2237/1863\nf 1661/2238/1864 1663/2239/1830 1811/2240/1865\nf 1814/2241/1866 1815/2242/1867 1643/2243/1868\nf 1738/2183/1824 1800/2229/1860 1810/2244/1869\nf 1815/2242/1867 1570/2014/1688 193/2245/1870\nf 1809/2246/1863 1810/2244/1869 1718/2247/1803\nf 1815/2242/1867 1814/2241/1866 1660/2175/1816\nf 1570/2014/1688 1815/2242/1867 1559/2174/1815\nf 1810/2244/1869 1811/2240/1865 1663/2239/1830\nf 738/1049/917 1809/2237/1863 736/2185/1825\nf 1811/2240/1865 1810/2244/1869 1800/2229/1860\nf 1816/1983/1661 1817/1209/1063 1642/2191/1828\nf 1799/2228/1859 1797/2226/1857 1812/2248/1871\nf 1575/2249/1872 1643/2243/1868 220/1001/875\nf 214/1002/876 220/1001/875 1643/2243/1868\nf 193/2245/1870 909/2250/1873 906/1011/885\nf 909/2250/1873 192/2251/1874 184/1008/882\nf 139/158/147 184/1008/882 192/2251/1874\nf 140/2252/1875 78/2253/1876 77/159/148\nf 1545/88/79 77/159/148 78/2253/1876\nf 1544/2254/1877 40/2255/1878 39/41/35\nf 38/43/37 39/41/35 40/2255/1878\nf 1519/1933/1632 38/43/37 41/2256/1879\nf 1713/2141/1786 1714/2117/1767 1690/2080/1734\nf 1693/2078/1732 1696/2077/1731 1711/2128/1773\nf 1696/2077/1731 1699/2074/1728 1712/2129/1774\nf 1705/2131/1776 1712/2129/1774 1699/2074/1728\nf 1708/2150/1795 1705/2131/1776 719/2069/1724\nf 1709/2152/1797 1708/2150/1795 718/2067/1723\nf 1710/2257/254 1709/2152/1797 720/2066/1722\nf 1342/1644/1414 1309/1617/1388 1312/1595/1372\nf 1275/1566/1348 1276/2258/1880 1302/2030/1444\nf 1275/1566/1348 1249/1547/1333 1250/2259/1881\nf 1250/2259/1881 1249/1547/1333 1223/1502/1292\nf 1224/2260/1882 1223/2261/1292 1198/2262/1258\nf 1172/1450/1249 1173/2263/1883 1199/2264/1884\nf 1146/1449/1208 1147/2265/1885 1173/2263/1883\nf 1120/2266/1207 1121/2267/1886 1147/2265/1885\nf 1120/1400/1207 1094/1348/1133 1095/2268/1887\nf 1068/1294/1132 1069/2269/1888 1095/2270/1887\nf 1069/2269/1888 1068/1294/1132 2302/2271/1119\nf 1520/2272/1889 42/2273/1890 37/1278/1118\nf 721/2064/1721 717/2032/1696 1701/2148/1793\nf 1707/2149/1794 1701/2148/1793 717/2032/1696\nf 1700/2146/1791 1707/2149/1794 716/2009/1683\nf 1706/2147/1792 1700/2146/1791 715/1989/1667\nf 714/1988/1666 244/1987/1665 1704/2145/1790\nf 244/1987/1665 246/1986/1664 1703/2143/1788\nf 246/1986/1664 245/1985/1663 1702/2144/1789\nf 1632/1630/1400 1341/1638/1408 1310/1608/1381\nf 1276/2274/1880 1277/1614/1364 1303/1613/1385\nf 1288/1563/1346 1314/1620/1390 1306/2029/1695\nf 909/2250/1873 193/2245/1870 1570/2014/1688\nf 1759/2013/1687 1729/2159/1802 192/2251/1874\nf 140/2252/1875 192/2251/1874 1729/2159/1802\nf 141/152/141 79/93/84 78/2253/1876\nf 910/1210/1064 118/138/127 113/132/121\nf 1757/1211/1065 113/132/121 108/124/113\nf 144/2192/1829 108/124/113 100/123/112\nf 1634/1651/1421 1341/1638/1408 1326/1637/1407\nf 1825/2275/1891 1325/2276/1892 1328/1646/1416\nf 1326/2277/1407 1324/2278/1398 1325/2279/1892\nf 1823/1636/1406 1824/1629/1399 1324/1628/1398\nf 1823/2280/1406 1822/2281/1402 1331/1668/1437\nf 1323/2282/1418 1327/1669/1438 1331/1668/1437\nf 1327/1669/1438 1323/2282/1418 1821/2283/1430\nf 1820/2284/1439 1329/1658/1428 1826/1674/1441\nf 1330/1654/1424 1329/1658/1428 1820/2284/1439\nf 1322/1663/1432 1330/1654/1424 1320/2285/1396\nf 1333/1665/1434 1322/1663/1432 1332/2286/1395\nf 1316/2287/1412 1321/1656/1426 1333/1665/1434\nf 1317/2288/1893 1819/1641/1411 1321/1656/1426\nf 1319/1633/1403 1819/1641/1411 1317/2288/1893\nf 1250/2289/1881 1251/1532/1320 1277/1586/1364\nf 1251/1532/1320 1250/2289/1881 1224/2260/1882\nf 1199/2264/1884 1200/1503/1293 1225/1533/1321\nf 1200/1503/1293 1199/2264/1884 1173/2263/1883\nf 1147/2265/1885 1148/1397/1206 1174/1458/1255\nf 1121/2267/1886 1122/1398/1172 1148/1397/1206\nf 1096/1344/1173 1122/1343/1172 1121/2290/1886\nf 1096/2291/1173 1095/2270/1887 1069/2269/1888\nf 1070/1290/1128 1069/2269/1888 2301/2292/1894\nf 1521/1934/39 45/1274/1114 42/2273/1890\nf 1520/2272/1889 41/2256/1879 44/47/40\nf 41/2256/1879 40/2255/1878 43/48/41\nf 1546/92/83 43/48/41 40/2255/1878\nf 1544/2254/1877 78/2253/1876 79/93/84\nf 82/2005/1679 100/123/112 1533/110/100\nf 75/84/75 52/2004/1678 1548/2036/1698\nf 52/2004/1678 75/84/75 74/1943/1633\nf 53/2003/1677 74/1943/1633 1531/86/77\nf 73/1258/1101 54/2034/1108 1524/2002/1676\nf 1080/2293/1169 1073/2294/1152 2291/2295/1109\nf 1099/2296/1187 1073/1316/1152 1080/1335/1169\nf 1125/2297/1219 1099/2296/1187 1106/1385/1198\nf 1132/1395/1197 1158/1394/1205 1151/2298/1234\nf 1151/2298/1234 1158/1394/1205 1184/1455/1252\nf 1210/1497/1287 1203/2299/1270 1177/2300/1235\nf 1236/2301/1286 1228/2302/1304 1203/2303/1270\nf 1254/2027/1693 1228/2302/1304 1236/2301/1286\nf 1262/2304/1336 1288/1563/1346 1280/2028/1694\nf 1661/2238/1864 1833/2305/1895 1834/2306/1896\nf 1796/2225/1856 1842/2227/1858 1841/2307/1897\nf 1797/2226/1857 1841/2307/1897 1843/2308/1898\nf 1812/2248/1871 1843/2308/1898 1833/2305/1895\nf 1768/2059/1716 377/2000/1674 373/2309/1899\nf 375/2310/1900 373/2309/1899 377/2000/1674\nf 364/391/359 409/434/393 412/2311/1901\nf 451/480/435 455/401/368 358/400/367\nf 380/1864/1593 381/821/713 362/472/427\nf 1855/487/442 356/478/433 357/2312/1902\nf 457/479/434 356/478/433 1844/2313/1903\nf 1850/490/445 1851/2314/1904 375/2310/1900\nf 487/2315/492 481/2316/491 1845/2317/489\nf 371/2318/361 1845/2317/489 481/2316/491\nf 1846/1198/488 1847/2319/1905 493/2320/669\nf 1455/1810/1559 1848/1807/1556 374/397/364\nf 1849/2321/1906 370/471/426 403/824/716\nf 404/473/428 362/472/427 1848/1807/1556\nf 408/433/392 369/390/358 1849/2321/1906\nf 378/1999/1673 364/391/359 376/2322/1907\nf 418/442/401 420/444/403 470/2323/1908\nf 498/539/494 418/442/401 450/485/440\nf 505/484/439 449/545/437 416/2324/398\nf 414/437/396 416/439/398 449/482/437\nf 412/2311/1901 414/437/396 448/481/436\nf 376/2322/1907 412/2311/1901 411/491/446\nf 1840/2199/1835 373/2309/1899 1647/1992/1670\nf 1851/2314/1904 1647/1992/1670 373/2309/1899\nf 1646/1991/1669 1585/2045/1705 1831/2063/1720\nf 1585/2045/1705 1578/365/339 1832/2325/1909\nf 1658/364/338 1842/2227/1858 1832/2325/1909\nf 1660/2175/1816 1841/2307/1897 1842/2227/1858\nf 1814/2241/1866 1843/2308/1898 1841/2307/1897\nf 1843/2308/1898 1814/2241/1866 1575/2249/1872\nf 1576/2140/1785 1834/2306/1896 1833/2305/1895\nf 1852/2326/1910 1853/403/370 358/400/367\nf 357/2312/1902 358/400/367 1853/403/370\nf 356/478/433 1855/487/442 1856/2327/1911\nf 1648/488/443 1855/487/442 1854/435/394\nf 517/2328/1912 1870/562/507 1872/561/506\nf 1871/546/497 1863/486/441 454/494/449\nf 1873/2329/1913 1874/2330/1914 1844/2313/1903\nf 1862/483/438 1871/2331/497 506/547/448\nf 1864/492/447 1861/516/471 452/496/451\nf 1874/2330/1914 1864/492/447 410/517/472\nf 1861/516/471 1862/483/438 453/497/452\nf 1872/561/506 1863/486/441 450/485/440\nf 517/2332/1912 534/2333/1915 1869/588/526\nf 534/2333/1915 551/2334/1916 1860/595/533\nf 551/2334/1916 568/2335/1917 1859/615/551\nf 568/2335/1917 585/2336/1918 1858/632/568\nf 585/2336/1918 602/2337/1919 1857/668/599\nf 602/2337/1919 619/2338/1920 1868/678/606\nf 619/2338/1920 636/2339/1921 1867/702/626\nf 636/2340/1921 653/2341/1922 1866/731/645\nf 653/2341/1922 670/2342/1923 1865/749/659\nf 670/2342/1923 687/793/695 1876/780/684\nf 704/810/705 1875/2343/703 1876/2344/684\nf 1851/2314/1904 1850/490/445 1874/2330/1914\nf 1647/1992/1670 1645/1990/1668 361/330/306\nf 1851/2314/1904 1873/2329/1913 1645/1990/1668\nf 1856/2327/1911 1583/489/444 1645/1990/1668\nf 701/814/686 707/784/688 1875/2343/703\nf 706/783/687 703/2345/704 1875/2343/703\nf 709/804/698 710/803/701 702/2346/700\nf 706/783/687 705/787/690 709/804/698\nf 711/786/689 708/2347/699 709/804/698\nf 662/756/665 679/768/674 687/793/695\nf 670/2342/1923 653/2341/1922 645/739/651\nf 653/2341/1922 636/2340/1921 628/2348/632\nf 636/2339/1921 619/2338/1920 611/684/611\nf 619/2338/1920 602/2337/1919 594/644/580\nf 577/638/574 594/644/580 602/2337/1919\nf 585/2336/1918 568/2335/1917 560/621/557\nf 568/2335/1917 551/2334/1916 543/602/539\nf 551/2334/1916 534/2333/1915 526/589/527\nf 534/2333/1915 517/2332/1912 422/447/405\nf 420/444/403 422/2349/405 517/2328/1912\nf 1834/2306/1896 1576/2140/1785 1685/2139/1784\nf 1836/2118/1768 1835/2114/1765 1685/2139/1784\nf 1837/2124/1769 1836/2118/1768 1688/2138/1783\nf 1838/2125/1772 1837/2124/1769 1691/2137/1782\nf 1839/2042/1702 1838/2125/1772 1694/2136/1781\nf 1774/1906/1611 1839/2042/1702 1697/2135/1780\nf 264/2134/1779 261/268/247 1773/1907/1612\nf 261/268/247 262/267/246 1772/1909/1614\nf 262/267/246 263/266/245 1771/1911/1616\nf 1770/1913/1618 1771/1911/1616 263/266/245\nf 233/269/248 232/246/225 1769/1914/1619\nf 232/246/225 230/248/227 897/1916/1621\nf 230/248/227 231/244/223 1828/1918/1623\nf 231/244/223 237/249/228 1775/1920/1625\nf 237/249/228 239/251/230 1829/1922/1627\nf 239/251/230 238/2350/1924 1830/1924/1629\nf 1884/1072/940 1883/1116/982 962/1112/980\nf 959/1106/974 1888/1118/984 1887/1071/939\nf 1023/2351/977 1891/2352/1046 1889/2353/986\nf 958/1102/970 1885/1121/987 1888/1118/984\nf 1886/2354/1925 1890/1117/983 1007/1101/969\nf 1892/2355/1084 1891/2356/1046 1023/1109/977\nf 1883/1116/982 1892/2355/1084 1047/1194/1051\nf 874/2357/1926 964/1064/932 1886/2354/1925\nf 957/1156/1022 875/1229/1076 1882/2358/1927\nf 1005/1155/1021 944/985/860 937/2359/1928\nf 943/1226/1073 1005/1155/1021 1004/2360/1929\nf 2072/2361/1930 1904/2362/1931 274/2363/996\nf 1012/1162/1027 989/1161/1026 1906/2364/1932\nf 1905/2365/1933 1906/2364/1932 989/1161/1026\nf 1905/2365/1933 1909/2366/1934 1910/2367/1935\nf 2073/2368/1936 1908/2369/1937 1904/2362/1931\nf 1907/2370/1938 1906/2364/1932 1910/2367/1935\nf 1913/2371/1939 1914/2372/1940 1910/2367/1935\nf 2074/2373/1941 1912/2374/1942 1908/2369/1937\nf 1911/2375/1943 1910/2367/1935 1914/2372/1940\nf 1786/2217/1852 1920/2376/1944 1919/2377/1945\nf 2069/1176/1037 2075/2378/1946 1918/2379/1947\nf 885/2380/1948 1916/2381/1949 1917/2382/1950\nf 1920/2376/1944 1786/2217/1852 934/1153/1019\nf 739/1150/1016 933/1684/1449 1916/2381/1949\nf 876/1227/1074 943/1226/1073 936/1177/1038\nf 871/979/854 872/278/257 1908/2369/1937\nf 1908/2369/1937 872/278/257 272/277/256\nf 1913/2371/1939 1909/2366/1934 980/2383/1951\nf 988/1144/1010 979/982/857 1009/2384/1952\nf 1009/2384/1952 980/2383/1951 1909/2366/1934\nf 273/2187/253 274/2363/996 1904/2362/1931\nf 868/977/852 871/979/854 1912/2374/1942\nf 869/984/859 868/977/852 1921/2385/1953\nf 866/1063/931 874/2357/1926 2258/2386/1954\nf 877/1228/1075 876/1227/1074 2259/2387/1955\nf 1607/2015/1689 860/1066/934 2260/2388/1956\nf 2240/2389/1957 1927/2390/1958 1932/2391/1959\nf 933/1684/1449 867/1683/1448 2262/2392/1960\nf 2272/2393/1961 1920/2376/1944 1917/2382/1950\nf 1934/2394/1962 1943/2395/1963 2245/2396/1964\nf 1942/2397/1965 1941/2398/1966 2247/2399/1967\nf 1915/2400/1968 1914/2372/1940 2265/2401/1969\nf 860/1066/934 1921/2385/1953 2273/2402/1970\nf 2252/2403/1971 1925/2404/1972 1935/2405/1973\nf 1930/2406/1974 1938/2407/1975 2253/2408/1976\nf 1935/2409/1973 1936/2410/1977 2248/2411/1978\nf 876/1227/1074 1918/2379/1947 2267/2412/1979\nf 1938/2413/1975 1939/2414/1980 2243/2415/1981\nf 2076/2416/1982 1934/2394/1962 2246/2417/1983\nf 2250/2418/1984 1933/2419/1985 1927/2390/1958\nf 2258/2386/1954 874/2357/1926 1882/2358/1927\nf 1931/2420/1986 1924/2421/1987 2241/2422/1988\nf 2077/2423/1989 1940/2424/1990 2254/2425/1991\nf 1937/2426/1992 1936/2410/1977 1958/2427/1993\nf 1930/2428/1974 1924/2421/1987 1946/2429/1994\nf 1922/2430/1995 1943/2431/1963 1965/2432/1996\nf 1964/2433/1997 1963/2434/1998 1941/2398/1966\nf 1957/2435/1999 1958/2427/1993 1936/2410/1977\nf 1953/2436/2000 1931/2420/1986 1922/2430/1995\nf 1933/2437/1985 1955/2438/2001 1949/2439/2002\nf 1952/2440/2003 1960/2441/2004 1938/2442/1975\nf 2078/2443/2005 1956/2444/2006 1934/2445/1962\nf 1948/2446/2007 1926/2447/2008 1932/2448/1959\nf 1951/2449/2009 1929/2450/2010 1928/2451/2011\nf 1928/2451/2011 1940/2424/1990 1962/2452/2012\nf 1960/2441/2004 1961/2453/2013 1939/2454/1980\nf 1927/2455/1958 1949/2456/2002 1954/2457/2014\nf 1931/2420/1986 1953/2436/2000 1946/2429/1994\nf 1947/2458/2015 1957/2435/1999 1935/2409/1973\nf 2077/2423/1989 2079/2459/2016 1962/2452/2012\nf 1923/2460/2017 1926/2447/2008 1948/2446/2007\nf 1956/2461/2006 1965/2432/1996 1943/2431/1963\nf 1942/2397/1965 1939/2414/1980 1961/2462/2013\nf 1969/2463/2018 1979/2464/2019 1957/2465/1999\nf 2081/2466/2020 1984/2467/2021 1962/2468/2012\nf 1945/2469/2022 1948/2470/2007 1970/2471/2023\nf 1978/2472/2024 1987/2473/2025 1965/2474/1996\nf 1964/2475/1997 1961/2453/2013 1983/2476/2026\nf 1959/2477/2027 1958/2427/1993 1980/2478/2028\nf 1974/2479/2029 1952/2480/2003 1946/2429/1994\nf 1944/2481/2030 1965/2474/1996 1987/2473/2025\nf 1986/2482/2031 1985/2483/2032 1963/2484/1998\nf 1979/2485/2019 1980/2478/2028 1958/2427/1993\nf 1975/2486/2033 1953/2487/2000 1944/2488/2030\nf 1955/2489/2001 1977/2490/2034 1971/2491/2035\nf 1952/2480/2003 1974/2479/2029 1982/2492/2036\nf 2080/2493/2037 1978/2494/2024 1956/2444/2006\nf 1970/2495/2023 1948/2496/2007 1954/2497/2014\nf 1973/2498/2038 1951/2499/2009 1950/2500/2039\nf 1972/2501/2040 1950/2502/2039 1962/2468/2012\nf 1982/2503/2036 1983/2476/2026 1961/2453/2013\nf 1971/2491/2035 1976/2504/2041 1954/2505/2014\nf 1953/2436/2000 1975/2506/2033 1968/2507/2042\nf 2082/2508/2043 2000/2509/2044 2171/2510/2045\nf 2004/2511/2046 2005/2512/2047 2168/2513/2048\nf 1993/2514/2049 1998/2515/2050 2124/2516/2051\nf 2183/2517/2052 1997/2518/2053 1990/2519/2054\nf 1991/2520/2055 2001/2521/2056 2164/2522/2057\nf 2083/2523/2058 2006/2524/2059 2178/2525/2060\nf 2000/2509/2044 2009/2526/2061 2120/2527/2062\nf 2008/2528/2063 2007/2529/2064 2181/2530/2065\nf 2001/2521/2056 2002/2531/2066 2180/2532/2067\nf 2163/2533/2068 1999/2534/2069 1993/2514/2049\nf 2127/2535/2070 1996/2536/2071 2004/2537/2046\nf 2219/2538/2072 1988/2539/2073 2009/2540/2061\nf 2222/2541/2074 1997/2542/2053 1988/2543/2073\nf 2226/2544/2075 1992/2545/2076 1998/2546/2050\nf 2227/2547/2077 1995/2548/2078 1994/2549/2079\nf 1994/2549/2079 2006/2524/2059 2217/2550/2080\nf 1989/2551/2081 1992/2545/2076 2226/2544/2075\nf 2008/2528/2063 2005/2552/2047 2228/2553/2082\nf 2003/2554/2083 2002/2531/2066 2221/2555/2084\nf 2213/2556/2085 1996/2557/2071 1990/2519/2054\nf 2150/2558/2086 2129/2559/2087 2041/2560/2088\nf 2032/2561/2089 2123/2562/2090 2045/2563/2091\nf 2053/2564/2092 2047/2565/2093 2131/2566/2094\nf 2150/2567/2086 2049/2568/2095 2087/2569/2096\nf 2034/2570/2097 2038/2571/2098 2139/2572/2099\nf 2046/2573/2100 2130/2574/2101 2155/2575/2102\nf 2154/2576/2103 2051/2577/2104 2039/2578/2105\nf 2129/2579/2087 2128/2580/2106 2040/2581/2107\nf 2155/2575/2102 2131/2566/2094 2047/2565/2093\nf 2149/2582/2108 2048/2583/2109 2089/2584/2110\nf 2151/2585/2111 2050/2586/2112 2051/2577/2104\nf 2086/2587/2113 2159/2588/2114 2122/2589/2115\nf 2033/2590/2116 2140/2591/2117 2039/2578/2105\nf 2051/2577/2104 2016/2592/2118 2028/2593/2119\nf 2050/2586/2112 2017/2594/2120 2016/2592/2118\nf 2014/2595/2121 2020/2596/2122 2047/2597/2093\nf 2035/2598/2123 2045/2563/2091 2022/2599/2124\nf 2084/2600/2125 2025/2601/2126 2042/2602/2127\nf 2018/2603/2128 2049/2604/2095 2041/2605/2088\nf 2021/2606/2129 2046/2607/2100 2052/2608/2130\nf 2048/2583/2109 2019/2609/2131 2010/2610/2132\nf 2044/2611/2133 2043/2612/2134 2024/2613/2135\nf 2030/2614/2136 2037/2615/2137 2038/2571/2098\nf 2010/2610/2132 2031/2616/2138 2036/2617/2139\nf 2049/2604/2095 2018/2603/2128 2012/2618/2140\nf 2025/2601/2126 2024/2613/2135 2043/2612/2134\nf 2037/2619/2137 2030/2620/2136 2027/2621/2141\nf 2045/2563/2091 2036/2617/2139 2031/2616/2138\nf 2011/2622/2142 2014/2595/2121 2053/2623/2092\nf 2085/2624/2143 2034/2570/2097 2039/2578/2105\nf 2086/2587/2113 2044/2625/2133 2023/2626/2144\nf 2182/2627/2145 2164/2522/2057 1979/2464/2019\nf 2164/2522/2057 2180/2532/2067 1980/2628/2028\nf 1981/2629/2146 1980/2628/2028 2180/2532/2067\nf 2080/2493/2037 1981/2630/2146 2125/2631/2147\nf 2148/2632/2148 2171/2633/2045 1978/2494/2024\nf 2171/2510/2045 2120/2527/2062 1987/2473/2025\nf 1966/2634/2149 1987/2473/2025 2120/2527/2062\nf 2056/1082/950 2055/1080/948 1777/2203/1839\nf 2057/2208/1843 2056/1082/950 1778/2202/1838\nf 2061/1140/1006 2058/1139/1005 1010/1159/1025\nf 1011/1158/1024 1012/2635/1027 2062/1141/1007\nf 2058/1139/1005 2059/2636/2150 1013/1165/1029\nf 2066/1242/1030 2064/2637/2151 1014/1189/1047\nf 1784/2221/1854 1785/2218/1853 2069/1176/1037\nf 982/1138/1004 2065/1196/1053 2059/2636/2150\nf 1015/1168/1031 2066/1167/1030 2070/2638/2152\nf 227/1231/1078 2070/2638/2152 2065/1196/1053\nf 1029/1079/947 942/2639/1028 2054/2200/1836\nf 940/1133/999 941/1081/949 2057/2208/1843\nf 939/994/868 940/1133/999 2060/2207/1842\nf 938/987/862 939/994/868 2063/2209/1844\nf 937/2359/1928 938/987/862 2067/2211/1846\nf 1004/2360/1929 937/2359/1928 2071/2213/1848\nf 1907/2370/1938 2072/2361/1930 2062/2640/1007\nf 1911/2375/1943 2073/2368/1936 2072/2361/1930\nf 1915/2400/1968 2074/2373/1941 2073/2368/1936\nf 1785/2218/1853 1919/2377/1945 2075/2378/1946\nf 1937/2426/1992 2076/2641/1982 2255/2642/2153\nf 1941/2398/1966 2077/2423/1989 2256/2643/2154\nf 1959/2477/2027 2078/2443/2005 2076/2641/1982\nf 1963/2434/1998 2079/2459/2016 2077/2423/1989\nf 1985/2483/2032 2081/2466/2020 2079/2644/2016\nf 1981/2630/2146 2080/2493/2037 2078/2443/2005\nf 2003/2554/2083 2082/2508/2043 2148/2645/2148\nf 2007/2529/2064 2083/2523/2058 2147/2646/2155\nf 2019/2609/2131 2048/2583/2109 2087/2569/2096\nf 2015/2647/2156 2052/2608/2130 2047/2597/2093\nf 2041/2648/2088 2040/2649/2107 2027/2621/2141\nf 2034/2570/2097 2085/2624/2143 2029/2650/2157\nf 1966/2651/2149 2126/2652/2158 2183/2653/2052\nf 2165/2654/2159 1968/2507/2042 1975/2506/2033\nf 2210/2655/2160 2094/2656/2161 2093/2657/2162\nf 2096/2658/2163 2095/2659/2164 2221/2555/2084\nf 2212/2660/2165 2099/2661/2166 2098/2662/2167\nf 2213/2556/2085 2101/2663/2168 2100/2664/2169\nf 2112/2665/2170 2102/2666/2171 2225/2667/2172\nf 2100/2664/2169 2109/2668/2173 2228/2669/2082\nf 2223/2670/2174 2098/2662/2167 2104/2671/2175\nf 2222/2672/2074 2097/2673/2176 2110/2674/2177\nf 2090/2675/2178 2096/2658/2163 2211/2676/2179\nf 2113/2677/2180 2108/2678/2181 2217/2550/2080\nf 2102/2666/2171 2091/2679/2182 2209/2680/2183\nf 2103/2681/2184 2112/2665/2170 2231/2682/2185\nf 2220/2683/2186 2093/2657/2162 2113/2684/2180\nf 1996/2557/2071 2127/2685/2070 2165/2654/2159\nf 1968/2507/2042 2165/2654/2159 2127/2685/2070\nf 2177/2686/2187 1982/2492/2036 1974/2479/2029\nf 2177/2686/2187 2168/2513/2048 1983/2687/2026\nf 1986/2688/2031 1983/2687/2026 2168/2513/2048\nf 2119/2689/2188 2181/2690/2065 1985/2691/2032\nf 2179/2692/2189 2178/2525/2060 2006/2524/2059\nf 2081/2693/2020 1985/2691/2032 2181/2690/2065\nf 2122/2694/2115 2142/2695/2190 2043/2612/2134\nf 2089/2584/2110 2036/2617/2139 2137/2696/2191\nf 2119/2689/2188 2168/2513/2048 2005/2512/2047\nf 2088/2697/2192 2053/2564/2092 2118/2698/2193\nf 1997/2699/2053 2183/2700/2052 2126/2701/2158\nf 2169/2702/2194 2179/2692/2189 1994/2549/2079\nf 2147/2703/2155 2178/2704/2060 1984/2705/2021\nf 2170/2706/2195 2124/2516/2051 1998/2515/2050\nf 1984/2705/2021 2178/2704/2060 2179/2707/2189\nf 2125/2708/2147 2180/2532/2067 2002/2531/2066\nf 2126/2709/2158 2120/2710/2062 2009/2540/2061\nf 1972/2711/2040 2179/2707/2189 2169/2712/2194\nf 2121/2713/2196 2170/2706/2195 1992/2714/2076\nf 2176/2715/2197 1971/2491/2035 1977/2490/2034\nf 2124/2716/2051 1976/2504/2041 1971/2491/2035\nf 1976/2504/2041 2124/2716/2051 2170/2717/2195\nf 1967/2718/2198 1970/2719/2023 2170/2720/2195\nf 2138/2721/2199 2139/2572/2099 2038/2571/2098\nf 2035/2598/2123 2042/2602/2127 2141/2722/2200\nf 2042/2602/2127 2043/2612/2134 2142/2695/2190\nf 2048/2583/2109 2149/2582/2108 2160/2723/2201\nf 2141/2722/2200 2142/2695/2190 2117/2724/2202\nf 2123/2562/2090 2137/2696/2191 2036/2617/2139\nf 2141/2722/2200 2116/2725/2203 2157/2726/2204\nf 2157/2726/2204 2173/2727/2205 2123/2562/2090\nf 2173/2727/2205 2115/2728/2206 2137/2696/2191\nf 2134/2729/2207 2137/2696/2191 2115/2728/2206\nf 2149/2582/2108 2134/2729/2207 2162/2730/2208\nf 2152/2731/2209 2175/2732/2210 2160/2723/2201\nf 2150/2567/2086 2160/2723/2201 2175/2732/2210\nf 2153/2733/2211 2146/2734/2212 2129/2579/2087\nf 2146/2734/2212 2145/2735/2213 2128/2580/2106\nf 2138/2721/2199 2128/2580/2106 2145/2735/2213\nf 2037/2615/2137 2040/2581/2107 2128/2580/2106\nf 2114/2736/2214 2167/2737/2215 2139/2572/2099\nf 2033/2590/2116 2139/2572/2099 2167/2737/2215\nf 2158/2738/2216 2166/2739/2217 2140/2591/2117\nf 2154/2576/2103 2140/2591/2117 2166/2739/2217\nf 2154/2576/2103 2135/2740/2218 2132/2741/2219\nf 2136/2742/2220 2155/2575/2102 2130/2574/2101\nf 2144/2743/2221 2131/2566/2094 2155/2575/2102\nf 2118/2698/2193 2131/2566/2094 2144/2743/2221\nf 2133/2744/2222 2118/2698/2193 2156/2745/2223\nf 2174/2746/2224 2172/2747/2225 2122/2748/2115\nf 2172/2749/2225 2117/2724/2202 2142/2695/2190\nf 2205/2750/2226 2206/2751/2227 2166/2739/2217\nf 2199/2752/2228 2197/2753/2229 2117/2724/2202\nf 2011/2622/2142 2013/2754/2230 2090/2755/2178\nf 2193/2756/2231 2205/2750/2226 2158/2738/2216\nf 2193/2756/2231 2167/2737/2215 2114/2736/2214\nf 2088/2757/2192 2086/2587/2113 2013/2754/2230\nf 2197/2753/2229 2186/2758/2232 2185/2759/2233\nf 2203/2760/2234 2186/2758/2232 2184/2761/2235\nf 2159/2762/2114 2133/2744/2222 2161/2763/2236\nf 2198/2764/2237 2185/2759/2233 2187/2765/2238\nf 2200/2766/2239 2189/2767/2240 2187/2765/2238\nf 2196/2768/2241 2175/2732/2210 2152/2731/2209\nf 2185/2759/2233 2202/2769/2242 2195/2770/2243\nf 2133/2771/2222 2159/2588/2114 2086/2587/2113\nf 2186/2758/2232 2203/2760/2234 2202/2769/2242\nf 2202/2772/2242 2191/2773/2244 2207/2774/2245\nf 2184/2761/2235 2186/2758/2232 2197/2753/2229\nf 2117/2724/2202 2197/2753/2229 2198/2764/2237\nf 2116/2725/2203 2198/2764/2237 2189/2767/2240\nf 2173/2727/2205 2157/2726/2204 2189/2767/2240\nf 2191/2773/2244 2190/2775/2246 2206/2751/2227\nf 2192/2776/2247 2190/2775/2246 2203/2777/2234\nf 2188/2778/2248 2187/2765/2238 2195/2770/2243\nf 2156/2745/2223 2184/2779/2235 2199/2780/2228\nf 2144/2743/2221 2201/2781/2249 2184/2779/2235\nf 2203/2777/2234 2190/2775/2246 2191/2773/2244\nf 2200/2766/2239 2162/2730/2208 2115/2728/2206\nf 2132/2741/2219 2135/2740/2218 2204/2782/2250\nf 2201/2781/2249 2144/2743/2221 2136/2742/2220\nf 2204/2782/2250 2206/2751/2227 2190/2775/2246\nf 2195/2770/2243 2207/2783/2245 2208/2784/2251\nf 2135/2740/2218 2166/2739/2217 2206/2751/2227\nf 2207/2774/2245 2193/2756/2231 2194/2785/2252\nf 2191/2773/2244 2205/2750/2226 2193/2756/2231\nf 2153/2786/2211 2175/2732/2210 2196/2768/2241\nf 2188/2778/2248 2152/2731/2209 2162/2730/2208\nf 2145/2787/2213 2146/2788/2212 2194/2789/2252\nf 2146/2734/2212 2153/2733/2211 2208/2790/2251\nf 2092/2791/2253 2219/2538/2072 2209/2792/2183\nf 2097/2793/2176 2222/2794/2074 2219/2795/2072\nf 2105/2796/2254 2226/2544/2075 2215/2797/2255\nf 2227/2547/2077 2216/2798/2256 2106/2799/2257\nf 2216/2798/2256 2217/2550/2080 2108/2678/2181\nf 2230/2800/2258 2226/2544/2075 2105/2796/2254\nf 2210/2655/2160 2228/2669/2082 2109/2668/2173\nf 2214/2801/2259 2221/2555/2084 2095/2659/2164\nf 2101/2663/2168 2213/2556/2085 2229/2802/2260\nf 2210/2803/2160 2220/2804/2186 2007/2529/2064\nf 2001/2521/2056 2211/2676/2179 2221/2555/2084\nf 1999/2534/2069 2212/2805/2165 2223/2806/2174\nf 2213/2556/2085 2224/2807/2261 2004/2511/2046\nf 2231/2682/2185 2225/2667/2172 2000/2509/2044\nf 2224/2808/2261 2228/2553/2082 2005/2552/2047\nf 1993/2514/2049 2223/2806/2174 2215/2809/2255\nf 1997/2810/2053 2222/2672/2074 2229/2811/2260\nf 1991/2520/2055 2218/2812/2262 2211/2676/2179\nf 2232/2813/2263 2217/2550/2080 2006/2524/2059\nf 2225/2667/2172 2209/2680/2183 2009/2526/2061\nf 2214/2801/2259 2231/2682/2185 2082/2508/2043\nf 2220/2804/2186 2232/2813/2263 2083/2523/2058\nf 2103/2681/2184 2095/2659/2164 2024/2613/2135\nf 2112/2665/2170 2103/2681/2184 2025/2601/2126\nf 2084/2600/2125 2022/2599/2124 2102/2666/2171\nf 2022/2599/2124 2031/2616/2138 2091/2679/2182\nf 2092/2814/2253 2091/2679/2182 2031/2616/2138\nf 2092/2815/2253 2010/2816/2132 2019/2817/2131\nf 2012/2818/2140 2110/2819/2177 2097/2820/2176\nf 2110/2821/2177 2012/2822/2140 2018/2823/2128\nf 2026/2824/2264 2100/2825/2169 2101/2826/2168\nf 2026/2827/2264 2027/2828/2141 2109/2829/2173\nf 2094/2830/2161 2109/2831/2173 2027/2621/2141\nf 2029/2832/2157 2093/2833/2162 2094/2834/2161\nf 2093/2657/2162 2029/2650/2157 2085/2624/2143\nf 2028/2593/2119 2108/2835/2181 2113/2684/2180\nf 2106/2836/2257 2108/2835/2181 2028/2593/2119\nf 2107/2837/2265 2106/2836/2257 2016/2592/2118\nf 2015/2647/2156 2098/2662/2167 2099/2661/2166\nf 2020/2596/2122 2104/2671/2175 2098/2662/2167\nf 2104/2671/2175 2020/2596/2122 2014/2595/2121\nf 2111/2838/2266 2105/2796/2254 2014/2595/2121\nf 2013/2754/2230 2023/2626/2144 2096/2839/2163\nf 2023/2840/2144 2024/2613/2135 2095/2659/2164\nf 1923/2460/2017 2235/2841/2267 2234/2842/2268\nf 2233/2843/2269 2236/2844/2270 1928/2451/2011\nf 1931/2420/1986 2238/2845/2271 2237/2846/2272\nf 2261/2847/2273 2240/2848/1957 2239/2849/2274\nf 2242/2850/2275 2241/2851/1988 1924/2852/1987\nf 2244/2853/2276 2243/2415/1981 1939/2414/1980\nf 2121/2713/2196 2182/2627/2145 1969/2463/2018\nf 2246/2854/1983 2245/2855/1964 2273/2856/1970\nf 2244/2857/2276 2247/2858/1967 2274/2859/2277\nf 2249/2860/2278 2248/2411/1978 1936/2410/1977\nf 2237/2861/2272 2245/2396/1964 1943/2395/1963\nf 2252/2862/1971 2251/2863/2279 2277/2864/2280\nf 2242/2865/2275 2253/2408/1976 2278/2866/2281\nf 2251/2867/2279 2248/2411/1978 2265/2868/1969\nf 1989/2869/2081 1991/2870/2055 2182/2871/2145\nf 2236/2844/2270 2254/2425/1991 1940/2424/1990\nf 2253/2872/1976 2243/2415/1981 2263/2873/2282\nf 2255/2874/2153 2246/2417/1983 2264/2875/2283\nf 2250/2876/1984 2240/2848/1957 2261/2847/2273\nf 1926/2877/2008 2234/2878/2268 2239/2879/2274\nf 2238/2845/2271 2241/2422/1988 2262/2880/1960\nf 2256/2643/2154 2254/2425/1991 2267/2881/1979\nf 2249/2882/2278 2255/2874/2153 2279/2883/2284\nf 2247/2399/1967 2256/2643/2154 2280/2884/2285\nf 2235/2841/2267 2268/2885/2286 2258/2886/1954\nf 2257/2887/2287 2259/2888/1955 2236/2844/2270\nf 2269/2889/2288 2260/2890/1956 2237/2846/2272\nf 2271/2891/2289 2262/2892/1960 2241/2893/1988\nf 2272/2894/1961 2263/2873/2282 2243/2415/1981\nf 2275/2895/2290 2265/2868/1969 2248/2411/1978\nf 2260/2890/1956 2273/2856/1970 2245/2855/1964\nf 2259/2888/1955 2267/2881/1979 2254/2425/1991\nf 2234/2842/2268 2258/2886/1954 2270/2896/2291\nf 2143/2897/2292 2130/2574/2101 2151/2898/2111\nf 875/1229/1076 2261/2899/2273 2270/2900/2291\nf 1991/2901/2055 1989/2551/2081 2230/2800/2258\nf 2264/2875/2283 2273/2402/1970 1921/2385/1953\nf 1920/2376/1944 2272/2393/1961 2274/2859/2277\nf 873/2902/2293 2266/2903/2294 2277/2904/2280\nf 933/2905/1449 2271/2891/2289 2278/2866/2281\nf 2277/2904/2280 2265/2401/1969 1914/2372/1940\nf 2218/2906/2262 2230/2800/2258 2111/2838/2266\nf 1916/2381/1949 2278/2907/2281 2263/2908/2282\nf 2279/2883/2284 2264/2875/2283 1912/2374/1942\nf 1893/2909/2295 2276/2910/2296 2261/2899/2273\nf 2269/2911/2288 2262/2392/1960 867/1683/1448\nf 2075/2378/1946 2280/2912/2285 2267/2412/1979\nf 2275/2913/2290 2279/2883/2284 2074/2373/1941\nf 1919/2377/1945 2274/2859/2277 2280/2912/2285\nf 2192/2914/2247 2136/2742/2220 2143/2897/2292\nf 2161/2763/2236 2199/2780/2228 2172/2747/2225\nf 2050/2915/2112 2151/2898/2111 2130/2574/2101\nf 2017/2916/2120 2050/2915/2112 2046/2573/2100\nf 2021/2606/2129 2099/2661/2166 2107/2837/2265\nf 2227/2547/2077 2107/2917/2265 2099/2918/2166\nf 2212/2805/2165 1999/2534/2069 1995/2548/2078\nf 2169/2702/2194 1995/2548/2078 1999/2534/2069\nf 1973/2498/2038 2169/2712/2194 2163/2919/2068\nf 1951/2499/2009 1973/2498/2038 1977/2490/2034\nf 1955/2920/2001 1933/2921/1985 1929/2922/2010\nf 2233/2843/2269 1929/2450/2010 1933/2419/1985\nf 2233/2843/2269 2250/2418/1984 2276/2923/2296\nf 1893/2909/2295 877/1228/1075 2257/2924/2287\nf 1893/2909/2295 1895/1230/1077 950/1154/1020\nf 1006/1099/967 950/1154/1020 1895/1230/1077\nf 1901/1157/1023 1894/1103/971 951/1095/963\nf 1894/1103/971 1898/1111/979 952/1090/958\nf 1947/2925/2015 1945/2469/2022 1967/2926/2198\nf 1945/2927/2022 1947/2458/2015 1925/2928/1972\nf 2235/2929/2267 1923/2930/2017 1925/2931/1972\nf 2235/2841/2267 2252/2932/1971 2266/2933/2294\nf 2266/2903/2294 873/2902/2293 866/1063/931\nf 861/1062/930 866/1063/931 873/2902/2293\nf 1879/969/845 861/1062/930 980/2383/1951\nf 1879/969/845 1009/2384/1952 979/982/857\nf 864/970/846 979/982/857 978/981/856\nf 865/974/849 978/981/856 878/992/866\nf 1877/2934/842 878/2935/866 881/990/865\nf 863/961/837 862/972/843 881/990/865\nf 1881/962/838 863/961/837 879/281/260\nf 1880/963/839 1881/962/838 1051/1132/998\nf 1878/1067/935 1880/963/839 1026/1174/1035\nf 1898/1111/979 1897/1107/975 953/1091/959\nf 1897/1107/975 1896/1105/973 954/1096/964\nf 1896/1105/973 1900/1113/981 955/1097/965\nf 1048/1182/1043 955/1097/965 1900/1113/981\nf 1903/2936/1086 1902/2937/976 1027/1092/960\nf 1902/2937/976 1899/2938/2297 956/1093/961\nf 1/2/2 2282/1245/1088 2281/1257/1100\nf 1061/1327/1163 2284/1248/1091 2283/1289/1127\nf 1060/1320/1156 2285/1251/1094 2284/1248/1091\nf 1059/1308/1146 2286/1253/1096 2285/1251/1094\nf 1058/1300/1138 2287/1255/1098 2286/1253/1096\nf 2288/1276/1116 2281/1257/1100 1057/1247/1090\nf 2290/2939/2298 2289/1259/1102 1079/2940/1165\nf 103/115/104 2293/1271/1103 2292/2941/2299\nf 2289/1259/1102 2294/1263/1106 1078/2942/1158\nf 2307/2943/1691 2291/2944/1109 1073/1316/1152\nf 1078/2942/1158 2294/1263/1106 2292/2945/2299\nf 2297/2946/2300 2296/2947/1112 1072/1304/1142\nf 1081/1261/1104 2293/1260/1103 2298/2948/2301\nf 2299/2949/1113 2297/2946/2300 1071/1291/1129\nf 1076/2950/1139 2298/2951/2301 2300/1275/1115\nf 2300/1275/1115 2288/1276/1116 1074/1330/1166\nf 2303/2952/2302 2302/2271/1119 1068/1294/1132\nf 2308/2953/2303 2295/1691/1122 1066/1324/1160\nf 2305/2954/1123 2304/2955/1692 1065/1317/1153\nf 1056/1246/1089 2282/1245/1088 2287/1255/1098\nf 1063/1298/1136 2306/2956/2304 2305/2954/1123\nf 1062/1297/1135 2283/2957/1127 2306/2956/2304\nf 2303/2958/2302 2295/1282/1122 31/1281/1121\nf 2296/2947/1112 2307/2943/1691 1612/1315/1151\nf 2304/2955/1692 2308/2959/2303 1611/2020/1159\nf 2301/2960/1894 2302/1279/1119 37/1278/1118\nf 2299/1273/1113 2301/2960/1894 42/2273/1890\nf 2290/2961/2298 2291/1266/1109 54/1265/1108\nf 3715/2962/2305 3714/2963/2306 2310/2964/2307\nf 2313/2965/2308 2314/2966/2309 2312/2967/2310\nf 2316/2968/2311 2311/2969/2312 3715/2962/2305\nf 2317/2970/2313 2313/2971/2308 2311/2972/2312\nf 2319/2973/2314 2320/2974/2315 2317/2970/2313\nf 2319/2975/2314 2316/2968/2311 3716/2976/2316\nf 2322/2977/2317 2323/2978/2318 2320/2974/2315\nf 3718/2979/2319 2322/2980/2317 2319/2975/2314\nf 2325/2981/2320 2326/2982/2321 2323/2978/2318\nf 3719/2983/2322 2325/2981/2320 2322/2977/2317\nf 2328/2984/2323 2329/2985/2324 2326/2986/2321\nf 3720/2987/2325 2328/2984/2323 2325/2988/2320\nf 2331/2989/2326 2332/2990/2327 2329/2985/2324\nf 3721/2991/2328 2331/2989/2326 2328/2984/2323\nf 2334/2992/2329 2335/2993/2330 2332/2994/2327\nf 3722/2995/2331 2334/2996/2329 2331/2989/2326\nf 2338/2997/2332 2335/2993/2330 2334/2992/2329\nf 2337/2998/2333 2334/2992/2329 3722/2999/2331\nf 3790/3000/2334 2338/2997/2332 2337/2998/2333\nf 3791/3001/2335 2337/2998/2333 3723/3002/2336\nf 2347/3003/2337 2344/3004/2338 2343/3005/2339\nf 2346/3006/2340 2343/3005/2339 3725/3007/2341\nf 3729/3008/2342 2355/3009/2343 2352/3010/2344\nf 2354/3011/2345 2351/3012/2346 2352/3010/2344\nf 3730/3013/2347 2358/3014/2348 2355/3009/2343\nf 2358/3014/2348 2357/3015/2349 2354/3011/2345\nf 3842/3016/2350 3793/3017/2351 2358/3014/2348\nf 3793/3017/2351 3795/3018/2352 2357/3015/2349\nf 3732/3019/2353 2363/3020/2354 2310/2964/2307\nf 2364/3021/2355 2312/2967/2310 2314/2966/2309\nf 2368/3022/2356 2367/3023/2357 2364/3021/2355\nf 3733/3024/2358 2366/3025/2359 2363/3020/2354\nf 2371/3026/2360 2370/3027/2361 2367/3023/2357\nf 3734/3028/2362 2369/3029/2363 2366/3025/2359\nf 2410/3030/2364 2409/3031/2365 2370/3027/2361\nf 3739/3032/2366 2411/3033/2367 2369/3029/2363\nf 2377/3034/2368 2376/3035/2369 2373/3036/2370\nf 3736/3037/2371 2375/3038/2372 2372/3039/2373\nf 2379/3040/2374 2376/3041/2369 2377/3042/2368\nf 3737/3043/2375 2378/3044/2376 2375/3045/2372\nf 2383/3046/2377 2382/3047/2378 2379/3048/2374\nf 3738/3049/2379 2381/3050/2380 2378/3044/2376\nf 3752/3051/2381 3757/3052/2382 2344/3004/2338\nf 3756/3053/2383 2357/3015/2349 3795/3018/2352\nf 3754/3054/2384 2354/3011/2345 2357/3015/2349\nf 3754/3054/2384 2388/3055/2385 2387/3056/2386\nf 3843/3057/2387 3750/3058/2388 2338/2997/2332\nf 3748/3059/2389 2335/2993/2330 2338/2997/2332\nf 3747/3060/2390 2332/2994/2327 2335/2993/2330\nf 3746/3061/2391 2329/2985/2324 2332/2990/2327\nf 3745/3062/2392 2326/2982/2321 2329/3063/2324\nf 3744/3064/2393 2323/2978/2318 2326/2982/2321\nf 3743/3065/2394 2317/2970/2313 2320/2974/2315\nf 3763/3066/2395 3764/3067/2396 2314/2966/2309\nf 3764/3067/2396 3762/3068/2397 2365/3069/2398\nf 3763/3070/2395 2313/2971/2308 2317/2970/2313\nf 3742/3071/2399 2371/3026/2360 2368/3022/2356\nf 3741/3072/2400 2368/3073/2356 2365/3074/2398\nf 3744/3064/2393 2391/3075/2401 2401/3076/2402\nf 3760/3077/2403 3761/3078/2404 2377/3079/2368\nf 3759/3080/2405 2380/3081/2406 2377/3079/2368\nf 3740/3082/2407 2383/3046/2377 2380/3083/2406\nf 2412/3084/2408 2405/3085/2409 3760/3086/2403\nf 2373/3087/2370 2409/3031/2365 2410/3030/2364\nf 2372/3039/2373 2411/3033/2367 3739/3032/2366\nf 2404/3088/2410 2412/3084/2408 3758/3089/2411\nf 2417/3090/2412 2413/3091/2413 2405/3085/2409\nf 2413/3092/2413 2414/3093/2414 2406/3094/2415\nf 2415/3095/2416 2407/3096/2417 2406/3094/2415\nf 2416/3097/2418 2408/3098/2419 2407/3096/2417\nf 2427/3099/2420 2423/3100/2421 2418/3101/2422\nf 2424/3102/2423 2425/3103/2424 2420/3104/2425\nf 2425/3103/2424 2426/3105/2426 2421/3106/2427\nf 2423/3100/2421 2424/3102/2423 2419/3107/2428\nf 2433/3108/2429 2429/3109/2430 2423/3100/2421\nf 2429/3109/2430 2430/3110/2431 2424/3102/2423\nf 2430/3110/2431 2431/3111/2432 2425/3103/2424\nf 2431/3111/2432 2432/3112/2433 2426/3105/2426\nf 2439/3113/2434 2435/3114/2435 2429/3109/2430\nf 2428/3115/2436 2432/3112/2433 2438/3116/2437\nf 2435/3114/2435 2436/3117/2438 2430/3110/2431\nf 2436/3117/2438 2437/3118/2439 2431/3111/2432\nf 2438/3116/2437 2432/3112/2433 2431/3111/2432\nf 137/146/135 133/149/138 2435/3119/2435\nf 2438/3120/2437 136/148/137 132/147/136\nf 133/149/138 134/3121/2440 2436/3122/2438\nf 135/151/140 2437/3123/2439 2436/3122/2438\nf 136/148/137 2438/3120/2437 2437/3123/2439\nf 2388/3055/2385 2444/3124/2441 2443/3125/2442\nf 2444/3124/2441 2388/3055/2385 2389/3126/2443\nf 2445/3127/2444 2389/3126/2443 3796/3128/2445\nf 2441/3129/2446 2440/3130/2447 2384/3131/2448\nf 2449/3132/2449 2393/3133/2450 2394/3134/2451\nf 2451/3135/2452 2395/3136/2453 2396/3137/2454\nf 2448/3138/2455 2392/3139/2456 2393/3133/2450\nf 2450/3140/2457 2394/3134/2451 2395/3136/2453\nf 2447/3141/2458 2391/3075/2401 2392/3139/2456\nf 2456/3142/2459 2400/3143/2460 2401/3144/2402\nf 2458/3145/2461 2459/3146/2462 2403/3147/2463\nf 2456/3142/2459 2454/3148/2464 2398/3149/2465\nf 2455/3150/2466 2458/3145/2461 2402/3151/2467\nf 2459/3146/2462 2460/3152/2468 2404/3088/2410\nf 2454/3148/2464 2455/3150/2466 2399/3153/2469\nf 2412/3084/2408 2404/3088/2410 2460/3152/2468\nf 2391/3154/2401 2447/3155/2458 2457/3156/2470\nf 2422/3157/2471 2467/3158/2472 2468/3159/2473\nf 2427/3160/2420 2468/3159/2473 2469/3161/2474\nf 2433/3162/2429 2469/3161/2474 2470/3163/2475\nf 2439/3164/2434 2470/3165/2475 170/191/176\nf 2481/3166/2476 2482/3167/2477 2476/3168/2478\nf 2478/3169/2479 2481/3166/2476 2475/3170/2480\nf 2479/3171/2481 2477/3172/2482 2471/3173/2483\nf 2480/3174/2484 2479/3171/2481 2473/3175/2485\nf 2477/3172/2482 2478/3169/2479 2472/3176/2486\nf 2467/3158/2472 2476/3168/2478 2482/3167/2477\nf 2494/3177/2487 2486/3178/2488 2487/3179/2489\nf 2489/3180/2490 2461/3181/2491 2486/3178/2488\nf 2496/3182/2492 2495/3183/2493 2487/3179/2489\nf 2490/3184/2494 2462/3185/2495 2461/3181/2491\nf 2491/3186/2496 2463/3187/2497 2462/3185/2495\nf 2463/3187/2497 2491/3186/2496 2480/3188/2484\nf 2507/3189/2498 2506/3190/2499 2479/3191/2481\nf 2480/3188/2484 2491/3186/2496 2512/3192/2500\nf 2505/3193/2501 2508/3194/2502 2481/3166/2476\nf 2508/3194/2502 2509/3195/2503 2482/3167/2477\nf 2515/3196/2504 2494/3177/2487 2495/3183/2493\nf 2510/3197/2505 2489/3180/2490 2494/3177/2487\nf 2516/3198/2506 2495/3183/2493 2496/3182/2492\nf 2511/3199/2507 2490/3184/2494 2489/3180/2490\nf 2504/3200/2508 2505/3193/2501 2478/3169/2479\nf 3803/3201/2509 2517/3202/2510 2496/3182/2492\nf 2512/3192/2500 2491/3186/2496 2490/3184/2494\nf 2506/3203/2499 2504/3200/2508 2477/3172/2482\nf 2468/3159/2473 2482/3167/2477 2509/3195/2503\nf 2469/3161/2474 2509/3195/2503 2520/3204/2511\nf 2470/3163/2475 2520/3204/2511 221/3205/216\nf 2524/3206/2512 2523/3207/2513 2506/3190/2499\nf 2521/3208/2514 2504/3209/2508 2506/3190/2499\nf 2521/3208/2514 2522/3210/2515 2505/3211/2501\nf 2531/3212/2516 2532/3213/2517 2526/3214/2518\nf 2528/3215/2519 2522/3210/2515 2521/3208/2514\nf 2526/3216/2518 2520/3204/2511 2509/3195/2503\nf 2529/3217/2520 2523/3207/2513 2524/3206/2512\nf 235/247/226 228/239/219 2526/3214/2518\nf 2527/3218/2521 2521/3208/2514 2523/3207/2513\nf 2533/3219/2522 2534/3220/2523 2532/3213/2517\nf 2534/3220/2523 238/2350/1924 235/247/226\nf 3937/3221/2524 2537/3222/2525 2538/3223/2526\nf 3939/3224/2527 2535/3225/2528 2537/3222/2525\nf 3940/3226/2529 2536/3227/2530 2535/3225/2528\nf 2552/3228/2531 2551/3229/2532 2516/3198/2506\nf 2547/3230/2533 2510/3197/2505 2515/3196/2504\nf 2550/3231/2534 2515/3196/2504 2516/3198/2506\nf 2549/3232/2535 2512/3192/2500 2511/3199/2507\nf 3805/3233/2536 2552/3228/2531 2517/3202/2510\nf 2548/3234/2537 2511/3199/2507 2510/3197/2505\nf 2556/3235/2538 2549/3232/2535 2548/3234/2537\nf 2555/3236/2539 2548/3234/2537 2547/3230/2533\nf 2554/3237/2540 2547/3230/2533 2550/3231/2534\nf 2507/3189/2498 2512/3192/2500 2549/3232/2535\nf 2549/3232/2535 2556/3235/2538 2530/3238/2541\nf 3942/3239/2542 2560/3240/2543 2559/3241/2544\nf 3942/3239/2542 2566/3242/2545 2544/3243/2546\nf 3910/3244/2547 2560/3240/2543 2538/3223/2526\nf 3101/3245/2548 2565/3246/2549 3941/3247/2550\nf 3108/3248/2551 3191/3249/2552 3192/3250/2553\nf 2586/3251/2554 3126/3252/2555 1644/282/261\nf 2574/3253/2556 2575/3254/2557 2573/3255/2558\nf 3808/3256/2559 3807/3257/2560 2575/3254/2557\nf 2499/3258/2561 2573/3255/2558 2575/3254/2557\nf 3807/3257/2560 3802/3259/2562 2502/3260/2563\nf 2584/3261/2564 3126/3262/2555 3785/3263/2565\nf 2584/3264/2564 2501/3265/2566 202/295/274\nf 2501/3266/2566 2584/3261/2564 2583/3267/2567\nf 3126/3262/2555 2586/3268/2554 2585/3269/2568\nf 3126/3252/2555 2584/3264/2564 292/300/279\nf 2577/3270/2569 3784/3271/2570 2503/3272/2571\nf 2500/3273/2572 2583/3267/2567 2573/3255/2558\nf 2569/3274/2573 2590/3275/2574 2589/3276/2575\nf 2623/3277/2576 2606/3278/2577 2605/3279/2578\nf 2592/3280/2579 2596/3281/2580 2595/3282/2581\nf 2589/3276/2575 2590/3275/2574 2594/3283/2582\nf 2596/3281/2580 2592/3280/2579 303/315/294\nf 2596/3281/2580 2600/3284/2583 2599/3285/2584\nf 2593/3286/2585 2594/3283/2582 2598/3287/2586\nf 2600/3284/2583 2596/3281/2580 308/322/299\nf 2600/3284/2583 2604/3288/2587 2603/3289/2588\nf 2597/3290/2589 2598/3291/2586 2602/3292/2590\nf 2604/3288/2587 2600/3284/2583 313/328/304\nf 2620/3293/2591 2579/3294/2592 2645/3295/2593\nf 2607/3296/2594 2621/3297/2595 2620/3293/2591\nf 2649/3298/2596 2568/3299/2597 2614/3300/2598\nf 2611/3301/2599 2610/3302/2600 2609/3303/2601\nf 2612/3304/2602 2613/3305/2603 2610/3302/2600\nf 2615/3306/2604 2614/3300/2598 2568/3299/2597\nf 2593/3286/2585 2616/3307/2605 2615/3306/2604\nf 2597/3308/2589 2617/3309/2606 2616/3307/2605\nf 2601/3310/2607 2618/3311/2608 2617/3312/2606\nf 2619/3313/2609 2618/3311/2608 2601/3310/2607\nf 2621/3297/2595 2619/3313/2609 2579/3294/2592\nf 2613/3305/2603 2612/3304/2602 2607/3314/2594\nf 2606/3315/2577 2610/3302/2600 2613/3305/2603\nf 2581/3316/2610 2609/3303/2601 2610/3302/2600\nf 1564/352/327 298/2001/1675 2588/3317/2611\nf 2609/3303/2601 2581/3316/2610 2652/3318/2612\nf 2625/3319/2613 2574/3253/2556 2572/3320/2614\nf 3808/3256/2559 3810/3321/2615 2626/3322/2616\nf 2576/3323/2617 2626/3322/2616 2627/3324/2618\nf 2605/3325/2578 2613/3305/2603 2580/3326/2619\nf 3783/3327/2620 3861/3328/2621 3860/3329/2622\nf 2604/3288/2587 2629/3330/2623 2628/3331/2624\nf 2629/3330/2623 2604/3288/2587 318/369/342\nf 2612/3304/2602 2633/3332/2625 2630/3333/2626\nf 2630/3334/2626 2640/3335/2627 2621/3336/2595\nf 2618/3311/2608 2638/3337/2628 2637/3338/2629\nf 2614/3300/2598 2615/3306/2604 2635/3339/2630\nf 2633/3332/2625 2612/3304/2602 2611/3301/2599\nf 2615/3306/2604 2616/3307/2605 2636/3340/2631\nf 2650/3341/2632 2614/3300/2598 2634/3342/2633\nf 2618/3311/2608 2619/3313/2609 2639/3343/2634\nf 2632/3344/2635 2611/3301/2599 2608/3345/2636\nf 2640/3346/2627 2639/3343/2634 2619/3313/2609\nf 2617/3309/2606 2637/3347/2629 2636/3340/2631\nf 3786/3348/2637 2629/3349/2623 344/387/355\nf 2648/3350/2638 2653/3351/2639 2663/3352/2640\nf 2691/3353/2641 2655/3354/2642 2656/3355/2643\nf 2601/3310/2607 2602/3292/2590 2645/3295/2593\nf 2646/3356/2644 2644/3357/2645 2580/3358/2619\nf 2608/3345/2636 2609/3303/2601 2649/3298/2596\nf 2568/3299/2597 2649/3298/2596 2652/3318/2612\nf 2608/3345/2636 2650/3341/2632 2651/3359/2646\nf 2690/3360/2647 2656/3355/2643 2658/3361/2648\nf 2739/3362/2649 2643/3363/2650 363/399/366\nf 4044/3364/2651 3786/3348/2637 1582/402/369\nf 2638/3337/2628 2639/3343/2634 2675/3365/2652\nf 2669/3366/2653 2633/3332/2625 2632/3344/2635\nf 2676/3367/2654 2675/3368/2652 2639/3369/2634\nf 2630/3333/2626 2633/3332/2625 2669/3366/2653\nf 2634/3342/2633 2635/3339/2630 2671/3370/2655\nf 2636/3371/2631 2672/3372/2656 2671/3373/2655\nf 2666/3374/2657 2676/3375/2654 2640/3335/2627\nf 2677/3376/2658 2667/3377/2659 2631/3378/2660\nf 2637/3347/2629 2673/3379/2661 2672/3380/2656\nf 2651/3359/2646 2634/3342/2633 2670/3381/2662\nf 2638/3337/2628 2674/3382/2663 2673/3383/2661\nf 2668/3384/2664 2632/3385/2635 2631/3378/2660\nf 2678/3386/2665 2667/3387/2659 2677/3388/2658\nf 2679/3389/2666 2668/3390/2664 2667/3387/2659\nf 2681/3391/2667 2678/3386/2665 2680/3392/2668\nf 2682/3393/2669 2679/3389/2666 2678/3386/2665\nf 2680/3392/2668 2677/3388/2658 2670/3381/2662\nf 2668/3390/2664 2679/3389/2666 2666/3394/2657\nf 2679/3389/2666 2682/3393/2669 2676/3395/2654\nf 2682/3393/2669 2674/3396/2663 2675/3397/2652\nf 2681/3391/2667 2673/3379/2661 2674/3396/2663\nf 2683/3398/2670 2672/3380/2656 2673/3379/2661\nf 2671/3370/2655 2672/3380/2656 2683/3398/2670\nf 2656/3355/2643 2685/3399/2671 2684/3400/2672\nf 2655/3354/2642 2686/3401/2673 2685/3399/2671\nf 2693/3402/2674 2692/3403/2675 2653/3404/2639\nf 4045/3405/2676 3788/3406/2677 3786/3348/2637\nf 2693/3407/2674 2696/3408/2678 2698/3409/2679\nf 2697/3410/2680 2698/3409/2679 2700/3411/2681\nf 2772/3412/2682 2771/3413/2683 2702/3414/2684\nf 2701/3415/2685 2702/3414/2684 2704/3416/2686\nf 2703/3417/2687 2704/3416/2686 2706/3418/2688\nf 2711/3419/2689 2708/3420/2690 2707/3421/2691\nf 2775/3422/2692 2711/3419/2689 2710/3423/2693\nf 2717/3424/2694 2714/3425/2695 2713/3426/2696\nf 2720/3427/2697 2717/3428/2694 2716/3429/2698\nf 2725/3430/2699 2726/3431/2700 2727/3432/2701\nf 2731/3433/2702 2722/3434/2703 2729/3435/2704\nf 2692/3436/2675 2693/3407/2674 2697/3410/2680\nf 2699/3437/2705 2712/3438/2706 2709/3439/2707\nf 2772/3412/2682 2773/3440/2708 2712/3438/2706\nf 2703/3417/2687 2718/3441/2709 2715/3442/2710\nf 2705/3443/2711 2721/3444/2712 2718/3445/2709\nf 2654/3446/2713 2687/3447/2714 2688/3448/2715\nf 2724/3449/2716 2727/3432/2701 2777/3450/2717\nf 2722/3451/2703 2723/3452/2718 2728/3453/2719\nf 2726/3431/2700 2725/3430/2699 2690/3360/2647\nf 2735/3454/2720 2740/3455/2721 2641/3456/2722\nf 4053/3457/2723 2733/3458/2724 2732/3459/2725\nf 4054/3460/2726 2734/3461/2727 2778/3462/2728\nf 4046/3463/2729 4047/3464/2730 3787/3465/2731\nf 4055/3466/2732 2695/3467/2733 4042/3468/2734\nf 2743/3469/2735 2738/3470/2736 2779/3471/2737\nf 2742/3472/2738 2737/3473/2739 2736/3474/2740\nf 2746/3475/2741 2743/3469/2735 2780/3476/2742\nf 2745/3477/2743 2742/3472/2738 2741/3478/2744\nf 2749/3479/2745 2746/3475/2741 2781/3480/2746\nf 2747/3481/2747 2748/3482/2748 2745/3483/2743\nf 510/507/462 469/515/470 2749/3479/2745\nf 467/509/464 468/3484/498 2748/3482/2748\nf 4054/3460/2726 2738/3470/2736 2751/3485/2749\nf 2752/3486/2750 2751/3485/2749 2738/3470/2736\nf 2753/3487/2751 2752/3486/2750 2743/3469/2735\nf 2754/3488/2752 2753/3487/2751 2746/3475/2741\nf 469/515/470 475/567/512 2754/3488/2752\nf 4052/3489/2753 2732/3459/2725 2695/3467/2733\nf 2694/3490/2754 2740/3455/2721 2741/3478/2744\nf 2744/3491/2755 2741/3478/2744 2740/3455/2721\nf 2744/3492/2755 2735/3493/2720 2739/3362/2649\nf 456/518/473 467/509/464 2747/3481/2747\nf 2757/3494/2756 2758/3495/2757 2725/3430/2699\nf 2755/3496/2758 2756/3497/2759 2723/3498/2718\nf 2757/3494/2756 2724/3449/2716 2776/3499/2760\nf 2690/3360/2647 2725/3430/2699 2758/3495/2757\nf 2691/3353/2641 2758/3495/2757 2764/3500/2761\nf 2763/3501/2762 2764/3500/2761 2758/3495/2757\nf 2784/3502/2763 2763/3501/2762 2757/3494/2756\nf 2783/3503/2764 2756/3504/2759 2762/3505/2765\nf 2761/3506/2766 2762/3505/2765 2756/3504/2759\nf 2769/3507/2767 2763/3501/2762 2784/3502/2763\nf 2770/3508/2768 2764/3500/2761 2763/3501/2762\nf 4039/3509/2769 2765/3510/2770 2759/3511/2771\nf 2760/3512/2772 2764/3500/2761 2770/3508/2768\nf 2767/3513/2773 2768/3514/2774 2762/3505/2765\nf 2699/3437/2705 2700/3515/2681 2771/3413/2683\nf 2714/3516/2695 2775/3422/2692 2774/3517/2775\nf 2701/3415/2685 2715/3442/2710 2773/3440/2708\nf 2723/3518/2718 2776/3499/2760 2777/3450/2717\nf 4062/3519/2776 2778/3462/2728 2733/3520/2724\nf 2780/3476/2742 2779/3471/2737 2737/3521/2739\nf 2781/3480/2746 2780/3476/2742 2742/3522/2738\nf 2782/3523/2777 2781/3480/2746 2745/3524/2743\nf 468/551/498 510/507/462 2782/3523/2777\nf 2756/3504/2759 2783/3503/2764 2776/3499/2760\nf 2755/3496/2758 2791/3525/2778 2790/3526/2779\nf 2768/3514/2774 2785/3527/2780 2784/3502/2763\nf 2789/3528/2781 2767/3513/2773 2761/3506/2766\nf 2751/3485/2749 2752/3486/2750 2786/3529/2782\nf 2753/3487/2751 2793/3530/2783 2786/3529/2782\nf 4063/3531/2784 2751/3485/2749 2787/3532/2785\nf 2791/3525/2778 2806/3533/2786 2805/3534/2787\nf 2791/3525/2778 2755/3496/2758 2722/3434/2703\nf 475/567/512 521/566/511 2792/3535/2788\nf 2754/3488/2752 2792/3535/2788 2793/3530/2783\nf 2796/3536/2789 2797/3537/2790 2720/3427/2697\nf 524/718/633 494/717/637 2767/3538/2773\nf 2794/3539/2791 2798/3540/2792 2721/3444/2712\nf 2787/3541/2785 2786/3542/2782 2801/3543/2793\nf 2800/3544/2794 2731/3433/2702 2730/3545/2795\nf 2806/3533/2786 2821/3546/2796 2820/3547/2797\nf 2793/3548/2783 2792/3549/2788 2807/3550/2798\nf 2804/3551/2799 2789/3552/2781 2790/3526/2779\nf 2786/3553/2782 2793/3548/2783 2808/3554/2800\nf 2806/3533/2786 2791/3525/2778 2731/3433/2702\nf 2787/3541/2785 2802/3555/2801 4060/3556/2802\nf 2705/3443/2711 2706/3557/2688 2795/3558/2803\nf 2808/3554/2800 2823/3559/2804 2816/3560/2805\nf 2807/3550/2798 2822/3561/2806 2823/3559/2804\nf 2819/3562/2807 2804/3551/2799 2805/3534/2787\nf 4060/3556/2802 2802/3555/2801 2817/3563/2808\nf 2815/3564/2809 2800/3544/2794 2799/3565/2810\nf 2809/3566/2811 2813/3567/2812 2798/3540/2792\nf 2794/3539/2791 2795/3558/2803 2810/3568/2813\nf 2802/3555/2801 2801/3543/2793 2816/3569/2805\nf 2835/3570/2814 2820/3571/2797 2821/3572/2796\nf 2821/3546/2796 2806/3533/2786 2800/3544/2794\nf 2811/3573/2815 2812/3574/2816 2797/3537/2790\nf 2836/3575/2817 2821/3572/2796 2815/3576/2809\nf 2827/3577/2818 2812/3574/2816 2811/3573/2815\nf 2822/3578/2806 555/3579/529 572/3580/547\nf 2816/3560/2805 2823/3559/2804 2838/3581/2819\nf 2823/3559/2804 2822/3561/2806 2837/3582/2820\nf 2834/3583/2821 2819/3584/2807 2820/3571/2797\nf 2817/3563/2808 2832/3585/2822 4050/3586/2823\nf 2829/3587/2824 2830/3588/2825 2815/3576/2809\nf 2824/3589/2826 2828/3590/2827 2813/3567/2812\nf 2809/3591/2811 2810/3592/2813 2825/3593/2828\nf 2816/3560/2805 2831/3594/2829 2832/3595/2822\nf 2836/3575/2817 2851/3596/2830 2850/3597/2831\nf 2865/3598/2832 2850/3599/2831 2851/3600/2830\nf 2851/3596/2830 2836/3575/2817 2830/3588/2825\nf 2842/3601/2833 2827/3577/2818 2826/3602/2834\nf 2837/3603/2820 572/3580/547 589/3604/565\nf 2831/3594/2829 2838/3581/2819 2853/3605/2835\nf 2838/3581/2819 2837/3582/2820 2852/3606/2836\nf 2850/3597/2831 2849/3607/2837 2834/3583/2821\nf 4050/3586/2823 2832/3585/2822 2847/3608/2838\nf 2844/3609/2839 2845/3610/2840 2830/3588/2825\nf 2843/3611/2841 2828/3590/2827 2824/3589/2826\nf 2824/3589/2826 2825/3612/2828 2840/3613/2842\nf 2924/3614/2843 2939/3615/2844 694/641/577\nf 2832/3595/2822 2831/3594/2829 2846/3616/2845\nf 2858/3617/2846 2843/3611/2841 2839/3618/2847\nf 2839/3618/2847 2840/3613/2842 2855/3619/2848\nf 2909/3620/2849 2924/3621/2843 677/647/576\nf 2847/3608/2838 2846/3622/2845 2861/3623/2850\nf 2866/3624/2851 2881/3625/2852 2880/3626/2853\nf 2866/3624/2851 2851/3600/2830 2845/3627/2840\nf 660/646/582 643/3628/2854 2894/3629/2855\nf 2857/3630/2856 2842/3601/2833 2841/3631/2857\nf 2852/3606/2836 589/629/565 606/3632/593\nf 626/662/595 2879/3633/2858 2894/3629/2855\nf 2846/3616/2845 2853/3605/2835 2868/3634/2859\nf 2853/3605/2835 2852/3606/2836 2867/3635/2860\nf 2864/3636/2861 2849/3637/2837 2850/3599/2831\nf 4049/3638/2862 2847/3608/2838 2862/3639/2863\nf 2859/3640/2864 2860/3641/2865 2845/3642/2840\nf 2867/3635/2860 606/3632/593 623/3643/602\nf 2879/3633/2858 626/662/595 609/672/603\nf 2861/3644/2850 2868/3634/2859 2883/3645/2866\nf 2868/3634/2859 2867/3635/2860 2882/3646/2867\nf 2879/3633/2858 2864/3636/2861 2865/3598/2832\nf 4048/3647/2868 2862/3648/2863 2877/3649/2869\nf 2875/3650/2870 2860/3651/2865 2859/3652/2864\nf 2869/3653/2871 2873/3654/2872 2858/3617/2846\nf 2854/3655/2873 2855/3619/2848 2870/3656/2874\nf 592/685/612 2849/3637/2837 2864/3636/2861\nf 2862/3657/2863 2861/3644/2850 2876/3658/2875\nf 2895/3659/2876 2880/3626/2853 2881/3625/2852\nf 2881/3625/2852 2866/3624/2851 2860/3651/2865\nf 592/685/612 575/3660/614 2834/3661/2821\nf 2872/3662/2877 2857/3630/2856 2856/3663/2878\nf 2896/3664/2879 2881/3625/2852 2875/3650/2870\nf 2834/3665/2821 575/3666/614 558/3667/618\nf 2887/3668/2880 2872/3662/2877 2871/3669/2881\nf 2882/3646/2867 623/3643/602 640/3670/622\nf 558/698/618 541/697/623 2804/3551/2799\nf 2876/3658/2875 2883/3645/2866 2898/3671/2882\nf 2883/3645/2866 2882/3646/2867 2897/3672/2883\nf 2894/3629/2855 2879/3633/2858 2880/3626/2853\nf 4059/3673/2884 2877/3674/2869 2892/3675/2885\nf 2890/3676/2886 2875/3650/2870 2874/3677/2887\nf 2884/3678/2888 2888/3679/2889 2873/3654/2872\nf 2869/3653/2871 2870/3656/2874 2885/3680/2890\nf 2877/3674/2869 2876/3681/2875 2891/3682/2891\nf 2896/3664/2879 2911/3683/2892 2910/3684/2893\nf 2910/3684/2893 2911/3683/2892 2926/3685/2894\nf 2911/3683/2892 2896/3664/2879 2890/3676/2886\nf 2769/3686/2767 496/744/655 497/757/666\nf 2902/3687/2895 2887/3668/2880 2886/3688/2896\nf 2897/3672/2883 640/3670/622 657/3689/641\nf 2891/3690/2891 2898/3691/2882 2913/3692/2897\nf 2898/3691/2882 2897/3693/2883 2912/3694/2898\nf 2909/3620/2849 2894/3629/2855 2895/3659/2876\nf 4058/3695/2899 2892/3696/2885 2907/3697/2900\nf 2905/3698/2901 2890/3676/2886 2889/3699/2902\nf 2899/3700/2903 2903/3701/2904 2888/3679/2889\nf 2884/3678/2888 2885/3680/2890 2900/3702/2905\nf 2785/3703/2780 2768/3704/2774 495/724/642\nf 2892/3696/2885 2891/3690/2891 2906/3705/2906\nf 2912/3694/2898 657/3706/641 674/3707/654\nf 2906/3705/2906 2913/3692/2897 2928/3708/2907\nf 2913/3692/2897 2912/3694/2898 2927/3709/2908\nf 2925/3710/2909 2924/3621/2843 2909/3620/2849\nf 4057/3711/2910 2907/3697/2900 2922/3712/2911\nf 2919/3713/2912 2920/3714/2913 2905/3715/2901\nf 2914/3716/2914 2918/3717/2915 2903/3701/2904\nf 2899/3718/2903 2900/3719/2905 2915/3720/2916\nf 2907/3697/2900 2906/3705/2906 2921/3721/2917\nf 2925/3722/2909 2926/3723/2894 2941/3724/2918\nf 2920/3725/2913 2926/3685/2894 2911/3683/2892\nf 4039/3509/2769 1847/2319/1905 492/1200/1054\nf 2916/3726/2919 2917/3727/2920 2902/3687/2895\nf 2929/3728/2921 2933/3729/2922 2918/3730/2915\nf 2914/3731/2914 2915/3720/2916 2930/3732/2923\nf 2921/3721/2917 2936/3733/2924 2937/3734/2925\nf 2935/3735/2926 2941/3724/2918 2926/3723/2894\nf 2931/3736/2927 2932/3737/2928 2917/3727/2920\nf 2927/3709/2908 674/3707/654 691/800/681\nf 2928/3708/2907 2943/3738/2929 2936/3733/2924\nf 2928/3708/2907 2927/3709/2908 2942/3739/2930\nf 2939/3615/2844 2924/3614/2843 2925/3722/2909\nf 4056/3740/2931 2922/3712/2911 2937/3734/2925\nf 2935/3735/2926 2920/3741/2913 2919/3742/2912\nf 2950/3743/2932 2935/3735/2926 2934/3744/2933\nf 2955/3745/2934 2940/3746/2935 2941/3724/2918\nf 2954/3747/2936 711/3748/689 694/3749/577\nf 2948/3750/2937 2933/3729/2922 2929/3728/2921\nf 2929/3728/2921 2930/3732/2923 2945/3751/2938\nf 2938/3752/2939 2953/3753/2940 2945/3751/2938\nf 2956/3754/2941 2941/3724/2918 2935/3735/2926\nf 2946/3755/2942 2947/3756/2943 2932/3757/2928\nf 691/800/681 708/799/699 2957/3758/2944\nf 2943/3738/2929 2958/3759/2945 2951/3760/2946\nf 2942/3761/2930 2957/3762/2944 2958/3763/2945\nf 2940/3746/2935 2955/3745/2934 2954/3764/2936\nf 2937/3734/2925 2952/3765/2947 4066/3766/2948\nf 2937/3734/2925 2936/3733/2924 2951/3760/2946\nf 2944/3767/2949 2945/3768/2938 2953/3769/2940\nf 2949/3770/2950 2948/3771/2937 2944/3767/2949\nf 3952/3772/2951 2545/3773/2952 2536/3227/2530\nf 2970/3774/2953 2759/3511/2771 2765/3510/2770\nf 2960/3775/2954 2664/3776/2955 2665/3777/2956\nf 2685/3399/2671 2977/3778/2957 2976/3779/2958\nf 2687/3780/2714 2707/3421/2691 2708/3420/2690\nf 2977/3778/2957 2685/3399/2671 2686/3401/2673\nf 2989/3781/2959 2991/3782/2960 2974/3783/2961\nf 2986/3784/2962 2985/3785/2963 3121/3786/2964\nf 2994/3787/2965 2992/3788/2966 2990/3789/2967\nf 2996/3790/2968 2994/3787/2965 2993/3791/2969\nf 2998/3792/2970 2996/3790/2968 2995/3793/2971\nf 3000/3794/2972 2998/3792/2970 2997/3795/2973\nf 3002/3796/2974 3000/3794/2972 2999/3797/2975\nf 3003/3798/2976 3004/3799/2977 3002/3796/2974\nf 3008/3800/2978 3006/3801/2979 3005/3802/2980\nf 3010/3803/2981 3008/3800/2978 3007/3804/2982\nf 3012/3805/2983 3010/3803/2981 3009/3806/2984\nf 3014/3807/2985 3012/3805/2983 3011/3808/2986\nf 3016/3809/2987 3014/3807/2985 3013/3810/2988\nf 3017/3811/2989 3018/3812/2990 3016/3809/2987\nf 2985/3813/2963 2984/3814/2991 3122/3815/2992\nf 3210/3816/2993 3209/3817/2994 3024/3818/2995\nf 3025/3819/2996 3024/3818/2995 3027/3820/2997\nf 3028/3821/2998 3027/3820/2997 3030/3822/2999\nf 3030/3822/2999 3033/3823/3000 3035/3824/3001\nf 3039/3825/3002 3034/3826/3003 3051/3827/3004\nf 3041/3828/3005 3046/3829/3006 3040/3830/3007\nf 3035/3824/3001 3033/3823/3000 3038/3831/3008\nf 3040/3832/3007 3038/3833/3008 3043/3834/3009\nf 3044/3835/3010 3039/3825/3002 3046/3829/3006\nf 3046/3829/3006 3051/3827/3004 3035/3836/3001\nf 3045/3837/3011 3043/3838/3009 3048/3839/3012\nf 3037/3840/3013 3032/3841/3014 3254/3842/3015\nf 804/887/776 810/886/775 3043/3838/3009\nf 3044/3835/3010 3041/3828/3005 3036/3843/3016\nf 3015/3844/3017 3022/3845/3018 3023/3846/3019\nf 3021/3847/3020 3022/3845/3018 3015/3844/3017\nf 3020/3848/3021 3021/3847/3020 3013/3810/2988\nf 3027/3820/2997 788/1204/1058 792/894/782\nf 2987/3849/3022 2986/3784/2962 3120/3850/3023\nf 2543/3851/3024 3937/3221/2524 3938/3852/3025\nf 3006/3801/2979 3008/3800/2978 2993/3791/2969\nf 3008/3800/2978 3010/3803/2981 2995/3793/2971\nf 3010/3803/2981 3012/3805/2983 2997/3795/2973\nf 3012/3805/2983 3014/3807/2985 2999/3797/2975\nf 3014/3807/2985 3016/3809/2987 3001/3853/3026\nf 3001/3853/3026 3016/3809/2987 3018/3812/2990\nf 2994/3787/2965 2996/3790/2968 3054/3854/3027\nf 3004/3799/2977 3058/3855/3028 3057/3856/3029\nf 3000/3794/2972 3002/3796/2974 3057/3856/3029\nf 2998/3792/2970 3000/3794/2972 3056/3857/3030\nf 2996/3790/2968 2998/3792/2970 3055/3858/3031\nf 3053/3859/3032 3054/3860/3027 3060/3861/3033\nf 3058/3855/3028 3064/3862/3034 3063/3863/3035\nf 3054/3854/3027 3055/3858/3031 3061/3864/3036\nf 3055/3858/3031 3056/3857/3030 3062/3865/3037\nf 3056/3857/3030 3057/3856/3029 3063/3863/3035\nf 3059/3866/3038 3060/3861/3033 3066/3867/3039\nf 3064/3868/3034 3070/3869/3040 3069/3870/3041\nf 3060/3861/3033 3061/3871/3036 3067/3872/3042\nf 3061/3871/3036 3062/3873/3037 3068/3874/3043\nf 3062/3865/3037 3063/3863/3035 3069/3875/3041\nf 3065/3876/3044 3066/3867/3039 3072/3877/3045\nf 3070/3869/3040 3076/3878/3046 3075/3879/3047\nf 3066/3867/3039 3067/3872/3042 3073/3880/3048\nf 3067/3872/3042 3068/3874/3043 3074/3881/3049\nf 3068/3874/3043 3069/3882/3041 3075/3883/3047\nf 3071/3884/3050 3072/3877/3045 3078/3885/3051\nf 3075/3879/3047 3076/3878/3046 3082/3886/3052\nf 3072/3877/3045 3073/3880/3048 3079/3887/3053\nf 3073/3880/3048 3074/3881/3049 3080/3888/3054\nf 3074/3881/3049 3075/3883/3047 3081/3889/3055\nf 3077/3890/3056 3078/3885/3051 3084/3891/3057\nf 3081/3892/3055 3082/3886/3052 3088/3893/3058\nf 3078/3885/3051 3079/3887/3053 3085/3894/3059\nf 3079/3887/3053 3080/3888/3054 3086/3895/3060\nf 3080/3896/3054 3081/3892/3055 3087/3897/3061\nf 3235/3898/3062 3236/3899/3063 855/950/827\nf 3234/3900/3064 859/952/829 858/951/828\nf 3236/3899/3063 3248/3901/3065 856/955/832\nf 3248/3901/3065 3247/3902/3066 857/957/834\nf 3247/3903/3066 3249/3904/3067 858/951/828\nf 3190/3905/3068 3266/3906/3069 4071/3907/3070\nf 3238/3908/3071 4070/3909/3072 4071/3907/3070\nf 3188/3910/3073 3189/3911/3074 3091/3912/3075\nf 3226/3913/3076 3186/3914/3077 3093/3915/3078\nf 3189/3911/3074 3190/3916/3068 3092/3917/3079\nf 3186/3914/3077 3187/3918/3080 3094/3919/3081\nf 3943/3920/3082 3098/3921/3083 3097/3922/3084\nf 3944/3923/3085 3097/3922/3084 3100/3924/3086\nf 3196/3925/3087 3207/3926/3088 3199/3927/3089\nf 3953/3928/3090 3812/3929/3091 3098/3921/3083\nf 3163/3930/3092 3169/3931/3093 3168/3932/3094\nf 3945/3933/3095 3100/3924/3086 3101/3245/2548\nf 3109/3934/3096 3192/3935/2553 3195/3936/3097\nf 3107/3937/3098 3195/3936/3097 3196/3925/3087\nf 3169/3931/3093 3163/3930/3092 3164/3938/3099\nf 3121/3939/2964 3122/3815/2992 3949/3940/3100\nf 3053/3941/3032 3112/3942/3101 2992/3788/2966\nf 3059/3866/3038 3113/3943/3102 3112/3944/3101\nf 3065/3876/3044 3114/3945/3103 3113/3943/3102\nf 3071/3884/3050 3115/3946/3104 3114/3945/3103\nf 3077/3890/3056 3116/3947/3105 3115/3946/3104\nf 3083/3948/3106 3117/3949/3107 3116/3947/3105\nf 2519/3950/3108 3129/3951/3109 3128/3952/3110\nf 3799/3953/3111 2452/3954/3112 2396/3137/2454\nf 2484/3955/3113 3130/3956/3114 2440/3130/2447\nf 3799/3953/3111 2453/3957/3115 3131/3958/3116\nf 3801/3959/3117 2496/3182/2492 2488/3960/3118\nf 3132/3961/3119 3133/3962/3120 3130/3956/3114\nf 3133/3962/3120 3132/3961/3119 2513/3963/3121\nf 2447/3155/2458 2463/3964/2497 2474/3965/3122\nf 2450/3140/2457 2486/3178/2488 2461/3181/2491\nf 2422/3157/2471 2418/3966/2422 2413/3091/2413\nf 2488/3960/3118 2487/3179/2489 2451/3135/2452\nf 2475/3170/2480 2476/3168/2478 2459/3146/2462\nf 2419/3107/2428 2420/3104/2425 2415/3095/2416\nf 2471/3173/2483 2472/3176/2486 2455/3150/2466\nf 2448/3138/2455 2462/3185/2495 2463/3187/2497\nf 2418/3101/2422 2419/3107/2428 2414/3093/2414\nf 2451/3135/2452 2487/3179/2489 2486/3178/2488\nf 2476/3168/2478 2467/3158/2472 2460/3152/2468\nf 2472/3176/2486 2475/3170/2480 2458/3145/2461\nf 2457/3156/2470 2474/3965/3122 2473/3175/2485\nf 2417/3090/2412 2460/3152/2468 2467/3158/2472\nf 2449/3132/2449 2461/3181/2491 2462/3185/2495\nf 2473/3175/2485 2471/3173/2483 2454/3148/2464\nf 2415/3095/2416 2420/3104/2425 2421/3106/2427\nf 2984/3814/2991 3138/3967/3123 3139/3968/3124\nf 3949/3940/3100 3122/3815/2992 3139/3968/3124\nf 3030/3822/2999 792/894/782 798/3969/891\nf 804/887/776 3038/3970/3008 3033/3971/3000\nf 3043/3838/3009 810/886/775 816/1022/892\nf 3145/3972/3125 3146/3973/3126 2973/3974/3127\nf 3148/3975/3128 3149/3976/3129 3143/3977/3130\nf 3149/3976/3129 3148/3975/3128 3140/3978/3131\nf 3144/3979/3132 3143/3977/3130 3149/3976/3129\nf 3118/3980/3133 3149/3976/3129 3147/3981/3134\nf 3026/3982/3135 3150/3983/3136 3151/3984/3137\nf 3051/3827/3004 3034/3826/3003 3254/3842/3015\nf 3035/3836/3001 3051/3827/3004 3255/3985/3138\nf 3050/3986/3139 3036/3987/3016 3041/3988/3005\nf 3047/3989/3140 3044/3835/3010 3049/3990/3141\nf 3039/3825/3002 3044/3835/3010 3047/3989/3140\nf 3042/3991/3142 3037/3840/3013 3034/3826/3003\nf 3150/3983/3136 3153/3992/3143 3152/3993/3144\nf 3147/3981/3134 3140/3978/3131 3212/3994/3145\nf 3150/3983/3136 3026/3982/3135 3214/3995/3146\nf 3119/3996/3147 3120/3850/3023 2982/3997/3148\nf 3251/3998/3149 3250/3999/3150 3019/4000/3151\nf 3155/4001/3152 3156/4002/3153 3021/3847/3020\nf 3156/4002/3153 3157/4003/3154 3022/3845/3018\nf 3022/3845/3018 3157/4003/3154 3158/4004/3155\nf 3218/4005/3156 3019/4000/3151 3005/4006/2980\nf 3216/4007/3157 2990/3789/2967 2992/3788/2966\nf 3154/4008/3158 3019/4000/3151 3218/4005/3156\nf 3216/4009/3157 3138/4010/3123 2984/4011/2991\nf 3220/4012/3159 3005/3802/2980 3006/3801/2979\nf 3215/4013/3160 2992/3788/2966 3112/3942/3101\nf 3226/3913/3076 4069/4014/3161 3090/4015/3162\nf 3185/4016/3163 3090/4015/3162 3095/4017/3164\nf 3089/4018/3165 3098/3921/3083 3812/3929/3091\nf 3238/3908/3071 970/1119/985 1878/1067/935\nf 3187/4019/3080 3188/3910/3073 4068/4020/3166\nf 3138/3967/3123 3096/4021/3167 3099/4022/3168\nf 3183/4023/3169 4074/4024/3170 4077/4025/3171\nf 3221/4026/3172 3211/4027/3173 3112/3944/3101\nf 3989/4028/3174 3240/4029/3175 935/1077/945\nf 4242/4030/3176 3245/4031/3177 3260/4032/3178\nf 4243/4033/3179 3260/4032/3178 3166/4034/3180\nf 3986/4035/3181 3116/3947/3105 3117/3949/3107\nf 3985/4036/3182 3115/3946/3104 3116/3947/3105\nf 3984/4037/3183 3114/3945/3103 3115/3946/3104\nf 3990/4038/3184 3113/3943/3102 3114/3945/3103\nf 3256/4039/3185 3259/4040/3186 3117/3949/3107\nf 3170/4041/3187 3176/4042/3188 3175/4043/3189\nf 949/1094/962 956/1093/961 3243/4044/3190\nf 3169/3931/3093 3175/4043/3189 3174/4045/3191\nf 3172/4046/3192 3178/4047/3193 3177/4048/3194\nf 3168/3932/3094 3174/4045/3191 3224/4049/3195\nf 3171/4050/3196 3177/4048/3194 3176/4042/3188\nf 4083/4051/3197 3180/4052/3198 3225/4053/3199\nf 4085/4054/3200 3183/4023/3169 3182/4055/3201\nf 4086/4056/3202 3182/4055/3201 3181/4057/3203\nf 4090/4058/3204 1899/2938/2297 963/4059/978\nf 4087/4060/3205 3181/4057/3203 3180/4052/3198\nf 4088/4061/3206 3184/4062/3207 3183/4023/3169\nf 4073/4063/3208 3190/3916/3068 3189/3911/3074\nf 4079/4064/3209 4075/4065/3210 3186/4066/3077\nf 4077/4025/3171 4074/4024/3170 3189/3911/3074\nf 4078/4067/3211 4077/4025/3171 3188/3910/3073\nf 1889/1120/986 970/1119/985 3238/3908/3071\nf 4075/4065/3210 4078/4067/3211 3187/4019/3080\nf 3241/4068/3212 882/1123/989 883/1122/988\nf 3193/4069/3213 3192/3935/2553 3191/4070/2552\nf 2543/3851/3024 3197/4071/3214 3201/4072/3215\nf 3194/4073/3216 2544/3243/2546 2566/3242/2545\nf 3197/4071/3214 2543/3851/3024 2544/3243/2546\nf 3191/3249/2552 3108/3248/2551 3267/4074/3217\nf 3170/4041/3187 3164/3938/3099 3165/4075/3218\nf 3171/4050/3196 3165/4075/3218 3166/4034/3180\nf 3951/4076/3219 1753/2189/1827 252/1136/1002\nf 3202/4077/3220 2542/4078/3221 2541/4079/3222\nf 3952/4080/2951 3951/4076/3219 2546/4081/3223\nf 4245/4082/3224 3197/4071/3214 3194/4073/3216\nf 4248/4083/3225 3194/4073/3216 2567/4084/3226\nf 3260/4032/3178 3265/4085/3227 3172/4046/3192\nf 3207/3926/3088 3196/3925/3087 3205/4086/3228\nf 3205/4086/3228 3196/3925/3087 3195/3936/3097\nf 4245/4082/3224 4246/4087/3229 3201/4072/3215\nf 2991/3782/2960 2989/3781/2959 3209/3817/2994\nf 3245/4031/3177 3244/4088/3230 3265/4085/3227\nf 3213/4089/3231 3212/3994/3145 3153/3992/3143\nf 3213/4089/3231 3214/3995/3146 2988/4090/3232\nf 3218/4005/3156 3220/4091/3159 2985/3785/2963\nf 3138/4010/3123 3216/4009/3157 3215/4092/3160\nf 3219/4093/3233 3218/4005/3156 2986/3784/2962\nf 2990/3789/2967 3216/4007/3157 3217/4094/3234\nf 2985/3785/2963 3220/4091/3159 3217/4095/3234\nf 2983/4096/3235 3215/4092/3160 3211/4027/3173\nf 3160/4097/3236 3111/4098/3237 3211/4027/3173\nf 3221/4026/3172 3113/3943/3102 3990/4038/3184\nf 3223/4099/3238 3224/4049/3195 3173/4100/3239\nf 4089/4101/3240 3225/4102/3199 3179/4103/3241\nf 4079/4104/3209 3226/3913/3076 3185/4016/3163\nf 3206/4105/3242 3228/4106/3243 3229/4107/3244\nf 3205/4086/3228 3229/4107/3244 3230/4108/3245\nf 942/1164/1028 949/1094/962 3244/4088/3230\nf 3193/4069/3213 3231/4109/3246 3228/4106/3243\nf 4252/4110/3247 2064/4111/2151 1016/1169/1032\nf 3261/4112/3248 3268/4113/3249 3247/3902/3066\nf 3241/4068/3212 3242/4114/3250 880/1173/1034\nf 4254/4115/3251 3222/4116/3252 3161/4117/3253\nf 3258/4118/3254 3271/4119/3255 3233/4120/3256\nf 2533/3219/2522 2531/3212/2516 2522/4121/2515\nf 3232/4122/3257 1016/1169/1032 984/1181/1042\nf 3244/4088/3230 3243/4044/3190 3264/4123/3258\nf 3110/4124/3259 3233/4125/3256 3231/4109/3246\nf 3270/4126/3260 3261/4112/3248 3248/3901/3065\nf 4080/4127/3261 3238/3908/3071 3266/3906/3069\nf 3206/4105/3242 3195/3936/3097 3192/3935/2553\nf 3246/4128/3262 883/1122/988 1014/1189/1047\nf 3257/4129/3263 3262/4130/3264 3234/3900/3064\nf 3256/4039/3185 3270/4126/3260 3236/3899/3063\nf 4090/4058/3204 3239/4131/3265 3263/4132/3266\nf 854/949/826 935/1077/945 3240/4029/3175\nf 3257/4133/3263 3249/4134/3067 3247/3902/3066\nf 3258/4118/3254 3269/4135/3267 3241/4068/3212\nf 3231/4109/3246 3233/4125/3256 4251/4136/3268\nf 2505/4137/2501 2522/4121/2515 2531/3212/2516\nf 4038/4138/3269 2759/3511/2771 2686/4139/2673\nf 2969/4140/3270 2686/4139/2673 2759/3511/2771\nf 2971/4141/3271 725/1202/1056 734/2037/1699\nf 3141/4142/3272 3145/3972/3125 2974/3783/2961\nf 3148/3975/3128 2974/3783/2961 2991/3782/2960\nf 3210/3816/2993 3212/3994/3145 3140/3978/3131\nf 3212/3994/3145 3210/3816/2993 3025/3819/2996\nf 3028/3821/2998 3152/3993/3144 3153/3992/3143\nf 3024/3818/2995 784/1205/1059 788/1204/1058\nf 3209/3817/2994 992/1206/1060 784/1205/1059\nf 992/1206/1060 3209/3817/2994 2989/3781/2959\nf 781/1207/1061 2989/3781/2959 2973/3974/3127\nf 3146/3973/3126 733/2236/1862 748/1208/1062\nf 3954/4143/3273 3136/4144/3274 4011/4145/3275\nf 4000/4146/3276 3999/4147/3277 3143/3977/3130\nf 3999/4147/3277 3998/4148/3278 3141/4142/3272\nf 3998/4148/3278 3997/4149/3279 3145/3972/3125\nf 3997/4149/3279 3996/4150/3280 3146/3973/3126\nf 2576/3323/2617 2578/4151/3281 3784/3271/2570\nf 3253/4152/3282 3252/4153/3283 3250/4154/3150\nf 3019/4000/3151 3250/3999/3150 3007/4155/2982\nf 3250/4154/3150 3252/4153/3283 3009/3806/2984\nf 3151/4156/3137 3254/3842/3015 3032/3841/3014\nf 3255/4157/3138 3254/4158/3015 3151/3984/3137\nf 3031/4159/3284 3255/4157/3138 3152/3993/3144\nf 3253/4152/3282 3155/4001/3152 3020/3848/3021\nf 3252/4153/3283 3020/3848/3021 3011/3808/2986\nf 3106/4160/3285 3105/4161/3286 3167/4162/3287\nf 4084/4163/3288 3179/4103/3241 3104/4164/3289\nf 3180/4052/3198 4075/4065/3210 4079/4064/3209\nf 3204/4165/3290 3203/4166/3291 2525/4167/3292\nf 3203/4168/3291 2542/4078/3221 3202/4077/3220\nf 3235/3898/3062 3240/4029/3175 3259/4040/3186\nf 3269/4135/3267 3267/4074/3217 3242/4114/3250\nf 3085/3894/3059 3086/3895/3060 3268/4113/3249\nf 3246/4128/3262 3237/4169/3293 3271/4119/3255\nf 3265/4085/3227 3264/4123/3258 3178/4047/3193\nf 3084/3891/3057 3085/3894/3059 3261/4112/3248\nf 4081/4170/3294 3266/4171/3069 3190/3916/3068\nf 3087/3897/3061 3088/3893/3058 3262/4130/3264\nf 3083/3948/3106 3084/3891/3057 3270/4126/3260\nf 4091/4172/3295 3263/4132/3266 3184/4062/3207\nf 3086/4173/3060 3087/3897/3061 3257/4129/3263\nf 3110/4174/3259 3191/3249/2552 3269/4135/3267\nf 4252/4175/3247 4256/4176/3296 3271/4177/3255\nf 4251/4136/3268 3233/4125/3256 3271/4177/3255\nf 4468/4178/3297 4467/4179/3298 3273/4180/3299\nf 4470/4181/3300 4469/4182/3301 2327/4183/3302\nf 4471/4184/3303 4470/4181/3300 2324/4185/3304\nf 4472/4186/3305 4471/4184/3303 2321/4187/3306\nf 4473/4188/3307 4472/4186/3305 2318/4189/3308\nf 4467/4179/3298 2310/2964/2307 2363/3020/2354\nf 4475/4190/3309 2378/4191/2376 2381/4192/2380\nf 4479/4193/3310 4478/4194/3311 3293/4195/3312\nf 4480/4196/3313 2375/3045/2372 2378/3044/2376\nf 4477/4197/3314 2362/4198/3315 3794/4199/3316\nf 4480/4196/3313 4478/4200/3311 2372/4201/2373\nf 4482/4202/3317 2359/4203/3318 2356/4204/3319\nf 4479/4193/3310 4484/4205/3320 2369/3029/2363\nf 4485/4206/3321 4483/4207/3322 2356/4204/3319\nf 4486/4208/3323 2366/3025/2359 2369/3029/2363\nf 4474/4209/3324 2363/3020/2354 2366/3025/2359\nf 4488/4210/3325 2345/4211/3326 2342/4212/3327\nf 4481/4213/3328 2339/4214/3329 3792/4215/3330\nf 4491/4216/3331 4490/4217/3332 2336/4218/3333\nf 4468/4178/3297 4473/4188/3307 2315/4219/3334\nf 4491/4220/3331 2333/4221/3335 2330/4222/3336\nf 4469/4182/3301 4492/4223/3337 2330/4222/3336\nf 3313/4224/3338 3287/4225/3339 3286/4226/3340\nf 3310/4227/3341 3284/4228/3342 3283/4229/3343\nf 3304/4230/3344 3305/4231/3345 3279/4232/3346\nf 3298/4233/3347 3300/4234/3348 3274/4235/3349\nf 3317/4236/3350 3291/4237/3351 3292/4238/3352\nf 3313/4224/3338 3314/4239/3353 3288/4240/3354\nf 3305/4231/3345 3306/4241/3355 3280/4242/3356\nf 3300/4243/3348 3301/4244/3357 3275/4245/3358\nf 3293/4246/3312 3319/4247/3359 3323/4248/3360\nf 3318/4249/3361 3292/4250/3352 3297/4251/3362\nf 3818/4252/3363 3315/4253/3364 3289/4254/3365\nf 3307/4255/3366 3281/4256/3367 3280/4242/3356\nf 3301/4244/3357 3302/4257/3368 3276/4258/3369\nf 3320/4259/3370 3319/4260/3359 3293/4261/3312\nf 3308/4262/3371 3282/4263/3372 3815/4264/3373\nf 3302/4257/3368 3303/4265/3374 3277/4266/3375\nf 3321/4267/3376 3320/4259/3370 3294/4268/3377\nf 3299/4269/3378 3273/4180/3299 3290/4270/3379\nf 3303/4265/3374 3304/4230/3344 3278/4271/3380\nf 3272/4272/3381 3273/4180/3299 3299/4269/3378\nf 3321/4273/3376 3295/4274/3382 3296/4275/3383\nf 3316/4276/3384 3290/4270/3379 3291/4237/3351\nf 3343/4277/3385 3342/4278/3386 3316/4279/3384\nf 3338/4280/3387 3339/4281/3388 3313/4282/3338\nf 3335/4283/3389 3336/4284/3390 3310/4285/3341\nf 3331/4286/3391 3305/4287/3345 3304/4288/3344\nf 3326/4289/3392 3300/4243/3348 3298/4290/3347\nf 3344/4291/3393 3343/4277/3385 3317/4292/3350\nf 3339/4281/3388 3340/4293/3394 3314/4294/3353\nf 3332/4295/3395 3306/4296/3355 3305/4297/3345\nf 3327/4298/3396 3301/4244/3357 3300/4243/3348\nf 3319/4299/3359 3345/4300/3397 3349/4301/3398\nf 3349/4301/3398 3344/4291/3393 3318/4302/3361\nf 3820/4303/3399 3341/4304/3400 3315/4305/3364\nf 3332/4306/3395 3333/4307/3401 3307/4308/3366\nf 3328/4309/3402 3302/4257/3368 3301/4244/3357\nf 3345/4300/3397 3319/4299/3359 3320/4310/3370\nf 3819/4311/3403 3334/4312/3404 3308/4313/3371\nf 3329/4314/3405 3303/4315/3374 3302/4316/3368\nf 3347/4317/3406 3346/4318/3407 3320/4310/3370\nf 3342/4278/3386 3325/4319/3408 3299/4320/3378\nf 3330/4321/3409 3304/4322/3344 3303/4315/3374\nf 3299/4320/3378 3325/4319/3408 3324/4323/3410\nf 3348/4324/3411 3347/4317/3406 3321/4325/3376\nf 3372/4326/3412 3346/4318/3407 3347/4317/3406\nf 3368/4327/3413 3351/4328/3414 3325/4319/3408\nf 3355/4329/3415 3356/4330/3416 3330/4331/3409\nf 3324/4332/3410 3325/4333/3408 3351/4334/3414\nf 3374/4335/3417 3373/4336/3418 3347/4317/3406\nf 3368/4327/3413 3342/4278/3386 3343/4277/3385\nf 3364/4337/3419 3365/4338/3420 3339/4339/3388\nf 3362/4340/3421 3336/4341/3390 3335/4342/3389\nf 3356/4330/3416 3357/4343/3422 3331/4344/3391\nf 3350/4345/3423 3352/4346/3424 3326/4289/3392\nf 3369/4347/3425 3343/4277/3385 3344/4291/3393\nf 3365/4338/3420 3366/4348/3426 3340/4349/3394\nf 3357/4343/3422 3358/4350/3427 3332/4351/3395\nf 3352/4346/3424 3353/4352/3428 3327/4298/3396\nf 3345/4300/3397 3371/4353/3429 3375/4354/3430\nf 3370/4355/3431 3344/4291/3393 3349/4301/3398\nf 3822/4356/3432 3367/4357/3433 3341/4304/3400\nf 3358/4350/3427 3359/4358/3434 3333/4359/3401\nf 3353/4352/3428 3354/4360/3435 3328/4309/3402\nf 3371/4353/3429 3345/4300/3397 3346/4318/3407\nf 3360/4361/3436 3334/4312/3404 3819/4311/3403\nf 3354/4360/3435 3355/4329/3415 3329/4362/3405\nf 3376/4363/3437 3378/4364/3438 3352/4346/3424\nf 3395/4365/3439 3369/4347/3425 3370/4355/3431\nf 3391/4366/3440 3392/4367/3441 3366/4348/3426\nf 3383/4368/3442 3384/4369/3443 3358/4350/3427\nf 3378/4364/3438 3379/4370/3444 3353/4352/3428\nf 3375/4354/3430 3371/4353/3429 3397/4371/3445\nf 3401/4372/3446 3396/4373/3447 3370/4355/3431\nf 3393/4374/3448 3367/4375/3433 3822/4376/3432\nf 3384/4369/3443 3385/4377/3449 3359/4358/3434\nf 3379/4370/3444 3380/4378/3450 3354/4360/3435\nf 3397/4371/3445 3371/4353/3429 3372/4326/3412\nf 3386/4379/3451 3360/4361/3436 3821/4380/3452\nf 3380/4378/3450 3381/4381/3453 3355/4329/3415\nf 3398/4382/3454 3372/4383/3412 3373/4384/3418\nf 3394/4385/3455 3377/4386/3456 3351/4387/3414\nf 3382/4388/3457 3356/4330/3416 3355/4329/3415\nf 3350/4389/3423 3351/4387/3414 3377/4386/3456\nf 3399/4390/3458 3373/4391/3418 3374/4392/3417\nf 3395/4365/3439 3394/4393/3455 3368/4327/3413\nf 3391/4366/3440 3365/4338/3420 3364/4337/3419\nf 3388/4394/3459 3362/4340/3421 3361/4395/3460\nf 3382/4388/3457 3383/4368/3442 3357/4343/3422\nf 3376/4396/3437 3377/4386/3456 3403/4397/3461\nf 3425/4398/3462 3399/4390/3458 3400/4399/3463\nf 3421/4400/3464 3420/4401/3465 3394/4385/3455\nf 3417/4402/3466 3391/4366/3440 3390/4403/3467\nf 3414/4404/3468 3388/4394/3459 3387/4405/3469\nf 3409/4406/3470 3383/4368/3442 3382/4388/3457\nf 3404/4407/3471 3378/4364/3438 3376/4363/3437\nf 3422/4408/3472 3421/4409/3464 3395/4365/3439\nf 3418/4410/3473 3392/4367/3441 3391/4366/3440\nf 3410/4411/3474 3384/4369/3443 3383/4368/3442\nf 3405/4412/3475 3379/4370/3444 3378/4364/3438\nf 3401/4372/3446 3397/4371/3445 3423/4413/3476\nf 3427/4414/3477 3422/4408/3472 3396/4373/3447\nf 3419/4415/3478 3393/4416/3448 3824/4417/3479\nf 3410/4411/3474 3411/4418/3480 3385/4377/3449\nf 3406/4419/3481 3380/4378/3450 3379/4370/3444\nf 3424/4420/3482 3423/4421/3476 3397/4422/3445\nf 3825/4423/3483 3412/4424/3484 3386/4379/3451\nf 3407/4425/3485 3381/4381/3453 3380/4378/3450\nf 3424/4420/3482 3398/4426/3454 3399/4390/3458\nf 3420/4401/3465 3403/4397/3461 3377/4386/3456\nf 3408/4427/3486 3382/4388/3457 3381/4381/3453\nf 3433/4428/3487 3407/4425/3485 3406/4419/3481\nf 3407/4425/3485 3433/4428/3487 3445/4429/3488\nf 3408/4427/3486 3445/4429/3488 3434/4430/3489\nf 3435/4431/3490 3442/4432/3491 3411/4433/3480\nf 3452/4434/3492 3451/4435/3493 3425/4398/3462\nf 3827/4436/3494 3437/4437/3495 3412/4438/3484\nf 3413/4439/3496 3438/4440/3497 3439/4441/3498\nf 3416/4442/3499 3441/4443/3500 3436/4444/3501\nf 3430/4445/3502 3404/4446/3471 3402/4447/3503\nf 3417/4402/3466 3436/4444/3501 3443/4448/3504\nf 3420/4401/3465 3421/4400/3464 3446/4449/3505\nf 3435/4450/3490 3410/4411/3474 3409/4406/3470\nf 3451/4435/3493 3429/4451/3506 3424/4420/3482\nf 3427/4452/3477 3423/4421/3476 3449/4453/3507\nf 3429/4451/3506 3449/4453/3507 3423/4421/3476\nf 3444/4454/3508 3419/4415/3478 3826/4455/3509\nf 3453/4456/3510 3431/4457/3511 3422/4408/3472\nf 3431/4458/3511 3446/4449/3505 3421/4400/3464\nf 3420/4401/3465 3447/4459/3512 3450/4460/3513\nf 3428/4461/3514 3402/4447/3503 3403/4397/3461\nf 3404/4407/3471 3430/4462/3502 3448/4463/3515\nf 3448/4463/3515 3432/4464/3516 3406/4419/3481\nf 3412/4465/3484 3437/4466/3495 3438/4440/3497\nf 3386/4467/3451 3412/4465/3484 3413/4439/3496\nf 3360/4468/3436 3386/4467/3451 3387/4405/3469\nf 3361/4469/3460 3335/4283/3389 3334/4312/3404\nf 3448/4463/3515 3474/4470/3517 3458/4471/3518\nf 3453/4472/3510 3449/4453/3507 3475/4473/3519\nf 3431/4474/3511 3453/4472/3510 3479/4475/3520\nf 3828/4476/3521 3443/4477/3504 3469/4478/3522\nf 3441/4443/3500 3467/4479/3523 3462/4480/3524\nf 3447/4459/3512 3446/4449/3505 3472/4481/3525\nf 3435/4431/3490 3461/4482/3526 3468/4483/3527\nf 3428/4461/3514 3454/4484/3528 3456/4485/3529\nf 3446/4449/3505 3431/4458/3511 3457/4486/3530\nf 3442/4432/3491 3468/4483/3527 3829/4487/3531\nf 3432/4464/3516 3458/4471/3518 3459/4488/3532\nf 3430/4445/3502 3456/4485/3529 3474/4489/3517\nf 3450/4460/3513 3447/4459/3512 3473/4490/3533\nf 3429/4451/3506 3451/4435/3493 3477/4491/3534\nf 3438/4492/3497 3464/4493/3535 3465/4494/3536\nf 3433/4428/3487 3459/4488/3532 3471/4495/3537\nf 3451/4435/3493 3452/4434/3492 3478/4496/3538\nf 3449/4453/3507 3429/4451/3506 3455/4497/3539\nf 3436/4444/3501 3462/4480/3524 3469/4498/3522\nf 3445/4429/3488 3471/4495/3537 3460/4499/3540\nf 3450/4460/3513 3476/4500/3541 3454/4484/3528\nf 3437/4437/3495 3463/4501/3542 3464/4493/3535\nf 3434/4502/3489 3460/4503/3540 3461/4482/3526\nf 3468/4483/3527 3494/4504/3543 3831/4505/3544\nf 3458/4471/3518 3484/4506/3545 3485/4507/3546\nf 3473/4490/3533 3472/4481/3525 3498/4508/3547\nf 3477/4491/3534 3478/4496/3538 3504/4509/3548\nf 3455/4497/3539 3477/4491/3534 3503/4510/3549\nf 3465/4494/3536 3464/4493/3535 3490/4511/3550\nf 3459/4488/3532 3485/4507/3546 3497/4512/3551\nf 3476/4500/3541 3502/4513/3552 3480/4514/3553\nf 3475/4473/3519 3455/4497/3539 3481/4515/3554\nf 3462/4516/3524 3488/4517/3555 3495/4518/3556\nf 3471/4519/3537 3497/4520/3551 3486/4521/3557\nf 3479/4475/3520 3475/4473/3519 3501/4522/3558\nf 3457/4523/3530 3479/4475/3520 3505/4524/3559\nf 3463/4501/3542 3489/4525/3560 3490/4511/3550\nf 3460/4503/3540 3486/4521/3557 3487/4526/3561\nf 3456/4485/3529 3482/4527/3562 3500/4528/3563\nf 3472/4481/3525 3457/4486/3530 3483/4529/3564\nf 3469/4478/3522 3495/4518/3556 3832/4530/3565\nf 3467/4479/3523 3493/4531/3566 3488/4532/3555\nf 3461/4482/3526 3487/4526/3561 3494/4504/3543\nf 3454/4484/3528 3480/4514/3553 3482/4527/3562\nf 3474/4489/3517 3500/4528/3563 3484/4533/3545\nf 3476/4500/3541 3473/4490/3533 3499/4534/3567\nf 3481/4515/3554 3503/4510/3549 3529/4535/3568\nf 3491/4536/3569 3490/4511/3550 3516/4537/3570\nf 3485/4538/3546 3511/4539/3571 3523/4540/3572\nf 3502/4513/3552 3528/4541/3573 3506/4542/3574\nf 3501/4522/3558 3481/4515/3554 3507/4543/3575\nf 3488/4517/3555 3514/4544/3576 3521/4545/3577\nf 3497/4520/3551 3523/4540/3572 3512/4546/3578\nf 3505/4524/3559 3501/4522/3558 3527/4547/3579\nf 3483/4548/3564 3505/4524/3559 3531/4549/3580\nf 3490/4511/3550 3489/4525/3560 3515/4550/3581\nf 3486/4521/3557 3512/4546/3578 3513/4551/3582\nf 3482/4527/3562 3508/4552/3583 3526/4553/3584\nf 3498/4508/3547 3483/4529/3564 3509/4554/3585\nf 3495/4518/3556 3521/4545/3577 3834/4555/3586\nf 3493/4556/3566 3519/4557/3587 3514/4544/3576\nf 3487/4526/3561 3513/4551/3582 3520/4558/3588\nf 3480/4514/3553 3506/4542/3574 3508/4552/3583\nf 3500/4528/3563 3526/4553/3584 3510/4559/3589\nf 3502/4513/3552 3499/4534/3567 3525/4560/3590\nf 3494/4504/3543 3520/4558/3588 3833/4561/3591\nf 3484/4562/3545 3510/4563/3589 3511/4539/3571\nf 3499/4534/3567 3498/4508/3547 3524/4564/3592\nf 3504/4509/3548 3530/4565/3593 3529/4535/3568\nf 4012/4566/3594 3532/4567/3595 3567/4568/3596\nf 3551/4569/3597 3563/4570/3598 3536/4571/3599\nf 3559/4572/3600 3837/4573/3601 4018/4574/3602\nf 4016/4575/3603 3835/4576/3604 3836/4577/3605\nf 3565/4578/3606 3534/4579/3607 3535/4580/3608\nf 3557/4581/3609 3542/4582/3610 4017/4583/3611\nf 4013/4584/3612 3569/4585/3613 3564/4586/3614\nf 3532/4567/3595 3533/4587/3615 3566/4588/3616\nf 3544/4589/3617 3555/4590/3618 3558/4591/3619\nf 3539/4592/3620 3560/4593/3621 3835/4576/3604\nf 4021/4594/3622 4019/4595/3623 3838/4596/3624\nf 3546/4597/3625 3553/4598/3626 3561/4599/3627\nf 3540/4600/3628 3541/4601/3629 3558/4591/3619\nf 3537/4602/3630 3562/4603/3631 3569/4604/3613\nf 3545/4605/3632 3554/4606/3633 3553/4598/3626\nf 3571/4607/3634 3560/4593/3621 3539/4592/3620\nf 3538/4608/3635 3561/4599/3627 3550/4609/3636\nf 3548/4610/3637 4012/4566/3594 3568/4611/3638\nf 3555/4590/3618 3544/4589/3617 4021/4594/3622\nf 4015/4612/3639 4014/4613/3640 3570/4614/3641\nf 3562/4603/3631 3537/4602/3630 3549/4615/3642\nf 3545/4605/3632 4020/4616/3643 3839/4617/3644\nf 3552/4618/3645 3556/4619/3646 3543/4620/3647\nf 3570/4614/3641 4014/4613/3640 3536/4571/3599\nf 3837/4573/3601 3552/4621/3645 3547/4622/3648\nf 3534/4579/3607 3565/4578/3606 3566/4588/3616\nf 4020/4616/3643 3543/4620/3647 3556/4619/3646\nf 3838/4596/3624 3508/4552/3583 3506/4542/3574\nf 3513/4551/3582 3570/4614/3641 3563/4570/3598\nf 3562/4603/3631 3521/4545/3577 3514/4544/3576\nf 3524/4564/3592 3509/4554/3585 3837/4573/3601\nf 3557/4581/3609 3526/4553/3584 3508/4552/3583\nf 3521/4545/3577 3562/4603/3631 3550/4609/3636\nf 3571/4607/3634 3570/4614/3641 3513/4551/3582\nf 3569/4604/3613 3514/4544/3576 3519/4557/3587\nf 3509/4623/3585 3531/4549/3580 3552/4618/3645\nf 3531/4549/3580 3527/4547/3579 3556/4619/3646\nf 3551/4569/3597 3568/4611/3638 3515/4550/3581\nf 3512/4546/3578 3523/4540/3572 3560/4593/3621\nf 3568/4611/3638 3567/4568/3596 3516/4537/3570\nf 3839/4617/3644 3556/4619/3646 3527/4547/3579\nf 3528/4541/3573 3555/4590/3618 3840/4624/3649\nf 3518/4625/3650 3565/4578/3606 3564/4586/3614\nf 3560/4593/3621 3523/4540/3572 3511/4539/3571\nf 3567/4568/3596 3566/4588/3616 3517/4626/3651\nf 3554/4606/3633 3839/4617/3644 3507/4543/3575\nf 2518/4627/3652 3128/3952/3110 3129/3951/3109\nf 3950/4628/3653 3139/3968/3124 3099/4022/3168\nf 3096/4629/3167 3138/4010/3123 2983/4096/3235\nf 2497/4630/3654 3133/3962/3120 3128/3952/3110\nf 3133/3962/3120 2497/4630/3654 3131/3958/3116\nf 3130/3956/3114 3131/3958/3116 2453/3957/3115\nf 2397/4631/3655 2384/3131/2448 2440/3130/2447\nf 3757/3052/2382 3749/4632/3656 2341/4633/3657\nf 2340/4634/3658 2343/3005/2339 2344/3004/2338\nf 3724/4635/3659 3725/3007/2341 2343/3005/2339\nf 4481/4636/3328 3282/4263/3372 3283/4229/3343\nf 3282/4263/3372 3308/4262/3371 3309/4637/3660\nf 3309/4638/3660 3308/4313/3371 3334/4312/3404\nf 3583/4639/3661 3578/4640/3662 3573/4641/3663\nf 3578/4640/3662 3577/4642/3664 3572/4643/3665\nf 3586/4644/3666 3587/4645/3667 3023/3846/3019\nf 3579/4646/3668 3583/4647/3661 3582/4648/3669\nf 3581/4649/3670 3622/4650/3671 3594/4651/3672\nf 3622/4650/3671 3595/4652/3673 3621/4653/3674\nf 3580/4654/3675 3581/4649/3670 3576/4655/3676\nf 3585/4656/3677 3584/4657/3678 3049/4658/3141\nf 3623/4659/3679 3585/4656/3677 3036/3987/3016\nf 3584/4660/3678 3624/4661/3680 3052/4662/3681\nf 3632/4663/3682 3631/4664/3683 3578/4640/3662\nf 3588/4665/3684 3625/4666/3685 3018/3812/2990\nf 3616/4667/3686 3615/4668/3687 3076/3878/3046\nf 3612/4669/3688 3234/3900/3064 3262/4130/3264\nf 3617/4670/3689 3616/4667/3686 3070/3869/3040\nf 1399/1717/1479 859/952/829 3234/3900/3064\nf 3088/3893/3058 3613/4671/3690 3611/4672/3691\nf 3618/4673/3692 3617/4670/3689 3064/3868/3034\nf 3620/4674/3693 3619/4675/3694 3004/3799/2977\nf 3613/4671/3690 3088/3893/3058 3082/3886/3052\nf 3619/4675/3694 3618/4676/3692 3058/3855/3028\nf 3614/4677/3695 3082/3886/3052 3076/3878/3046\nf 3602/4678/3696 3603/4679/3697 3618/4676/3692\nf 3608/4680/3698 3613/4671/3690 3614/4677/3695\nf 3601/4681/3699 3602/4678/3696 3619/4675/3694\nf 3607/4682/3700 3614/4677/3695 3615/4668/3687\nf 3606/4683/3701 3615/4668/3687 3616/4667/3686\nf 3605/4684/3702 3616/4667/3686 3617/4670/3689\nf 3609/4685/3703 3612/4669/3688 3611/4672/3691\nf 3603/4686/3697 3604/4687/3704 3617/4670/3689\nf 3613/4671/3690 3608/4680/3698 3610/4688/3705\nf 1394/1735/1496 1399/1717/1479 3612/4669/3688\nf 3593/4689/3706 3606/4683/3701 3605/4684/3702\nf 3592/4690/3707 3607/4682/3700 3606/4683/3701\nf 3591/4691/3708 3608/4680/3698 3607/4682/3700\nf 3599/4692/3709 3602/4678/3696 3601/4681/3699\nf 3608/4680/3698 3591/4691/3708 3589/4693/3710\nf 3598/4694/3711 3603/4686/3697 3602/4695/3696\nf 3590/4696/3712 3609/4697/3703 3610/4698/3705\nf 3597/4699/3713 3604/4687/3704 3603/4686/3697\nf 3596/4700/3714 3605/4684/3702 3604/4687/3704\nf 3630/4701/3715 3631/4702/3683 3587/4645/3667\nf 3629/4703/3716 3628/4704/3717 3584/4657/3678\nf 3627/4705/3718 3629/4703/3716 3585/4656/3677\nf 3628/4706/3717 3626/4707/3719 3624/4661/3680\nf 3017/3811/2989 3023/3846/3019 3587/4645/3667\nf 3632/4708/3682 3633/4709/3720 3625/4666/3685\nf 3577/4642/3664 3578/4640/3662 3631/4664/3683\nf 3620/4674/3693 3625/4666/3685 3633/4709/3720\nf 3583/4647/3661 3579/4646/3668 3633/4710/3720\nf 3581/4649/3670 3580/4654/3675 3626/4711/3719\nf 3588/4665/3684 3587/4645/3667 3631/4702/3683\nf 3595/4652/3673 3622/4650/3671 3629/4703/3716\nf 3622/4650/3671 3581/4649/3670 3628/4704/3717\nf 3601/4712/3699 3633/4713/3720 3579/4714/3668\nf 3003/3798/2976 3018/3812/2990 3625/4666/3685\nf 3048/3839/3012 816/1022/892 1422/1766/1522\nf 3634/4715/3721 1422/1766/1522 1424/1768/1524\nf 3636/4716/3722 1426/1770/1526 1428/1772/1528\nf 3050/3986/3139 3048/3839/3012 3634/4715/3721\nf 3635/4717/3723 3627/4705/3718 3623/4659/3679\nf 3627/4705/3718 3635/4717/3723 3636/4716/3722\nf 3595/4652/3673 3636/4716/3722 3637/4718/3724\nf 1431/1773/1529 1375/1738/1497 3590/4696/3712\nf 3645/4719/3725 3598/4694/3711 3599/4720/3709\nf 3591/4691/3708 3640/4721/3726 3638/4722/3727\nf 3644/4723/3728 3597/4699/3713 3598/4694/3711\nf 3639/4724/3729 3590/4696/3712 3589/4725/3710\nf 3643/4726/3730 3596/4700/3714 3597/4699/3713\nf 3642/4727/3731 3593/4689/3706 3596/4700/3714\nf 3641/4728/3732 3592/4690/3707 3593/4689/3706\nf 3640/4721/3726 3591/4691/3708 3592/4690/3707\nf 3646/4729/3733 3599/4720/3709 3600/4730/3734\nf 3574/4731/3735 3647/4732/3736 3600/4730/3734\nf 3648/4733/3737 3586/4644/3666 3158/4004/3155\nf 3649/4734/3738 3158/4004/3155 3157/4003/3154\nf 3157/4003/3154 3156/4002/3153 3651/4735/3739\nf 3156/4002/3153 3155/4001/3152 3652/4736/3740\nf 3155/4001/3152 3253/4152/3282 3653/4737/3741\nf 3253/4152/3282 3251/4738/3149 3654/4739/3742\nf 3654/4740/3742 3251/3998/3149 3154/4008/3158\nf 3656/4741/3743 3214/3995/3146 3026/3982/3135\nf 3656/4741/3743 3219/4093/3233 2987/3849/3022\nf 3658/4742/3744 3118/3980/3133 2988/4090/3232\nf 3658/4742/3744 3119/3996/3147 3142/4743/3745\nf 4001/4744/3746 4000/4146/3276 3144/3979/3132\nf 295/1804/1553 1564/352/327 3769/4745/3747\nf 3770/4746/3748 2585/3269/2568 2586/3268/2554\nf 2684/3400/2672 2976/3779/2958 3661/4747/3749\nf 4040/4748/3750 2658/3361/2648 2684/3400/2672\nf 3664/4749/3751 2726/3431/2700 2689/4750/3752\nf 3665/4751/3753 2727/3432/2701 2726/3431/2700\nf 3666/4752/3754 2777/3450/2717 2727/3432/2701\nf 2775/3422/2692 2714/3516/2695 3667/4753/3755\nf 2729/3435/2704 2728/4754/2719 3667/4755/3755\nf 2730/3545/2795 2729/3435/2704 3668/4756/3756\nf 3670/4757/3757 2799/3565/2810 2730/3545/2795\nf 2797/3537/2790 2812/3574/2816 3671/4758/3758\nf 3672/4759/3759 2829/3587/2824 2814/4760/3760\nf 3673/4761/3761 2844/3609/2839 2829/3587/2824\nf 2842/3601/2833 2857/3630/2856 3674/4762/3762\nf 2857/3630/2856 2872/3662/2877 3675/4763/3763\nf 2889/4764/2902 2874/4765/2887 3675/4763/3763\nf 2904/4766/3764 2889/4764/2902 3676/4767/3765\nf 2902/3687/2895 2917/3727/2920 3678/4768/3766\nf 3678/4769/3766 2917/4770/2920 2932/3757/2928\nf 3679/4771/3767 2932/3757/2928 2947/3756/2943\nf 2948/3771/2937 2949/3770/2950 3680/4772/3768\nf 2946/3755/2942 2931/4773/2927 3682/4774/3769\nf 3682/4775/3769 2931/3736/2927 2916/3726/2919\nf 3684/4776/3770 2903/3701/2904 2918/3717/2915\nf 3684/4776/3770 2901/4777/3771 2886/3688/2896\nf 3686/4778/3772 2873/3654/2872 2888/3679/2889\nf 2858/3617/2846 2873/3654/2872 3686/4778/3772\nf 2856/3663/2878 2841/3631/2857 3688/4779/3773\nf 2841/3631/2857 2826/3602/2834 3689/4780/3774\nf 2813/3567/2812 2828/3590/2827 3689/4780/3774\nf 3691/4781/3775 2798/3540/2792 2813/3567/2812\nf 3691/4781/3775 2796/3536/2789 2719/4782/3776\nf 3693/4783/3777 2718/3445/2709 2721/3444/2712\nf 3694/4784/3778 2715/3442/2710 2718/3441/2709\nf 3695/4785/3779 2773/3440/2708 2715/3442/2710\nf 2774/4786/2775 2710/4787/2693 3696/4788/3780\nf 2709/3439/2707 2712/3438/2706 3696/4788/3780\nf 2707/3421/2691 2687/3780/2714 3698/4789/3781\nf 2654/3446/2713 2664/3776/2955 3699/4790/3782\nf 2664/3776/2955 2960/3775/2954 3700/4791/3783\nf 2585/3269/2568 3770/4746/3748 3767/4792/3784\nf 2571/4793/3785 3767/4792/3784 3773/4794/3786\nf 3711/4795/3787 3630/4701/3715 3586/4644/3666\nf 3711/4796/3787 3626/4711/3719 3580/4654/3675\nf 3713/4797/3788 3572/4643/3665 3577/4642/3664\nf 3624/4661/3680 3648/4733/3737 3649/4734/3738\nf 3052/4662/3681 3649/4734/3738 3650/4798/3789\nf 3047/3989/3140 3650/4798/3789 3651/4735/3739\nf 3651/4735/3739 3652/4736/3740 3037/3840/3013\nf 3652/4736/3740 3653/4737/3741 3032/3841/3014\nf 3653/4737/3741 3654/4739/3742 3029/4799/3790\nf 3029/4800/3790 3654/4740/3742 3655/4801/3791\nf 3219/4093/3233 3656/4741/3743 3655/4801/3791\nf 3214/3995/3146 3656/4741/3743 3657/4802/3792\nf 3119/3996/3147 3658/4742/3744 3657/4802/3792\nf 3118/3980/3133 3658/4742/3744 3659/4803/3793\nf 2570/4804/3794 2569/4805/2573 2652/4806/2612\nf 3845/4807/3795 3810/3321/2615 2625/3319/2613\nf 3845/4807/3795 3771/4808/3796 2626/3322/2616\nf 3662/4809/3797 3661/4747/3749 2972/4810/3798\nf 4040/4748/3750 3662/4809/3797 2665/3777/2956\nf 2708/4811/2690 3664/4749/3751 3663/4812/3799\nf 2711/3419/2689 3665/4813/3753 3664/4814/3751\nf 2775/3422/2692 3666/4815/3754 3665/4813/3753\nf 3666/4816/3754 3667/4755/3755 2728/4754/2719\nf 2717/4817/2694 3668/4756/3756 3667/4755/3755\nf 2720/3427/2697 3669/4818/3800 3668/4819/3756\nf 2797/3537/2790 3670/4820/3757 3669/4818/3800\nf 2799/3565/2810 3670/4757/3757 3671/4821/3758\nf 3672/4759/3759 3671/4758/3758 2812/3574/2816\nf 3673/4761/3761 3672/4759/3759 2827/3577/2818\nf 2844/3609/2839 3673/4761/3761 3674/4762/3762\nf 3674/4762/3762 3675/4763/3763 2874/4765/2887\nf 3676/4767/3765 3675/4763/3763 2872/3662/2877\nf 3677/4822/3801 3676/4767/3765 2887/3668/2880\nf 3677/4822/3801 3678/4768/3766 2919/4823/2912\nf 3678/4769/3766 3679/4771/3767 2934/3744/2933\nf 2934/3744/2933 3679/4771/3767 3680/4772/3768\nf 3681/4824/3802 3680/4772/3768 2947/3756/2943\nf 3681/4825/3802 3682/4826/3769 2933/4827/2922\nf 2933/4828/2922 3682/4775/3769 3683/4829/3803\nf 2901/4777/3771 3684/4776/3770 3683/4829/3803\nf 2903/3701/2904 3684/4776/3770 3685/4830/3804\nf 3686/4778/3772 3685/4830/3804 2886/3688/2896\nf 2856/3663/2878 3687/4831/3805 3686/4778/3772\nf 3687/4831/3805 3688/4779/3773 2843/3611/2841\nf 3688/4779/3773 3689/4780/3774 2828/3590/2827\nf 3690/4832/3806 3689/4780/3774 2826/3602/2834\nf 2796/3536/2789 3691/4781/3775 3690/4832/3806\nf 2798/3540/2792 3691/4781/3775 3692/4833/3807\nf 2716/3429/2698 3693/4783/3777 3692/4833/3807\nf 3694/4784/3778 3693/4834/3777 2716/4835/2698\nf 3695/4785/3779 3694/4784/3778 2713/4836/2696\nf 3695/4785/3779 3696/4788/3780 2712/3438/2706\nf 3697/4837/3808 3696/4788/3780 2710/4787/2693\nf 3697/4837/3808 3698/4838/3781 2692/3403/2675\nf 2653/3351/2639 4041/4839/3809 3699/4790/3782\nf 2663/3352/2640 3699/4790/3782 3700/4791/3783\nf 2627/3324/2618 2626/3322/2616 3771/4808/3796\nf 3971/4840/3810 3701/4841/3811 3702/4842/3812\nf 3970/4843/3813 3702/4842/3812 3703/4844/3814\nf 3969/4845/3815 3703/4844/3814 3704/4846/3816\nf 3967/4847/3817 3705/4848/3818 3706/4849/3819\nf 3966/4850/3820 3706/4849/3819 3707/4851/3821\nf 3123/4852/3822 3707/4851/3821 3708/4853/3823\nf 4022/4854/3824 3708/4853/3823 3709/4855/3825\nf 3972/4856/3826 3709/4857/3825 3710/4858/3827\nf 3626/4707/3719 3711/4795/3787 3648/4733/3737\nf 3630/4859/3715 3711/4796/3787 3712/4860/3828\nf 3575/4861/3829 3713/4797/3788 3712/4860/3828\nf 2311/4862/2312 2312/2967/2310 3714/4863/2306\nf 3716/2976/2316 3715/2962/2305 2309/4864/3830\nf 3717/4865/3831 3716/2976/2316 2315/4219/3334\nf 3718/2979/2319 3717/4865/3831 2318/4189/3308\nf 3719/4866/2322 3718/2979/2319 2321/4187/3306\nf 2327/4183/3302 3720/2987/2325 3719/4866/2322\nf 2330/4222/3336 3721/2991/2328 3720/2987/2325\nf 3722/2995/2331 3721/2991/2328 2330/4222/3336\nf 3723/3002/2336 3722/2999/2331 2333/4867/3335\nf 3841/4868/3832 3723/3002/2336 2336/4218/3333\nf 3726/4869/3833 3725/3007/2341 2342/4212/3327\nf 2356/4204/3319 3729/3008/2342 3728/4870/3834\nf 2359/4203/3318 3730/3013/2347 3729/3008/2342\nf 3794/4871/3316 3842/3016/2350 3730/3013/2347\nf 2364/3021/2355 3732/4872/2353 3714/4863/2306\nf 2367/4873/2357 3733/3024/2358 3732/3019/2353\nf 2370/4874/2361 3734/3028/2362 3733/3024/2358\nf 2409/4875/2365 3739/3032/2366 3734/3028/2362\nf 3736/3037/2371 3735/4876/3835 2373/3036/2370\nf 2379/3048/2374 3737/3043/2375 3736/4877/2371\nf 2382/3047/2378 3738/3049/2379 3737/3043/2375\nf 3735/4878/3835 3739/4879/2366 2409/3031/2365\nf 2339/4214/3329 2342/4212/3327 3725/3007/2341\nf 2399/4880/2469 2402/4881/2467 3762/3068/2397\nf 2391/3075/2401 3744/3064/2393 3745/3062/2392\nf 2388/3055/2385 3754/3054/2384 3756/3053/2383\nf 2385/4882/3836 2384/3131/2448 3757/3052/2382\nf 2400/3143/2460 3743/4883/2394 3765/4884/3837\nf 2407/3096/2417 3759/4885/2405 3761/4886/2404\nf 2408/3098/2419 3740/4887/2407 3759/4885/2405\nf 2323/2978/2318 3744/3064/2393 3765/4888/3837\nf 2393/3133/2450 3746/4889/2391 3747/3060/2390\nf 2371/3026/2360 3742/3071/2399 3758/4890/2411\nf 2394/3134/2451 3747/3060/2390 3748/3059/2389\nf 2384/3131/2448 2397/4631/3655 3749/4632/3656\nf 3797/4891/3838 2396/3137/2454 3750/3058/2388\nf 2405/4892/2409 2406/4893/2415 3761/3078/2404\nf 2398/3149/2465 3763/4894/2395 3743/4883/2394\nf 2398/3149/2465 2399/3153/2469 3764/4895/2396\nf 3758/4890/2411 3760/3077/2403 2374/4896/3839\nf 2403/3147/2463 2404/3088/2410 3742/4897/2399\nf 2392/3139/2456 3745/3062/2392 3746/4889/2391\nf 2354/3011/2345 3754/3054/2384 3753/4898/3840\nf 2402/3151/2467 2403/3147/2463 3741/4899/2400\nf 2389/3126/2443 3756/3053/2383 3844/4900/3841\nf 2395/3136/2453 3748/3059/2389 3750/3058/2388\nf 2341/4633/3657 3790/3000/2334 3791/3001/2335\nf 2578/4151/3281 2627/3324/2618 3772/4901/3842\nf 2578/4151/3281 3768/4902/3843 3852/4903/3844\nf 3777/4904/3845 3774/4905/3846 3775/4906/3847\nf 3804/4907/3848 2514/4908/3849 2483/4909/3850\nf 2465/4910/3851 3779/4911/3852 3778/4912/3853\nf 3814/4913/3854 2483/4909/3850 3134/4914/3855\nf 2466/4915/3856 2501/3266/2566 2500/3273/2572\nf 3772/4901/3842 3771/4808/3796 2623/3277/2576\nf 2466/4916/3856 3778/4917/3853 1573/1977/1655\nf 165/1978/1656 202/295/274 2501/3265/2566\nf 3800/4918/3857 3134/4914/3855 3774/4905/3846\nf 2605/3279/2578 2644/3357/2645 2582/4919/3858\nf 4007/4920/3859 3919/4921/3860 3955/4922/3861\nf 2540/4923/3862 245/1985/1663 1503/1925/1630\nf 3709/4857/3825 2539/4924/3863 2540/4923/3862\nf 3708/4853/3823 2961/4925/3864 2539/4926/3863\nf 2961/4925/3864 3708/4853/3823 3707/4851/3821\nf 3851/4927/3865 3787/3465/2731 2645/3295/2593\nf 3848/4928/3866 2646/3356/2644 2645/3295/2593\nf 3849/4929/3867 2582/4919/3858 2644/3357/2645\nf 2598/3291/2586 2603/4930/2588 2628/4931/2624\nf 2599/3285/2584 2603/3289/2588 2598/3287/2586\nf 2595/3282/2581 2599/3285/2584 2594/3283/2582\nf 2590/3275/2574 2569/3274/2573 2591/4932/3868\nf 2569/4805/2573 2570/4804/3794 2587/4933/3869\nf 2571/4793/3785 2572/3320/2614 3785/3263/2565\nf 2662/4934/3870 2663/3352/2640 2959/4935/3871\nf 2591/4936/3868 2587/4933/3869 2588/4937/2611\nf 298/2001/1675 303/4938/294 2592/4939/2579\nf 2340/4634/3658 3791/3001/2335 3841/4868/3832\nf 3731/4940/3872 2361/4941/3873 3793/3017/2351\nf 2361/4941/3873 2360/4942/3874 3795/3018/2352\nf 3844/4900/3841 3795/3018/2352 2360/4942/3874\nf 3749/4632/3656 3843/3057/2387 3790/3000/2334\nf 3798/4943/3875 3796/3128/2445 2390/4944/3876\nf 2518/4627/3652 3803/3201/2509 3801/3959/3117\nf 2553/4945/3877 3805/3233/2536 3803/3201/2509\nf 2577/3270/2569 3807/3257/2560 3808/3256/2559\nf 2498/4946/3878 3802/3259/2562 3807/3257/2560\nf 2962/4947/3879 3707/4851/3821 3706/4849/3819\nf 3784/3271/2570 3852/4903/3844 3859/4948/3880\nf 2574/3253/2556 2625/3319/2613 3810/3321/2615\nf 3946/4949/3881 3099/4022/3168 3812/3929/3091\nf 2453/3957/3115 3799/3953/3111 3797/4891/3838\nf 2452/3954/3112 3799/3953/3111 3813/4950/3882\nf 2497/4630/3654 3801/3959/3117 3813/4950/3882\nf 3956/4951/3883 4007/4920/3859 3777/4952/3845\nf 3811/4953/3884 3812/3929/3091 3099/4022/3168\nf 2445/3127/2444 3955/4922/3861 3919/4921/3860\nf 4493/4954/3885 3794/4871/3316 2359/4203/3318\nf 4490/4955/3332 4494/4956/3886 3792/4957/3330\nf 3314/4239/3353 3818/4252/3363 3816/4958/3887\nf 3817/4959/3888 3815/4264/3373 3281/4960/3367\nf 3340/4293/3394 3820/4303/3399 3818/4961/3363\nf 3333/4359/3401 3819/4311/3403 3817/4962/3888\nf 3366/4348/3426 3822/4963/3432 3820/4964/3399\nf 3821/4380/3452 3819/4311/3403 3333/4359/3401\nf 3824/4965/3479 3822/4963/3432 3366/4348/3426\nf 3823/4966/3889 3821/4380/3452 3359/4358/3434\nf 3826/4967/3509 3824/4965/3479 3392/4367/3441\nf 3411/4418/3480 3825/4423/3483 3823/4966/3889\nf 3442/4432/3491 3827/4436/3494 3825/4968/3483\nf 3828/4476/3521 3826/4455/3509 3418/4969/3473\nf 3444/4454/3508 3828/4476/3521 3830/4970/3890\nf 3827/4436/3494 3829/4487/3531 3463/4501/3542\nf 3829/4487/3531 3831/4505/3544 3489/4525/3560\nf 3470/4971/3891 3830/4970/3890 3832/4530/3565\nf 3832/4530/3565 3834/4555/3586 3522/4972/3892\nf 3489/4525/3560 3831/4505/3544 3833/4561/3591\nf 3554/4606/3633 3529/4535/3568 3530/4565/3593\nf 3559/4572/3600 3558/4591/3619 3525/4560/3590\nf 3835/4576/3604 3511/4539/3571 3510/4563/3589\nf 3833/4561/3591 3520/4558/3588 3563/4570/3598\nf 3565/4578/3606 3518/4625/3650 3517/4626/3651\nf 3553/4598/3626 3530/4565/3593 3522/4972/3892\nf 3561/4599/3627 3522/4972/3892 3834/4555/3586\nf 2963/4973/3893 3706/4849/3819 3705/4848/3818\nf 3724/4635/3659 3841/4868/3832 3792/4215/3330\nf 2362/4974/3315 3731/4940/3872 3842/3016/2350\nf 2397/4631/3655 3797/4891/3838 3843/3057/2387\nf 3796/3128/2445 3844/4900/3841 3755/4975/3894\nf 3870/4976/3895 1672/2086/1740 1721/2085/1739\nf 3919/4921/3860 4007/4920/3859 3956/4951/3883\nf 3809/4977/3896 2581/4978/2610 2606/3278/2577\nf 2572/3320/2614 2573/3255/2558 2583/3267/2567\nf 2581/4978/2610 3809/4977/3896 2622/4979/3897\nf 3788/4980/2677 3851/4927/3865 2602/3292/2590\nf 3701/4841/3811 3971/4840/3810 4032/4981/3898\nf 3852/4903/3844 3768/4902/3843 2582/4919/3858\nf 2629/3349/2623 3786/3348/2637 3788/3406/2677\nf 2971/4982/3271 2978/4983/3899 2975/4984/3900\nf 3852/4903/3844 3849/4929/3867 3789/4985/3901\nf 2979/4986/3902 2969/4140/3270 2970/3774/2953\nf 2969/4987/3270 2979/4988/3902 3125/4989/3903\nf 3124/4990/3904 2976/3779/2958 2977/3778/2957\nf 2587/4933/3869 3770/4746/3748 3769/4991/3747\nf 2570/4804/3794 3767/4792/3784 3770/4746/3748\nf 3767/4792/3784 2570/4804/3794 2622/4979/3897\nf 3809/4977/3896 3845/4807/3795 3773/4794/3786\nf 3845/4807/3795 3809/4977/3896 2623/3277/2576\nf 2464/4992/3905 2498/4946/3878 2503/3272/2571\nf 3768/4902/3843 3772/4901/3842 2624/4993/3906\nf 3660/4994/3907 3661/4747/3749 2976/3779/2958\nf 3661/4747/3749 3660/4994/3907 3855/4995/3908\nf 3856/4996/3909 2960/3775/2954 2972/4810/3798\nf 3857/4997/3910 3700/4791/3783 2960/3775/2954\nf 3700/4791/3783 3857/4997/3910 3858/4998/3911\nf 2959/4935/3871 3858/4998/3911 3965/4999/3912\nf 3789/4985/3901 3783/3327/2620 3782/5000/3913\nf 4024/5001/3914 3127/5002/3915 3854/5003/3916\nf 3859/5004/3880 3782/5005/3913 2485/5006/3917\nf 2426/3105/2426 2432/3112/2433 3804/4907/3848\nf 3704/4846/3816 2968/5007/3918 2964/5008/3919\nf 2968/5007/3918 3704/4846/3816 3703/4844/3814\nf 3136/4144/3274 3804/4907/3848 3814/4913/3854\nf 2967/5009/3920 3703/4844/3814 3702/4842/3812\nf 2965/5010/3921 3702/4842/3812 3701/4841/3811\nf 4011/4145/3275 3814/4913/3854 3800/4918/3857\nf 3888/5011/3922 3867/5012/3923 3916/5013/3924\nf 3899/5014/3925 3900/5015/3926 2966/5016/3927\nf 3900/5015/3926 3899/5014/3925 3896/5017/3928\nf 3893/5018/3929 3894/5019/3930 3897/5020/3931\nf 3890/5021/3932 3891/5022/3933 3894/5019/3930\nf 3888/5011/3922 3891/5022/3933 3890/5021/3932\nf 3867/5012/3923 3888/5011/3922 3887/5023/3934\nf 3659/4803/3793 3142/4743/3745 4002/5024/3935\nf 3880/5025/3936 1681/2105/1759 1735/2104/1758\nf 132/147/136 1573/1977/1655 3778/4917/3853\nf 2434/5026/3937 3778/4912/3853 3779/4911/3852\nf 3927/5027/3938 3868/5028/3939 3869/5029/3940\nf 3964/5030/3941 2514/4908/3849 2428/3115/2436\nf 3924/5031/3942 3923/5032/3943 3880/5025/3936\nf 3917/5033/3944 3869/5029/3940 3876/5034/3945\nf 3920/5035/3946 3877/5036/3947 3883/5037/3948\nf 3922/5038/3949 3924/5031/3942 3879/5039/3950\nf 3922/5040/3949 3878/5041/3951 3877/5036/3947\nf 3925/5042/3952 3882/5043/3953 3881/5044/3954\nf 3996/4150/3280 1806/2182/1823 733/2236/1862\nf 3926/5045/3955 3883/5037/3948 3882/5043/3953\nf 3879/5039/3950 3880/5025/3936 3929/5046/3956\nf 3878/5047/3951 3879/5039/3950 3930/5048/3957\nf 3865/5049/3958 3887/5023/3934 4028/5050/3959\nf 3891/5022/3933 3888/5011/3922 3915/5051/3960\nf 4028/5050/3959 3887/5023/3934 3890/5021/3932\nf 4029/5052/3961 3890/5021/3932 3893/5018/3929\nf 3962/5053/3962 2483/4909/3850 2514/4908/3849\nf 2483/4909/3850 3962/5053/3962 3960/5054/3963\nf 4030/5055/3964 3893/5018/3929 3896/5017/3928\nf 4031/5056/3965 3896/5017/3928 3899/5014/3925\nf 3911/5057/3966 2563/5058/3967 2562/5059/3968\nf 3912/5060/3969 2562/5059/3968 2561/5061/3970\nf 2551/3229/2532 3898/5062/3971 2557/5063/3972\nf 2552/3228/2531 3895/5064/3973 3898/5062/3971\nf 3805/3233/2536 3892/5065/3974 3895/5064/3973\nf 3892/5065/3974 3805/3233/2536 2553/4945/3877\nf 3889/5066/3975 2553/4945/3877 3129/3951/3109\nf 3129/3951/3109 2519/3950/3108 3781/5067/3976\nf 3913/5068/3977 3806/5069/3978 2563/5058/3967\nf 252/1136/1002 1702/2144/1789 3903/5070/3979\nf 2546/4081/3223 3903/5070/3979 3904/5071/3980\nf 2536/3227/2530 3906/5072/3981 3901/5073/3982\nf 2537/3222/2525 3907/5074/3983 3902/5075/3984\nf 2535/3225/2528 3901/5073/3982 3907/5074/3983\nf 2545/3773/2952 3904/5076/3980 3906/5072/3981\nf 2558/5077/3985 3908/5078/3986 3905/5079/3987\nf 2559/3241/2544 3909/5080/3988 3908/5078/3986\nf 2560/3240/2543 3910/3244/2547 3909/5080/3988\nf 3806/5069/3978 3913/5068/3977 3914/5081/3989\nf 2564/5082/3990 3914/5081/3989 3915/5051/3960\nf 3915/5051/3960 3916/5013/3924 2981/5083/3991\nf 2444/3124/2441 3919/4921/3860 3928/5084/3992\nf 3867/5012/3923 3866/5085/3993 3918/5086/3994\nf 3884/5087/3995 3927/5027/3938 3917/5033/3944\nf 3871/5088/3996 3870/5089/3895 3923/5090/3943\nf 3885/5091/3997 3917/5033/3944 3921/5092/3998\nf 3873/5093/3999 3920/5035/3946 3926/5045/3955\nf 3871/5088/3996 3924/5094/3942 3922/5040/3949\nf 3872/5095/4000 3922/5040/3949 3920/5035/3946\nf 3875/5096/4001 3925/5042/3952 3921/5092/3998\nf 3874/5097/4002 3926/5045/3955 3925/5042/3952\nf 3877/5098/3947 3878/5047/3951 3931/5099/4003\nf 3958/5100/4004 3774/4905/3846 3134/4914/3855\nf 3957/5101/4005 3775/4906/3847 3774/4905/3846\nf 3775/4906/3847 3957/5101/4005 3860/3329/2622\nf 3766/5102/4006 3860/3329/2622 3861/3328/2621\nf 3853/5103/4007 3862/5104/4008 3868/5028/3939\nf 3883/5037/3948 3877/5036/3947 3932/5105/4009\nf 3882/5043/3953 3883/5037/3948 3933/5106/4010\nf 3882/5043/3953 3934/5107/4011 3935/5108/4012\nf 3881/5044/3954 3935/5108/4012 3936/5109/4013\nf 3936/5109/4013 3935/5108/4012 4002/5110/3935\nf 2980/5111/4014 2981/5083/3991 3916/5013/3924\nf 2541/4079/3222 3939/3224/2527 3937/3221/2524\nf 2542/4078/3221 3940/3226/2529 3939/3224/2527\nf 2566/3242/2545 3942/3239/2542 3941/3247/2550\nf 2560/3240/2543 3942/3239/2542 3938/3852/3025\nf 2558/5077/3985 3947/5112/4015 3941/3247/2550\nf 3203/4168/3291 3952/3772/2951 3940/3226/2529\nf 2563/5058/3967 3943/3920/3082 3944/3923/3085\nf 2562/5059/3968 3944/3923/3085 3945/3933/3095\nf 3806/5069/3978 3953/3928/3090 3943/3920/3082\nf 2561/5061/3970 3945/3933/3095 3947/5112/4015\nf 3948/5113/4016 3949/3940/3100 2981/5083/3991\nf 2981/5083/3991 3949/3940/3100 3950/4628/3653\nf 3204/4165/3290 984/1181/1042 1753/2189/1827\nf 3203/4166/3291 3204/4165/3290 3951/4076/3219\nf 3137/5114/4017 3950/4628/3653 3946/4949/3881\nf 2564/5082/3990 3946/4949/3881 3953/3928/3090\nf 3948/5113/4016 2982/5115/3148 3120/5116/3023\nf 3933/5117/4010 3932/5118/4009 3999/4147/3277\nf 3798/5119/3875 3846/5120/4018 3955/5121/3861\nf 2446/5122/4019 3954/4143/3273 3846/5120/4018\nf 3777/4904/3845 4007/5123/3859 4010/5124/4020\nf 2428/3115/2436 2514/4908/3849 3804/4907/3848\nf 3865/5049/3958 3864/5125/4021 3866/5085/3993\nf 3862/5104/4008 3853/5103/4007 3854/5003/3916\nf 3957/5101/4005 2485/5126/3917 3782/5000/3913\nf 3857/4997/3910 3868/5028/3939 3862/5104/4008\nf 3868/5028/3939 3857/4997/3910 3856/4996/3909\nf 3958/5100/4004 2464/4992/3905 2485/5126/3917\nf 2464/4992/3905 3958/5100/4004 3960/5054/3963\nf 3869/5029/3940 3856/4996/3909 3855/4995/3908\nf 3876/5034/3945 3855/4995/3908 3660/4994/3907\nf 2498/4946/3878 2464/4992/3905 3959/5127/4022\nf 3875/5096/4001 3660/4994/3907 3124/4990/3904\nf 3959/5127/4022 3960/5054/3963 3962/5053/3962\nf 3125/4989/3903 3873/5093/3999 3874/5097/4002\nf 3802/3259/2562 3959/5127/4022 3961/5128/4023\nf 3963/5129/4024 2499/3258/2561 2502/3260/2563\nf 2465/4910/3851 2500/3273/2572 2499/3258/2561\nf 3961/5128/4023 3962/5053/3962 3964/5030/3941\nf 3779/4911/3852 2465/4910/3851 3963/5129/4024\nf 2979/4988/3902 3872/5095/4000 3873/5093/3999\nf 2975/4984/3900 3871/5088/3996 3872/5095/4000\nf 3871/5088/3996 2975/4984/3900 2978/4983/3899\nf 4033/5130/4025 3965/4999/3912 3127/5002/3915\nf 3705/4848/3818 3967/4847/3817 3968/5131/4026\nf 4242/4030/3176 3973/5132/4027 1776/2220/1837\nf 3989/4028/3174 3973/5132/4027 3974/5133/4028\nf 3988/5134/4029 3974/5133/4028 3975/5135/4030\nf 4247/5136/4031 3976/5137/4032 3975/5135/4030\nf 4250/5138/4033 3977/5139/4034 3976/5137/4032\nf 4253/5140/4035 3978/5141/4036 3977/5139/4034\nf 4257/5142/4037 3979/5143/4038 3978/5141/4036\nf 4254/4115/3251 3980/5144/4039 3979/5143/4038\nf 3983/5145/4040 3980/5144/4039 3981/5146/4041\nf 3976/5137/4032 3986/4035/3181 3987/5147/4042\nf 3973/5132/4027 3989/4028/3174 1794/1076/944\nf 3979/5143/4038 3990/4038/3184 3984/4037/3183\nf 3980/5144/4039 3983/5145/4040 3990/4038/3184\nf 3240/4029/3175 3989/4028/3174 3988/5134/4029\nf 3977/5139/4034 3985/4036/3182 3986/4035/3181\nf 3978/5141/4036 3984/4037/3183 3985/4036/3182\nf 3259/4040/3186 3988/5134/4029 3987/5147/4042\nf 3221/4026/3172 3983/5145/4040 3982/5148/4043\nf 3858/4998/3911 3862/5104/4008 3127/5002/3915\nf 3993/5149/4044 3994/5150/4045 3992/5151/4046\nf 3927/5027/3938 3884/5087/3995 3993/5149/4044\nf 3991/5152/4047 3854/5003/3916 3853/5103/4007\nf 3854/5003/3916 3991/5152/4047 4035/5153/4048\nf 3884/5087/3995 3995/5154/4049 3994/5150/4045\nf 3995/5154/4049 3884/5087/3995 3885/5091/3997\nf 3932/5118/4009 3931/5099/4003 3998/4148/3278\nf 3931/5099/4003 3930/5048/3957 3997/4149/3279\nf 3930/5048/3957 3929/5046/3956 3996/4150/3280\nf 3934/5107/4011 3933/5106/4010 4000/5155/3276\nf 4001/5156/3746 4002/5110/3935 3935/5108/4012\nf 4003/5157/4050 4002/5110/3935 3142/5158/3745\nf 3864/5125/4021 4006/5159/4051 4005/5160/4052\nf 4008/5161/4053 3780/5162/4054 3847/5163/4055\nf 4004/5164/4056 3995/5154/4049 3936/5109/4013\nf 4009/5165/4057 3847/5163/4055 2493/5166/4058\nf 4003/5157/4050 2980/5111/4014 3918/5086/3994\nf 3863/5167/4059 4008/5161/4053 4009/5165/4057\nf 3776/5168/4060 3775/4906/3847 3766/5102/4006\nf 4004/5164/4056 3918/5086/3994 3866/5085/3993\nf 2982/5115/3148 3948/5113/4016 2980/5111/4014\nf 3995/5154/4049 4004/5164/4056 4005/5160/4052\nf 3846/5120/4018 4011/4145/3275 4010/5124/4020\nf 4006/5159/4051 3992/5151/4046 3994/5150/4045\nf 3780/5162/4054 3781/5067/3976 2519/3950/3108\nf 2513/3963/3121 2493/5166/4058 3847/5163/4055\nf 2493/5166/4058 2513/3963/3121 3132/3961/3119\nf 3135/5169/4061 3132/3961/3119 2484/3955/3113\nf 2441/3129/2446 2442/5170/4062 2492/5171/4063\nf 2442/5170/4062 2441/3129/2446 2385/4882/3836\nf 3752/5172/2381 3751/5173/4064 2386/5174/4065\nf 3751/5173/4064 3752/5172/2381 2347/5175/2337\nf 2346/5176/2340 2349/5177/4066 2348/5178/4067\nf 3726/4869/3833 3727/5179/4068 2349/5180/4066\nf 3891/5022/3933 3914/5081/3989 3913/5068/3977\nf 3894/5019/3930 3913/5068/3977 3911/5057/3966\nf 3897/5020/3931 3911/5057/3966 3912/5060/3969\nf 3905/5079/3987 2966/5016/3927 3900/5015/3926\nf 3908/5078/3986 2965/5010/3921 2966/5016/3927\nf 3909/5080/3988 2967/5009/3920 2965/5010/3921\nf 3910/3244/2547 2968/5007/3918 2967/5009/3920\nf 3558/4591/3619 3555/4590/3618 3528/4541/3573\nf 3518/4625/3650 3492/5181/4069 3491/4536/3569\nf 3491/4536/3569 3492/5181/4069 3466/5182/4070\nf 3439/4441/3498 3465/5183/3536 3466/5184/4070\nf 3414/4404/3468 3439/4441/3498 3440/5185/4071\nf 3415/5186/4072 3389/5187/4073 3388/4394/3459\nf 3389/5187/4073 3363/5188/4074 3362/4340/3421\nf 3363/5188/4074 3337/5189/4075 3336/4341/3390\nf 3336/4284/3390 3337/5190/4075 3311/5191/4076\nf 3311/5192/4076 3285/5193/4077 3284/4228/3342\nf 4488/5194/3325 3284/4228/3342 3285/5193/4077\nf 3727/5179/4068 3726/4869/3833 2345/4211/3326\nf 2968/5007/3918 3910/3244/2547 3902/5075/3984\nf 3907/5074/3983 2963/4973/3893 2964/5008/3919\nf 3901/5073/3982 2962/4947/3879 2963/4973/3893\nf 3906/5072/3981 2961/4925/3864 2962/4947/3879\nf 2961/4925/3864 3906/5072/3981 3904/5076/3980\nf 2539/4924/3863 3904/5071/3980 3903/5070/3979\nf 2534/3220/2523 4023/5195/4078 1830/1924/1629\nf 3526/4553/3584 3557/4581/3609 3836/5196/3605\nf 3519/5197/3587 3493/5198/3566 3492/5181/4069\nf 3504/4509/3548 3496/5199/4079 3522/4972/3892\nf 3135/5200/4061 3956/4951/3883 3776/5201/4060\nf 3956/4951/3883 3135/5200/4061 2492/5202/4063\nf 2442/5203/4062 2443/3125/2442 3928/5084/3992\nf 2443/3125/2442 2442/5203/4062 2386/5204/4065\nf 2421/3106/2427 2426/3105/2426 3136/4144/3274\nf 2416/3097/2418 2421/3106/2427 3954/4143/3273\nf 2408/3098/2419 2416/3097/2418 2446/5122/4019\nf 3542/4582/3610 3557/4581/3609 3838/4596/3624\nf 3544/4589/3617 3541/4601/3629 4019/4595/3623\nf 3541/4601/3629 3540/4600/3628 3542/4582/3610\nf 3540/4600/3628 4018/4574/3602 4017/4583/3611\nf 4017/5205/3611 4018/5206/3602 3547/5207/3648\nf 3547/5207/3648 3543/5208/3647 3539/4592/3620\nf 4015/4612/3639 3539/4592/3620 3543/5208/3647\nf 4020/5209/3643 3545/5210/3632 4014/4613/3640\nf 3546/5211/3625 3536/4571/3599 4014/4613/3640\nf 3538/5212/3635 3548/4610/3637 3536/4571/3599\nf 3549/5213/3642 4012/4566/3594 3548/4610/3637\nf 3549/5213/3642 3537/5214/3630 3532/4567/3595\nf 3537/5214/3630 4013/4584/3612 3533/4587/3615\nf 3535/4580/3608 3534/4579/3607 3533/4587/3615\nf 3493/4531/3566 3467/4479/3523 3466/5184/4070\nf 3440/5185/4071 3466/5184/4070 3467/4479/3523\nf 3441/4443/3500 3416/4442/3499 3415/5186/4072\nf 3389/5187/4073 3415/5186/4072 3416/4442/3499\nf 3390/4403/3467 3364/4337/3419 3363/5188/4074\nf 3364/4337/3419 3338/5215/3387 3337/5189/4075\nf 3312/5216/4080 3311/5191/4076 3337/5190/4075\nf 3285/5193/4077 3311/5192/4076 3312/5217/4080\nf 4487/5218/4081 3285/5193/4077 3286/4226/3340\nf 3728/4870/3834 3727/5219/4068 2350/5220/4082\nf 3727/5221/4068 3728/5222/3834 2352/5223/2344\nf 2349/5224/4066 2352/3010/2344 2351/3012/2346\nf 3753/5225/3840 3751/5173/4064 2348/5178/4067\nf 3751/5173/4064 3753/5225/3840 2387/5226/2386\nf 3740/5227/2407 2408/5228/2419 2390/4944/3876\nf 3755/4975/3894 2360/4942/3874 2383/5229/2377\nf 2382/5230/2378 2383/5229/2377 2360/4942/3874\nf 3738/3049/2379 2382/3047/2378 2361/5231/3873\nf 3731/4940/3872 2362/4974/3315 2381/5232/2380\nf 4477/5233/3314 3289/5234/3365 3296/5235/3383\nf 3315/4253/3364 3322/5236/4083 3296/5237/3383\nf 3341/4304/3400 3348/4324/3411 3322/5238/4083\nf 3348/4324/3411 3341/4304/3400 3367/4357/3433\nf 3400/4399/3463 3374/4392/3417 3367/5239/3433\nf 3393/4416/3448 3419/4415/3478 3426/5240/4084\nf 3419/4415/3478 3444/4454/3508 3452/4434/3492\nf 3470/4971/3891 3478/4496/3538 3452/4434/3492\nf 3478/4496/3538 3470/4971/3891 3496/5199/4079\nf 3864/5125/4021 3865/5049/3958 4027/5241/4085\nf 3991/5152/4047 3992/5151/4046 4034/5242/4086\nf 4036/5243/4087 4034/5242/4086 3992/5151/4046\nf 4006/5159/4051 3864/5125/4021 4026/5244/4088\nf 2657/5245/4089 2661/5246/4090 3965/4999/3912\nf 2659/5247/4091 2662/4934/3870 2661/5246/4090\nf 2696/3408/2678 2693/3407/2674 2648/3350/2638\nf 2735/3493/2720 2642/5248/4092 2643/3363/2650\nf 2664/3776/2955 2654/3446/2713 2647/5249/4093\nf 2642/5248/4092 2641/5250/2722 4046/5251/2729\nf 2740/3455/2721 2694/3490/2754 4037/5252/4094\nf 4042/3468/2734 2660/5253/4095 2659/5247/4091\nf 2766/5254/4096 4039/3509/2769 4038/4138/3269\nf 2760/5255/2772 4038/4138/3269 2655/5256/2642\nf 3663/4812/3799 2689/4750/3752 2658/3361/2648\nf 2687/3447/2714 2654/3446/2713 4041/4839/3809\nf 2688/3448/2715 3663/4812/3799 4040/4748/3750\nf 2692/3403/2675 3698/4838/3781 4041/5257/3809\nf 2660/5253/4095 2648/3350/2638 2662/4934/3870\nf 2702/3414/2684 2734/3461/2727 2750/5258/4097\nf 2771/3413/2683 2778/3462/2728 2734/3461/2727\nf 2778/3462/2728 2771/3413/2683 2700/3515/2681\nf 2698/3409/2679 2732/3459/2725 2733/3458/2724\nf 2696/3408/2678 2695/3467/2733 2732/3459/2725\nf 2660/5253/4095 4042/3468/2734 2695/3467/2733\nf 4033/5130/4025 3849/4929/3867 3850/5259/4098\nf 2657/5245/4089 3850/5259/4098 4043/5260/4099\nf 3849/4929/3867 4033/5130/4025 4024/5001/3914\nf 3789/4985/3901 4024/5001/3914 4025/5261/4100\nf 4025/5261/4100 4035/5153/4048 3861/3328/2621\nf 4035/5153/4048 4034/5242/4086 3863/5167/4059\nf 4034/5242/4086 4036/5243/4087 4008/5161/4053\nf 3780/5162/4054 4008/5161/4053 4036/5243/4087\nf 4026/5244/4088 4027/5241/4085 3781/5067/3976\nf 2643/3363/2650 4044/3364/2651 1852/2326/1910\nf 2642/5248/4092 4045/3405/2676 4044/3364/2651\nf 2641/3456/2722 4037/5252/4094 4047/3464/2730\nf 4045/3405/2676 4046/5251/2729 3851/5262/3865\nf 4063/3531/2784 4061/5263/4101 2788/5264/4102\nf 2738/3470/2736 4054/3460/2726 4062/3519/2776\nf 4064/5265/4103 4047/3464/2730 4037/5252/4094\nf 2779/3471/2737 4062/3519/2776 4053/5266/2723\nf 2736/3474/2740 4052/3489/2753 4055/3466/2732\nf 2694/3490/2754 4055/3466/2732 4065/5267/4104\nf 2737/3473/2739 4053/3457/2723 4052/3489/2753\nf 2734/3461/2727 4054/3460/2726 4063/3531/2784\nf 2788/5268/4102 4061/5269/4101 4060/3556/2802\nf 2803/5270/4105 4060/3556/2802 4051/5271/4106\nf 2818/5272/4107 4051/5271/4106 4050/3586/2823\nf 2833/5273/4108 4050/5274/2823 4049/5275/2862\nf 2848/5276/4109 4049/3638/2862 4048/5277/2868\nf 2863/5278/4110 4048/5277/2868 4059/3673/2884\nf 2878/5279/4111 4059/3673/2884 4058/5280/2899\nf 2893/5281/4112 4058/5280/2899 4057/5282/2910\nf 2908/5283/4113 4057/3711/2910 4056/3740/2931\nf 2923/5284/4114 4056/3740/2931 4067/5285/4115\nf 4067/5285/4115 4066/3766/2948 2953/3753/2940\nf 4043/5260/4099 4064/5265/4103 4065/5267/4104\nf 3850/5259/4098 2644/3357/2645 2646/3356/2644\nf 3848/4928/3866 4064/5265/4103 4043/5260/4099\nf 4047/3464/2730 4064/5265/4103 3848/4928/3866\nf 2950/3743/2932 2944/3767/2949 4066/5286/2948\nf 4066/5286/2948 2952/5287/2947 2955/3745/2934\nf 2951/5288/2946 2958/5289/2945 2957/5290/2944\nf 2955/3745/2934 2952/5287/2947 2957/5290/2944\nf 2957/5290/2944 708/2347/699 711/786/689\nf 2915/3720/2916 2923/5284/4114 2938/3752/2939\nf 2923/5284/4114 2915/3720/2916 2900/3719/2905\nf 2908/5291/4113 2900/3702/2905 2885/3680/2890\nf 2893/5281/4112 2885/3680/2890 2870/3656/2874\nf 2878/5279/4111 2870/3656/2874 2855/3619/2848\nf 2840/3613/2842 2848/5276/4109 2863/5278/4110\nf 2848/5276/4109 2840/3613/2842 2825/3612/2828\nf 2833/5292/4108 2825/3612/2828 2810/3568/2813\nf 2818/5272/4107 2810/3568/2813 2795/3558/2803\nf 2803/5270/4105 2795/3558/2803 2706/3557/2688\nf 2704/3416/2686 2750/5258/4097 2788/5264/4102\nf 3886/5293/4116 3781/5067/3976 4027/5241/4085\nf 4029/5052/3961 3889/5066/3975 3886/5293/4116\nf 4030/5055/3964 3892/5065/3974 3889/5066/3975\nf 4031/5056/3965 3895/5064/3973 3892/5065/3974\nf 4032/4981/3898 3898/5062/3971 3895/5064/3973\nf 3971/4840/3810 2557/5063/3972 3898/5062/3971\nf 2557/5063/3972 3971/4840/3810 3970/4843/3813\nf 2554/3237/2540 3970/4843/3813 3969/4845/3815\nf 2555/3236/2539 3969/4845/3815 3968/5131/4026\nf 3967/4847/3817 2530/3238/2541 2556/3235/2538\nf 2530/3238/2541 3967/4847/3817 3966/4850/3820\nf 2529/3217/2520 3966/4850/3820 3123/4852/3822\nf 2527/3218/2521 3123/4852/3822 4022/4854/3824\nf 2528/5294/2519 4022/5295/3824 3972/4856/3826\nf 2533/3219/2522 3972/4856/3826 4023/5195/4078\nf 3184/4062/3207 4073/4063/3208 4074/4024/3170\nf 3181/4057/3203 3182/4055/3201 4077/4025/3171\nf 3239/4131/3265 963/4059/978 1889/5296/986\nf 3180/4052/3198 3181/4057/3203 4078/4067/3211\nf 3225/4102/3199 4079/4104/3209 4076/5297/4117\nf 3239/4131/3265 4080/5298/3261 4081/4170/3294\nf 3263/4132/3266 4081/4170/3294 4073/4063/3208\nf 3103/5299/4118 4072/5300/4119 4076/5297/4117\nf 4072/5300/4119 3104/4164/3289 3179/4103/3241\nf 3162/5301/4120 3168/3932/3094 3223/4099/3238\nf 3222/4116/3252 3223/4099/3238 3167/5302/3287\nf 2567/4084/3226 4092/5303/4121 4258/5304/4122\nf 4094/5305/4123 3208/5306/4124 3230/4108/3245\nf 3208/5306/4124 4094/5305/4123 4093/5307/4125\nf 4093/5307/4125 4094/5305/4123 4098/5308/4126\nf 4092/5303/4121 4096/5309/4127 4259/5310/4128\nf 4098/5308/4126 4094/5305/4123 4095/5311/4129\nf 4098/5308/4126 4102/5312/4130 4101/5313/4131\nf 4096/5309/4127 4100/5314/4132 4260/5315/4133\nf 4102/5312/4130 4098/5308/4126 4099/5316/4134\nf 3982/5148/4043 3981/5146/4041 4107/5317/4135\nf 4255/5318/4136 3161/4117/3253 4106/5319/4137\nf 3111/4098/3237 3160/4097/3236 4105/5320/4138\nf 4108/5321/4139 4105/5320/4138 3160/4097/3236\nf 4104/5322/4140 3159/5323/4141 2983/5324/3235\nf 3105/5325/3286 4106/5319/4137 3161/4117/3253\nf 3100/3924/3086 4100/5314/4132 4096/5309/4127\nf 2565/3246/2549 3101/3245/2548 4096/5309/4127\nf 4101/5313/4131 3102/5326/4142 3200/5327/4143\nf 3207/3926/3088 4093/5307/4125 3227/5328/4144\nf 3227/5328/4144 4093/5307/4125 4097/5329/4145\nf 4092/5303/4121 2567/4084/3226 2566/3242/2545\nf 3097/3922/3084 4109/5330/4146 4100/5314/4132\nf 4109/5330/4146 3097/3922/3084 3098/3921/3083\nf 4444/5331/4147 3103/5299/4118 3095/4017/3164\nf 4445/5332/4148 3105/5325/3286 3106/5333/3285\nf 4446/5334/4149 3089/4018/3165 3811/4953/3884\nf 4426/5335/4150 4425/5336/4151 4120/5337/4152\nf 4448/5338/4153 3096/5339/3167 3159/5340/4141\nf 4458/5341/4154 4449/5342/4155 4105/5320/4138\nf 4431/5343/4156 4131/5344/4157 4122/5345/4158\nf 4433/5346/4159 4129/5347/4160 4130/5348/4161\nf 4451/5349/4162 4102/5312/4130 4103/5350/4163\nf 4459/5351/4164 4109/5330/4146 3089/4018/3165\nf 4438/5352/4165 4437/5353/4166 4123/5354/4167\nf 4439/5355/4168 4126/5356/4169 4118/5357/4170\nf 4434/5358/4171 4124/5359/4172 4123/5354/4167\nf 4453/5360/4173 4106/5319/4137 3105/5325/3286\nf 4429/5361/4174 4127/5362/4175 4126/5363/4169\nf 4432/5364/4176 4122/5345/4158 4262/5365/4177\nf 4436/5366/4178 4426/5335/4150 4115/5367/4179\nf 4444/5331/4147 4456/5368/4180 4072/5300/4119\nf 4427/5369/4181 4112/5370/4182 4119/5371/4183\nf 4440/5372/4184 4128/5373/4185 4263/5374/4186\nf 4146/5375/4187 4124/5359/4172 4125/5376/4188\nf 4134/5377/4189 4112/5370/4182 4118/5378/4170\nf 4153/5379/4190 4131/5344/4157 4110/5380/4191\nf 4129/5381/4160 4151/5382/4192 4152/5383/4193\nf 4124/5359/4172 4146/5375/4187 4145/5384/4194\nf 4141/5385/4195 4132/5386/4196 4110/5380/4191\nf 4121/5387/4197 4115/5388/4179 4137/5389/4198\nf 4126/5390/4169 4148/5391/4199 4140/5392/4200\nf 4122/5345/4158 4144/5393/4201 4264/5394/4202\nf 4136/5395/4203 4142/5396/4204 4120/5397/4152\nf 4139/5398/4205 4138/5399/4206 4116/5400/4207\nf 4150/5401/4208 4128/5402/4185 4116/5400/4207\nf 4127/5403/4175 4149/5404/4209 4148/5405/4199\nf 4115/5388/4179 4120/5406/4152 4142/5407/4204\nf 4119/5371/4183 4112/5370/4182 4134/5377/4189\nf 4123/5354/4167 4145/5384/4194 4135/5408/4210\nf 4263/5409/4186 4128/5402/4185 4150/5401/4208\nf 4136/5395/4203 4114/5410/4211 4111/5411/4212\nf 4131/5344/4157 4153/5379/4190 4144/5393/4201\nf 4149/5412/4209 4127/5413/4175 4130/5414/4161\nf 4145/5384/4194 4167/5415/4213 4157/5416/4214\nf 4150/5401/4208 4172/5417/4215 4267/5418/4216\nf 4158/5419/4217 4136/5420/4203 4133/5421/4218\nf 4153/5379/4190 4175/5422/4219 4166/5423/4220\nf 4171/5424/4221 4149/5425/4209 4152/5426/4193\nf 4168/5427/4222 4146/5375/4187 4147/5428/4223\nf 4162/5429/4224 4156/5430/4225 4134/5377/4189\nf 4175/5422/4219 4153/5379/4190 4132/5386/4196\nf 4151/5431/4192 4173/5432/4226 4174/5433/4227\nf 4146/5375/4187 4168/5427/4222 4167/5415/4213\nf 4163/5434/4228 4154/5435/4229 4132/5386/4196\nf 4143/5436/4230 4137/5437/4198 4159/5438/4231\nf 4140/5439/4200 4148/5440/4199 4170/5441/4232\nf 4144/5393/4201 4166/5423/4220 4266/5442/4233\nf 4158/5443/4217 4164/5444/4234 4142/5445/4204\nf 4161/5446/4235 4160/5447/4236 4138/5448/4206\nf 4160/5449/4236 4172/5417/4215 4150/5401/4208\nf 4149/5425/4209 4171/5424/4221 4170/5441/4232\nf 4142/5445/4204 4164/5444/4234 4159/5450/4231\nf 4141/5385/4195 4134/5377/4189 4156/5430/4225\nf 4357/5451/4237 4188/5452/4238 4268/5453/4239\nf 4354/5454/4240 4193/5455/4241 4192/5456/4242\nf 4310/5457/4243 4186/5458/4244 4181/5459/4245\nf 4369/5460/4246 4351/5461/4247 4178/5462/4248\nf 4350/5463/4249 4189/5464/4250 4179/5465/4251\nf 4364/5466/4252 4194/5467/4253 4269/5468/4254\nf 4306/5469/4255 4197/5470/4256 4188/5452/4238\nf 4367/5471/4257 4195/5472/4258 4196/5473/4259\nf 4366/5474/4260 4190/5475/4261 4189/5476/4250\nf 4349/5477/4262 4362/5478/4263 4181/5459/4245\nf 4313/5479/4264 4363/5480/4265 4192/5456/4242\nf 4405/5481/4266 4395/5482/4267 4197/5470/4256\nf 4408/5483/4268 4405/5481/4266 4176/5484/4269\nf 4412/5485/4270 4401/5486/4271 4186/5458/4244\nf 4413/5487/4272 4402/5488/4273 4182/5489/4274\nf 4403/5490/4275 4194/5491/4253 4182/5489/4274\nf 4412/5485/4270 4180/5492/4276 4177/5493/4277\nf 4414/5494/4278 4193/5455/4241 4196/5473/4259\nf 4407/5495/4279 4190/5496/4261 4191/5497/4280\nf 4399/5498/4281 4415/5499/4282 4178/5462/4248\nf 4229/5500/4283 4315/5501/4284 4336/5502/4285\nf 4233/5503/4286 4309/5504/4287 4220/5505/4288\nf 4317/5506/4289 4235/5507/4290 4241/5508/4291\nf 4336/5502/4285 4346/5509/4292 4273/5510/4293\nf 4325/5511/4294 4226/5512/4295 4222/5513/4296\nf 4234/5514/4297 4240/5515/4298 4341/5516/4299\nf 4340/5517/4300 4326/5518/4301 4227/5519/4302\nf 4228/5520/4303 4314/5521/4304 4315/5501/4284\nf 4235/5507/4290 4317/5506/4289 4341/5516/4299\nf 4335/5522/4305 4320/5523/4306 4275/5524/4307\nf 4337/5525/4308 4340/5526/4300 4239/5527/4309\nf 4272/5528/4310 4232/5529/4311 4308/5530/4312\nf 4227/5531/4302 4326/5532/4301 4221/5533/4313\nf 4239/5534/4309 4227/5519/4302 4216/5535/4314\nf 4238/5536/4315 4239/5534/4309 4204/5537/4316\nf 4235/5538/4290 4208/5539/4317 4202/5540/4318\nf 4210/5541/4319 4233/5503/4286 4223/5542/4320\nf 4230/5543/4321 4213/5544/4322 4270/5545/4323\nf 4206/5546/4324 4214/5547/4325 4229/5548/4283\nf 4209/5549/4326 4203/5550/4327 4240/5551/4298\nf 4236/5552/4328 4275/5524/4307 4198/5553/4329\nf 4212/5554/4330 4231/5555/4331 4232/5556/4311\nf 4218/5557/4332 4217/5558/4333 4226/5559/4295\nf 4224/5560/4334 4219/5561/4335 4198/5553/4329\nf 4237/5562/4336 4273/5510/4293 4200/5563/4337\nf 4231/5555/4331 4212/5554/4330 4213/5564/4322\nf 4225/5565/4338 4228/5566/4303 4215/5567/4339\nf 4219/5561/4335 4224/5560/4334 4233/5568/4286\nf 4241/5569/4291 4202/5540/4318 4199/5570/4340\nf 4271/5571/4341 4216/5535/4314 4227/5519/4302\nf 4211/5572/4342 4232/5573/4311 4272/5574/4310\nf 4368/5575/4343 4157/5576/4214 4167/5577/4213\nf 4350/5463/4249 4167/5577/4213 4168/5578/4222\nf 4169/5579/4344 4311/5580/4345 4366/5474/4260\nf 4266/5442/4233 4334/5581/4346 4311/5580/4345\nf 4334/5581/4346 4266/5442/4233 4166/5423/4220\nf 4357/5582/4237 4166/5423/4220 4175/5422/4219\nf 4154/5583/4229 4312/5584/4347 4306/5585/4255\nf 3973/5132/4027 4242/4030/3176 4243/4033/3179\nf 3974/5133/4028 4243/4033/3179 4244/5586/4348\nf 3228/4106/3243 4245/4082/3224 4248/4083/3225\nf 3229/4107/3244 4248/4083/3225 4249/5587/4349\nf 3231/4109/3246 4246/4087/3229 4245/4082/3224\nf 1014/1189/1047 2064/2637/2151 4252/5588/3247\nf 3980/5144/4039 4254/4115/3251 4255/5318/4136\nf 4246/4087/3229 4251/4136/3268 3202/4077/3220\nf 3232/5589/3257 2525/5590/3292 4256/4176/3296\nf 2525/5590/3292 3202/4077/3220 4251/4136/3268\nf 3245/4031/3177 4242/4030/3176 2054/5591/1836\nf 3165/4075/3218 4247/5136/4031 4244/5586/4348\nf 3164/3938/3099 4250/5138/4033 4247/5136/4031\nf 3163/3930/3092 4253/5140/4035 4250/5138/4033\nf 3162/5301/4120 4257/5142/4037 4253/5140/4035\nf 3222/4116/3252 4254/4115/3251 4257/5142/4037\nf 4249/5587/4349 4258/5304/4122 4095/5311/4129\nf 4258/5304/4122 4259/5310/4128 4099/5316/4134\nf 4259/5310/4128 4260/5315/4133 4103/5350/4163\nf 3981/5146/4041 4255/5318/4136 4261/5592/4350\nf 4441/5593/4351 4262/5365/4177 4125/5376/4188\nf 4442/5594/4352 4263/5374/4186 4129/5347/4160\nf 4262/5365/4177 4264/5394/4202 4147/5428/4223\nf 4263/5409/4186 4265/5595/4353 4151/5382/4192\nf 4265/5595/4353 4267/5418/4216 4173/5596/4226\nf 4264/5394/4202 4266/5442/4233 4169/5579/4344\nf 4334/5581/4346 4268/5597/4239 4191/5598/4280\nf 4333/5599/4354 4269/5468/4254 4195/5472/4258\nf 4207/5600/4355 4200/5563/4337 4273/5510/4293\nf 4203/5550/4327 4208/5539/4317 4235/5538/4290\nf 4215/5567/4339 4228/5566/4303 4229/5601/4283\nf 4222/5602/4296 4226/5559/4295 4217/5558/4333\nf 4369/5603/4246 4312/5584/4347 4154/5583/4229\nf 4163/5434/4228 4156/5430/4225 4351/5461/4247\nf 4396/5604/4356 4406/5605/4357 4279/5606/4358\nf 4407/5495/4279 4281/5607/4359 4282/5608/4360\nf 4398/5609/4361 4409/5610/4362 4284/5611/4363\nf 4399/5498/4281 4410/5612/4364 4286/5613/4365\nf 4411/5614/4366 4288/5615/4367 4298/5616/4368\nf 4414/5494/4278 4295/5617/4369 4286/5613/4365\nf 4409/5610/4362 4401/5486/4271 4290/5618/4370\nf 4408/5619/4268 4415/5620/4282 4296/5621/4371\nf 4397/5622/4372 4282/5623/4360 4276/5624/4373\nf 4403/5625/4275 4294/5626/4374 4299/5627/4375\nf 4395/5482/4267 4277/5628/4376 4288/5629/4367\nf 4417/5630/4377 4298/5631/4368 4289/5632/4378\nf 4406/5605/4357 4418/5633/4379 4299/5627/4375\nf 4184/5634/4380 4178/5462/4248 4351/5461/4247\nf 4313/5479/4264 4351/5461/4247 4156/5430/4225\nf 4162/5429/4224 4170/5441/4232 4363/5480/4265\nf 4363/5480/4265 4170/5441/4232 4171/5424/4221\nf 4174/5433/4227 4305/5635/4381 4354/5454/4240\nf 4305/5635/4381 4174/5433/4227 4173/5432/4226\nf 4194/5491/4253 4364/5636/4252 4365/5637/4382\nf 4267/5638/4216 4333/5599/4354 4367/5471/4257\nf 4231/5555/4331 4328/5639/4383 4308/5640/4312\nf 4323/5641/4384 4224/5560/4334 4275/5524/4307\nf 4193/5455/4241 4354/5454/4240 4305/5635/4381\nf 4304/5642/4385 4241/5508/4291 4274/5643/4386\nf 4185/5644/4387 4176/5484/4269 4312/5645/4347\nf 4182/5489/4274 4365/5637/4382 4355/5646/4388\nf 4333/5599/4354 4267/5638/4216 4172/5647/4215\nf 4186/5458/4244 4310/5457/4243 4356/5648/4389\nf 4365/5649/4382 4364/5466/4252 4172/5647/4215\nf 4190/5475/4261 4366/5474/4260 4311/5580/4345\nf 4197/5650/4256 4306/5585/4255 4312/5584/4347\nf 4355/5651/4388 4365/5649/4382 4160/5447/4236\nf 4180/5492/4276 4356/5648/4389 4307/5652/4390\nf 4165/5653/4391 4159/5450/4231 4362/5654/4263\nf 4159/5450/4231 4164/5444/4234 4310/5655/4243\nf 4356/5656/4389 4310/5655/4243 4164/5444/4234\nf 4155/5657/4392 4307/5658/4390 4356/5656/4389\nf 4226/5512/4295 4325/5511/4294 4324/5659/4393\nf 4327/5660/4394 4230/5661/4321 4223/5662/4320\nf 4328/5639/4383 4231/5555/4331 4230/5661/4321\nf 4236/5663/4328 4273/5510/4293 4346/5509/4292\nf 4327/5660/4394 4302/5664/4395 4303/5665/4396\nf 4224/5666/4334 4323/5667/4384 4309/5504/4287\nf 4343/5668/4397 4302/5664/4395 4327/5660/4394\nf 4343/5668/4397 4220/5669/4288 4309/5670/4287\nf 4359/5671/4398 4309/5504/4287 4323/5667/4384\nf 4320/5672/4306 4348/5673/4399 4301/5674/4400\nf 4335/5675/4305 4338/5676/4401 4348/5673/4399\nf 4338/5677/4401 4335/5678/4305 4346/5509/4292\nf 4336/5502/4285 4339/5679/4402 4361/5680/4403\nf 4339/5679/4402 4336/5502/4285 4315/5501/4284\nf 4332/5681/4404 4315/5501/4284 4314/5521/4304\nf 4324/5659/4393 4300/5682/4405 4331/5683/4406\nf 4314/5521/4304 4228/5520/4303 4225/5684/4338\nf 4300/5682/4405 4324/5659/4393 4325/5511/4294\nf 4221/5533/4313 4344/5685/4407 4353/5686/4408\nf 4344/5685/4407 4221/5533/4313 4326/5532/4301\nf 4340/5687/4300 4321/5688/4409 4352/5689/4410\nf 4318/5690/4411 4321/5691/4409 4340/5526/4300\nf 4316/5692/4412 4341/5516/4299 4322/5693/4413\nf 4341/5516/4299 4317/5506/4289 4330/5694/4414\nf 4304/5642/4385 4342/5695/4415 4330/5694/4414\nf 4319/5696/4416 4347/5697/4417 4342/5695/4415\nf 4360/5698/4418 4345/5699/4419 4308/5700/4312\nf 4358/5701/4420 4308/5640/4312 4328/5639/4383\nf 4391/5702/4421 4344/5685/4407 4352/5689/4410\nf 4385/5703/4422 4358/5701/4420 4303/5665/4396\nf 4199/5570/4340 4297/5704/4423 4276/5624/4373\nf 4379/5705/4424 4353/5686/4408 4344/5685/4407\nf 4300/5682/4405 4353/5686/4408 4379/5705/4424\nf 4201/5706/4425 4272/5574/4310 4274/5707/4386\nf 4371/5708/4426 4372/5709/4427 4383/5710/4428\nf 4370/5711/4429 4372/5712/4427 4389/5713/4430\nf 4347/5697/4417 4319/5696/4416 4345/5699/4419\nf 4373/5714/4431 4371/5715/4426 4384/5716/4432\nf 4386/5717/4433 4374/5718/4434 4373/5719/4431\nf 4382/5720/4435 4374/5721/4434 4338/5676/4401\nf 4381/5722/4436 4388/5723/4437 4371/5715/4426\nf 4272/5724/4310 4345/5725/4419 4319/5726/4416\nf 4388/5723/4437 4389/5713/4430 4372/5712/4427\nf 4393/5727/4438 4377/5728/4439 4388/5723/4437\nf 4370/5729/4429 4385/5703/4422 4383/5710/4428\nf 4384/5730/4432 4383/5710/4428 4303/5665/4396\nf 4375/5731/4440 4384/5730/4432 4302/5664/4395\nf 4359/5732/4398 4386/5717/4433 4375/5731/4440\nf 4377/5728/4439 4391/5702/4421 4392/5733/4441\nf 4378/5734/4442 4387/5735/4443 4389/5713/4430\nf 4374/5721/4434 4382/5720/4435 4381/5736/4436\nf 4385/5737/4422 4370/5738/4429 4342/5695/4415\nf 4370/5738/4429 4387/5739/4443 4330/5694/4414\nf 4377/5728/4439 4376/5740/4444 4389/5713/4430\nf 4386/5741/4433 4359/5671/4398 4301/5674/4400\nf 4318/5690/4411 4329/5742/4445 4390/5743/4446\nf 4322/5693/4413 4330/5694/4414 4387/5739/4443\nf 4390/5744/4446 4378/5734/4442 4376/5740/4444\nf 4394/5745/4447 4393/5727/4438 4381/5722/4436\nf 4321/5688/4409 4390/5744/4446 4392/5733/4441\nf 4380/5746/4448 4379/5705/4424 4393/5727/4438\nf 4379/5705/4424 4391/5702/4421 4377/5728/4439\nf 4382/5747/4435 4361/5680/4403 4339/5679/4402\nf 4374/5721/4434 4386/5741/4433 4348/5673/4399\nf 4380/5746/4448 4332/5681/4404 4331/5683/4406\nf 4394/5745/4447 4339/5679/4402 4332/5681/4404\nf 4278/5748/4449 4277/5628/4376 4395/5482/4267\nf 4283/5749/4450 4278/5750/4449 4405/5751/4266\nf 4291/5752/4451 4290/5618/4370 4401/5486/4271\nf 4292/5753/4452 4402/5754/4273 4413/5755/4272\nf 4294/5756/4374 4403/5490/4275 4402/5488/4273\nf 4291/5752/4451 4412/5485/4270 4416/5757/4453\nf 4295/5617/4369 4414/5494/4278 4396/5604/4356\nf 4281/5607/4359 4407/5495/4279 4400/5758/4454\nf 4287/5759/4455 4296/5621/4371 4415/5620/4282\nf 4195/5472/4258 4406/5605/4357 4396/5604/4356\nf 4189/5464/4250 4190/5496/4261 4407/5495/4279\nf 4187/5760/4456 4181/5459/4245 4409/5610/4362\nf 4192/5456/4242 4410/5612/4364 4399/5498/4281\nf 4188/5761/4238 4411/5614/4366 4417/5762/4377\nf 4193/5455/4241 4414/5494/4278 4410/5612/4364\nf 4181/5459/4245 4186/5458/4244 4401/5486/4271\nf 4185/5763/4387 4178/5764/4248 4415/5620/4282\nf 4179/5465/4251 4189/5464/4250 4397/5765/4372\nf 4194/5491/4253 4403/5490/4275 4418/5766/4379\nf 4197/5470/4256 4395/5482/4267 4411/5767/4366\nf 4268/5597/4239 4417/5630/4377 4400/5768/4454\nf 4269/5769/4254 4418/5770/4379 4406/5771/4357\nf 4289/5772/4378 4213/5564/4322 4212/5554/4330\nf 4298/5631/4368 4270/5545/4323 4213/5544/4322\nf 4270/5773/4323 4298/5616/4368 4288/5615/4367\nf 4210/5774/4319 4288/5775/4367 4277/5776/4376\nf 4278/5748/4449 4198/5553/4329 4219/5561/4335\nf 4207/5777/4355 4198/5553/4329 4278/5748/4449\nf 4283/5778/4450 4296/5779/4371 4200/5780/4337\nf 4206/5781/4324 4200/5782/4337 4296/5783/4371\nf 4287/5759/4455 4286/5784/4365 4214/5785/4325\nf 4214/5785/4325 4286/5784/4365 4295/5786/4369\nf 4280/5787/4457 4218/5788/4332 4215/5567/4339\nf 4280/5789/4457 4279/5790/4358 4217/5791/4333\nf 4271/5571/4341 4217/5558/4333 4279/5792/4358\nf 4299/5627/4375 4294/5626/4374 4216/5793/4314\nf 4292/5753/4452 4204/5794/4316 4216/5793/4314\nf 4293/5795/4458 4205/5796/4459 4204/5794/4316\nf 4285/5797/4460 4284/5611/4363 4203/5550/4327\nf 4284/5611/4363 4290/5618/4370 4208/5539/4317\nf 4202/5540/4318 4208/5539/4317 4290/5618/4370\nf 4297/5704/4423 4199/5570/4340 4202/5540/4318\nf 4201/5706/4425 4276/5624/4373 4282/5623/4360\nf 4211/5798/4342 4282/5608/4360 4281/5607/4359\nf 4111/5411/4212 4114/5410/4211 4420/5799/4461\nf 4116/5800/4207 4422/5801/4462 4419/5802/4463\nf 4119/5371/4183 4110/5380/4191 4423/5803/4464\nf 4447/5804/4465 4456/5805/4180 4425/5806/4151\nf 4112/5807/4182 4427/5808/4181 4428/5809/4466\nf 4127/5362/4175 4429/5361/4174 4430/5810/4467\nf 4157/5811/4214 4368/5812/4343 4307/5658/4390\nf 4459/5351/4164 4431/5343/4156 4432/5364/4176\nf 4460/5813/4468 4433/5814/4159 4430/5815/4467\nf 4124/5359/4172 4434/5358/4171 4435/5816/4469\nf 4131/5344/4157 4431/5343/4156 4423/5803/4464\nf 4463/5817/4470 4437/5353/4166 4438/5352/4165\nf 4464/5818/4471 4439/5355/4168 4428/5809/4466\nf 4451/5349/4162 4434/5358/4171 4437/5353/4166\nf 4368/5819/4343 4179/5820/4251 4177/5821/4277\nf 4128/5373/4185 4440/5372/4184 4422/5801/4462\nf 4449/5822/4155 4429/5361/4174 4439/5823/4168\nf 4450/5824/4472 4432/5364/4176 4441/5593/4351\nf 4447/5825/4465 4426/5826/4150 4436/5827/4178\nf 4114/5410/4211 4120/5397/4152 4425/5806/4151\nf 4448/5338/4153 4427/5808/4181 4424/5828/4473\nf 4453/5360/4173 4440/5829/4184 4442/5830/4352\nf 4465/5831/4474 4441/5593/4351 4435/5816/4469\nf 4466/5832/4475 4442/5830/4352 4433/5814/4159\nf 4421/5833/4476 4420/5799/4461 4444/5834/4147\nf 4422/5835/4462 4445/5332/4148 4443/5836/4477\nf 4423/5803/4464 4446/5334/4149 4455/5837/4478\nf 4427/5808/4181 4448/5338/4153 4457/5838/4479\nf 4429/5361/4174 4449/5822/4155 4458/5839/4154\nf 4434/5358/4171 4451/5349/4162 4461/5840/4480\nf 4431/5343/4156 4459/5351/4164 4446/5334/4149\nf 4440/5829/4184 4453/5360/4173 4445/5332/4148\nf 4420/5799/4461 4425/5806/4151 4456/5805/4180\nf 4329/5742/4445 4318/5690/4411 4337/5525/4308\nf 3104/4164/3289 4072/5300/4119 4456/5368/4180\nf 4416/5757/4453 4177/5493/4277 4179/5841/4251\nf 4109/5330/4146 4459/5351/4164 4450/5824/4472\nf 4108/5321/4139 4107/5317/4135 4460/5813/4468\nf 3102/5326/4142 4101/5313/4131 4463/5817/4470\nf 3159/5340/4141 4104/5842/4140 4464/5818/4471\nf 4102/5312/4130 4451/5349/4162 4463/5817/4470\nf 4404/5843/4481 4276/5624/4373 4297/5704/4423\nf 4104/5844/4140 4105/5320/4138 4449/5342/4155\nf 4100/5314/4132 4450/5824/4472 4465/5831/4474\nf 4082/5845/4482 3104/5846/3289 4447/5825/4465\nf 3096/4021/3167 4448/5847/4153 4455/5837/4478\nf 4261/5592/4350 4106/5319/4137 4453/5360/4173\nf 4260/5315/4133 4465/5831/4474 4461/5840/4480\nf 4107/5317/4135 4261/5592/4350 4466/5832/4475\nf 4329/5742/4445 4322/5693/4413 4378/5848/4442\nf 4347/5697/4417 4360/5698/4418 4358/5849/4420\nf 4238/5850/4315 4234/5514/4297 4316/5692/4412\nf 4205/5796/4459 4209/5549/4326 4234/5851/4297\nf 4209/5549/4326 4205/5796/4459 4293/5795/4458\nf 4413/5755/4272 4398/5609/4361 4285/5797/4460\nf 4398/5609/4361 4413/5755/4272 4183/5852/4483\nf 4355/5651/4388 4349/5477/4262 4187/5760/4456\nf 4161/5446/4235 4165/5853/4391 4349/5477/4262\nf 4139/5854/4205 4143/5855/4230 4165/5856/4391\nf 4143/5857/4230 4139/5398/4205 4117/5858/4484\nf 4419/5802/4463 4436/5366/4178 4121/5859/4197\nf 4462/5860/4485 4436/5827/4178 4419/5861/4463\nf 4443/5836/4477 3106/5333/3285 4082/5845/4482\nf 4082/5862/4482 3106/5863/3285 3173/5864/3239\nf 3224/4049/3195 4089/5865/3240 4084/5866/3288\nf 4089/5865/3240 3224/4049/3195 3174/4045/3191\nf 4083/4051/3197 3174/4045/3191 3175/4043/3189\nf 4155/5867/4392 4133/5421/4218 4135/5408/4210\nf 4113/5868/4486 4135/5408/4210 4133/5421/4218\nf 4421/5833/4476 4438/5869/4165 4113/5870/4486\nf 4452/5871/4487 4438/5352/4165 4421/5872/4476\nf 4452/5871/4487 4454/5873/4488 3095/4017/3164\nf 3090/4015/3162 3200/5327/4143 3102/5326/4142\nf 4069/4014/3161 3227/5328/4144 3200/5327/4143\nf 3199/3927/3089 3227/5328/4144 4069/4014/3161\nf 3198/5874/4489 3199/3927/3089 3093/3915/3078\nf 3107/3937/3098 3198/5874/4489 3094/3919/3081\nf 3109/3934/3096 3107/3937/3098 4068/5875/3166\nf 3092/5876/3079 3108/3248/2551 3109/5877/3096\nf 4071/3907/3070 3267/4074/3217 3108/3248/2551\nf 4070/3909/3072 3242/4114/3250 3267/4074/3217\nf 1878/1067/935 880/1173/1034 3242/4114/3250\nf 4087/4060/3205 3175/4043/3189 3176/4042/3188\nf 4086/4056/3202 3176/4042/3188 3177/4048/3194\nf 4085/4054/3200 3177/4048/3194 3178/4047/3193\nf 3264/4123/3258 4091/4172/3295 4088/4061/3206\nf 4091/4172/3295 3264/4123/3258 3243/4044/3190\nf 4090/4058/3204 3243/4044/3190 956/1093/961\nf 2309/4864/3830 2310/2964/2307 4467/4179/3298\nf 3277/4266/3375 3278/4271/3380 4469/5878/3301\nf 3276/4258/3369 3277/4266/3375 4470/5879/3300\nf 3275/5880/3358 3276/5881/3369 4471/4184/3303\nf 3274/4235/3349 3275/5880/3358 4472/4186/3305\nf 3273/4180/3299 4467/4179/3298 4474/4209/3324\nf 3295/5882/3382 4475/5883/3309 4476/5884/4490\nf 2411/3033/2367 2372/3039/2373 4478/4194/3311\nf 3294/4268/3377 4480/4196/3313 4475/5883/3309\nf 3289/4254/3365 4477/5885/3314 4493/5886/3885\nf 3294/4268/3377 3293/4261/3312 4478/4200/3311\nf 3288/4240/3354 4482/5887/3317 4483/5888/3322\nf 3297/5889/3362 3292/4238/3352 4484/4205/3320\nf 3287/4225/3339 4483/5888/3322 4485/5890/3321\nf 3292/4238/3352 3291/4237/3351 4486/4208/3323\nf 3290/4270/3379 4474/4209/3324 4486/4208/3323\nf 3284/4228/3342 4488/5194/3325 4489/5891/4491\nf 3282/4263/3372 4481/4636/3328 4494/5892/3886\nf 3281/5893/3367 4490/5894/3332 4491/5895/3331\nf 3272/4272/3381 3274/4235/3349 4473/4188/3307\nf 3279/4232/3346 3280/4242/3356 4491/5896/3331\nf 3278/4271/3380 3279/4232/3346 4492/5897/3337\nf 2339/4214/3329 4481/4213/3328 4489/5898/4491\nf 3816/4958/3887 4493/5886/3885 4482/5887/3317\nf 3815/4264/3373 4494/5892/3886 4490/5899/3332\nf 2345/4211/3326 4488/4210/3325 4487/5900/4081\nf 2350/5220/4082 4487/5901/4081 4485/4206/3321\nf 2362/4198/3315 4477/4197/3314 4476/5902/4490\nf 3710/4858/3827 1503/1925/1630 1830/1924/1629\nf 228/239/219 221/236/216 2520/5903/2511\nf 541/697/623 524/710/633 2789/3552/2781\nf 494/725/637 495/724/642 2768/3704/2774\nf 2785/3703/2780 514/5904/4492 496/744/655\nf 493/2320/669 2766/5254/4096 2770/5905/2768\nf 493/2320/669 1847/2319/1905 4039/3509/2769\nf 2765/5906/2770 492/5907/1054 725/1202/1056\nf 2978/5908/3899 734/2037/1699 1672/2086/1740\nf 3923/5032/3943 1721/2161/1739 1681/2105/1759\nf 3929/5046/3956 1735/2104/1758 1806/2182/1823\nf 3635/4717/3723 1424/1768/1524 1426/1770/1526\nf 2540/4923/3862 3903/5070/3979 1702/2144/1789\nf 1375/1738/1497 1394/1737/1496 3609/4697/3703\nf 2807/3550/2798 538/573/516 555/591/529\nf 2792/3549/2788 521/5909/511 538/573/516\nf 1507/58/50 1508/1/1 2/3/3\nf 6/59/51 5/4/4 4/6/6\nf 1509/11/10 1508/7/1 8/8/7\nf 8/8/7 3/5/5 9/9/8\nf 12/13/12 11/10/9 9/9/8\nf 1510/15/14 1509/11/10 11/10/9\nf 15/17/16 14/12/11 12/13/12\nf 14/12/11 1511/14/13 11/10/9\nf 18/20/19 17/16/15 15/17/16\nf 17/16/15 1512/18/17 14/12/11\nf 21/97/22 20/19/18 18/20/19\nf 20/25/18 1513/21/20 17/23/15\nf 24/30/25 23/29/21 21/97/22\nf 23/24/21 1514/27/23 20/25/18\nf 27/33/27 26/28/24 24/30/25\nf 26/28/24 1515/31/26 23/29/21\nf 29/35/29 26/28/24 30/34/28\nf 1516/37/31 1515/31/26 29/35/29\nf 1587/38/32 29/35/29 1586/36/30\nf 1637/1932/1631 1516/37/31 1587/38/32\nf 38/43/37 35/39/33 39/41/35\nf 1519/1933/1632 1518/42/36 38/43/37\nf 47/52/44 1522/51/38 44/47/40\nf 47/52/44 44/47/40 46/49/42\nf 50/53/45 1523/50/43 47/52/44\nf 49/56/48 50/53/45 46/49/42\nf 1589/55/47 1638/54/46 50/53/45\nf 1591/89/80 1589/55/47 49/56/48\nf 55/64/56 1525/57/49 2/3/3\nf 57/62/54 6/59/51 56/60/52\nf 59/66/58 60/61/53 56/60/52\nf 58/68/60 1526/63/55 55/64/56\nf 62/70/62 63/65/57 59/66/58\nf 61/72/64 1527/67/59 58/68/60\nf 101/113/103 102/69/61 62/70/62\nf 103/5910/104 1532/5911/63 61/5912/64\nf 68/79/71 69/73/65 65/75/67\nf 67/83/74 1529/82/68 64/1267/70\nf 72/85/76 69/73/65 71/80/72\nf 70/87/78 1530/81/73 67/83/74\nf 74/1943/1633 75/84/75 71/80/72\nf 73/1258/1101 1531/86/77 70/87/78\nf 1550/1687/1452 1545/88/79 36/40/34\nf 1640/1959/1639 1591/89/80 1549/90/81\nf 1549/90/81 49/56/48 1547/91/82\nf 80/154/143 1547/91/82 79/93/84\nf 1543/1952/1638 1639/94/85 30/34/28\nf 1543/1952/1638 30/34/28 1541/95/86\nf 1541/95/86 27/33/27 1540/96/87\nf 1540/96/87 24/30/25 1539/98/88\nf 1539/98/88 21/97/22 1538/99/89\nf 1538/99/89 18/20/19 1537/100/90\nf 1558/106/96 12/13/12 1536/101/91\nf 1557/103/93 1556/102/92 6/59/51\nf 1555/1958/1634 1557/103/93 57/62/54\nf 1536/101/91 9/9/8 1556/102/92\nf 1534/1955/95 60/5913/53 1535/1956/94\nf 1555/1958/1634 57/62/54 1534/105/95\nf 83/170/159 1537/100/90 93/107/97\nf 1554/1949/1635 1553/108/98 69/73/65\nf 1554/1949/1635 69/73/65 1552/109/99\nf 1552/109/99 72/85/76 1533/110/100\nf 1551/116/105 1553/108/98 104/112/102\nf 66/74/66 102/69/61 65/75/67\nf 1528/77/69 1532/114/63 64/78/70\nf 1535/104/94 1551/116/105 96/117/106\nf 105/119/108 109/118/107 97/111/101\nf 106/1013/887 105/119/108 98/120/109\nf 106/1013/887 98/120/109 107/122/111\nf 107/122/111 99/121/110 108/124/113\nf 115/133/122 119/125/114 110/127/116\nf 117/131/120 116/128/117 112/130/119\nf 118/138/127 117/131/120 113/132/121\nf 116/128/117 115/133/122 111/129/118\nf 121/135/124 125/134/123 115/133/122\nf 122/136/125 121/135/124 116/128/117\nf 123/137/126 122/136/125 117/131/120\nf 124/145/134 123/137/126 118/138/127\nf 127/143/132 131/139/128 121/135/124\nf 124/145/134 120/140/129 130/142/131\nf 128/144/133 127/143/132 122/136/125\nf 129/150/139 128/144/133 123/137/126\nf 129/150/139 123/137/126 130/142/131\nf 133/149/138 137/146/135 127/143/132\nf 126/141/130 132/147/136 130/142/131\nf 134/3121/2440 133/149/138 128/144/133\nf 134/3121/2440 128/144/133 135/151/140\nf 135/151/140 129/150/139 136/148/137\nf 79/93/84 141/152/141 80/154/143\nf 143/157/146 81/155/144 142/153/142\nf 1594/2006/1680 1592/156/145 143/157/146\nf 138/1006/880 139/158/147 76/160/149\nf 148/169/158 86/161/150 147/163/152\nf 150/1004/878 88/164/153 149/166/155\nf 147/163/152 85/162/151 146/168/157\nf 149/166/155 87/165/154 148/169/158\nf 146/168/157 84/167/156 145/171/160\nf 155/185/172 93/107/97 154/5914/162\nf 157/181/169 156/175/163 95/177/165\nf 152/183/170 154/174/162 90/178/166\nf 156/175/163 153/179/167 94/176/164\nf 158/1014/171 157/181/169 96/182/106\nf 153/179/167 152/183/170 91/180/168\nf 109/118/107 158/184/171 104/112/102\nf 145/171/160 83/170/159 155/185/172\nf 166/204/188 114/186/115 167/188/173\nf 167/233/173 119/125/114 168/189/174\nf 168/189/174 125/134/123 169/190/175\nf 169/190/175 131/139/128 170/191/176\nf 182/205/189 181/192/177 176/194/179\nf 181/192/177 178/195/180 175/193/178\nf 177/229/187 179/197/182 171/199/184\nf 179/197/182 180/200/185 173/198/183\nf 178/195/180 177/202/187 172/196/181\nf 176/194/179 166/204/188 182/205/189\nf 195/223/205 187/206/190 194/208/192\nf 194/208/192 186/207/191 189/210/194\nf 195/223/205 196/211/195 187/206/190\nf 189/210/194 159/209/193 190/214/198\nf 190/214/198 160/213/197 191/216/200\nf 174/201/186 180/200/185 161/215/199\nf 207/232/213 208/217/201 179/197/182\nf 191/216/200 180/200/185 213/218/202\nf 209/241/204 206/219/203 181/221/177\nf 210/5915/214 209/222/204 182/205/189\nf 217/226/208 195/223/205 216/224/206\nf 216/224/206 194/208/192 211/225/207\nf 218/260/239 196/211/195 217/226/208\nf 211/225/207 189/210/194 212/227/209\nf 206/219/203 205/228/210 178/220/180\nf 218/260/239 1599/230/211 196/211/195\nf 212/227/209 190/214/198 213/218/202\nf 205/228/210 207/232/213 177/229/187\nf 182/205/189 167/188/173 210/5915/214\nf 210/234/214 168/189/174 222/235/215\nf 222/235/215 169/190/175 221/236/216\nf 225/245/224 226/237/217 207/232/213\nf 225/245/224 207/232/213 223/238/218\nf 224/243/222 223/238/218 206/219/203\nf 229/242/221 222/235/215 228/239/219\nf 236/250/229 234/240/220 229/242/221\nf 230/248/227 223/238/218 231/244/223\nf 209/241/204 210/234/214 229/242/221\nf 233/269/248 226/237/217 232/246/225\nf 236/250/229 229/242/221 235/247/226\nf 232/246/225 225/245/224 230/248/227\nf 239/251/230 237/249/228 236/250/229\nf 238/2350/1924 239/251/230 235/247/226\nf 1740/897/785 243/252/231 1739/254/233\nf 1739/254/233 242/253/232 1741/256/235\nf 1741/256/235 240/255/234 1742/258/237\nf 258/2133/1778 259/259/238 217/226/208\nf 257/262/241 216/224/206 254/261/240\nf 258/2133/1778 217/226/208 257/262/241\nf 255/265/244 212/227/209 256/263/242\nf 259/259/238 1601/264/243 218/260/239\nf 254/261/240 211/225/207 255/265/244\nf 262/267/246 255/265/244 263/266/245\nf 261/268/247 254/261/240 262/267/246\nf 264/2134/1779 257/262/241 261/268/247\nf 226/237/217 256/263/242 208/217/201\nf 226/237/217 233/269/248 256/263/242\nf 1743/276/255 266/2153/249 1744/2186/251\nf 1740/897/785 250/273/252 1744/272/251\nf 1701/2148/1793 243/252/231 1710/275/254\nf 1749/988/863 1743/276/255 872/278/257\nf 881/990/865 972/279/258 879/281/260\nf 295/1804/1553 1644/282/261 294/284/263\nf 282/289/268 281/285/264 280/287/266\nf 1603/292/271 1604/288/267 282/289/268\nf 280/287/266 199/290/269 282/289/268\nf 1598/2007/1681 1603/292/271 203/291/270\nf 290/298/277 1580/293/272 291/294/273\nf 292/300/279 202/295/274 291/294/273\nf 291/294/273 201/296/275 290/298/277\nf 1580/293/272 293/299/278 900/283/262\nf 1644/282/261 292/300/279 900/283/262\nf 198/2008/1682 204/301/280 284/303/282\nf 290/298/277 200/297/276 280/287/266\nf 275/335/311 299/304/283 276/306/285\nf 320/5916/325 337/5917/286 319/5918/288\nf 301/1995/1671 306/310/289 302/312/291\nf 300/305/284 299/304/283 305/314/293\nf 308/322/299 303/315/294 307/317/290\nf 306/1994/289 311/318/295 307/317/290\nf 305/5919/293 304/5920/292 310/5921/298\nf 313/328/304 308/322/299 312/319/296\nf 311/318/295 316/323/300 312/319/296\nf 310/1993/298 309/325/297 315/327/303\nf 318/369/342 313/328/304 317/324/301\nf 286/347/323 334/329/305 360/331/307\nf 287/395/336 334/329/305 321/333/309\nf 366/379/350 328/334/310 365/336/312\nf 324/341/317 325/337/313 323/339/315\nf 327/349/324 326/340/316 324/341/317\nf 299/304/283 275/335/311 329/342/318\nf 330/343/319 304/313/292 329/342/318\nf 331/386/320 309/5922/297 330/5923/319\nf 332/345/321 314/326/302 331/344/320\nf 286/347/323 314/326/302 333/346/322\nf 334/329/305 286/347/323 335/332/308\nf 287/361/336 321/348/309 327/349/324\nf 319/362/288 327/349/324 320/350/325\nf 320/350/325 324/341/317 288/351/326\nf 298/2001/1675 1564/352/327 297/354/329\nf 365/336/312 368/355/330 323/339/315\nf 278/1867/1596 279/286/265 339/356/331\nf 1606/1879/1604 1604/288/267 340/358/333\nf 340/1904/333 283/5924/332 341/1905/335\nf 359/1981/1659 287/395/336 319/309/288\nf 1577/2060/1717 1657/363/337 1578/365/339\nf 316/5925/300 342/366/340 317/368/301\nf 344/387/355 318/5926/342 343/367/341\nf 321/348/309 345/371/343 326/340/316\nf 355/383/354 345/373/343 335/332/308\nf 331/344/320 352/374/345 332/345/321\nf 329/342/318 328/334/310 350/377/348\nf 347/382/353 325/337/313 348/372/344\nf 330/5923/319 329/5927/318 351/384/349\nf 328/334/310 366/379/350 349/376/347\nf 333/346/322 332/345/321 354/381/352\nf 346/396/363 322/338/314 347/382/353\nf 354/381/352 355/383/354 333/346/322\nf 330/5923/319 351/384/349 331/386/320\nf 1582/402/369 344/387/355 1581/388/356\nf 378/1999/1673 379/389/357 364/391/359\nf 406/398/365 372/392/360 407/394/362\nf 286/347/323 360/331/307 314/326/302\nf 359/1981/1659 361/330/306 287/395/336\nf 323/339/315 322/338/314 365/336/312\nf 365/336/312 275/335/311 368/355/330\nf 366/379/350 322/338/314 367/380/351\nf 405/1811/1560 374/397/364 406/398/365\nf 456/518/473 363/399/366 455/401/368\nf 1852/2326/1910 1582/402/369 1853/403/370\nf 354/381/352 353/375/346 391/405/372\nf 384/417/381 347/382/353 385/406/373\nf 391/405/372 392/407/374 354/381/352\nf 348/372/344 345/371/343 385/406/373\nf 350/377/348 349/376/347 387/410/377\nf 350/5928/348 387/411/377 351/384/349\nf 392/407/374 382/413/375 355/383/354\nf 383/418/382 393/414/379 346/396/363\nf 351/384/349 388/412/378 352/385/345\nf 349/376/347 367/380/351 386/409/376\nf 352/374/345 389/416/380 353/375/346\nf 383/418/382 346/396/363 384/417/381\nf 396/421/385 393/414/379 394/419/383\nf 394/419/383 383/418/382 395/420/384\nf 399/427/388 396/421/385 397/422/386\nf 397/422/386 394/419/383 398/423/387\nf 393/414/379 396/421/385 386/409/376\nf 395/420/384 384/417/381 382/408/375\nf 382/408/375 392/424/374 395/420/384\nf 390/404/371 398/425/387 391/405/372\nf 389/428/380 397/422/386 390/426/371\nf 388/412/378 399/429/388 389/415/380\nf 396/5929/385 399/429/388 387/411/377\nf 374/397/364 400/430/389 372/392/360\nf 372/392/360 401/431/390 371/393/361\nf 364/391/359 369/390/358 409/434/393\nf 1584/2041/1701 1854/435/394 1581/388/356\nf 412/2311/1901 409/434/393 414/437/396\nf 414/437/396 413/436/395 416/439/398\nf 498/539/494 499/440/399 418/442/401\nf 418/442/401 417/441/400 420/444/403\nf 420/444/403 419/443/402 422/2349/405\nf 426/5930/409 423/448/406 427/450/408\nf 501/5931/495 426/5932/409 502/5933/410\nf 432/457/414 429/5934/411 433/458/413\nf 435/5935/514 432/457/414 436/459/415\nf 440/475/430 443/460/416 441/462/418\nf 438/476/431 447/463/419 445/465/421\nf 425/5936/422 413/5937/395 408/5938/392\nf 428/468/423 415/467/397 425/1861/422\nf 500/543/496 499/440/399 428/468/423\nf 434/1856/425 419/443/402 431/469/424\nf 437/575/518 421/446/404 434/470/425\nf 403/824/716 370/471/426 404/473/428\nf 503/522/477 504/474/429 440/475/430\nf 439/521/476 438/476/431 444/477/432\nf 405/1811/1560 406/398/365 442/461/417\nf 357/2312/1902 356/478/433 451/480/435\nf 1861/516/471 448/481/436 1862/483/438\nf 1871/546/497 505/484/439 1863/486/441\nf 1856/2327/1911 1855/487/442 1583/489/444\nf 1874/2330/1914 1850/490/445 1864/492/447\nf 507/499/454 506/493/448 460/495/450\nf 458/501/456 452/496/451 459/498/453\nf 508/503/458 507/499/454 463/500/455\nf 461/506/461 458/501/456 462/502/457\nf 509/508/463 508/503/458 466/504/459\nf 465/510/465 464/505/460 462/502/457\nf 469/515/470 510/507/462 466/504/459\nf 468/3484/498 467/509/464 465/510/465\nf 1872/561/506 471/511/466 1863/486/441\nf 460/495/450 454/494/449 472/512/467\nf 463/500/455 460/495/450 473/513/468\nf 466/504/459 463/500/455 474/514/469\nf 475/567/512 469/515/470 474/514/469\nf 1864/492/447 411/491/446 1861/516/471\nf 452/496/451 458/501/456 410/517/472\nf 451/480/435 457/479/434 461/506/461\nf 451/480/435 461/506/461 455/401/368\nf 467/509/464 456/518/473 464/505/460\nf 479/523/478 478/519/474 441/462/418\nf 477/5939/483 476/520/475 439/521/476\nf 511/529/484 503/522/477 478/519/474\nf 441/462/418 406/398/365 479/523/478\nf 481/536/491 485/524/479 407/394/362\nf 478/519/474 479/523/478 484/525/480\nf 511/529/484 478/519/474 512/526/481\nf 512/526/481 483/527/482 511/529/484\nf 476/520/475 477/5939/483 482/5940/485\nf 513/740/652 512/526/481 490/531/486\nf 490/531/486 484/525/480 491/532/487\nf 486/1199/709 1846/1198/488 480/5941/490\nf 485/524/479 481/536/491 491/532/487\nf 489/556/501 488/538/493 483/527/482\nf 416/2324/398 415/467/397 498/539/494\nf 429/454/411 501/1860/495 430/455/412\nf 431/469/424 417/441/400 500/543/496\nf 503/522/477 439/553/476 504/474/429\nf 1862/483/438 449/482/437 1871/2331/497\nf 459/498/453 453/497/452 507/548/454\nf 462/502/457 459/498/453 508/549/458\nf 465/510/465 462/502/457 509/550/463\nf 510/507/462 468/551/498 509/508/463\nf 511/529/484 477/528/483 503/522/477\nf 482/530/485 519/5942/499 476/5943/475\nf 513/740/652 489/556/501 512/526/481\nf 519/5942/499 482/530/485 518/557/502\nf 472/512/467 471/511/466 515/559/504\nf 472/512/467 515/559/504 473/513/468\nf 471/511/466 1872/561/506 516/558/503\nf 519/554/499 536/563/508 520/555/500\nf 447/463/419 438/476/431 520/555/500\nf 474/514/469 522/565/510 475/567/512\nf 473/513/468 523/560/505 474/514/469\nf 528/605/542 527/568/513 436/570/415\nf 521/5909/511 522/571/510 538/573/516\nf 529/601/538 525/574/517 437/575/518\nf 515/587/504 516/576/503 532/578/520\nf 530/5944/535 446/464/420 531/579/521\nf 536/5945/508 553/580/522 537/582/509\nf 522/571/510 523/583/505 539/572/515\nf 536/563/508 519/554/499 535/586/525\nf 523/583/505 515/587/504 540/584/524\nf 531/579/521 447/463/419 537/564/509\nf 1870/5946/507 1869/588/526 516/576/503\nf 422/447/405 421/446/404 526/589/527\nf 538/573/516 539/572/515 555/591/529\nf 532/578/520 549/592/530 540/584/524\nf 540/584/524 557/593/531 539/572/515\nf 553/5947/522 536/563/508 552/594/532\nf 533/577/519 1869/588/526 550/596/534\nf 547/618/554 530/597/535 548/599/536\nf 546/620/556 542/600/537 529/601/538\nf 526/589/527 525/574/517 543/602/539\nf 532/578/520 533/577/519 549/592/530\nf 571/606/543 554/581/523 570/603/540\nf 548/599/536 531/598/521 554/581/523\nf 545/607/544 544/604/541 528/605/542\nf 565/625/561 548/599/536 571/606/543\nf 561/626/562 544/604/541 562/608/545\nf 555/591/529 556/590/528 572/610/547\nf 557/593/531 549/592/530 574/612/549\nf 556/590/528 557/593/531 573/609/546\nf 570/603/540 553/580/522 569/614/550\nf 1860/595/533 1859/615/551 550/596/534\nf 565/625/561 564/617/553 548/599/536\nf 563/635/571 559/619/555 546/620/556\nf 543/602/539 542/600/537 560/621/557\nf 550/596/534 567/616/552 549/592/530\nf 570/603/540 587/622/558 571/606/543\nf 605/654/587 588/623/559 604/624/560\nf 582/653/588 565/625/561 588/623/559\nf 578/656/590 561/626/562 579/627/563\nf 572/610/547 573/609/546 589/629/565\nf 574/612/549 566/611/548 591/631/567\nf 573/609/546 574/612/549 590/628/564\nf 586/5948/597 587/622/558 569/614/550\nf 567/616/552 1859/615/551 584/633/569\nf 582/653/588 581/634/570 565/625/561\nf 576/637/573 559/619/555 580/636/572\nf 560/621/557 559/619/555 577/638/574\nf 688/807/683 671/639/575 694/641/577\nf 566/611/548 567/616/552 583/630/566\nf 593/643/579 576/637/573 597/642/578\nf 577/638/574 576/637/573 594/644/580\nf 671/5949/575 654/645/581 677/647/576\nf 583/630/566 584/633/569 600/649/584\nf 604/677/560 621/650/585 605/652/587\nf 599/5950/608 582/653/588 605/654/587\nf 643/3628/2854 660/646/582 637/655/589\nf 595/689/615 578/656/590 596/657/591\nf 589/629/565 590/628/564 606/3632/593\nf 643/3628/2854 637/655/589 626/662/595\nf 591/631/567 583/630/566 608/663/596\nf 590/628/564 591/631/567 607/664/592\nf 604/677/560 587/665/558 603/667/598\nf 584/633/569 1858/632/568 601/648/583\nf 599/5950/608 598/669/600 582/653/588\nf 606/660/593 607/659/592 623/671/602\nf 626/662/595 620/661/594 609/672/603\nf 608/663/596 600/649/584 625/674/605\nf 607/659/592 608/675/596 624/670/601\nf 621/650/585 604/677/560 620/661/594\nf 601/648/583 1857/668/599 618/679/607\nf 615/5951/628 598/680/600 616/682/609\nf 614/708/631 610/683/610 597/642/578\nf 594/644/580 593/643/579 611/684/611\nf 586/666/597 592/685/612 603/667/598\nf 600/649/584 601/648/583 617/673/604\nf 639/691/617 622/651/586 638/686/613\nf 616/682/609 599/681/608 622/651/586\nf 586/5948/597 569/614/550 592/688/612\nf 612/693/619 595/689/615 613/690/616\nf 633/706/629 616/705/609 639/5952/617\nf 575/687/614 569/614/550 558/692/618\nf 629/1894/638 612/693/619 630/694/620\nf 623/671/602 624/670/601 640/696/622\nf 552/594/532 535/586/525 558/698/618\nf 625/676/605 617/699/604 642/701/625\nf 624/670/601 625/676/605 641/695/621\nf 638/686/613 621/650/585 637/655/589\nf 618/679/607 1868/678/606 635/703/627\nf 632/733/647 615/5953/628 633/734/629\nf 631/1847/650 627/707/630 614/708/631\nf 611/684/611 610/683/610 628/709/632\nf 535/586/525 518/585/502 541/697/623\nf 617/673/604 618/679/607 634/711/624\nf 656/714/636 639/691/617 655/712/634\nf 672/748/658 673/713/635 655/712/634\nf 650/753/648 633/5954/629 656/762/636\nf 518/557/502 488/538/493 524/5955/633\nf 646/765/671 629/719/638 647/721/639\nf 640/696/622 641/695/621 657/723/641\nf 488/538/493 489/556/501 494/725/637\nf 642/5956/625 634/726/624 659/728/644\nf 641/695/621 642/701/625 658/722/640\nf 655/712/634 638/686/613 654/645/581\nf 635/741/627 1867/730/626 652/732/646\nf 649/752/662 632/1828/647 650/753/648\nf 648/755/664 644/736/649 631/738/650\nf 628/2348/632 627/737/630 645/739/651\nf 514/5904/4492 495/724/642 513/740/652\nf 634/726/624 635/741/627 651/727/643\nf 657/723/641 658/722/640 674/743/654\nf 514/5904/4492 513/740/652 496/744/655\nf 659/728/644 651/727/643 676/746/657\nf 658/5957/640 659/728/644 675/747/653\nf 671/5949/575 672/748/658 654/645/581\nf 652/732/646 1866/731/645 669/750/660\nf 667/761/668 666/751/661 650/753/648\nf 665/767/673 661/754/663 648/755/664\nf 645/739/651 644/736/649 662/756/665\nf 496/744/655 490/531/486 497/757/666\nf 651/727/643 652/732/646 668/745/656\nf 689/5958/702 690/758/667 672/760/658\nf 673/759/635 667/761/668 656/762/636\nf 487/537/492 493/763/669 491/532/487\nf 664/773/679 663/764/670 647/721/639\nf 682/788/691 678/766/672 665/767/673\nf 662/756/665 661/754/663 679/768/674\nf 669/750/660 686/769/675 668/745/656\nf 690/758/667 684/771/677 673/759/635\nf 681/797/697 680/772/678 664/773/679\nf 674/743/654 675/742/653 691/5959/681\nf 668/745/656 685/770/676 676/746/657\nf 675/747/653 676/746/657 692/774/680\nf 689/806/702 672/5960/658 688/807/683\nf 669/750/660 1865/749/659 686/769/675\nf 683/781/685 666/751/661 684/771/677\nf 700/813/706 683/1888/685 701/814/686\nf 689/806/702 706/783/687 690/785/667\nf 688/807/683 694/641/577 705/787/690\nf 695/5961/693 678/766/672 699/789/692\nf 679/768/674 678/766/672 696/794/694\nf 704/5962/705 687/793/695 696/794/694\nf 701/814/686 684/5963/677 707/784/688\nf 698/1833/1576 697/796/696 681/797/697\nf 692/805/680 709/804/698 691/5964/681\nf 685/770/676 702/801/700 693/776/682\nf 693/776/682 710/802/701 692/774/680\nf 706/783/687 689/806/702 705/787/690\nf 1876/780/684 1875/808/703 686/769/675\nf 703/809/704 702/801/700 686/769/675\nf 1875/2343/703 704/810/705 695/812/693\nf 699/1835/692 700/813/706 695/812/693\nf 1742/258/237 241/257/236 1755/816/708\nf 724/1201/1055 486/817/709 723/818/710\nf 380/1864/1593 713/819/711 381/821/713\nf 400/430/389 730/822/714 401/431/390\nf 423/448/406 403/824/716 424/449/407\nf 401/431/390 731/823/715 402/432/391\nf 727/1023/893 728/826/718 745/828/720\nf 741/860/750 742/829/721 895/831/723\nf 750/835/727 746/832/724 751/834/726\nf 752/837/729 750/835/727 753/836/728\nf 754/900/731 752/837/729 755/838/730\nf 756/842/733 754/839/731 757/841/732\nf 758/845/736 756/842/733 759/843/734\nf 761/907/792 760/844/735 759/843/734\nf 764/1220/740 762/846/737 765/848/739\nf 766/852/742 764/849/740 767/851/741\nf 768/854/744 766/852/742 769/853/743\nf 770/856/746 768/854/744 771/855/745\nf 772/859/749 770/856/746 773/857/747\nf 775/902/787 774/858/748 773/857/747\nf 740/1018/888 741/860/750 896/861/751\nf 990/1146/1012 991/862/752 782/864/754\nf 782/864/754 783/863/753 786/866/756\nf 786/866/756 787/865/755 790/893/758\nf 791/868/757 796/870/759 790/869/758\nf 795/1043/911 801/872/761 815/874/763\nf 808/878/767 802/875/764 803/876/765\nf 794/871/760 796/870/759 800/877/766\nf 800/877/766 802/875/764 806/879/768\nf 801/872/761 807/880/769 809/873/762\nf 802/875/764 796/870/759 809/873/762\nf 806/879/768 808/878/767 812/882/771\nf 795/1043/911 1038/883/772 799/885/774\nf 800/877/766 806/879/768 804/887/776\nf 813/1042/910 797/888/777 807/880/769\nf 779/890/779 772/859/749 780/889/778\nf 770/856/746 772/859/749 778/891/780\nf 768/854/744 770/856/746 777/892/781\nf 788/1204/1058 786/866/756 792/894/782\nf 742/829/721 743/895/783 894/830/722\nf 250/273/252 1740/897/785 249/898/786\nf 746/832/724 750/835/727 763/847/738\nf 750/835/727 752/837/729 765/848/739\nf 752/837/729 754/900/731 767/899/741\nf 754/839/731 756/842/733 769/853/743\nf 756/842/733 758/845/736 771/855/745\nf 773/857/747 758/845/736 775/902/787\nf 753/836/728 751/834/726 819/904/789\nf 759/843/734 822/905/790 761/907/792\nf 759/843/734 757/841/732 822/905/790\nf 757/5965/732 755/838/730 821/910/793\nf 755/838/730 753/836/728 820/909/794\nf 819/904/789 818/903/788 825/912/796\nf 822/5966/790 828/913/797 823/915/791\nf 820/909/794 819/904/789 826/916/799\nf 821/910/793 820/909/794 827/917/800\nf 822/5967/790 821/910/793 828/918/797\nf 825/912/796 824/911/795 831/920/802\nf 828/913/797 834/921/803 829/914/798\nf 826/916/799 825/912/796 832/923/805\nf 827/917/800 826/916/799 833/924/806\nf 828/913/797 827/925/800 834/921/803\nf 831/920/802 830/919/801 837/928/808\nf 834/921/803 840/929/809 835/922/804\nf 832/923/805 831/920/802 838/931/811\nf 833/924/806 832/923/805 839/932/812\nf 834/921/803 833/926/806 840/929/809\nf 837/928/808 836/927/807 843/935/814\nf 841/930/810 840/929/809 847/937/816\nf 838/931/811 837/928/808 844/938/817\nf 839/932/812 838/931/811 845/939/818\nf 840/929/809 839/933/812 846/936/815\nf 843/935/814 842/934/813 849/942/820\nf 847/937/816 846/936/815 853/944/822\nf 844/938/817 843/935/814 850/945/823\nf 845/939/818 844/938/817 851/946/824\nf 846/936/815 845/940/818 852/943/821\nf 1020/954/831 1019/948/825 855/950/827\nf 1033/1192/1050 858/951/828 1018/953/830\nf 1032/956/833 1020/954/831 856/955/832\nf 1031/5968/835 1032/956/833 857/957/834\nf 1033/1192/1050 1031/958/835 858/951/828\nf 1050/1186/1045 969/960/836 1881/962/838\nf 1050/1186/1045 1881/962/838 1022/964/840\nf 968/1114/847 967/965/841 862/967/843\nf 965/973/848 1008/968/844 864/970/846\nf 969/960/836 968/971/847 863/961/837\nf 966/1068/936 965/973/848 865/974/849\nf 869/984/859 1745/975/850 868/977/852\nf 868/977/852 1746/976/851 871/979/854\nf 988/1144/1010 976/980/855 979/982/857\nf 1608/1065/933 1756/983/858 869/984/859\nf 937/2359/1928 944/985/860 938/987/862\nf 871/979/854 1747/978/853 872/278/257\nf 878/2935/866 975/989/864 881/990/865\nf 978/981/856 976/980/855 878/992/866\nf 938/987/862 945/986/861 939/994/868\nf 1750/2188/1826 1751/995/869 895/831/723\nf 751/834/726 749/833/725 818/903/788\nf 887/997/871 824/911/795 886/996/870\nf 888/998/872 830/919/801 887/997/871\nf 889/999/873 836/927/807 888/998/872\nf 890/1000/874 842/934/813 889/999/873\nf 891/1085/953 848/941/819 890/1000/874\nf 903/1682/1447 220/1001/875 902/1003/877\nf 1593/1951/1637 88/164/153 1595/1005/879\nf 139/158/147 138/1006/880 184/1008/882\nf 1609/2012/1686 905/1009/883 1595/1005/879\nf 1609/2012/1686 188/212/196 1597/231/212\nf 907/1012/886 906/1011/885 904/1007/881\nf 902/1003/877 214/1002/876 907/1012/886\nf 161/215/199 145/171/160 174/201/186\nf 186/207/191 148/169/158 159/209/193\nf 109/118/107 105/119/108 114/126/115\nf 150/1004/878 149/166/155 188/212/196\nf 156/175/163 157/181/169 175/193/178\nf 106/1013/887 107/122/111 111/129/118\nf 152/183/170 153/179/167 171/203/184\nf 160/213/197 146/168/157 161/215/199\nf 105/119/108 106/1013/887 110/127/116\nf 187/206/190 149/166/155 186/207/191\nf 157/181/169 158/1014/171 176/194/179\nf 153/179/167 156/175/163 172/196/181\nf 174/201/186 155/185/172 173/198/183\nf 114/186/115 166/204/188 109/1017/107\nf 159/209/193 147/163/152 160/213/197\nf 154/174/162 152/183/170 173/1016/183\nf 112/130/119 107/122/111 113/132/121\nf 912/1069/937 740/1018/888 913/1019/889\nf 896/861/751 1751/995/869 913/1019/889\nf 792/5969/782 790/869/758 798/1021/891\nf 800/877/766 804/887/776 794/871/760\nf 810/886/775 806/879/768 816/1022/892\nf 728/826/718 727/1023/893 919/1025/895\nf 915/1203/1057 917/1026/896 922/1028/898\nf 921/1035/903 914/1029/899 923/1027/897\nf 892/1874/901 923/1030/897 918/1032/900\nf 923/1030/897 892/1874/901 921/5970/903\nf 924/1045/913 785/1036/904 925/1038/906\nf 795/1043/911 815/874/763 1038/883/772\nf 815/874/763 796/870/759 1039/1039/907\nf 808/878/767 803/876/765 814/881/770\nf 807/880/769 811/1040/908 813/1042/910\nf 805/1044/912 811/1040/908 801/872/761\nf 801/872/761 795/1043/911 805/1044/912\nf 927/1148/1014 924/1045/913 926/1046/914\nf 995/1149/1015 994/1047/915 921/1035/903\nf 995/1149/1015 996/1048/916 924/1045/913\nf 916/1802/1551 738/1049/917 893/896/784\nf 1034/1221/1071 1035/1050/918 776/1052/920\nf 777/892/781 778/891/780 929/1054/922\nf 778/891/780 779/890/779 930/1053/921\nf 931/1055/923 779/890/779 932/1056/924\nf 776/1052/920 1000/1057/925 762/846/737\nf 746/832/724 998/1059/927 749/833/725\nf 1001/1151/1017 1000/1057/925 928/1051/919\nf 912/1069/937 998/1059/927 740/1018/888\nf 762/846/737 1002/1058/926 763/847/738\nf 993/1152/1018 886/996/870 997/1060/928\nf 964/1064/932 861/1062/930 1008/968/844\nf 874/2357/1926 866/1063/931 964/1064/932\nf 1607/2015/1689 1608/1065/933 860/1066/934\nf 970/1119/985 1022/964/840 1878/1067/935\nf 967/965/841 966/1068/936 1877/966/842\nf 867/1683/1448 912/1069/937 870/1070/938\nf 960/1104/972 1887/1071/939 961/1073/941\nf 993/1152/1018 1003/1074/942 886/996/870\nf 1024/1195/1052 1793/1075/943 935/1077/945\nf 2056/1082/950 1044/1078/946 2055/1080/948\nf 2057/2208/1843 941/1081/949 2056/1082/950\nf 890/1000/874 1790/1083/951 891/1085/953\nf 889/999/873 1789/1086/954 890/1000/874\nf 888/998/872 1788/1087/955 889/999/873\nf 887/997/871 1795/1088/956 888/998/872\nf 1043/2223/1080 1040/1089/957 891/1085/953\nf 945/986/861 952/1090/958 946/993/867\nf 1028/1163/1013 1027/1092/960 949/1094/962\nf 944/985/860 951/1095/963 945/986/861\nf 947/1100/968 954/1096/964 948/1098/966\nf 1005/1155/1021 1006/1099/967 944/985/860\nf 946/993/867 953/1091/959 947/1100/968\nf 1901/1157/1023 1007/1101/969 1894/1103/971\nf 1897/1107/975 960/1104/972 1896/1105/973\nf 1898/1111/979 959/1106/974 1897/1107/975\nf 1899/2938/2297 1902/2937/976 963/4059/978\nf 1894/1103/971 958/1102/970 1898/1111/979\nf 1896/1105/973 961/1073/941 1900/1113/981\nf 1884/1072/940 968/1114/847 1883/1116/982\nf 1885/1121/987 1890/1117/983 965/973/848\nf 1884/1072/940 1887/1071/939 968/1114/847\nf 1887/1071/939 1888/1118/984 967/965/841\nf 1891/1187/1046 1022/964/840 1889/1120/986\nf 1888/1118/984 1885/1121/987 966/1068/936\nf 1030/1190/1048 883/1122/988 1025/1124/990\nf 972/279/258 973/1125/991 971/280/259\nf 977/1131/997 249/898/786 981/1128/994\nf 250/273/252 974/1129/995 273/274/253\nf 974/1129/995 250/273/252 977/1131/997\nf 1053/1234/1081 1051/1132/998 971/280/259\nf 939/994/868 946/993/867 940/1133/999\nf 940/1133/999 947/1100/968 941/1081/949\nf 1753/2189/1827 1754/1134/1000 252/1136/1002\nf 981/1128/994 247/1127/993 982/1138/1004\nf 1754/1134/1000 1755/816/708 253/1135/1001\nf 2061/1140/1006 974/1129/995 2058/1139/1005\nf 974/1129/995 2061/1140/1006 274/1130/996\nf 941/1081/949 948/1098/966 1044/1078/946\nf 989/1161/1026 986/1143/1009 988/1144/1010\nf 976/980/855 986/1143/1009 975/991/864\nf 2059/2636/2150 2058/1139/1005 981/1128/994\nf 745/828/720 747/827/719 990/1146/1012\nf 1044/1078/946 1049/1142/1008 1029/1079/947\nf 924/1045/913 927/1148/1014 995/1149/1015\nf 921/1035/903 744/1034/902 995/1149/1015\nf 742/829/721 741/860/750 1000/1057/925\nf 998/1059/927 912/1069/937 997/1060/928\nf 743/895/783 742/829/721 1001/1151/1017\nf 998/1059/927 746/832/724 999/1061/929\nf 1002/1058/926 741/860/750 999/1061/929\nf 885/2380/1948 993/1152/1018 739/1150/1016\nf 885/2380/1948 934/1153/1019 993/1152/1018\nf 1787/2216/1851 1795/1088/956 1003/1074/942\nf 943/1226/1073 950/1154/1020 1005/1155/1021\nf 1895/1230/1077 957/1156/1022 1901/1157/1023\nf 1886/2354/1925 964/1064/932 1890/1117/983\nf 986/5971/1009 1011/1158/1024 987/1160/1011\nf 1011/5972/1024 986/1143/1009 1012/1162/1027\nf 1029/1079/947 1028/1147/1013 942/2639/1028\nf 987/1160/1011 1010/1159/1025 973/1166/991\nf 2064/4111/2151 2066/1167/1030 1016/1169/1032\nf 1052/5973/1082 1045/5974/1033 1031/5975/835\nf 882/1123/989 880/1173/1034 1025/1124/990\nf 1004/2360/1929 2068/1175/1036 936/1177/1038\nf 1055/1236/1083 1042/1178/1039 1017/1179/1040\nf 231/244/223 224/243/222 237/249/228\nf 1016/1169/1032 1015/1168/1031 984/1181/1042\nf 1049/1142/1008 1048/1182/1043 1028/1147/1013\nf 1017/1179/1040 884/1126/992 1013/1184/1029\nf 1045/1170/1033 1054/1237/1044 1032/1171/833\nf 1892/1238/1084 1050/1186/1045 1891/1187/1046\nf 975/989/864 987/1188/1011 972/279/258\nf 1021/1243/1087 1014/1189/1047 1030/1190/1048\nf 1046/1239/1085 1041/1191/1049 1018/953/830\nf 1054/1185/1044 1040/1193/957 1020/954/831\nf 1903/1240/1086 1047/1194/1051 1902/1108/976\nf 935/1077/945 854/949/826 1024/1195/1052\nf 1052/1241/1082 1031/958/835 1041/1191/1049\nf 1053/1234/1081 1042/1178/1039 1025/1124/990\nf 2059/2636/2150 2065/1196/1053 1013/1165/1029\nf 224/243/222 206/219/203 234/240/220\nf 371/393/361 402/432/391 1845/534/489\nf 723/818/710 480/535/490 722/825/717\nf 1847/2319/1905 1846/1198/488 492/1200/1054\nf 492/5907/1054 486/817/709 725/1202/1056\nf 919/1025/895 915/1203/1057 728/826/718\nf 728/826/718 922/1028/898 747/827/719\nf 994/1047/915 991/862/752 914/1029/899\nf 991/862/752 994/1047/915 783/863/753\nf 926/1046/914 787/865/755 927/1148/1014\nf 784/1205/1059 782/864/754 788/1204/1058\nf 992/1206/1060 990/1146/1012 784/1205/1059\nf 990/1146/1012 992/1206/1060 745/828/720\nf 745/828/720 781/1207/1061 727/1023/893\nf 733/2236/1862 920/1024/894 748/1208/1062\nf 1642/2191/1828 1817/1209/1063 1757/1211/1065\nf 1804/1213/1067 1805/1212/1066 917/1031/896\nf 1803/2231/1068 1804/1213/1067 915/1214/1057\nf 1802/1216/1069 1803/1215/1068 919/1025/895\nf 1801/2233/1861 1802/1216/1069 920/1024/894\nf 285/359/334 283/357/332 1579/302/281\nf 1036/1222/1072 1037/1217/1070 1034/1219/1071\nf 762/846/737 764/1220/740 776/1052/920\nf 764/849/740 766/852/742 1034/1219/1071\nf 1038/883/772 925/1223/906 793/884/773\nf 926/1225/914 925/1223/906 1039/1039/907\nf 1039/1039/907 791/868/757 926/1225/914\nf 929/1054/922 1037/1217/1070 777/892/781\nf 766/852/742 768/854/744 1036/1222/1072\nf 950/1154/1020 943/1226/1073 877/1228/1075\nf 1893/2909/2295 875/1229/1076 1895/1230/1077\nf 1007/1101/969 1890/1117/983 958/1102/970\nf 983/1232/1079 985/1180/1041 227/1231/1078\nf 248/1137/1003 983/1232/1079 982/1138/1004\nf 1024/2222/1052 1019/5976/825 1043/2223/1080\nf 1025/1124/990 1026/1174/1035 1053/1234/1081\nf 851/947/824 850/5977/823 1052/1241/1082\nf 1021/1243/1087 1030/1190/1048 1055/1236/1083\nf 948/1098/966 955/1097/965 1049/1142/1008\nf 850/945/823 849/942/820 1045/1170/1033\nf 1883/5978/982 969/960/836 1892/1238/1084\nf 853/944/822 852/943/821 1046/1239/1085\nf 849/942/820 848/941/819 1054/1237/1044\nf 1900/1113/981 962/1112/980 1903/1240/1086\nf 852/943/821 851/947/824 1041/1191/1049\nf 971/280/259 884/1126/992 1053/1234/1081\nf 2070/2638/2152 2066/1167/1030 1055/1244/1083\nf 2070/2638/2152 1055/1244/1083 2065/1196/1053\nf 2281/1257/1100 2282/1245/1088 1057/1247/1090\nf 2283/1289/1127 2284/1248/1091 19/1250/1093\nf 2284/1248/1091 2285/1251/1094 16/1249/1092\nf 2285/1251/1094 2286/1253/1096 13/1252/1095\nf 2286/1253/1096 2287/1255/1098 10/1254/1097\nf 2288/1276/1116 55/64/56 2281/1257/1100\nf 2290/2939/2298 73/1258/1101 2289/1259/1102\nf 2292/2941/2299 2293/1271/1103 1077/5979/1105\nf 2289/1259/1102 70/87/78 2294/1263/1106\nf 2307/2017/1691 1590/1935/1107 2291/5980/1109\nf 2292/2945/2299 2294/1263/1106 64/1267/70\nf 2297/5981/2300 48/1268/1110 2296/1270/1112\nf 2298/5982/2301 2293/5983/1103 61/5984/64\nf 2297/5981/2300 2299/1273/1113 48/1268/1110\nf 2298/2951/2301 61/72/64 2300/1275/1115\nf 2300/1275/1115 58/68/60 2288/1276/1116\nf 2303/2958/2302 34/1277/1117 2302/1279/1119\nf 2308/5985/2303 1588/1280/1120 2295/1282/1122\nf 2304/2018/1692 2305/1283/1123 28/1285/1125\nf 2287/1255/1098 2282/1245/1088 7/1256/1099\nf 2306/5986/2304 22/1286/1126 2305/1288/1123\nf 2306/5986/2304 2283/1289/1127 22/1286/1126\nf 1096/2291/1173 1070/1290/1128 1097/1292/1130\nf 1093/1692/1175 1067/1293/1131 1094/1295/1133\nf 1089/1305/1143 1088/1296/1134 1063/1298/1136\nf 1084/1307/1145 1082/1299/1137 1058/1300/1138\nf 1102/1313/1149 1076/1301/1139 1101/1303/1141\nf 1098/2019/1180 1097/1292/1130 1072/1304/1142\nf 1090/5987/1181 1089/1305/1143 1064/1306/1144\nf 1085/1319/1155 1084/1307/1145 1059/1308/1146\nf 1081/1312/1104 1107/1309/1147 1077/1311/1105\nf 1107/1309/1147 1081/1312/1104 1102/1313/1149\nf 1099/2296/1187 1614/1314/1150 1073/1316/1152\nf 1090/5987/1181 1064/1306/1144 1091/1318/1154\nf 1086/1326/1162 1085/1319/1155 1060/1320/1156\nf 1103/1310/1148 1104/1321/1157 1077/1311/1105\nf 1613/2021/1190 1611/2020/1159 1092/5988/1161\nf 1087/5989/1168 1086/1326/1162 1061/1327/1163\nf 1104/1321/1157 1105/1328/1164 1078/1322/1158\nf 1100/1339/1170 1074/1330/1166 1083/1331/1167\nf 1088/1349/1134 1087/1332/1168 1062/1334/1135\nf 1057/1247/1090 1056/1246/1089 1083/1331/1167\nf 1106/1385/1198 1080/1335/1169 1105/1337/1164\nf 1101/5990/1141 1075/1338/1140 1100/1339/1170\nf 1126/1379/1193 1127/1340/1171 1100/1342/1170\nf 1123/5991/1179 1122/1343/1172 1097/1345/1130\nf 1120/1400/1207 1119/1346/1174 1094/1348/1133\nf 1114/1381/1194 1088/1349/1134 1115/1351/1176\nf 1108/1382/1195 1082/1352/1137 1110/1354/1177\nf 1127/1396/1171 1128/1355/1178 1101/1303/1141\nf 1124/5992/1212 1123/1356/1179 1098/1358/1180\nf 1115/1351/1176 1089/1350/1143 1116/1369/1182\nf 1110/1354/1177 1084/1353/1145 1111/1363/1183\nf 1107/1309/1147 1133/1364/1184 1103/1310/1148\nf 1128/1355/1178 1133/1364/1184 1102/1313/1149\nf 1125/5993/1219 1616/5994/1186 1099/5995/1187\nf 1117/1415/1221 1116/1369/1182 1091/1371/1154\nf 1111/1363/1183 1085/1362/1155 1112/1373/1188\nf 1130/1386/1199 1104/1321/1157 1129/1365/1185\nf 1118/1417/1223 1615/1374/1189 1092/1376/1161\nf 1112/1373/1188 1086/1372/1162 1113/1377/1191\nf 1130/1386/1199 1131/1378/1192 1104/1321/1157\nf 1109/1383/1196 1126/1379/1193 1083/1380/1167\nf 1113/1377/1191 1087/1332/1168 1114/1381/1194\nf 1082/1352/1137 1108/1382/1195 1083/1380/1167\nf 1131/1378/1192 1132/1395/1197 1105/1328/1164\nf 1157/1439/1242 1131/1378/1192 1156/1387/1200\nf 1135/1442/1204 1152/1388/1201 1109/1390/1196\nf 1140/1402/1209 1139/1391/1202 1114/1381/1194\nf 1109/1383/1196 1108/1382/1195 1135/1393/1204\nf 1157/1439/1242 1158/1394/1205 1131/1378/1192\nf 1153/1403/1210 1127/1396/1171 1152/1388/1201\nf 1149/1404/1211 1148/1397/1206 1123/1399/1179\nf 1145/1522/1248 1119/1346/1174 1146/1401/1208\nf 1141/1406/1213 1140/1402/1209 1115/1351/1176\nf 1136/1407/1214 1134/1392/1203 1110/1354/1177\nf 1154/1410/1217 1128/1355/1178 1153/1403/1210\nf 1150/1423/1229 1149/1404/1211 1124/1405/1212\nf 1142/1414/1220 1141/1406/1213 1116/1369/1182\nf 1137/1416/1222 1136/1407/1214 1111/1363/1183\nf 1133/1364/1184 1159/1408/1215 1129/1365/1185\nf 1159/1408/1215 1133/1364/1184 1154/1410/1217\nf 1151/1430/1234 1618/1411/1218 1125/1413/1219\nf 1143/5996/1237 1142/1414/1220 1117/1415/1221\nf 1138/1419/1225 1137/1416/1222 1112/1373/1188\nf 1156/1387/1200 1130/1386/1199 1155/1409/1216\nf 1617/2025/1239 1615/1374/1189 1144/1418/1224\nf 1139/1391/1202 1138/1419/1225 1113/1377/1191\nf 1162/1427/1231 1160/1420/1226 1136/1407/1214\nf 1180/1467/1262 1154/1410/1217 1179/1421/1227\nf 1176/1468/1263 1175/1422/1228 1150/1423/1229\nf 1168/1432/1236 1167/1424/1230 1142/1426/1220\nf 1163/1434/1238 1162/1427/1231 1137/1416/1222\nf 1155/1409/1216 1159/1408/1215 1181/1429/1233\nf 1180/1467/1262 1185/1428/1232 1154/1410/1217\nf 1620/1475/1269 1618/1411/1218 1177/1431/1235\nf 1169/1477/1271 1168/1432/1236 1143/1433/1237\nf 1164/1438/1241 1163/1434/1238 1138/1419/1225\nf 1182/1440/1243 1156/1387/1200 1181/1429/1233\nf 1619/1482/1275 1617/1435/1239 1170/1437/1240\nf 1165/5997/1276 1164/1438/1241 1139/1391/1202\nf 1183/1447/1247 1157/1439/1242 1182/1440/1243\nf 1161/1446/1246 1178/1486/1244 1135/5998/1204\nf 1165/5997/1276 1139/1391/1202 1166/1443/1245\nf 1135/5998/1204 1134/1444/1203 1161/1446/1246\nf 1184/1455/1252 1158/1394/1205 1183/1447/1247\nf 1178/1441/1244 1179/1421/1227 1152/1388/1201\nf 1174/1458/1255 1148/1397/1206 1175/1422/1228\nf 1171/1460/1257 1145/5999/1248 1172/1461/1249\nf 1167/1424/1230 1166/1451/1245 1141/1425/1213\nf 1161/1446/1246 1160/1445/1226 1187/1454/1251\nf 1210/1497/1287 1184/1455/1252 1209/1456/1253\nf 1204/1507/1278 1205/1457/1254 1178/1441/1244\nf 1200/1503/1293 1174/1458/1255 1201/1459/1256\nf 1197/1501/1291 1171/1460/1257 1198/1462/1258\nf 1192/1488/1279 1166/1451/1245 1193/1463/1259\nf 1186/1453/1250 1160/1445/1226 1188/1465/1260\nf 1205/1457/1254 1206/1466/1261 1179/1421/1227\nf 1201/1459/1256 1175/1422/1228 1202/1469/1264\nf 1193/1463/1259 1167/1424/1230 1194/1470/1265\nf 1188/1465/1260 1162/1464/1231 1189/1472/1266\nf 1181/1429/1233 1185/1428/1232 1207/1474/1268\nf 1206/1466/1261 1211/1473/1267 1180/1467/1262\nf 1622/1514/1303 1620/1475/1269 1203/1476/1270\nf 1195/1493/1283 1194/1470/1265 1169/1477/1271\nf 1189/1472/1266 1163/1471/1238 1190/1479/1272\nf 1207/1474/1268 1208/1480/1273 1181/1429/1233\nf 1196/1498/1288 1621/1481/1274 1170/1437/1240\nf 1190/1479/1272 1164/1478/1241 1191/1484/1277\nf 1209/1456/1253 1183/1447/1247 1208/1480/1273\nf 1187/1454/1251 1204/1485/1278 1161/1446/1246\nf 1191/1490/1277 1165/1487/1276 1192/1488/1279\nf 1216/1520/1309 1190/1479/1272 1217/1489/1280\nf 1217/1551/1280 1191/1490/1277 1229/1491/1281\nf 1229/1491/1281 1192/1488/1279 1218/1492/1282\nf 1194/1470/1265 1195/1493/1283 1219/1495/1285\nf 1235/1511/1300 1236/1496/1286 1209/1456/1253\nf 1621/1481/1274 1196/1498/1288 1623/1500/1290\nf 1222/1521/1310 1197/1501/1291 1223/1502/1292\nf 1225/1533/1321 1200/1503/1293 1220/1504/1294\nf 1212/1518/1307 1186/1453/1250 1214/1505/1295\nf 1220/1504/1294 1201/1459/1256 1227/1506/1296\nf 1205/1457/1254 1204/1507/1278 1230/1509/1298\nf 1218/1492/1282 1193/1463/1259 1219/1495/1285\nf 1209/1456/1253 1208/1480/1273 1235/1511/1300\nf 1207/1474/1268 1211/1473/1267 1233/1513/1302\nf 1208/1480/1273 1207/1474/1268 1213/1510/1299\nf 1624/1528/1316 1622/1514/1303 1228/1515/1304\nf 1211/1473/1267 1206/1466/1261 1237/1512/1301\nf 1206/1466/1261 1205/1457/1254 1215/1516/1305\nf 1231/1534/1297 1204/1485/1278 1234/1517/1306\nf 1186/1453/1250 1212/1518/1307 1187/1454/1251\nf 1214/1505/1295 1188/1465/1260 1232/1519/1308\nf 1189/1472/1266 1190/1479/1272 1232/1519/1308\nf 1221/1499/1289 1196/1498/1288 1222/1521/1310\nf 1171/1460/1257 1197/1501/1291 1170/1437/1240\nf 1145/5999/1248 1171/1460/1257 1144/1436/1224\nf 1144/1418/1224 1118/1417/1223 1145/1522/1248\nf 1216/1520/1309 1242/1523/1311 1232/1519/1308\nf 1233/1513/1302 1237/1512/1301 1259/1526/1314\nf 1237/1512/1301 1215/1516/1305 1263/1525/1313\nf 1227/1506/1296 1624/1528/1316 1253/1530/1318\nf 1220/1504/1294 1246/1531/1319 1225/1533/1321\nf 1230/6000/1298 1231/1534/1297 1256/1536/1323\nf 1226/1494/1284 1252/1537/1324 1219/1495/1285\nf 1214/1505/1295 1240/1539/1326 1212/1518/1307\nf 1215/1516/1305 1230/1509/1298 1241/1527/1315\nf 1623/1500/1290 1625/1542/1328 1226/1494/1284\nf 1217/1489/1280 1243/1543/1329 1216/1520/1309\nf 1232/1519/1308 1258/1524/1312 1214/1505/1295\nf 1231/1534/1297 1234/1517/1306 1257/1535/1322\nf 1235/1511/1300 1213/1510/1299 1261/1546/1332\nf 1223/1502/1292 1249/1547/1333 1222/1521/1310\nf 1229/1491/1281 1255/1549/1335 1217/1551/1280\nf 1236/1496/1286 1235/1511/1300 1262/1552/1336\nf 1213/1510/1299 1233/1513/1302 1239/1545/1331\nf 1227/1506/1296 1253/1530/1318 1220/1504/1294\nf 1218/1492/1282 1244/1553/1337 1229/1491/1281\nf 1212/1518/1307 1238/1540/1327 1234/1517/1306\nf 1222/1521/1310 1248/1548/1334 1221/1499/1289\nf 1219/1495/1285 1245/1538/1325 1218/1492/1282\nf 1625/1542/1328 1627/1555/1339 1252/1537/1324\nf 1243/1543/1329 1269/1557/1341 1242/1523/1311\nf 1256/1536/1323 1257/1535/1322 1282/1560/1344\nf 1262/2304/1336 1261/1561/1332 1288/1563/1346\nf 1261/1546/1332 1239/1545/1331 1287/1565/1345\nf 1248/1548/1334 1249/1547/1333 1274/1567/1349\nf 1255/1549/1335 1281/1568/1350 1243/1550/1329\nf 1238/1540/1327 1264/1570/1351 1260/1544/1330\nf 1239/1545/1331 1259/1526/1314 1265/1564/1347\nf 1253/1530/1318 1279/1573/1354 1246/1531/1319\nf 1244/1553/1337 1270/1575/1356 1255/1549/1335\nf 1259/1526/1314 1263/1525/1313 1285/1572/1353\nf 1263/1525/1313 1241/1527/1315 1289/1576/1357\nf 1248/1548/1334 1274/1567/1349 1247/1554/1338\nf 1245/1538/1325 1271/1579/1360 1244/1553/1337\nf 1258/1524/1312 1284/1580/1361 1240/1539/1326\nf 1241/1527/1315 1256/1541/1323 1267/1577/1358\nf 1626/1529/1317 1628/6001/1363 1253/1530/1318\nf 1246/1531/1319 1272/1574/1355 1251/1532/1320\nf 1252/1537/1324 1278/1556/1340 1245/1538/1325\nf 1240/1539/1326 1266/1581/1362 1238/1540/1327\nf 1242/1523/1311 1268/1558/1342 1258/1524/1312\nf 1257/1535/1322 1260/1544/1330 1283/1559/1343\nf 1287/1562/1345 1265/1587/1347 1313/1589/1366\nf 1274/1567/1349 1275/1566/1348 1300/1591/1368\nf 1281/1568/1350 1307/1592/1369 1269/1569/1341\nf 1264/1570/1351 1290/1594/1371 1286/1571/1352\nf 1265/1587/1347 1285/1596/1353 1291/1588/1365\nf 1279/1584/1354 1305/1598/1374 1272/1600/1355\nf 1270/1575/1356 1296/1601/1376 1281/1568/1350\nf 1285/1572/1353 1289/1576/1357 1311/6002/1373\nf 1289/1576/1357 1267/1577/1358 1315/6003/1377\nf 1273/1578/1359 1274/1567/1349 1299/1606/1379\nf 1271/1579/1360 1297/1607/1380 1270/1575/1356\nf 1284/1580/1361 1310/1608/1381 1266/1581/1362\nf 1267/6004/1358 1282/1560/1344 1293/1611/1378\nf 1628/1583/1363 1630/1612/1384 1279/1584/1354\nf 1272/1600/1355 1298/1599/1375 1277/1614/1364\nf 1278/1556/1340 1304/1615/1386 1271/1579/1360\nf 1266/1581/1362 1292/1609/1382 1264/1570/1351\nf 1268/1558/1342 1294/1616/1387 1284/1580/1361\nf 1283/1559/1343 1286/1571/1352 1309/1617/1388\nf 1627/1555/1339 1629/1618/1389 1278/1556/1340\nf 1269/1557/1341 1295/1619/1370 1268/1558/1342\nf 1282/1560/1344 1283/1559/1343 1308/1610/1383\nf 1287/1562/1345 1313/1589/1366 1288/1563/1346\nf 1316/1642/1412 1818/1621/1391 1351/1623/1393\nf 1347/1676/1443 1335/1624/1394 1320/1626/1396\nf 1633/1671/1440 1343/6005/1397 1824/1672/1399\nf 1823/1636/1406 1632/1630/1400 1822/1632/1402\nf 1348/1639/1409 1319/1633/1403 1349/1635/1405\nf 1632/1630/1400 1823/1636/1406 1341/1638/1408\nf 1319/1633/1403 1348/1639/1409 1819/1641/1411\nf 1317/2288/1893 1316/2287/1412 1350/1673/1413\nf 1325/2276/1892 1342/1644/1414 1328/1646/1416\nf 1822/1632/1402 1631/1631/1401 1323/1648/1418\nf 1825/2275/1891 1827/1649/1419 1634/1651/1421\nf 1322/1663/1432 1345/1652/1422 1330/1654/1424\nf 1325/2276/1892 1324/1628/1398 1342/1644/1414\nf 1819/1641/1411 1353/1640/1410 1321/1656/1426\nf 1330/1654/1424 1337/1653/1423 1329/1658/1428\nf 1344/1678/1417 1355/1659/1429 1323/1661/1418\nf 1333/1665/1434 1334/1662/1431 1322/1663/1432\nf 1818/1621/1391 1332/1625/1395 1352/1622/1392\nf 1636/1650/1420 1827/1649/1419 1339/1645/1415\nf 1820/1670/1439 1821/1660/1430 1354/1664/1433\nf 1334/1662/1431 1333/1665/1434 1346/1655/1425\nf 1826/1674/1441 1329/1658/1428 1635/1666/1435\nf 1340/1675/1442 1336/1667/1436 1327/1669/1438\nf 1347/1676/1443 1320/1626/1396 1354/1664/1433\nf 1336/1667/1436 1633/1671/1440 1331/1668/1437\nf 1317/2288/1893 1350/1673/1413 1318/1634/1404\nf 1327/1669/1438 1826/1674/1441 1340/1675/1442\nf 1636/1650/1420 1290/1594/1371 1634/1651/1421\nf 1304/1615/1386 1347/1676/1443 1297/1607/1380\nf 1353/1640/1410 1298/1599/1375 1346/1655/1425\nf 1293/1611/1378 1308/1610/1383 1633/1677/1440\nf 1634/1651/1421 1292/1609/1382 1341/1638/1408\nf 1630/1612/1384 1334/1662/1431 1305/1598/1374\nf 1354/1664/1433 1355/1659/1429 1297/1607/1380\nf 1348/1639/1409 1303/1613/1385 1353/1640/1410\nf 1315/1603/1377 1293/1605/1378 1336/1667/1436\nf 1311/1597/1373 1315/1603/1377 1340/1675/1442\nf 1352/1622/1392 1335/1624/1394 1299/1606/1379\nf 1307/1592/1369 1296/1601/1376 1344/1678/1417\nf 1351/1623/1393 1352/1622/1392 1300/1591/1368\nf 1340/1675/1442 1635/1666/1435 1311/1597/1373\nf 1290/1594/1371 1636/1650/1420 1312/1595/1372\nf 1303/1613/1385 1348/1639/1409 1302/1679/1444\nf 1631/6006/1401 1295/1593/1370 1344/1678/1417\nf 1350/1643/1413 1351/1623/1393 1301/1590/1367\nf 1635/1666/1435 1338/1657/1427 1291/1588/1365\nf 902/1003/877 219/1680/1445 903/1682/1447\nf 1748/2011/1685 870/1070/938 1752/1020/890\nf 912/1069/937 867/1683/1448 739/1150/1016\nf 907/1012/886 197/1685/1450 902/1003/877\nf 197/1685/1450 907/1012/886 905/1009/883\nf 905/1009/883 904/1007/881 151/1010/884\nf 76/160/149 89/1686/1451 138/1006/880\nf 1542/1950/1636 1550/1687/1452 33/1688/1453\nf 35/39/33 32/1689/1454 36/40/34\nf 1518/42/36 1517/1690/1455 35/39/33\nf 2303/2952/2302 1067/1293/1131 2295/1691/1122\nf 1067/1293/1131 1093/1692/1175 1066/1324/1160\nf 1092/1376/1161 1093/1347/1175 1118/1417/1223\nf 1362/1696/1459 1367/1693/1456 1357/1695/1458\nf 1361/1758/1515 1362/1696/1459 1356/1697/1460\nf 1371/1752/1509 1370/1698/1461 780/889/778\nf 1367/6007/1456 1363/1699/1462 1366/1701/1457\nf 1409/1705/1467 1365/1702/1464 1379/1704/1466\nf 1380/1762/1519 1409/1705/1467 1408/1706/1468\nf 1365/1702/1464 1364/1707/1469 1360/1703/1465\nf 1368/1711/1473 1369/1709/1471 813/1042/910\nf 1369/1709/1471 1410/1710/1472 797/888/777\nf 1411/1756/1513 1368/1711/1473 817/1041/909\nf 1418/1759/1516 1419/1712/1474 1362/1696/1459\nf 1412/1757/1514 1372/1713/1475 775/902/787\nf 1402/1728/1489 1403/1714/1476 841/930/810\nf 1397/1718/1480 1046/1239/1085 1398/1715/1477\nf 1403/1714/1476 1404/1716/1478 835/922/804\nf 1398/1715/1477 1018/953/830 1399/1717/1479\nf 1046/1239/1085 1397/1718/1480 853/944/822\nf 1404/1716/1478 1405/1720/1482 829/914/798\nf 1406/1722/1484 1407/1721/1483 761/907/792\nf 1401/1723/1485 847/937/816 1400/1719/1481\nf 1405/6008/1482 1406/1722/1484 823/906/791\nf 1402/1728/1489 841/930/810 1401/1723/1485\nf 1388/1733/1494 1387/1724/1486 1405/1720/1482\nf 1392/1729/1490 1401/1723/1485 1393/1726/1487\nf 1387/1742/1486 1386/1727/1488 1406/1722/1484\nf 1391/1730/1491 1402/1728/1489 1392/1729/1490\nf 1390/1731/1492 1403/1714/1476 1391/1730/1491\nf 1389/1748/1505 1404/1716/1478 1390/1731/1492\nf 1396/1734/1495 1397/1718/1480 1395/1732/1493\nf 1389/1748/1505 1388/1733/1494 1404/1716/1478\nf 1397/1718/1480 1396/1734/1495 1400/1719/1481\nf 1395/1732/1493 1398/1715/1477 1394/1735/1496\nf 1374/1747/1504 1395/1736/1493 1375/1738/1497\nf 1381/1750/1507 1390/1731/1492 1378/1739/1498\nf 1378/1739/1498 1391/1730/1491 1377/1740/1499\nf 1377/1740/1499 1392/1729/1490 1376/1741/1500\nf 1385/1764/1520 1386/1763/1488 1384/1774/1501\nf 1396/1734/1495 1373/1744/1502 1393/1726/1487\nf 1384/1774/1501 1387/1724/1486 1383/1745/1503\nf 1373/1780/1502 1396/1746/1495 1374/1747/1504\nf 1383/1745/1503 1388/1733/1494 1382/1749/1506\nf 1382/1749/1506 1389/1748/1505 1381/1750/1507\nf 1418/1759/1516 1417/1751/1508 1371/1752/1509\nf 1415/1755/1512 1416/1753/1510 1368/1711/1473\nf 1416/1753/1510 1414/1754/1511 1369/1709/1471\nf 1413/1761/1518 1415/1755/1512 1411/1756/1513\nf 780/889/778 774/858/748 1371/1752/1509\nf 1420/1760/1517 1419/1712/1474 1412/1757/1514\nf 1362/1696/1459 1361/1758/1515 1418/1759/1516\nf 1412/1757/1514 1407/1721/1483 1420/1760/1517\nf 1363/6009/1462 1367/1693/1456 1420/1760/1517\nf 1364/1707/1469 1365/1702/1464 1413/1761/1518\nf 1371/1752/1509 1372/1713/1475 1418/1759/1516\nf 1409/1705/1467 1380/1762/1519 1416/1753/1510\nf 1365/1702/1464 1409/1705/1467 1415/1755/1512\nf 1420/1760/1517 1386/1727/1488 1363/6009/1462\nf 1407/1721/1483 1412/1757/1514 760/844/735\nf 816/1022/892 812/882/771 1422/1766/1522\nf 1422/1766/1522 1421/1765/1521 1424/1768/1524\nf 1424/1768/1524 1423/1767/1523 1426/1770/1526\nf 1426/1770/1526 1425/1769/1525 1428/1772/1528\nf 1410/1710/1472 1421/1765/1521 814/881/770\nf 1414/1754/1511 1423/1767/1523 1410/1710/1472\nf 1423/1767/1523 1414/1754/1511 1425/1769/1525\nf 1425/1769/1525 1380/1762/1519 1427/1771/1527\nf 1430/1781/1534 1374/1747/1504 1431/1773/1529\nf 1438/1786/1538 1384/1774/1501 1437/1775/1530\nf 1373/1780/1502 1429/1776/1531 1376/1778/1500\nf 1437/1775/1530 1383/1745/1503 1436/1779/1533\nf 1429/1776/1531 1373/1780/1502 1430/1781/1534\nf 1436/1779/1533 1382/1749/1506 1435/1782/1535\nf 1435/1782/1535 1381/1750/1507 1434/1783/1536\nf 1434/1783/1536 1378/1739/1498 1433/1784/1537\nf 1433/1784/1537 1377/1740/1499 1432/1785/1532\nf 1439/6010/4493 1385/1764/1520 1438/1786/1538\nf 1439/6010/4493 1358/1700/1463 1385/1764/1520\nf 1370/1698/1461 1440/1787/1539 932/1056/924\nf 932/1056/924 1441/1788/1540 931/1055/923\nf 1442/1789/1541 1443/1790/1542 931/1055/923\nf 1443/1790/1542 1444/1791/1543 930/1053/921\nf 1444/1791/1543 1445/1792/1544 929/1054/922\nf 1445/1792/1544 1446/1793/1545 1037/1217/1070\nf 1035/1050/918 1446/1794/1545 928/1051/919\nf 996/1873/916 1448/1796/1547 785/1797/904\nf 1001/1151/1017 1448/1796/1547 743/895/783\nf 892/1874/901 1450/1799/1549 744/1800/902\nf 893/896/784 1450/1799/1549 916/1802/1551\nf 1805/1212/1066 1807/1803/1552 918/1032/900\nf 1564/352/327 295/1804/1553 1562/353/328\nf 293/299/278 1563/1805/1554 294/284/263\nf 1454/1808/1557 1453/1806/1555 400/430/389\nf 374/397/364 1848/1807/1556 400/430/389\nf 442/461/417 1456/1809/1558 405/1811/1560\nf 443/460/416 1457/1812/1561 442/461/417\nf 504/474/429 1458/1813/1562 443/460/416\nf 1458/6011/1562 1459/6012/1563 502/6013/410\nf 1460/1818/1564 1459/1817/1563 445/465/421\nf 1461/1820/1566 1460/1818/1564 446/464/420\nf 530/5944/535 1462/1819/1565 446/464/420\nf 1462/6014/1565 1463/1821/1567 528/605/542\nf 564/617/553 1464/1822/1568 547/618/554\nf 581/634/570 1465/1823/1569 564/617/553\nf 1465/1823/1569 1466/1824/1570 579/627/563\nf 1466/1824/1570 1467/1825/1571 596/657/591\nf 1468/1829/1572 1467/1826/1571 632/1828/647\nf 1469/1887/1605 1468/1829/1572 649/752/662\nf 1469/1887/1605 1470/1830/1573 647/721/639\nf 664/773/679 1470/1830/1573 681/797/697\nf 681/797/697 1471/1831/1574 698/1833/1576\nf 1473/1890/1606 1472/1834/1575 699/1835/692\nf 1473/1891/1606 1474/1836/1577 697/1838/696\nf 680/1837/678 1474/1836/1577 663/1840/670\nf 648/6015/664 1476/6016/1579 665/6017/673\nf 646/6018/671 1476/6019/1579 629/6020/638\nf 614/708/631 1478/1845/1581 631/1847/650\nf 1479/1895/1607 1478/1845/1581 597/642/578\nf 1479/1895/1607 1480/1848/1582 595/689/615\nf 1480/1848/1582 1481/1849/1583 578/656/590\nf 1482/1851/1585 1481/1849/1583 546/620/556\nf 529/601/538 1483/1850/1584 546/620/556\nf 527/568/513 1483/1850/1584 435/569/514\nf 434/470/425 1485/1853/1587 437/575/518\nf 431/469/424 1486/1854/1588 434/1856/425\nf 500/543/496 1487/1857/1589 431/469/424\nf 1487/1857/1589 1488/1858/1590 501/1860/495\nf 1489/1898/1608 1488/1858/1590 425/1861/422\nf 1489/6021/1608 1490/1862/1591 423/448/406\nf 1849/2321/1906 1491/1863/1592 370/471/426\nf 1491/1863/1592 1492/1865/1594 380/1864/1593\nf 278/1867/1596 1560/1866/1595 293/299/278\nf 1560/1866/1595 278/1867/1596 1567/1868/1597\nf 1417/1751/1508 1504/1869/1598 1370/1698/1461\nf 1413/1761/1518 1504/1869/1598 1364/1707/1469\nf 1356/1697/1460 1506/1871/1600 1361/1758/1515\nf 1440/1787/1539 1411/1756/1513 1441/1788/1540\nf 1441/1788/1540 817/1041/909 1442/1789/1541\nf 1442/1789/1541 811/1040/908 1443/1790/1542\nf 805/1044/912 799/885/774 1443/1790/1542\nf 799/885/774 793/884/773 1444/1791/1543\nf 793/884/773 789/1224/905 1445/1792/1544\nf 1446/1794/1545 789/1872/905 1447/1795/1546\nf 1448/1796/1547 1001/1151/1017 1447/1795/1546\nf 1448/1796/1547 996/1873/916 1449/1798/1548\nf 1450/1799/1549 893/896/784 1449/1798/1548\nf 1450/1799/1549 892/1874/901 1451/1801/1550\nf 276/1996/285 277/1875/1601 368/1877/330\nf 1606/1879/1604 1641/1878/1603 339/356/331\nf 1565/2049/1610 1641/1878/1603 340/358/333\nf 381/821/713 726/820/712 1454/1808/1557\nf 362/472/427 381/821/713 1848/1807/1556\nf 1456/1809/1558 424/449/407 1455/1810/1559\nf 1457/1812/1561 427/450/408 1456/1809/1558\nf 1458/1813/1562 502/1880/410 1457/1812/1561\nf 504/544/429 444/477/432 1458/1881/1562\nf 1460/1883/1564 433/458/413 1459/6022/1563\nf 1461/6023/1566 436/459/415 1460/1883/1564\nf 1462/6014/1565 528/605/542 1461/1884/1566\nf 1462/1819/1565 530/5944/535 1463/6024/1567\nf 562/6025/545 545/6026/544 1464/6027/1568\nf 579/627/563 562/608/545 1465/1823/1569\nf 1465/1823/1569 581/634/570 1466/1824/1570\nf 598/6028/600 615/6029/628 1466/6030/1570\nf 630/720/620 613/1886/616 1468/1829/1572\nf 647/721/639 630/720/620 1469/1887/1605\nf 649/752/662 666/751/661 1469/1887/1605\nf 666/751/661 683/781/685 1470/1830/1573\nf 1471/1831/1574 683/781/685 1472/1832/1575\nf 697/6031/696 698/1889/1576 1473/1890/1606\nf 699/789/692 682/788/691 1473/1891/1606\nf 1474/1836/1577 682/788/691 1475/1839/1578\nf 1476/6032/1579 646/6033/671 1475/6034/1578\nf 1476/6035/1579 648/1893/664 1477/1846/1580\nf 612/693/619 629/1894/638 1478/1845/1581\nf 1479/1895/1607 595/689/615 1478/1845/1581\nf 597/642/578 580/636/572 1479/1895/1607\nf 580/636/572 563/635/571 1480/1848/1582\nf 544/604/541 561/626/562 1482/1851/1585\nf 1483/1850/1584 527/568/513 1482/1851/1585\nf 1483/1850/1584 529/601/538 1484/1852/1586\nf 1485/1853/1587 432/1896/414 1484/1852/1586\nf 429/454/411 432/1897/414 1486/1854/1588\nf 501/1860/495 429/454/411 1487/1857/1589\nf 500/543/496 428/468/423 1487/1857/1589\nf 423/6036/406 426/1859/409 1489/1898/1608\nf 425/6037/422 408/6038/392 1489/6039/1608\nf 1849/2321/1906 369/390/358 1491/1863/1592\nf 1491/1863/1592 379/389/357 1492/1865/1594\nf 1566/1960/1640 1565/1903/1610 341/1905/335\nf 1493/2043/1703 1774/1906/1611 1494/1908/1613\nf 1494/1908/1613 1773/1907/1612 1495/1910/1615\nf 1495/1910/1615 1772/1909/1614 1496/1912/1617\nf 1497/2033/1697 1770/1913/1618 1498/1915/1620\nf 1498/1915/1620 1769/1914/1619 1499/1917/1622\nf 1499/1917/1622 897/1916/1621 1500/1919/1624\nf 1500/1919/1624 1828/1918/1623 1501/1921/1626\nf 1501/1921/1626 1775/1920/1625 1502/1923/1628\nf 1829/1922/1627 1830/1924/1629 1502/1923/1628\nf 1504/1869/1598 1413/1761/1518 1440/1787/1539\nf 1504/1869/1598 1417/1751/1508 1505/1870/1599\nf 1506/1871/1600 1359/1708/1470 1505/1870/1599\nf 4/6/6 3/5/5 1507/1926/50\nf 7/1256/1099 1/2/2 1509/1927/10\nf 10/1254/1097 7/1256/1099 1510/1928/14\nf 13/1930/1095 10/6040/1097 1511/14/13\nf 16/1249/1092 13/1252/1095 1512/22/17\nf 1513/21/20 19/1250/1093 1512/22/17\nf 1514/27/23 22/1286/1126 1513/21/20\nf 25/1287/1124 22/1286/1126 1515/6041/26\nf 28/1285/1125 25/1284/1124 1516/37/31\nf 1588/1280/1120 28/1285/1125 1637/1932/1631\nf 37/1278/1118 34/1277/1117 1519/1933/1632\nf 1522/51/38 48/1268/1110 1521/1934/39\nf 1523/50/43 51/1269/1111 1522/51/38\nf 1638/54/46 1590/2035/1107 1523/50/43\nf 1525/6042/49 56/60/52 1507/1926/50\nf 1526/63/55 59/1938/58 1525/57/49\nf 1527/67/59 62/1940/62 1526/63/55\nf 1532/1944/63 101/113/103 1527/1941/59\nf 68/79/71 65/75/67 1529/82/68\nf 1530/81/73 71/80/72 1529/82/68\nf 1531/86/77 74/1943/1633 1530/81/73\nf 65/75/67 101/113/103 1528/1945/69\nf 34/1277/1117 31/1281/1121 1518/42/36\nf 94/1957/164 91/6043/168 1555/1958/1634\nf 84/167/156 1538/99/89 83/170/159\nf 81/155/144 1549/90/81 80/154/143\nf 76/160/149 77/159/148 1550/1687/1452\nf 93/107/97 1558/106/96 92/1948/161\nf 98/120/109 1554/1949/1635 99/121/110\nf 99/121/110 1552/109/99 100/123/112\nf 1537/100/90 15/17/16 1558/106/96\nf 86/161/150 1540/96/87 85/162/151\nf 1535/104/94 63/65/57 1551/116/105\nf 87/165/154 1541/95/86 86/161/150\nf 89/1686/1451 76/160/149 1542/1950/1636\nf 88/164/153 1593/1951/1637 1543/1952/1638\nf 98/120/109 97/111/101 1554/1949/1635\nf 92/1948/161 1536/101/91 90/6044/166\nf 91/180/168 90/178/166 1557/1946/93\nf 102/69/61 66/74/66 1551/116/105\nf 96/182/106 95/177/165 1535/1956/94\nf 85/162/151 1539/98/88 84/167/156\nf 1547/91/82 46/49/42 1546/92/83\nf 95/6045/165 94/1957/164 1534/105/95\nf 1592/156/145 1640/1959/1639 81/155/144\nf 88/164/153 1543/1952/1638 87/165/154\nf 32/1689/1454 1587/38/32 33/1688/1453\nf 1561/2053/1642 1566/1960/1640 285/1961/334\nf 1579/302/281 1649/1962/1641 285/359/334\nf 1570/2014/1688 1569/1964/1643 1571/1966/1645\nf 1610/1974/1653 183/1967/1646 1600/1969/1648\nf 164/1975/1654 1572/1970/1649 163/1972/1651\nf 1596/1979/1657 908/1973/1652 1610/1974/1653\nf 201/296/275 164/1975/1654 200/297/276\nf 338/2052/287 337/1976/286 1566/1960/1640\nf 165/1978/1656 1573/1977/1655 164/1975/1654\nf 202/295/274 165/1978/1656 201/296/275\nf 1571/1966/1645 1568/1965/1644 1596/1979/1657\nf 338/308/287 289/1980/1658 319/309/288\nf 1719/2016/1690 1813/1982/1660 1758/1984/1662\nf 1502/1923/1628 1503/1925/1630 246/1986/1664\nf 244/1987/1665 1501/1921/1626 246/1986/1664\nf 714/1988/1666 1500/1919/1624 244/1987/1665\nf 1500/1919/1624 714/1988/1666 1499/1917/1622\nf 315/327/303 360/331/307 1648/488/443\nf 361/330/306 1645/1990/1668 360/331/307\nf 289/1980/1658 1646/1991/1669 359/1981/1659\nf 316/5925/300 310/1993/298 342/366/340\nf 305/314/293 310/321/298 311/318/295\nf 300/305/284 305/314/293 306/1994/289\nf 306/310/289 301/1995/1671 300/1997/284\nf 277/1875/1601 276/1996/285 296/1998/1672\nf 293/299/278 1580/293/272 278/1867/1596\nf 379/389/357 378/1999/1673 712/1902/1609\nf 296/1998/1672 301/1995/1671 297/354/329\nf 303/4938/294 298/2001/1675 302/312/291\nf 1517/1690/1455 1637/1932/1631 32/1689/1454\nf 53/2003/1677 1524/2002/1676 1589/55/47\nf 52/2004/1678 53/2003/1677 1591/89/80\nf 1548/2036/1698 52/2004/1678 1640/1959/1639\nf 1639/94/85 1542/1950/1636 1586/36/30\nf 144/2192/1829 82/2005/1679 1594/2006/1680\nf 1599/230/211 219/1680/1445 1597/231/212\nf 1601/264/243 260/1681/1446 1599/230/211\nf 283/357/332 1604/288/267 284/303/282\nf 284/303/282 1603/292/271 198/2008/1682\nf 1499/1917/1622 715/1989/1667 1498/1915/1620\nf 204/301/280 1656/2010/1684 1579/302/281\nf 339/356/331 281/285/264 1606/1879/1604\nf 870/1070/938 1748/2011/1685 1608/1065/933\nf 89/1686/1451 1593/1951/1637 151/1010/884\nf 188/212/196 1609/2012/1686 150/1004/878\nf 905/1009/883 1609/2012/1686 197/1685/1450\nf 1813/1982/1660 1759/2013/1687 1571/1966/1645\nf 867/1683/1448 870/1070/938 1607/2015/1689\nf 1758/1984/1662 143/157/146 1719/2016/1690\nf 2296/1270/1112 51/1269/1111 2307/6046/1691\nf 2308/5985/2303 2304/2018/1692 1588/1280/1120\nf 1614/1314/1150 1098/2019/1180 1612/1315/1151\nf 1091/1318/1154 1065/1317/1153 1613/2021/1190\nf 1616/6047/1186 1124/6048/1212 1614/6049/1150\nf 1615/1374/1189 1117/1415/1221 1613/1375/1190\nf 1618/1411/1218 1150/1423/1229 1616/1412/1186\nf 1143/5996/1237 1117/1415/1221 1617/2025/1239\nf 1176/1468/1263 1150/1423/1229 1620/1475/1269\nf 1169/1477/1271 1143/1433/1237 1619/1482/1275\nf 1202/1469/1264 1176/1468/1263 1622/1514/1303\nf 1621/1481/1274 1195/1493/1283 1619/1482/1275\nf 1195/1493/1283 1621/1481/1274 1226/1494/1284\nf 1227/1506/1296 1202/1469/1264 1624/1528/1316\nf 1624/1528/1316 1228/1515/1304 1626/1529/1317\nf 1221/1499/1289 1247/1554/1338 1623/1500/1290\nf 1247/1554/1338 1273/1578/1359 1625/1542/1328\nf 1626/6050/1317 1254/2027/1693 1628/1583/1363\nf 1280/2028/1694 1306/2029/1695 1628/1583/1363\nf 1627/1555/1339 1273/1578/1359 1629/1618/1389\nf 1337/1653/1423 1314/1620/1390 1338/1657/1427\nf 1342/1644/1414 1343/1627/1397 1309/1617/1388\nf 1632/1630/1400 1294/1616/1387 1631/1631/1401\nf 1304/1615/1386 1629/1618/1389 1347/1676/1443\nf 1350/1643/1413 1301/1590/1367 1349/2031/1405\nf 1345/1652/1422 1306/2029/1695 1337/1653/1423\nf 1334/1662/1431 1630/1612/1384 1345/1652/1422\nf 1498/1915/1620 716/2009/1683 1497/2033/1697\nf 31/1281/1121 1588/1280/1120 1517/1690/1455\nf 1524/2002/1676 54/2034/1108 1638/54/46\nf 1593/1951/1637 89/1686/1451 1639/94/85\nf 82/2005/1679 1548/2036/1698 1592/156/145\nf 732/2198/1834 734/2037/1699 724/1201/1055\nf 1729/2159/1802 1759/2013/1687 1719/2016/1690\nf 288/2040/326 1605/2038/1700 320/2039/325\nf 1580/293/272 290/298/277 279/286/265\nf 1605/2038/1700 288/2040/326 336/1876/1602\nf 1648/488/443 1584/2041/1701 315/327/303\nf 1698/2127/1729 1839/2042/1702 1493/2043/1703\nf 1646/1991/1669 289/1980/1658 1649/1962/1641\nf 342/366/340 1584/2041/1701 343/367/341\nf 732/2198/1834 724/1201/1055 729/2044/1704\nf 1646/1991/1669 1649/1962/1641 1585/2045/1705\nf 722/825/717 735/2046/1706 723/818/710\nf 735/2046/1706 722/825/717 899/2047/1707\nf 730/822/714 898/2048/1708 731/823/715\nf 1563/1805/1554 296/1998/1672 1562/353/328\nf 1560/1866/1595 277/1875/1601 1563/1805/1554\nf 277/1875/1601 1560/1866/1595 336/1876/1602\nf 1641/1878/1603 1605/2038/1700 1567/1868/1597\nf 1605/2038/1700 1641/1878/1603 337/307/286\nf 198/2008/1682 162/2050/1709 204/301/280\nf 289/6051/1658 338/2052/287 1561/2053/1642\nf 1453/1806/1555 1452/2054/1711 730/822/714\nf 1452/2054/1711 1453/1806/1555 1652/2055/1712\nf 713/819/711 1653/2056/1713 726/820/712\nf 1492/1865/1594 1654/2057/1714 713/819/711\nf 1654/2057/1714 1492/1865/1594 1655/2058/1715\nf 1655/2058/1715 712/1902/1609 1768/2059/1716\nf 1656/2010/1684 1577/2060/1717 1585/2045/1705\nf 1832/2325/1909 1651/2061/1718 1831/2063/1720\nf 1577/2060/1717 1656/2010/1684 185/2051/1710\nf 910/1210/1064 1600/1969/1648 118/138/127\nf 721/2064/1721 1496/1912/1617 717/2032/1696\nf 1496/1912/1617 721/2064/1721 1495/1910/1615\nf 1817/1209/1063 1610/1974/1653 910/1210/1064\nf 1495/1910/1615 720/2065/1722 1494/1908/1613\nf 1494/2068/1613 718/2067/1723 1493/2070/1703\nf 1816/1983/1661 1596/1979/1657 1817/1209/1063\nf 1664/2083/1737 1687/2071/1725 1716/2073/1727\nf 1493/2070/1703 719/2069/1724 1698/2075/1729\nf 1696/2077/1731 1695/2076/1730 1699/2074/1728\nf 1695/2076/1730 1696/2077/1731 1692/2079/1733\nf 1692/2079/1733 1693/2078/1732 1689/2081/1735\nf 1690/2080/1734 1687/2071/1725 1689/2081/1735\nf 1662/2193/1766 1686/2082/1736 1664/2083/1737\nf 1807/1803/1552 1808/2084/1738 1451/1801/1550\nf 1724/2166/1804 1721/2085/1739 1667/2087/1741\nf 1573/1977/1655 132/147/136 1572/1970/1649\nf 1572/1970/1649 126/141/130 1574/1971/1650\nf 1665/2176/1817 1728/2088/1742 1666/2090/1744\nf 215/1968/1647 1767/2091/1745 120/140/129\nf 1724/2162/1804 1725/6052/1746 1678/2106/1748\nf 1666/2090/1744 1717/2089/1743 1674/2096/1750\nf 1727/2108/1761 1682/2097/1751 1720/2099/1753\nf 1725/2092/1746 1723/2100/1754 1677/2093/1747\nf 1720/2099/1753 1675/2098/1752 1723/2100/1754\nf 1680/2107/1760 1726/2102/1756 1679/2103/1757\nf 1730/2111/1763 1735/2104/1758 1678/2106/1748\nf 1726/2102/1756 1680/2107/1760 1727/2108/1761\nf 1678/2106/1748 1677/2109/1747 1730/2111/1763\nf 1677/2093/1747 1676/2101/1755 1731/2113/1762\nf 1834/2306/1896 1835/2114/1765 1662/2116/1766\nf 1687/2071/1725 1690/2080/1734 1715/2072/1726\nf 1686/2082/1736 1835/6053/1765 1689/2081/1735\nf 1689/2081/1735 1836/2120/1768 1692/2079/1733\nf 183/1967/1646 1765/2122/1770 215/1968/1647\nf 1765/2122/1770 183/1967/1646 1763/2123/1771\nf 1692/2079/1733 1837/2121/1769 1695/2076/1730\nf 1695/2126/1730 1838/2125/1772 1698/2127/1729\nf 270/2142/1787 1711/2128/1773 269/2130/1775\nf 269/2130/1775 1712/2129/1774 268/2132/1777\nf 1697/2135/1780 258/2133/1778 264/2134/1779\nf 1694/2136/1781 259/259/238 1697/2135/1780\nf 1691/2137/1782 1601/264/243 1694/2136/1781\nf 1601/264/243 1691/2137/1782 260/1681/1446\nf 260/1681/1446 1688/2138/1783 903/1682/1447\nf 1685/2139/1784 1576/2140/1785 903/1682/1447\nf 1602/2155/1798 1713/2141/1786 270/2142/1787\nf 253/1135/1001 1703/2143/1788 252/1136/1002\nf 251/815/707 1704/2145/1790 253/1135/1001\nf 240/255/234 1700/2146/1791 241/257/236\nf 243/252/231 1701/2148/1793 242/253/232\nf 242/253/232 1707/2149/1794 240/255/234\nf 241/257/236 1706/2147/1792 251/815/707\nf 268/2132/1777 1705/2131/1776 265/2151/1796\nf 265/2151/1796 1708/2150/1795 266/2153/249\nf 266/2153/249 1709/2152/1797 267/6054/250\nf 1713/2141/1786 1602/2155/1798 1714/2117/1767\nf 1714/2117/1767 271/2156/1799 1715/2072/1726\nf 911/2157/1800 737/2158/1801 1715/2072/1726\nf 141/152/141 1729/2159/1802 142/153/142\nf 1663/2194/1830 1664/2083/1737 1718/2160/1803\nf 1678/2106/1748 1681/2105/1759 1724/2162/1804\nf 1728/2088/1742 1683/2163/1805 1717/2089/1743\nf 1667/2087/1741 1668/2165/1807 1724/2166/1804\nf 1717/2089/1743 1684/2164/1806 1722/2095/1749\nf 1671/2170/1811 1727/2108/1761 1670/2167/1808\nf 1669/2168/1809 1723/2100/1754 1668/2165/1807\nf 1670/2167/1808 1720/2099/1753 1669/2168/1809\nf 1726/2102/1756 1673/2169/1810 1722/2095/1749\nf 1673/2169/1810 1726/2102/1756 1671/2170/1811\nf 1676/2101/1755 1675/2098/1752 1732/2112/1764\nf 1568/1965/1644 1761/2172/1813 908/1973/1652\nf 1569/1964/1643 1760/2173/1814 1568/1965/1644\nf 1559/2174/1815 1657/363/337 1569/1964/1643\nf 1657/363/337 1559/2174/1815 1658/364/338\nf 1728/2088/1742 1665/2176/1817 1650/2178/1819\nf 1675/2098/1752 1682/2097/1751 1733/2171/1812\nf 1682/2097/1751 1680/2107/1760 1734/2179/1820\nf 1736/2180/1821 1680/2107/1760 1737/2181/1822\nf 1801/2233/1861 1806/2182/1823 1730/2111/1763\nf 1737/2181/1822 1679/2103/1757 1738/2183/1824\nf 1809/2246/1863 1808/2184/1738 1738/2183/1824\nf 1718/2160/1803 1716/2073/1727 736/2185/1825\nf 249/898/786 1739/254/233 247/1127/993\nf 247/1127/993 1741/256/235 248/1137/1003\nf 272/277/256 1743/276/255 273/2187/253\nf 243/252/231 1740/897/785 267/271/250\nf 1749/988/863 265/2151/1796 1743/276/255\nf 248/1137/1003 1742/258/237 983/1232/1079\nf 1745/975/850 270/2142/1787 1746/976/851\nf 1746/976/851 269/2130/1775 1747/978/853\nf 1756/983/858 1602/2155/1798 1745/975/850\nf 1747/978/853 268/2132/1777 1749/988/863\nf 736/2185/1825 737/2158/1801 1750/2188/1826\nf 1751/995/869 737/2158/1801 1752/1020/890\nf 984/1181/1042 985/1180/1041 1753/2189/1827\nf 985/1180/1041 983/1232/1079 1754/1134/1000\nf 271/2156/1799 1748/2011/1685 911/2157/1800\nf 1748/2011/1685 271/2156/1799 1756/983/858\nf 738/1049/917 1750/2188/1826 894/830/722\nf 1733/2230/1812 1734/2190/1820 1804/1213/1067\nf 143/157/146 1758/1984/1662 1594/2006/1680\nf 1594/2006/1680 1642/2191/1828 144/2192/1829\nf 1813/1982/1660 1571/1966/1645 1816/1983/1661\nf 215/1968/1647 120/140/129 1600/1969/1648\nf 1661/2238/1864 1662/2116/1766 1663/2239/1830\nf 901/2062/1719 1651/2061/1718 1659/2177/1818\nf 1657/363/337 1577/2060/1717 1760/2173/1814\nf 1655/2058/1715 1659/2177/1818 1654/2057/1714\nf 1654/2057/1714 1665/2176/1817 1653/2056/1713\nf 162/2050/1709 1761/2172/1813 185/2051/1710\nf 1761/2172/1813 162/2050/1709 1763/2123/1771\nf 1653/2056/1713 1666/2090/1744 1652/2055/1712\nf 1652/2055/1712 1674/2096/1750 1452/2054/1711\nf 1598/2007/1681 1762/2195/1831 198/2008/1682\nf 1452/2054/1711 1673/2169/1810 898/2048/1708\nf 1763/2123/1771 1762/2195/1831 1765/2122/1770\nf 1670/2167/1808 899/2047/1707 1671/2170/1811\nf 1762/2195/1831 1598/2007/1681 1764/2196/1832\nf 199/290/269 1766/2197/1833 203/291/270\nf 200/297/276 163/1972/1651 199/290/269\nf 1766/2197/1833 1767/2091/1745 1764/2196/1832\nf 1767/2091/1745 1766/2197/1833 1574/1971/1650\nf 1669/2168/1809 735/2046/1706 1670/2167/1808\nf 1668/2165/1807 729/2044/1704 1669/2168/1809\nf 729/2044/1704 1668/2165/1807 732/2198/1834\nf 1667/2087/1741 1672/2086/1740 732/2198/1834\nf 1831/2063/1720 901/2062/1719 1840/2199/1835\nf 1770/1913/1618 1497/2033/1697 1771/1911/1616\nf 1777/2219/1839 2055/6055/948 1776/2220/1837\nf 1792/2206/1841 1778/2202/1838 1793/2204/943\nf 1791/1084/952 1779/2205/1840 1792/2206/1841\nf 1780/2210/1845 2060/2207/1842 1779/2205/1840\nf 1781/2212/1847 2063/2209/1844 1780/2210/1845\nf 1782/2214/1849 2067/2211/1846 1781/2212/1847\nf 1783/2215/1850 2071/2213/1848 1782/2214/1849\nf 1784/2221/1854 2068/1175/1036 1783/2215/1850\nf 1784/2221/1854 1787/2216/1851 1785/2218/1853\nf 1790/1083/951 1780/2210/1845 1791/1084/952\nf 1793/1075/943 1777/2219/1839 1794/1076/944\nf 1795/1088/956 1783/2215/1850 1788/1087/955\nf 1787/2216/1851 1784/2221/1854 1795/1088/956\nf 1043/2223/1080 1792/2206/1841 1024/2222/1052\nf 1789/1086/954 1781/2212/1847 1790/1083/951\nf 1788/1087/955 1782/2214/1849 1789/1086/954\nf 891/1085/953 1791/1084/952 1043/2223/1080\nf 1787/2216/1851 1003/1074/942 1786/2217/1852\nf 1768/2059/1716 901/2062/1719 1655/2058/1715\nf 1799/2228/1859 1798/2224/1855 1797/2226/1857\nf 1683/2163/1805 1728/2088/1742 1798/2224/1855\nf 1651/2061/1718 1796/2225/1856 1650/2178/1819\nf 1832/2325/1909 1842/2227/1858 1651/2061/1718\nf 1798/2224/1855 1799/2228/1859 1683/2163/1805\nf 1683/2163/1805 1800/2229/1860 1684/2164/1806\nf 1732/6056/1764 1733/2230/1812 1803/2231/1068\nf 1731/2110/1762 1732/2232/1764 1802/1216/1069\nf 1730/2111/1763 1731/2110/1762 1801/2233/1861\nf 1734/2190/1820 1736/2234/1821 1805/1212/1066\nf 1736/2234/1821 1737/6057/1822 1807/1803/1552\nf 920/1024/894 733/2236/1862 1801/2233/1861\nf 738/1049/917 916/1802/1551 1809/2237/1863\nf 1812/2248/1871 1661/2238/1864 1811/2240/1865\nf 1575/2249/1872 1814/2241/1866 1643/2243/1868\nf 1809/2246/1863 1738/2183/1824 1810/2244/1869\nf 1643/2243/1868 1815/2242/1867 193/2245/1870\nf 736/2185/1825 1809/2237/1863 1718/2160/1803\nf 1559/2174/1815 1815/2242/1867 1660/2175/1816\nf 1569/1964/1643 1570/2014/1688 1559/2174/1815\nf 1718/2160/1803 1810/6058/1869 1663/2194/1830\nf 1750/2188/1826 738/1049/917 736/2185/1825\nf 1799/2228/1859 1811/2240/1865 1800/2229/1860\nf 1758/1984/1662 1816/1983/1661 1642/2191/1828\nf 1811/2240/1865 1799/2228/1859 1812/2248/1871\nf 1576/2140/1785 1575/2249/1872 220/1001/875\nf 193/2245/1870 214/1002/876 1643/2243/1868\nf 214/1002/876 193/2245/1870 906/1011/885\nf 906/1011/885 909/2250/1873 184/1008/882\nf 140/2252/1875 139/158/147 192/2251/1874\nf 139/158/147 140/2252/1875 77/159/148\nf 1544/2254/1877 1545/88/79 78/2253/1876\nf 1545/88/79 1544/2254/1877 39/41/35\nf 41/2256/1879 38/43/37 40/2255/1878\nf 1520/2272/1889 1519/1933/1632 41/2256/1879\nf 1693/2078/1732 1713/2141/1786 1690/2080/1734\nf 1713/2141/1786 1693/2078/1732 1711/2128/1773\nf 1711/2128/1773 1696/2077/1731 1712/2129/1774\nf 719/2069/1724 1705/2131/1776 1699/2074/1728\nf 718/2067/1723 1708/2150/1795 719/2069/1724\nf 720/2066/1722 1709/2152/1797 718/2067/1723\nf 721/2064/1721 1710/275/254 720/2065/1722\nf 1339/1645/1415 1342/1644/1414 1312/1595/1372\nf 1301/1590/1367 1275/1566/1348 1302/2030/1444\nf 1276/2258/1880 1275/1566/1348 1250/2259/1881\nf 1224/2260/1882 1250/2289/1881 1223/2261/1292\nf 1199/2264/1884 1224/2260/1882 1198/2262/1258\nf 1198/2262/1258 1172/1450/1249 1199/2264/1884\nf 1172/1450/1249 1146/1449/1208 1173/2263/1883\nf 1146/1449/1208 1120/2266/1207 1147/2265/1885\nf 1121/2290/1886 1120/1400/1207 1095/2268/1887\nf 1094/1295/1133 1068/1294/1132 1095/2270/1887\nf 2301/2292/1894 1069/2269/1888 2302/2271/1119\nf 1519/1933/1632 1520/2272/1889 37/1278/1118\nf 1710/275/254 721/2064/1721 1701/2148/1793\nf 716/2009/1683 1707/2149/1794 717/2032/1696\nf 715/1989/1667 1700/2146/1791 716/2009/1683\nf 714/1988/1666 1706/2147/1792 715/1989/1667\nf 1706/2147/1792 714/1988/1666 1704/2145/1790\nf 1704/2145/1790 244/1987/1665 1703/2143/1788\nf 1703/2143/1788 246/1986/1664 1702/2144/1789\nf 1294/1616/1387 1632/1630/1400 1310/1608/1381\nf 1302/1679/1444 1276/2274/1880 1303/1613/1385\nf 1280/2028/1694 1288/1563/1346 1306/2029/1695\nf 1759/2013/1687 909/2250/1873 1570/2014/1688\nf 909/2250/1873 1759/2013/1687 192/2251/1874\nf 141/152/141 140/2252/1875 1729/2159/1802\nf 140/2252/1875 141/152/141 78/2253/1876\nf 1757/1211/1065 910/1210/1064 113/132/121\nf 144/2192/1829 1757/1211/1065 108/124/113\nf 82/2005/1679 144/2192/1829 100/123/112\nf 1825/2275/1891 1634/1651/1421 1326/1637/1407\nf 1827/1649/1419 1825/2275/1891 1328/1646/1416\nf 1825/2275/1891 1326/1637/1407 1325/2276/1892\nf 1326/1637/1407 1823/1636/1406 1324/1628/1398\nf 1824/1672/1399 1823/2280/1406 1331/1668/1437\nf 1822/2281/1402 1323/2282/1418 1331/1668/1437\nf 1826/1674/1441 1327/1669/1438 1821/2283/1430\nf 1821/2283/1430 1820/2284/1439 1826/1674/1441\nf 1320/2285/1396 1330/1654/1424 1820/2284/1439\nf 1332/2286/1395 1322/1663/1432 1320/2285/1396\nf 1818/6059/1391 1333/1665/1434 1332/2286/1395\nf 1818/6059/1391 1316/2287/1412 1333/1665/1434\nf 1316/2287/1412 1317/2288/1893 1321/1656/1426\nf 1318/1634/1404 1319/1633/1403 1317/2288/1893\nf 1276/6060/1880 1250/2289/1881 1277/1586/1364\nf 1225/1533/1321 1251/1532/1320 1224/2260/1882\nf 1224/2260/1882 1199/2264/1884 1225/1533/1321\nf 1174/1458/1255 1200/1503/1293 1173/2263/1883\nf 1173/2263/1883 1147/2265/1885 1174/1458/1255\nf 1147/2265/1885 1121/2267/1886 1148/1397/1206\nf 1095/2268/1887 1096/1344/1173 1121/2290/1886\nf 1070/1290/1128 1096/2291/1173 1069/2269/1888\nf 2299/2949/1113 1070/1290/1128 2301/2292/1894\nf 1520/2272/1889 1521/1934/39 42/2273/1890\nf 1521/1934/39 1520/2272/1889 44/47/40\nf 44/47/40 41/2256/1879 43/48/41\nf 1544/6061/1877 1546/6062/83 40/6063/1878\nf 1546/92/83 1544/2254/1877 79/93/84\nf 1548/2036/1698 82/2005/1679 1533/110/100\nf 1533/110/100 75/84/75 1548/2036/1698\nf 53/2003/1677 52/2004/1678 74/1943/1633\nf 1524/2002/1676 53/2003/1677 1531/86/77\nf 1531/86/77 73/1258/1101 1524/2002/1676\nf 2290/2939/2298 1080/2293/1169 2291/2295/1109\nf 1106/1385/1198 1099/2296/1187 1080/1335/1169\nf 1132/1395/1197 1125/6064/1219 1106/6065/1198\nf 1125/6064/1219 1132/1395/1197 1151/2298/1234\nf 1177/2300/1235 1151/2298/1234 1184/1455/1252\nf 1184/1455/1252 1210/1497/1287 1177/2300/1235\nf 1210/1497/1287 1236/1496/1286 1203/2299/1270\nf 1262/2304/1336 1254/2027/1693 1236/2301/1286\nf 1254/2027/1693 1262/2304/1336 1280/2028/1694\nf 1662/2116/1766 1661/2238/1864 1834/2306/1896\nf 1797/2226/1857 1796/2225/1856 1841/2307/1897\nf 1812/2248/1871 1797/2226/1857 1843/2308/1898\nf 1661/2238/1864 1812/2248/1871 1833/2305/1895\nf 1840/2199/1835 1768/2059/1716 373/2309/1899\nf 378/1999/1673 375/2310/1900 377/2000/1674\nf 376/2322/1907 364/391/359 412/2311/1901\nf 357/2312/1902 451/480/435 358/400/367\nf 370/471/426 380/1864/1593 362/472/427\nf 1854/435/394 1855/487/442 357/2312/1902\nf 410/517/472 457/479/434 1844/2313/1903\nf 376/2322/1907 1850/490/445 375/2310/1900\nf 1846/1198/488 487/2315/492 1845/2317/489\nf 407/394/362 371/393/361 481/536/491\nf 487/2315/492 1846/1198/488 493/2320/669\nf 405/1811/1560 1455/1810/1559 374/397/364\nf 1490/1862/1591 1849/2321/1906 403/824/716\nf 1455/1810/1559 404/473/428 1848/1807/1556\nf 1490/1900/1591 408/1899/392 1849/6066/1906\nf 375/2310/1900 378/1999/1673 376/2322/1907\nf 450/485/440 418/442/401 470/2323/1908\nf 505/484/439 498/539/494 450/485/440\nf 498/539/494 505/484/439 416/2324/398\nf 448/481/436 414/437/396 449/482/437\nf 411/491/446 412/2311/1901 448/481/436\nf 1850/490/445 376/2322/1907 411/491/446\nf 1646/1991/1669 1840/2199/1835 1647/1992/1670\nf 375/2310/1900 1851/2314/1904 373/2309/1899\nf 1840/2199/1835 1646/1991/1669 1831/2063/1720\nf 1831/2063/1720 1585/2045/1705 1832/2325/1909\nf 1578/365/339 1658/364/338 1832/2325/1909\nf 1658/364/338 1660/2175/1816 1842/2227/1858\nf 1660/2175/1816 1814/2241/1866 1841/2307/1897\nf 1833/2305/1895 1843/2308/1898 1575/2249/1872\nf 1575/2249/1872 1576/2140/1785 1833/2305/1895\nf 363/399/366 1852/2326/1910 358/400/367\nf 1854/435/394 357/2312/1902 1853/403/370\nf 1844/2313/1903 356/478/433 1856/2327/1911\nf 1584/2041/1701 1648/488/443 1854/435/394\nf 470/2323/1908 517/2328/1912 1872/561/506\nf 506/493/448 1871/546/497 454/494/449\nf 1856/2327/1911 1873/2329/1913 1844/2313/1903\nf 453/497/452 1862/483/438 506/547/448\nf 410/517/472 1864/492/447 452/496/451\nf 1844/2313/1903 1874/2330/1914 410/517/472\nf 452/496/451 1861/516/471 453/497/452\nf 470/2323/1908 1872/561/506 450/485/440\nf 1870/5946/507 517/2332/1912 1869/588/526\nf 1869/588/526 534/2333/1915 1860/595/533\nf 1860/595/533 551/2334/1916 1859/615/551\nf 1859/615/551 568/2335/1917 1858/632/568\nf 1858/632/568 585/2336/1918 1857/668/599\nf 1857/668/599 602/2337/1919 1868/678/606\nf 1868/678/606 619/2338/1920 1867/702/626\nf 1867/730/626 636/2340/1921 1866/731/645\nf 1866/731/645 653/2341/1922 1865/749/659\nf 1865/749/659 670/2342/1923 1876/780/684\nf 687/793/695 704/5962/705 1876/780/684\nf 1873/2329/1913 1851/2314/1904 1874/2330/1914\nf 359/1981/1659 1647/1992/1670 361/330/306\nf 1647/1992/1670 1851/2314/1904 1645/1990/1668\nf 1873/2329/1913 1856/2327/1911 1645/1990/1668\nf 695/812/693 701/814/686 1875/2343/703\nf 707/784/688 706/783/687 1875/2343/703\nf 703/2345/704 709/804/698 702/2346/700\nf 703/2345/704 706/783/687 709/804/698\nf 705/787/690 711/786/689 709/804/698\nf 670/2342/1923 662/756/665 687/793/695\nf 662/756/665 670/2342/1923 645/739/651\nf 645/739/651 653/2341/1922 628/2348/632\nf 628/709/632 636/2339/1921 611/684/611\nf 611/684/611 619/2338/1920 594/644/580\nf 585/2336/1918 577/638/574 602/2337/1919\nf 577/638/574 585/2336/1918 560/621/557\nf 560/621/557 568/2335/1917 543/602/539\nf 543/602/539 551/2334/1916 526/589/527\nf 526/589/527 534/2333/1915 422/447/405\nf 470/2323/1908 420/444/403 517/2328/1912\nf 1835/2114/1765 1834/2306/1896 1685/2139/1784\nf 1688/2138/1783 1836/2118/1768 1685/2139/1784\nf 1691/2137/1782 1837/2124/1769 1688/2138/1783\nf 1694/2136/1781 1838/2125/1772 1691/2137/1782\nf 1697/2135/1780 1839/2042/1702 1694/2136/1781\nf 264/2134/1779 1774/1906/1611 1697/2135/1780\nf 1774/1906/1611 264/2134/1779 1773/1907/1612\nf 1773/1907/1612 261/268/247 1772/1909/1614\nf 1772/1909/1614 262/267/246 1771/1911/1616\nf 233/269/248 1770/1913/1618 263/266/245\nf 1770/1913/1618 233/269/248 1769/1914/1619\nf 1769/1914/1619 232/246/225 897/1916/1621\nf 897/1916/1621 230/248/227 1828/1918/1623\nf 1828/1918/1623 231/244/223 1775/1920/1625\nf 1775/1920/1625 237/249/228 1829/1922/1627\nf 1829/1922/1627 239/251/230 1830/1924/1629\nf 961/1073/941 1884/1072/940 962/1112/980\nf 960/1104/972 959/1106/974 1887/1071/939\nf 963/6067/978 1023/6068/977 1889/6069/986\nf 959/1106/974 958/1102/970 1888/1118/984\nf 957/1156/1022 1886/2354/1925 1007/1101/969\nf 1047/1194/1051 1892/2355/1084 1023/1109/977\nf 962/1112/980 1883/1116/982 1047/1194/1051\nf 1882/2358/1927 874/2357/1926 1886/2354/1925\nf 1886/2354/1925 957/1156/1022 1882/2358/1927\nf 1004/2360/1929 1005/1155/1021 937/2359/1928\nf 936/1177/1038 943/1226/1073 1004/2360/1929\nf 2062/2640/1007 2072/2361/1930 274/2363/996\nf 1907/2370/1938 1012/1162/1027 1906/2364/1932\nf 988/1144/1010 1905/2365/1933 989/1161/1026\nf 1906/2364/1932 1905/2365/1933 1910/2367/1935\nf 2072/2361/1930 2073/2368/1936 1904/2362/1931\nf 1911/2375/1943 1907/2370/1938 1910/2367/1935\nf 1909/2366/1934 1913/2371/1939 1910/2367/1935\nf 2073/2368/1936 2074/2373/1941 1908/2369/1937\nf 1915/2400/1968 1911/2375/1943 1914/2372/1940\nf 1785/2218/1853 1786/2217/1852 1919/2377/1945\nf 936/1177/1038 2069/1176/1037 1918/2379/1947\nf 934/1153/1019 885/2380/1948 1917/2382/1950\nf 1917/2382/1950 1920/2376/1944 934/1153/1019\nf 885/2380/1948 739/1150/1016 1916/2381/1949\nf 1918/2379/1947 876/1227/1074 936/1177/1038\nf 1912/2374/1942 871/979/854 1908/2369/1937\nf 1904/2362/1931 1908/2369/1937 272/277/256\nf 873/2902/2293 1913/2371/1939 980/2383/1951\nf 1905/2365/1933 988/1144/1010 1009/2384/1952\nf 1905/2365/1933 1009/2384/1952 1909/2366/1934\nf 272/277/256 273/2187/253 1904/2362/1931\nf 1921/2385/1953 868/977/852 1912/2374/1942\nf 860/1066/934 869/984/859 1921/2385/1953\nf 2268/6070/2286 866/1063/931 2258/2386/1954\nf 2257/2924/2287 877/1228/1075 2259/2387/1955\nf 2269/2911/2288 1607/2015/1689 2260/2388/1956\nf 2239/2879/2274 2240/2389/1957 1932/2391/1959\nf 2271/2891/2289 933/2905/1449 2262/2892/1960\nf 2263/2908/2282 2272/2393/1961 1917/2382/1950\nf 2246/2417/1983 1934/2394/1962 2245/2396/1964\nf 2244/2853/2276 1942/2397/1965 2247/2399/1967\nf 2275/2913/2290 1915/2400/1968 2265/2401/1969\nf 2260/2388/1956 860/1066/934 2273/2402/1970\nf 2251/6071/2279 2252/6072/1971 1935/6073/1973\nf 2242/2865/2275 1930/2406/1974 2253/2408/1976\nf 2251/6071/2279 1935/6073/1973 2248/6074/1978\nf 2259/2387/1955 876/1227/1074 2267/2412/1979\nf 2253/2872/1976 1938/2413/1975 2243/2415/1981\nf 2255/2874/2153 2076/2416/1982 2246/2417/1983\nf 2240/2389/1957 2250/2418/1984 1927/2390/1958\nf 2270/2900/2291 2258/2386/1954 1882/2358/1927\nf 2238/2845/2271 1931/2420/1986 2241/2422/1988\nf 2256/2643/2154 2077/2423/1989 2254/2425/1991\nf 1959/2477/2027 1937/2426/1992 1958/2427/1993\nf 1952/2480/2003 1930/2428/1974 1946/2429/1994\nf 1944/6075/2030 1922/2430/1995 1965/2432/1996\nf 1942/2397/1965 1964/2433/1997 1941/2398/1966\nf 1935/2409/1973 1957/2435/1999 1936/2410/1977\nf 1944/2488/2030 1953/2487/2000 1922/6076/1995\nf 1927/6077/1958 1933/6078/1985 1949/6079/2002\nf 1930/6080/1974 1952/2440/2003 1938/2442/1975\nf 2076/2641/1982 2078/2443/2005 1934/2445/1962\nf 1954/2457/2014 1948/2446/2007 1932/2448/1959\nf 1950/6081/2039 1951/2449/2009 1928/2451/2011\nf 1950/6081/2039 1928/2451/2011 1962/2452/2012\nf 1938/2442/1975 1960/2441/2004 1939/2454/1980\nf 1932/2448/1959 1927/2455/1958 1954/2457/2014\nf 1924/2421/1987 1931/2420/1986 1946/2429/1994\nf 1925/2928/1972 1947/2458/2015 1935/2409/1973\nf 1940/2424/1990 2077/2423/1989 1962/2452/2012\nf 1945/6082/2022 1923/2460/2017 1948/2446/2007\nf 1934/2394/1962 1956/6083/2006 1943/2395/1963\nf 1964/2433/1997 1942/2397/1965 1961/2462/2013\nf 1947/2925/2015 1969/2463/2018 1957/2465/1999\nf 2079/2644/2016 2081/2466/2020 1962/2468/2012\nf 1967/2926/2198 1945/2469/2022 1970/2471/2023\nf 1956/6084/2006 1978/2472/2024 1965/2474/1996\nf 1986/2482/2031 1964/2475/1997 1983/2476/2026\nf 1981/2630/2146 1959/2477/2027 1980/2478/2028\nf 1968/2507/2042 1974/2479/2029 1946/2429/1994\nf 1966/6085/2149 1944/6086/2030 1987/6087/2025\nf 1964/2475/1997 1986/2482/2031 1963/2484/1998\nf 1957/2465/1999 1979/2464/2019 1958/6088/1993\nf 1966/6085/2149 1975/6089/2033 1944/6086/2030\nf 1949/6090/2002 1955/2489/2001 1971/2491/2035\nf 1960/2441/2004 1952/2440/2003 1982/2503/2036\nf 2078/2443/2005 2080/2493/2037 1956/2444/2006\nf 1976/6091/2041 1970/2719/2023 1954/6092/2014\nf 1972/2501/2040 1973/6093/2038 1950/2502/2039\nf 1984/2467/2021 1972/2501/2040 1962/2468/2012\nf 1960/2441/2004 1982/2503/2036 1961/2453/2013\nf 1949/6090/2002 1971/2491/2035 1954/2505/2014\nf 1946/2429/1994 1953/2436/2000 1968/2507/2042\nf 2148/2645/2148 2082/2508/2043 2171/2510/2045\nf 2177/2686/2187 2004/2511/2046 2168/2513/2048\nf 2176/6094/2197 1993/2514/2049 2124/2516/2051\nf 2165/2654/2159 2183/2517/2052 1990/2519/2054\nf 2182/2627/2145 1991/2520/2055 2164/2522/2057\nf 2147/2646/2155 2083/2523/2058 2178/2525/2060\nf 2171/2510/2045 2000/2509/2044 2120/2527/2062\nf 2119/2689/2188 2008/6095/2063 2181/2690/2065\nf 2164/2522/2057 2001/2521/2056 2180/2532/2067\nf 2176/6094/2197 2163/2533/2068 1993/2514/2049\nf 2177/2686/2187 2127/2685/2070 2004/2511/2046\nf 2209/2792/2183 2219/2538/2072 2009/2540/2061\nf 2219/6096/2072 2222/2541/2074 1988/2543/2073\nf 2215/2797/2255 2226/2544/2075 1998/2546/2050\nf 2216/2798/2256 2227/2547/2077 1994/2549/2079\nf 2216/2798/2256 1994/2549/2079 2217/2550/2080\nf 2230/2800/2258 1989/2551/2081 2226/2544/2075\nf 2210/2803/2160 2008/2528/2063 2228/2553/2082\nf 2214/2801/2259 2003/2554/2083 2221/2555/2084\nf 2229/2802/2260 2213/2556/2085 1990/2519/2054\nf 2049/6097/2095 2150/6098/2086 2041/6099/2088\nf 2035/2598/2123 2032/2561/2089 2045/2563/2091\nf 2118/2698/2193 2053/2564/2092 2131/2566/2094\nf 2160/2723/2201 2150/2567/2086 2087/2569/2096\nf 2033/2590/2116 2034/2570/2097 2139/2572/2099\nf 2052/6100/2130 2046/2573/2100 2155/2575/2102\nf 2140/2591/2117 2154/2576/2103 2039/2578/2105\nf 2041/6101/2088 2129/2579/2087 2040/2581/2107\nf 2052/6100/2130 2155/2575/2102 2047/2565/2093\nf 2134/2729/2207 2149/2582/2108 2089/2584/2110\nf 2154/6102/2103 2151/2898/2111 2051/6103/2104\nf 2044/2611/2133 2086/6104/2113 2122/2694/2115\nf 2034/2570/2097 2033/2590/2116 2039/2578/2105\nf 2039/2578/2105 2051/2577/2104 2028/2593/2119\nf 2051/2577/2104 2050/2586/2112 2016/2592/2118\nf 2053/2623/2092 2014/2595/2121 2047/2597/2093\nf 2084/2600/2125 2035/2598/2123 2022/2599/2124\nf 2035/2598/2123 2084/2600/2125 2042/2602/2127\nf 2026/6105/2264 2018/6106/2128 2041/6107/2088\nf 2015/2647/2156 2021/2606/2129 2052/2608/2130\nf 2089/2584/2110 2048/2583/2109 2010/2610/2132\nf 2023/2840/2144 2044/2611/2133 2024/2613/2135\nf 2029/2650/2157 2030/2614/2136 2038/2571/2098\nf 2089/2584/2110 2010/2610/2132 2036/2617/2139\nf 2087/2569/2096 2049/2568/2095 2012/6108/2140\nf 2042/2602/2127 2025/2601/2126 2043/2612/2134\nf 2040/2649/2107 2037/2619/2137 2027/2621/2141\nf 2022/2599/2124 2045/2563/2091 2031/2616/2138\nf 2088/2757/2192 2011/2622/2142 2053/2623/2092\nf 2028/2593/2119 2085/2624/2143 2039/2578/2105\nf 2013/2754/2230 2086/2587/2113 2023/2626/2144\nf 1969/2463/2018 2182/2627/2145 1979/2464/2019\nf 1979/2464/2019 2164/2522/2057 1980/2628/2028\nf 2125/2631/2147 1981/2630/2146 2180/6109/2067\nf 2148/2632/2148 2080/2493/2037 2125/2631/2147\nf 2080/2493/2037 2148/2632/2148 1978/2494/2024\nf 1978/2472/2024 2171/2510/2045 1987/2473/2025\nf 2126/6110/2158 1966/6111/2149 2120/6112/2062\nf 1778/2202/1838 2056/1082/950 1777/2203/1839\nf 1779/2205/1840 2057/2208/1843 1778/2202/1838\nf 1011/1158/1024 2061/1140/1006 1010/1159/1025\nf 2061/1140/1006 1011/1158/1024 2062/1141/1007\nf 1010/1159/1025 2058/1139/1005 1013/1165/1029\nf 1021/1243/1087 2066/1242/1030 1014/1189/1047\nf 2068/1175/1036 1784/2221/1854 2069/1176/1037\nf 981/1128/994 982/1138/1004 2059/2636/2150\nf 227/1231/1078 1015/1168/1031 2070/2638/2152\nf 982/1138/1004 227/1231/1078 2065/1196/1053\nf 2055/1080/948 1029/1079/947 2054/2200/1836\nf 2060/2207/1842 940/1133/999 2057/2208/1843\nf 2063/2209/1844 939/994/868 2060/2207/1842\nf 2067/2211/1846 938/987/862 2063/2209/1844\nf 2071/2213/1848 937/2359/1928 2067/2211/1846\nf 2068/1175/1036 1004/2360/1929 2071/2213/1848\nf 1012/1162/1027 1907/2370/1938 2062/2640/1007\nf 1907/2370/1938 1911/2375/1943 2072/2361/1930\nf 1911/2375/1943 1915/2400/1968 2073/2368/1936\nf 2069/1176/1037 1785/2218/1853 2075/2378/1946\nf 2249/2860/2278 1937/2426/1992 2255/2642/2153\nf 2247/2399/1967 1941/2398/1966 2256/2643/2154\nf 1937/2426/1992 1959/2477/2027 2076/2641/1982\nf 1941/2398/1966 1963/2434/1998 2077/2423/1989\nf 1963/2484/1998 1985/2483/2032 2079/2644/2016\nf 1959/2477/2027 1981/2630/2146 2078/2443/2005\nf 2125/2708/2147 2003/2554/2083 2148/2645/2148\nf 2181/2530/2065 2007/2529/2064 2147/2646/2155\nf 2012/6108/2140 2019/2609/2131 2087/2569/2096\nf 2020/2596/2122 2015/2647/2156 2047/2597/2093\nf 2026/6113/2264 2041/2648/2088 2027/2621/2141\nf 2038/2571/2098 2034/2570/2097 2029/2650/2157\nf 1975/6114/2033 1966/2651/2149 2183/2653/2052\nf 2183/2517/2052 2165/2654/2159 1975/2506/2033\nf 2220/2683/2186 2210/2655/2160 2093/2657/2162\nf 2211/2676/2179 2096/2658/2163 2221/2555/2084\nf 2223/2806/2174 2212/2805/2165 2098/6115/2167\nf 2224/2807/2261 2213/2556/2085 2100/2664/2169\nf 2231/2682/2185 2112/2665/2170 2225/2667/2172\nf 2224/2807/2261 2100/2664/2169 2228/2669/2082\nf 2215/2797/2255 2223/2670/2174 2104/2671/2175\nf 2229/2811/2260 2222/2672/2074 2110/2674/2177\nf 2218/2812/2262 2090/2675/2178 2211/2676/2179\nf 2232/2813/2263 2113/2677/2180 2217/2550/2080\nf 2225/2667/2172 2102/2666/2171 2209/2680/2183\nf 2214/2801/2259 2103/2681/2184 2231/2682/2185\nf 2232/2813/2263 2220/2804/2186 2113/2677/2180\nf 1990/2519/2054 1996/2557/2071 2165/2654/2159\nf 1974/2479/2029 1968/2507/2042 2127/2685/2070\nf 2127/2685/2070 2177/2686/2187 1974/2479/2029\nf 1982/2492/2036 2177/2686/2187 1983/2687/2026\nf 2119/2689/2188 1986/2688/2031 2168/2513/2048\nf 1986/2688/2031 2119/2689/2188 1985/2691/2032\nf 1994/2549/2079 2179/2692/2189 2006/2524/2059\nf 2147/2703/2155 2081/2693/2020 2181/2690/2065\nf 2044/2611/2133 2122/2694/2115 2043/2612/2134\nf 2134/2729/2207 2089/2584/2110 2137/2696/2191\nf 2008/6095/2063 2119/2689/2188 2005/2512/2047\nf 2133/6116/2222 2088/6117/2192 2118/6118/2193\nf 1988/6119/2073 1997/6120/2053 2126/6121/2158\nf 1995/2548/2078 2169/2702/2194 1994/2549/2079\nf 2081/2693/2020 2147/2703/2155 1984/2705/2021\nf 1992/2714/2076 2170/2706/2195 1998/2515/2050\nf 1972/2711/2040 1984/2705/2021 2179/2707/2189\nf 2003/2554/2083 2125/2708/2147 2002/2531/2066\nf 1988/2539/2073 2126/2709/2158 2009/2540/2061\nf 1973/2498/2038 1972/2711/2040 2169/2712/2194\nf 1989/6122/2081 2121/2713/2196 1992/2714/2076\nf 2163/2919/2068 2176/2715/2197 1977/2490/2034\nf 2176/2715/2197 2124/2716/2051 1971/2491/2035\nf 1970/2719/2023 1976/6091/2041 2170/2720/2195\nf 2121/6123/2196 1967/2718/2198 2170/2720/2195\nf 2037/2615/2137 2138/2721/2199 2038/2571/2098\nf 2032/2561/2089 2035/2598/2123 2141/2722/2200\nf 2141/2722/2200 2042/2602/2127 2142/2695/2190\nf 2087/2569/2096 2048/2583/2109 2160/2723/2201\nf 2116/2725/2203 2141/2722/2200 2117/2724/2202\nf 2045/2563/2091 2123/2562/2090 2036/2617/2139\nf 2032/2561/2089 2141/2722/2200 2157/2726/2204\nf 2032/2561/2089 2157/2726/2204 2123/2562/2090\nf 2123/2562/2090 2173/2727/2205 2137/2696/2191\nf 2162/2730/2208 2134/2729/2207 2115/2728/2206\nf 2152/2731/2209 2149/2582/2108 2162/2730/2208\nf 2149/2582/2108 2152/2731/2209 2160/2723/2201\nf 2153/2786/2211 2150/2567/2086 2175/2732/2210\nf 2150/2567/2086 2153/2786/2211 2129/6124/2087\nf 2129/2579/2087 2146/2734/2212 2128/2580/2106\nf 2114/2736/2214 2138/2721/2199 2145/2735/2213\nf 2138/2721/2199 2037/2615/2137 2128/2580/2106\nf 2138/2721/2199 2114/2736/2214 2139/2572/2099\nf 2158/2738/2216 2033/2590/2116 2167/2737/2215\nf 2033/2590/2116 2158/2738/2216 2140/2591/2117\nf 2135/2740/2218 2154/2576/2103 2166/2739/2217\nf 2151/2898/2111 2154/6102/2103 2132/6125/2219\nf 2143/2897/2292 2136/2742/2220 2130/2574/2101\nf 2136/2742/2220 2144/2743/2221 2155/2575/2102\nf 2156/2745/2223 2118/2698/2193 2144/2743/2221\nf 2161/2763/2236 2133/2744/2222 2156/2745/2223\nf 2159/2762/2114 2174/2746/2224 2122/2748/2115\nf 2122/2694/2115 2172/2749/2225 2142/2695/2190\nf 2158/2738/2216 2205/2750/2226 2166/2739/2217\nf 2172/2749/2225 2199/2752/2228 2117/2724/2202\nf 2111/2838/2266 2011/2622/2142 2090/2755/2178\nf 2167/2737/2215 2193/2756/2231 2158/2738/2216\nf 2194/2785/2252 2193/2756/2231 2114/2736/2214\nf 2011/2622/2142 2088/2757/2192 2013/2754/2230\nf 2198/2764/2237 2197/2753/2229 2185/2759/2233\nf 2201/6126/2249 2203/2760/2234 2184/2761/2235\nf 2174/2746/2224 2159/2762/2114 2161/2763/2236\nf 2189/2767/2240 2198/2764/2237 2187/2765/2238\nf 2188/2778/2248 2200/2766/2239 2187/2765/2238\nf 2188/2778/2248 2196/2768/2241 2152/2731/2209\nf 2187/2765/2238 2185/2759/2233 2195/2770/2243\nf 2088/2757/2192 2133/2771/2222 2086/2587/2113\nf 2185/2759/2233 2186/2758/2232 2202/2769/2242\nf 2195/2770/2243 2202/2769/2242 2207/2783/2245\nf 2199/2752/2228 2184/2761/2235 2197/2753/2229\nf 2116/2725/2203 2117/2724/2202 2198/2764/2237\nf 2157/2726/2204 2116/2725/2203 2189/2767/2240\nf 2200/2766/2239 2173/2727/2205 2189/2767/2240\nf 2205/2750/2226 2191/2773/2244 2206/2751/2227\nf 2201/6126/2249 2192/6127/2247 2203/2760/2234\nf 2196/2768/2241 2188/2778/2248 2195/2770/2243\nf 2161/2763/2236 2156/2745/2223 2199/2780/2228\nf 2156/2745/2223 2144/2743/2221 2184/2779/2235\nf 2202/2772/2242 2203/2777/2234 2191/2773/2244\nf 2173/2727/2205 2200/2766/2239 2115/2728/2206\nf 2143/2897/2292 2132/6125/2219 2204/6128/2250\nf 2192/2914/2247 2201/2781/2249 2136/2742/2220\nf 2192/2776/2247 2204/2782/2250 2190/2775/2246\nf 2196/2768/2241 2195/2770/2243 2208/2784/2251\nf 2204/2782/2250 2135/2740/2218 2206/2751/2227\nf 2208/2790/2251 2207/2774/2245 2194/2785/2252\nf 2207/2774/2245 2191/2773/2244 2193/2756/2231\nf 2208/2784/2251 2153/2786/2211 2196/2768/2241\nf 2200/2766/2239 2188/2778/2248 2162/2730/2208\nf 2114/2736/2214 2145/2735/2213 2194/2785/2252\nf 2194/2785/2252 2146/2734/2212 2208/2790/2251\nf 2091/2679/2182 2092/2814/2253 2209/2680/2183\nf 2092/6129/2253 2097/6130/2176 2219/6131/2072\nf 2104/2671/2175 2105/2796/2254 2215/2797/2255\nf 2107/2917/2265 2227/2547/2077 2106/2799/2257\nf 2106/2799/2257 2216/2798/2256 2108/2678/2181\nf 2111/2838/2266 2230/2800/2258 2105/2796/2254\nf 2094/2656/2161 2210/2655/2160 2109/2668/2173\nf 2103/2681/2184 2214/2801/2259 2095/2659/2164\nf 2110/2674/2177 2101/2826/2168 2229/2811/2260\nf 2008/2528/2063 2210/2803/2160 2007/2529/2064\nf 2002/2531/2066 2001/2521/2056 2221/2555/2084\nf 1993/2514/2049 1999/2534/2069 2223/2806/2174\nf 1996/2536/2071 2213/6132/2085 2004/2537/2046\nf 2082/2508/2043 2231/2682/2185 2000/2509/2044\nf 2004/6133/2046 2224/2808/2261 2005/2552/2047\nf 1998/2515/2050 1993/2514/2049 2215/2809/2255\nf 1990/6134/2054 1997/2810/2053 2229/2811/2260\nf 2001/2521/2056 1991/2520/2055 2211/2676/2179\nf 2083/2523/2058 2232/2813/2263 2006/2524/2059\nf 2000/2509/2044 2225/2667/2172 2009/2526/2061\nf 2003/2554/2083 2214/2801/2259 2082/2508/2043\nf 2007/2529/2064 2220/2804/2186 2083/2523/2058\nf 2025/2601/2126 2103/2681/2184 2024/2613/2135\nf 2084/2600/2125 2112/2665/2170 2025/2601/2126\nf 2112/2665/2170 2084/2600/2125 2102/2666/2171\nf 2102/2666/2171 2022/2599/2124 2091/2679/2182\nf 2010/6135/2132 2092/6136/2253 2031/6137/2138\nf 2097/6138/2176 2092/6139/2253 2019/6140/2131\nf 2019/6141/2131 2012/6142/2140 2097/6143/2176\nf 2101/2826/2168 2110/2674/2177 2018/6144/2128\nf 2018/6144/2128 2026/2824/2264 2101/2826/2168\nf 2100/6145/2169 2026/2827/2264 2109/2829/2173\nf 2030/2620/2136 2094/2830/2161 2027/2621/2141\nf 2030/6146/2136 2029/6147/2157 2094/6148/2161\nf 2113/2684/2180 2093/2657/2162 2085/2624/2143\nf 2085/2624/2143 2028/2593/2119 2113/2684/2180\nf 2016/2592/2118 2106/2836/2257 2028/2593/2119\nf 2017/2594/2120 2107/2837/2265 2016/2592/2118\nf 2021/2606/2129 2015/2647/2156 2099/2661/2166\nf 2015/2647/2156 2020/2596/2122 2098/2662/2167\nf 2105/2796/2254 2104/2671/2175 2014/2595/2121\nf 2011/2622/2142 2111/2838/2266 2014/2595/2121\nf 2090/2675/2178 2013/6149/2230 2096/2658/2163\nf 2096/2658/2163 2023/2840/2144 2095/2659/2164\nf 1926/2447/2008 1923/2460/2017 2234/2842/2268\nf 1929/2450/2010 2233/2843/2269 1928/2451/2011\nf 1922/2430/1995 1931/2420/1986 2237/2846/2272\nf 2270/2896/2291 2261/2847/2273 2239/2849/2274\nf 1930/2406/1974 2242/2865/2275 1924/6150/1987\nf 1942/2397/1965 2244/2853/2276 1939/2414/1980\nf 1967/2718/2198 2121/6123/2196 1969/6151/2018\nf 2264/2875/2283 2246/2417/1983 2273/2402/1970\nf 2272/2894/1961 2244/2853/2276 2274/6152/2277\nf 1937/2426/1992 2249/2860/2278 1936/2410/1977\nf 1922/2430/1995 2237/2846/2272 1943/2431/1963\nf 2266/2933/2294 2252/2932/1971 2277/6153/2280\nf 2271/2891/2289 2242/2865/2275 2278/2866/2281\nf 2277/2904/2280 2251/6154/2279 2265/2401/1969\nf 2121/2713/2196 1989/6122/2081 2182/2627/2145\nf 1928/2451/2011 2236/2844/2270 1940/2424/1990\nf 2278/6155/2281 2253/2872/1976 2263/2873/2282\nf 2279/2883/2284 2255/2874/2153 2264/2875/2283\nf 2276/2923/2296 2250/2418/1984 2261/6156/2273\nf 1932/2391/1959 1926/2877/2008 2239/2879/2274\nf 2269/2889/2288 2238/2845/2271 2262/2880/1960\nf 2280/2884/2285 2256/2643/2154 2267/2881/1979\nf 2275/2913/2290 2249/2882/2278 2279/2883/2284\nf 2274/2859/2277 2247/2858/1967 2280/2912/2285\nf 2234/2842/2268 2235/2841/2267 2258/2886/1954\nf 2233/2843/2269 2257/2887/2287 2236/2844/2270\nf 2238/2845/2271 2269/2889/2288 2237/2846/2272\nf 2242/2865/2275 2271/2891/2289 2241/2893/1988\nf 2244/2853/2276 2272/2894/1961 2243/2415/1981\nf 2249/2860/2278 2275/2895/2290 2248/2411/1978\nf 2237/2846/2272 2260/2890/1956 2245/2855/1964\nf 2236/2844/2270 2259/2888/1955 2254/2425/1991\nf 2239/2849/2274 2234/2842/2268 2270/2896/2291\nf 2132/6125/2219 2143/2897/2292 2151/2898/2111\nf 1882/2358/1927 875/1229/1076 2270/2900/2291\nf 2218/6157/2262 1991/6158/2055 2230/6159/2258\nf 1912/6160/1942 2264/6161/2283 1921/6162/1953\nf 1919/2377/1945 1920/2376/1944 2274/2859/2277\nf 1913/2371/1939 873/2902/2293 2277/2904/2280\nf 1916/6163/1949 933/2905/1449 2278/2866/2281\nf 1913/2371/1939 2277/2904/2280 1914/2372/1940\nf 2090/2755/2178 2218/2906/2262 2111/2838/2266\nf 1917/2382/1950 1916/2381/1949 2263/2908/2282\nf 2074/2373/1941 2279/2883/2284 1912/2374/1942\nf 875/1229/1076 1893/2909/2295 2261/2899/2273\nf 1607/2015/1689 2269/2911/2288 867/1683/1448\nf 1918/2379/1947 2075/2378/1946 2267/2412/1979\nf 1915/2400/1968 2275/2913/2290 2074/2373/1941\nf 2075/2378/1946 1919/2377/1945 2280/2912/2285\nf 2204/6128/2250 2192/2914/2247 2143/2897/2292\nf 2174/2746/2224 2161/2763/2236 2172/2747/2225\nf 2046/2573/2100 2050/2915/2112 2130/2574/2101\nf 2021/2606/2129 2017/2594/2120 2046/2607/2100\nf 2017/2594/2120 2021/2606/2129 2107/2837/2265\nf 2212/2805/2165 2227/2547/2077 2099/2918/2166\nf 2227/2547/2077 2212/2805/2165 1995/2548/2078\nf 2163/2533/2068 2169/2702/2194 1999/2534/2069\nf 1977/2490/2034 1973/2498/2038 2163/2919/2068\nf 1955/2489/2001 1951/2499/2009 1977/2490/2034\nf 1951/6164/2009 1955/2920/2001 1929/2922/2010\nf 2250/2418/1984 2233/2843/2269 1933/2419/1985\nf 2257/2887/2287 2233/2843/2269 2276/2923/2296\nf 2276/2910/2296 1893/2909/2295 2257/2924/2287\nf 877/1228/1075 1893/2909/2295 950/1154/1020\nf 1901/1157/1023 1006/1099/967 1895/1230/1077\nf 1006/1099/967 1901/1157/1023 951/1095/963\nf 951/1095/963 1894/1103/971 952/1090/958\nf 1969/2463/2018 1947/2925/2015 1967/2926/2198\nf 1923/6165/2017 1945/2927/2022 1925/2928/1972\nf 2252/2932/1971 2235/2841/2267 1925/6166/1972\nf 2268/2885/2286 2235/2841/2267 2266/2933/2294\nf 2268/6070/2286 2266/2903/2294 866/1063/931\nf 980/2383/1951 861/1062/930 873/2902/2293\nf 1009/2384/1952 1879/969/845 980/2383/1951\nf 864/970/846 1879/969/845 979/982/857\nf 865/974/849 864/970/846 978/981/856\nf 1877/966/842 865/974/849 878/992/866\nf 862/972/843 1877/2934/842 881/990/865\nf 879/281/260 863/961/837 881/990/865\nf 1051/1132/998 1881/962/838 879/281/260\nf 1026/1174/1035 1880/963/839 1051/1132/998\nf 880/1173/1034 1878/1067/935 1026/1174/1035\nf 952/1090/958 1898/1111/979 953/1091/959\nf 953/1091/959 1897/1107/975 954/1096/964\nf 954/1096/964 1896/1105/973 955/1097/965\nf 1903/1240/1086 1048/1182/1043 1900/1113/981\nf 1048/1182/1043 1903/1240/1086 1027/1183/960\nf 1027/1092/960 1902/2937/976 956/1093/961\nf 2/3/3 1/2/2 2281/1257/1100\nf 1062/6167/1135 1061/1327/1163 2283/1289/1127\nf 1061/1327/1163 1060/1320/1156 2284/1248/1091\nf 1060/1320/1156 1059/1308/1146 2285/1251/1094\nf 1059/1308/1146 1058/1300/1138 2286/1253/1096\nf 1074/1330/1166 2288/1276/1116 1057/1247/1090\nf 1080/2293/1169 2290/2939/2298 1079/2940/1165\nf 64/78/70 103/115/104 2292/2941/2299\nf 1079/2940/1165 2289/1259/1102 1078/2942/1158\nf 1612/1315/1151 2307/2943/1691 1073/1316/1152\nf 1077/6168/1105 1078/2942/1158 2292/2945/2299\nf 1071/1291/1129 2297/2946/2300 1072/1304/1142\nf 1076/6169/1139 1081/1261/1104 2298/2948/2301\nf 1070/1290/1128 2299/2949/1113 1071/1291/1129\nf 1075/1302/1140 1076/1301/1139 2300/6170/1115\nf 1075/1338/1140 2300/1275/1115 1074/1330/1166\nf 1067/1293/1131 2303/2952/2302 1068/1294/1132\nf 1611/1323/1159 2308/2953/2303 1066/1324/1160\nf 1064/1306/1144 2305/2954/1123 1065/1317/1153\nf 1058/1300/1138 1056/1246/1089 2287/1255/1098\nf 1064/1306/1144 1063/1298/1136 2305/2954/1123\nf 1063/1298/1136 1062/1297/1135 2306/2956/2304\nf 34/1277/1117 2303/2958/2302 31/1281/1121\nf 1072/1304/1142 2296/2947/1112 1612/1315/1151\nf 1065/1317/1153 2304/2955/1692 1611/2020/1159\nf 42/2273/1890 2301/2960/1894 37/1278/1118\nf 45/1274/1114 2299/1273/1113 42/2273/1890\nf 73/6171/1101 2290/2961/2298 54/1265/1108\nf 2309/4864/3830 3715/2962/2305 2310/2964/2307\nf 2311/4862/2312 2313/2965/2308 2312/2967/2310\nf 3716/6172/2316 2316/6173/2311 3715/6174/2305\nf 2316/6175/2311 2317/2970/2313 2311/2972/2312\nf 2316/6175/2311 2319/2973/2314 2317/2970/2313\nf 3717/4865/3831 2319/2975/2314 3716/2976/2316\nf 2319/2973/2314 2322/2977/2317 2320/2974/2315\nf 3717/4865/3831 3718/2979/2319 2319/2975/2314\nf 2322/2977/2317 2325/2981/2320 2323/2978/2318\nf 3718/2979/2319 3719/4866/2322 2322/2980/2317\nf 2325/2981/2320 2328/6176/2323 2326/2982/2321\nf 3719/4866/2322 3720/2987/2325 2325/2988/2320\nf 2328/2984/2323 2331/2989/2326 2329/2985/2324\nf 3720/2987/2325 3721/2991/2328 2328/2984/2323\nf 2331/2989/2326 2334/2996/2329 2332/2990/2327\nf 3721/2991/2328 3722/2995/2331 2331/2989/2326\nf 2337/2998/2333 2338/2997/2332 2334/2992/2329\nf 3723/3002/2336 2337/2998/2333 3722/2999/2331\nf 3791/3001/2335 3790/3000/2334 2337/2998/2333\nf 3841/4868/3832 3791/3001/2335 3723/3002/2336\nf 2346/3006/2340 2347/3003/2337 2343/3005/2339\nf 3726/4869/3833 2346/3006/2340 3725/3007/2341\nf 3728/4870/3834 3729/3008/2342 2352/3010/2344\nf 2355/3009/2343 2354/3011/2345 2352/3010/2344\nf 3729/3008/2342 3730/3013/2347 2355/3009/2343\nf 2355/3009/2343 2358/3014/2348 2354/3011/2345\nf 3730/3013/2347 3842/3016/2350 2358/3014/2348\nf 2358/3014/2348 3793/3017/2351 2357/3015/2349\nf 3714/2963/2306 3732/3019/2353 2310/2964/2307\nf 2365/3069/2398 2364/3021/2355 2314/2966/2309\nf 2365/3069/2398 2368/3022/2356 2364/3021/2355\nf 3732/3019/2353 3733/3024/2358 2363/3020/2354\nf 2368/3022/2356 2371/3026/2360 2367/3023/2357\nf 3733/3024/2358 3734/3028/2362 2366/3025/2359\nf 2371/3026/2360 2410/3030/2364 2370/3027/2361\nf 3734/3028/2362 3739/3032/2366 2369/3029/2363\nf 2374/4896/3839 2377/3079/2368 2373/3087/2370\nf 3735/4876/3835 3736/3037/2371 2372/3039/2373\nf 2380/3083/2406 2379/3048/2374 2377/6177/2368\nf 3736/4877/2371 3737/3043/2375 2375/3045/2372\nf 2380/3083/2406 2383/3046/2377 2379/3048/2374\nf 3737/3043/2375 3738/3049/2379 2378/3044/2376\nf 2347/3003/2337 3752/3051/2381 2344/3004/2338\nf 3844/4900/3841 3756/3053/2383 3795/3018/2352\nf 3756/3053/2383 3754/3054/2384 2357/3015/2349\nf 3753/4898/3840 3754/3054/2384 2387/3056/2386\nf 3790/3000/2334 3843/3057/2387 2338/2997/2332\nf 3750/3058/2388 3748/3059/2389 2338/2997/2332\nf 3748/3059/2389 3747/3060/2390 2335/2993/2330\nf 3747/6178/2390 3746/3061/2391 2332/2990/2327\nf 3746/4889/2391 3745/3062/2392 2329/3063/2324\nf 3745/3062/2392 3744/3064/2393 2326/2982/2321\nf 3765/4888/3837 3743/3065/2394 2320/2974/2315\nf 2313/2965/2308 3763/3066/2395 2314/2966/2309\nf 2314/2966/2309 3764/3067/2396 2365/3069/2398\nf 3743/3065/2394 3763/3070/2395 2317/2970/2313\nf 3741/6179/2400 3742/3071/2399 2368/3022/2356\nf 3762/3068/2397 3741/6179/2400 2365/3069/2398\nf 3765/4884/3837 3744/6180/2393 2401/3144/2402\nf 2374/4896/3839 3760/3077/2403 2377/3079/2368\nf 3761/3078/2404 3759/3080/2405 2377/3079/2368\nf 3759/3080/2405 3740/6181/2407 2380/3081/2406\nf 3758/3089/2411 2412/3084/2408 3760/3086/2403\nf 2374/4896/3839 2373/3087/2370 2410/3030/2364\nf 3735/4876/3835 2372/3039/2373 3739/3032/2366\nf 3742/4897/2399 2404/3088/2410 3758/3089/2411\nf 2412/3084/2408 2417/3090/2412 2405/3085/2409\nf 2405/6182/2409 2413/3092/2413 2406/3094/2415\nf 2414/3093/2414 2415/3095/2416 2406/3094/2415\nf 2415/3095/2416 2416/3097/2418 2407/3096/2417\nf 2422/3157/2471 2427/3160/2420 2418/3966/2422\nf 2419/3107/2428 2424/3102/2423 2420/3104/2425\nf 2420/3104/2425 2425/3103/2424 2421/3106/2427\nf 2418/3101/2422 2423/3100/2421 2419/3107/2428\nf 2427/3160/2420 2433/3162/2429 2423/6183/2421\nf 2423/3100/2421 2429/3109/2430 2424/3102/2423\nf 2424/3102/2423 2430/3110/2431 2425/3103/2424\nf 2425/3103/2424 2431/3111/2432 2426/3105/2426\nf 2433/3108/2429 2439/3113/2434 2429/3109/2430\nf 2434/5026/3937 2428/3115/2436 2438/3116/2437\nf 2429/3109/2430 2435/3114/2435 2430/3110/2431\nf 2430/3110/2431 2436/3117/2438 2431/3111/2432\nf 2437/3118/2439 2438/3116/2437 2431/3111/2432\nf 2439/3164/2434 137/146/135 2435/3119/2435\nf 2434/6184/3937 2438/3120/2437 132/147/136\nf 2435/3119/2435 133/149/138 2436/3122/2438\nf 134/3121/2440 135/151/140 2436/3122/2438\nf 135/151/140 136/148/137 2437/3123/2439\nf 2387/3056/2386 2388/3055/2385 2443/3125/2442\nf 2445/3127/2444 2444/3124/2441 2389/3126/2443\nf 3798/4943/3875 2445/3127/2444 3796/3128/2445\nf 2385/4882/3836 2441/3129/2446 2384/3131/2448\nf 2450/3140/2457 2449/3132/2449 2394/3134/2451\nf 2452/3954/3112 2451/3135/2452 2396/3137/2454\nf 2449/3132/2449 2448/3138/2455 2393/3133/2450\nf 2451/3135/2452 2450/3140/2457 2395/3136/2453\nf 2448/3138/2455 2447/3141/2458 2392/3139/2456\nf 2457/3156/2470 2456/3142/2459 2401/3144/2402\nf 2402/3151/2467 2458/3145/2461 2403/3147/2463\nf 2400/3143/2460 2456/3142/2459 2398/3149/2465\nf 2399/3153/2469 2455/3150/2466 2402/3151/2467\nf 2403/3147/2463 2459/3146/2462 2404/3088/2410\nf 2398/3149/2465 2454/3148/2464 2399/3153/2469\nf 2417/3090/2412 2412/3084/2408 2460/3152/2468\nf 2401/3144/2402 2391/3154/2401 2457/3156/2470\nf 2427/3160/2420 2422/3157/2471 2468/3159/2473\nf 2433/3162/2429 2427/3160/2420 2469/3161/2474\nf 2439/6185/2434 2433/3162/2429 2470/3163/2475\nf 137/146/135 2439/3164/2434 170/191/176\nf 2475/3170/2480 2481/3166/2476 2476/3168/2478\nf 2472/3176/2486 2478/3169/2479 2475/3170/2480\nf 2473/3175/2485 2479/3171/2481 2471/3173/2483\nf 2474/6186/3122 2480/3188/2484 2473/6187/2485\nf 2471/3173/2483 2477/3172/2482 2472/3176/2486\nf 2468/3159/2473 2467/3158/2472 2482/3167/2477\nf 2495/3183/2493 2494/3177/2487 2487/3179/2489\nf 2494/3177/2487 2489/3180/2490 2486/3178/2488\nf 2488/3960/3118 2496/3182/2492 2487/3179/2489\nf 2489/3180/2490 2490/3184/2494 2461/3181/2491\nf 2490/3184/2494 2491/3186/2496 2462/3185/2495\nf 2474/6186/3122 2463/3187/2497 2480/3188/2484\nf 2480/3188/2484 2507/3189/2498 2479/3191/2481\nf 2507/3189/2498 2480/3188/2484 2512/3192/2500\nf 2478/3169/2479 2505/3193/2501 2481/3166/2476\nf 2481/3166/2476 2508/3194/2502 2482/3167/2477\nf 2516/3198/2506 2515/3196/2504 2495/3183/2493\nf 2515/3196/2504 2510/3197/2505 2494/3177/2487\nf 2517/3202/2510 2516/3198/2506 2496/3182/2492\nf 2510/3197/2505 2511/3199/2507 2489/3180/2490\nf 2477/3172/2482 2504/3200/2508 2478/3169/2479\nf 3801/3959/3117 3803/3201/2509 2496/3182/2492\nf 2511/3199/2507 2512/3192/2500 2490/3184/2494\nf 2479/3191/2481 2506/3190/2499 2477/6188/2482\nf 2469/3161/2474 2468/3159/2473 2509/3195/2503\nf 2470/3163/2475 2469/3161/2474 2520/3204/2511\nf 170/191/176 2470/3165/2475 221/236/216\nf 2507/3189/2498 2524/3206/2512 2506/3190/2499\nf 2523/3207/2513 2521/3208/2514 2506/3190/2499\nf 2504/3209/2508 2521/3208/2514 2505/3211/2501\nf 2508/6189/2502 2531/3212/2516 2526/3214/2518\nf 2527/3218/2521 2528/3215/2519 2521/3208/2514\nf 2508/3194/2502 2526/3216/2518 2509/3195/2503\nf 2530/3238/2541 2529/3217/2520 2524/3206/2512\nf 2532/3213/2517 235/247/226 2526/3214/2518\nf 2529/3217/2520 2527/3218/2521 2523/3207/2513\nf 2531/3212/2516 2533/3219/2522 2532/3213/2517\nf 2532/3213/2517 2534/3220/2523 235/247/226\nf 3938/3852/3025 3937/3221/2524 2538/3223/2526\nf 3937/3221/2524 3939/3224/2527 2537/3222/2525\nf 3939/3224/2527 3940/3226/2529 2535/3225/2528\nf 2517/3202/2510 2552/3228/2531 2516/3198/2506\nf 2550/3231/2534 2547/3230/2533 2515/3196/2504\nf 2551/3229/2532 2550/3231/2534 2516/3198/2506\nf 2548/3234/2537 2549/3232/2535 2511/3199/2507\nf 3803/3201/2509 3805/3233/2536 2517/3202/2510\nf 2547/3230/2533 2548/3234/2537 2510/3197/2505\nf 2555/3236/2539 2556/3235/2538 2548/3234/2537\nf 2554/3237/2540 2555/3236/2539 2547/3230/2533\nf 2557/5063/3972 2554/3237/2540 2550/3231/2534\nf 2524/3206/2512 2507/3189/2498 2549/3232/2535\nf 2524/3206/2512 2549/3232/2535 2530/3238/2541\nf 3941/3247/2550 3942/3239/2542 2559/3241/2544\nf 3938/3852/3025 3942/3239/2542 2544/3243/2546\nf 3902/5075/3984 3910/3244/2547 2538/3223/2526\nf 3947/5112/4015 3101/3245/2548 3941/3247/2550\nf 3109/3934/3096 3108/6190/2551 3192/3935/2553\nf 295/1804/1553 2586/3251/2554 1644/282/261\nf 2572/3320/2614 2574/3253/2556 2573/3255/2558\nf 2574/3253/2556 3808/3256/2559 2575/3254/2557\nf 2502/3260/2563 2499/3258/2561 2575/3254/2557\nf 2575/3254/2557 3807/3257/2560 2502/3260/2563\nf 2583/3267/2567 2584/3261/2564 3785/3263/2565\nf 292/300/279 2584/3264/2564 202/295/274\nf 2500/3273/2572 2501/3266/2566 2583/3267/2567\nf 3785/3263/2565 3126/3262/2555 2585/3269/2568\nf 1644/282/261 3126/3252/2555 292/300/279\nf 2498/4946/3878 2577/3270/2569 2503/3272/2571\nf 2499/3258/2561 2500/3273/2572 2573/3255/2558\nf 2568/3299/2597 2569/3274/2573 2589/3276/2575\nf 2624/4993/3906 2623/3277/2576 2605/3279/2578\nf 2591/4932/3868 2592/3280/2579 2595/3282/2581\nf 2593/3286/2585 2589/3276/2575 2594/3283/2582\nf 308/322/299 2596/3281/2580 303/315/294\nf 2595/3282/2581 2596/3281/2580 2599/3285/2584\nf 2597/3308/2589 2593/3286/2585 2598/3287/2586\nf 313/328/304 2600/3284/2583 308/322/299\nf 2599/3285/2584 2600/3284/2583 2603/3289/2588\nf 2601/3310/2607 2597/3290/2589 2602/3292/2590\nf 318/369/342 2604/3288/2587 313/328/304\nf 2646/3356/2644 2620/3293/2591 2645/3295/2593\nf 2580/3358/2619 2607/3296/2594 2620/3293/2591\nf 2650/3341/2632 2649/3298/2596 2614/3300/2598\nf 2608/3345/2636 2611/3301/2599 2609/3303/2601\nf 2611/3301/2599 2612/3304/2602 2610/3302/2600\nf 2589/3276/2575 2615/3306/2604 2568/3299/2597\nf 2589/3276/2575 2593/3286/2585 2615/3306/2604\nf 2593/3286/2585 2597/3308/2589 2616/3307/2605\nf 2597/3290/2589 2601/3310/2607 2617/3312/2606\nf 2579/3294/2592 2619/3313/2609 2601/3310/2607\nf 2620/3293/2591 2621/3297/2595 2579/3294/2592\nf 2580/3326/2619 2613/3305/2603 2607/3314/2594\nf 2605/3325/2578 2606/3315/2577 2613/3305/2603\nf 2606/3315/2577 2581/3316/2610 2610/3302/2600\nf 3769/4745/3747 1564/352/327 2588/3317/2611\nf 2649/3298/2596 2609/3303/2601 2652/3318/2612\nf 2571/4793/3785 2625/3319/2613 2572/3320/2614\nf 2576/3323/2617 3808/3256/2559 2626/3322/2616\nf 2578/4151/3281 2576/3323/2617 2627/3324/2618\nf 2644/6191/2645 2605/6192/2578 2580/6193/2619\nf 3782/5000/3913 3783/3327/2620 3860/3329/2622\nf 2603/3289/2588 2604/3288/2587 2628/3331/2624\nf 344/6194/355 2629/3330/2623 318/369/342\nf 2607/3314/2594 2612/3304/2602 2630/3333/2626\nf 2607/3314/2594 2630/3333/2626 2621/6195/2595\nf 2617/3312/2606 2618/3311/2608 2637/3338/2629\nf 2634/3342/2633 2614/3300/2598 2635/3339/2630\nf 2632/3344/2635 2633/3332/2625 2611/3301/2599\nf 2635/3339/2630 2615/3306/2604 2636/3340/2631\nf 2651/3359/2646 2650/3341/2632 2634/3342/2633\nf 2638/3337/2628 2618/3311/2608 2639/3343/2634\nf 2631/6196/2660 2632/3344/2635 2608/3345/2636\nf 2621/3297/2595 2640/3346/2627 2619/3313/2609\nf 2616/3307/2605 2617/3309/2606 2636/3340/2631\nf 1582/402/369 3786/3348/2637 344/387/355\nf 2662/4934/3870 2648/3350/2638 2663/3352/2640\nf 2690/3360/2647 2691/3353/2641 2656/3355/2643\nf 2579/3294/2592 2601/3310/2607 2645/3295/2593\nf 2620/3293/2591 2646/3356/2644 2580/3358/2619\nf 2650/3341/2632 2608/3345/2636 2649/3298/2596\nf 2569/3274/2573 2568/3299/2597 2652/3318/2612\nf 2631/6196/2660 2608/3345/2636 2651/3359/2646\nf 2689/4750/3752 2690/3360/2647 2658/3361/2648\nf 456/518/473 2739/3362/2649 363/399/366\nf 1852/2326/1910 4044/3364/2651 1582/402/369\nf 2674/3382/2663 2638/3337/2628 2675/3365/2652\nf 2668/6197/2664 2669/6198/2653 2632/6199/2635\nf 2640/3346/2627 2676/6200/2654 2639/3343/2634\nf 2666/3374/2657 2630/3334/2626 2669/6198/2653\nf 2670/3381/2662 2634/3342/2633 2671/3370/2655\nf 2635/3339/2630 2636/3340/2631 2671/3370/2655\nf 2630/3334/2626 2666/3374/2657 2640/3335/2627\nf 2651/6201/2646 2677/3376/2658 2631/3378/2660\nf 2636/3340/2631 2637/3347/2629 2672/3380/2656\nf 2677/3388/2658 2651/3359/2646 2670/3381/2662\nf 2637/3338/2629 2638/3337/2628 2673/3383/2661\nf 2667/3377/2659 2668/3384/2664 2631/3378/2660\nf 2680/3392/2668 2678/3386/2665 2677/3388/2658\nf 2678/3386/2665 2679/3389/2666 2667/3387/2659\nf 2683/3398/2670 2681/3391/2667 2680/3392/2668\nf 2681/3391/2667 2682/3393/2669 2678/3386/2665\nf 2671/3370/2655 2680/3392/2668 2670/3381/2662\nf 2669/6198/2653 2668/6197/2664 2666/3374/2657\nf 2666/3394/2657 2679/3389/2666 2676/3395/2654\nf 2676/3395/2654 2682/3393/2669 2675/3397/2652\nf 2682/3393/2669 2681/3391/2667 2674/3396/2663\nf 2681/3391/2667 2683/3398/2670 2673/3379/2661\nf 2680/3392/2668 2671/3370/2655 2683/3398/2670\nf 2658/3361/2648 2656/3355/2643 2684/3400/2672\nf 2656/3355/2643 2655/3354/2642 2685/3399/2671\nf 2648/3350/2638 2693/3407/2674 2653/3351/2639\nf 4044/3364/2651 4045/3405/2676 3786/3348/2637\nf 2697/3410/2680 2693/3407/2674 2698/3409/2679\nf 2699/3437/2705 2697/6202/2680 2700/3515/2681\nf 2701/3415/2685 2772/3412/2682 2702/3414/2684\nf 2703/3417/2687 2701/3415/2685 2704/3416/2686\nf 2705/3443/2711 2703/6203/2687 2706/3557/2688\nf 2710/3423/2693 2711/3419/2689 2707/3421/2691\nf 2774/3517/2775 2775/3422/2692 2710/3423/2693\nf 2716/6204/2698 2717/6205/2694 2713/6206/2696\nf 2719/4782/3776 2720/3427/2697 2716/3429/2698\nf 2724/3449/2716 2725/3430/2699 2727/3432/2701\nf 2730/3545/2795 2731/3433/2702 2729/3435/2704\nf 2709/3439/2707 2692/3403/2675 2697/6202/2680\nf 2697/6202/2680 2699/3437/2705 2709/3439/2707\nf 2699/3437/2705 2772/3412/2682 2712/3438/2706\nf 2701/3415/2685 2703/3417/2687 2715/3442/2710\nf 2703/6203/2687 2705/3443/2711 2718/3445/2709\nf 2647/5249/4093 2654/3446/2713 2688/3448/2715\nf 2776/3499/2760 2724/3449/2716 2777/3450/2717\nf 2729/3435/2704 2722/3434/2703 2728/4754/2719\nf 2689/4750/3752 2726/3431/2700 2690/3360/2647\nf 2642/5248/4092 2735/3493/2720 2641/5250/2722\nf 4052/3489/2753 4053/3457/2723 2732/3459/2725\nf 4062/3519/2776 4054/3460/2726 2778/3462/2728\nf 3851/4927/3865 4046/3463/2729 3787/3465/2731\nf 4065/5267/4104 4055/3466/2732 4042/3468/2734\nf 2780/3476/2742 2743/3469/2735 2779/3471/2737\nf 2741/3478/2744 2742/3472/2738 2736/3474/2740\nf 2781/3480/2746 2746/3475/2741 2780/3476/2742\nf 2744/3491/2755 2745/3477/2743 2741/3478/2744\nf 2782/3523/2777 2749/3479/2745 2781/3480/2746\nf 2744/3491/2755 2747/6207/2747 2745/3477/2743\nf 2782/3523/2777 510/507/462 2749/3479/2745\nf 2747/3481/2747 467/509/464 2748/3482/2748\nf 4063/3531/2784 4054/3460/2726 2751/3485/2749\nf 2743/3469/2735 2752/3486/2750 2738/3470/2736\nf 2746/3475/2741 2753/3487/2751 2743/3469/2735\nf 2749/3479/2745 2754/3488/2752 2746/3475/2741\nf 2749/3479/2745 469/515/470 2754/3488/2752\nf 4055/3466/2732 4052/3489/2753 2695/3467/2733\nf 2736/3474/2740 2694/3490/2754 2741/3478/2744\nf 2735/3454/2720 2744/3491/2755 2740/3455/2721\nf 2747/3481/2747 2744/3492/2755 2739/3362/2649\nf 2739/3362/2649 456/518/473 2747/3481/2747\nf 2724/3449/2716 2757/3494/2756 2725/3430/2699\nf 2722/3434/2703 2755/3496/2758 2723/3498/2718\nf 2783/3503/2764 2757/3494/2756 2776/3499/2760\nf 2691/3353/2641 2690/3360/2647 2758/3495/2757\nf 2760/3512/2772 2691/3353/2641 2764/3500/2761\nf 2757/3494/2756 2763/3501/2762 2758/3495/2757\nf 2783/3503/2764 2784/3502/2763 2757/3494/2756\nf 2784/3502/2763 2783/3503/2764 2762/3505/2765\nf 2755/3496/2758 2761/6208/2766 2756/3497/2759\nf 2785/3527/2780 2769/3507/2767 2784/3502/2763\nf 2769/3507/2767 2770/3508/2768 2763/3501/2762\nf 4038/4138/3269 4039/3509/2769 2759/3511/2771\nf 2766/5254/4096 2760/5255/2772 2770/5905/2768\nf 2761/3506/2766 2767/3513/2773 2762/3505/2765\nf 2772/3412/2682 2699/3437/2705 2771/3413/2683\nf 2713/6209/2696 2714/3516/2695 2774/3517/2775\nf 2772/3412/2682 2701/3415/2685 2773/3440/2708\nf 2728/4754/2719 2723/3498/2718 2777/6210/2717\nf 4053/5266/2723 4062/3519/2776 2733/3520/2724\nf 2742/3522/2738 2780/3476/2742 2737/3521/2739\nf 2745/3524/2743 2781/3480/2746 2742/3522/2738\nf 2748/6211/2748 2782/3523/2777 2745/3524/2743\nf 2748/6211/2748 468/551/498 2782/3523/2777\nf 2723/3518/2718 2756/3504/2759 2776/3499/2760\nf 2761/3506/2766 2755/6212/2758 2790/6213/2779\nf 2762/3505/2765 2768/3514/2774 2784/3502/2763\nf 2790/6213/2779 2789/3528/2781 2761/3506/2766\nf 2787/3532/2785 2751/3485/2749 2786/3529/2782\nf 2752/3486/2750 2753/3487/2751 2786/3529/2782\nf 4061/5263/4101 4063/3531/2784 2787/3532/2785\nf 2790/3526/2779 2791/3525/2778 2805/3534/2787\nf 2731/3433/2702 2791/3525/2778 2722/3434/2703\nf 2754/3488/2752 475/567/512 2792/3535/2788\nf 2753/3487/2751 2754/3488/2752 2793/3530/2783\nf 2719/4782/3776 2796/3536/2789 2720/3427/2697\nf 2789/6214/2781 524/6215/633 2767/6216/2773\nf 2705/3443/2711 2794/3539/2791 2721/3444/2712\nf 2802/3555/2801 2787/3541/2785 2801/3543/2793\nf 2799/3565/2810 2800/3544/2794 2730/3545/2795\nf 2805/3534/2787 2806/3533/2786 2820/3547/2797\nf 2808/3554/2800 2793/3548/2783 2807/3550/2798\nf 2805/3534/2787 2804/3551/2799 2790/3526/2779\nf 2801/6217/2793 2786/3553/2782 2808/3554/2800\nf 2800/3544/2794 2806/3533/2786 2731/3433/2702\nf 4061/5269/4101 2787/3541/2785 4060/3556/2802\nf 2794/3539/2791 2705/3443/2711 2795/3558/2803\nf 2801/6217/2793 2808/3554/2800 2816/3560/2805\nf 2808/3554/2800 2807/3550/2798 2823/3559/2804\nf 2820/3547/2797 2819/3562/2807 2805/3534/2787\nf 4051/5271/4106 4060/3556/2802 2817/3563/2808\nf 2814/6218/3760 2815/3564/2809 2799/3565/2810\nf 2794/3539/2791 2809/3566/2811 2798/3540/2792\nf 2809/3566/2811 2794/3539/2791 2810/3568/2813\nf 2817/3563/2808 2802/3555/2801 2816/3569/2805\nf 2836/3575/2817 2835/3570/2814 2821/3572/2796\nf 2815/3564/2809 2821/3546/2796 2800/3544/2794\nf 2796/3536/2789 2811/3573/2815 2797/3537/2790\nf 2830/3588/2825 2836/3575/2817 2815/3576/2809\nf 2826/3602/2834 2827/3577/2818 2811/3573/2815\nf 2837/3603/2820 2822/3578/2806 572/3580/547\nf 2831/3594/2829 2816/3560/2805 2838/3581/2819\nf 2838/3581/2819 2823/3559/2804 2837/3582/2820\nf 2835/3570/2814 2834/3583/2821 2820/3571/2797\nf 4051/5271/4106 2817/3563/2808 4050/3586/2823\nf 2814/4760/3760 2829/3587/2824 2815/3576/2809\nf 2809/3566/2811 2824/3589/2826 2813/3567/2812\nf 2824/3589/2826 2809/3566/2811 2825/3612/2828\nf 2817/3563/2808 2816/3569/2805 2832/3585/2822\nf 2835/3570/2814 2836/3575/2817 2850/3597/2831\nf 2866/3624/2851 2865/3598/2832 2851/3600/2830\nf 2845/3610/2840 2851/3596/2830 2830/3588/2825\nf 2841/3631/2857 2842/3601/2833 2826/3602/2834\nf 2852/3606/2836 2837/3582/2820 589/629/565\nf 2846/3616/2845 2831/3594/2829 2853/3605/2835\nf 2853/3605/2835 2838/3581/2819 2852/3606/2836\nf 2835/3570/2814 2850/3597/2831 2834/3583/2821\nf 4049/3638/2862 4050/3586/2823 2847/3608/2838\nf 2829/3587/2824 2844/3609/2839 2830/3588/2825\nf 2839/3618/2847 2843/3611/2841 2824/3589/2826\nf 2839/3618/2847 2824/3589/2826 2840/3613/2842\nf 677/640/576 2924/3614/2843 694/641/577\nf 2847/3608/2838 2832/3585/2822 2846/3622/2845\nf 2854/3655/2873 2858/3617/2846 2839/3618/2847\nf 2854/3655/2873 2839/3618/2847 2855/3619/2848\nf 660/646/582 2909/3620/2849 677/647/576\nf 2862/3657/2863 2847/6219/2838 2861/3644/2850\nf 2865/3598/2832 2866/3624/2851 2880/3626/2853\nf 2860/3651/2865 2866/3624/2851 2845/3627/2840\nf 2909/3620/2849 660/646/582 2894/3629/2855\nf 2856/3663/2878 2857/3630/2856 2841/3631/2857\nf 2867/3635/2860 2852/3606/2836 606/3632/593\nf 643/3628/2854 626/662/595 2894/3629/2855\nf 2861/3644/2850 2846/3616/2845 2868/3634/2859\nf 2868/3634/2859 2853/3605/2835 2867/3635/2860\nf 2865/3598/2832 2864/3636/2861 2850/3599/2831\nf 4048/3647/2868 4049/6220/2862 2862/3648/2863\nf 2844/6221/2839 2859/6222/2864 2845/6223/2840\nf 2882/3646/2867 2867/3635/2860 623/3643/602\nf 2864/3636/2861 2879/3633/2858 609/672/603\nf 2876/3658/2875 2861/3644/2850 2883/3645/2866\nf 2883/3645/2866 2868/3634/2859 2882/3646/2867\nf 2880/3626/2853 2879/3633/2858 2865/3598/2832\nf 4059/3673/2884 4048/5277/2868 2877/3674/2869\nf 2874/3677/2887 2875/3650/2870 2859/3652/2864\nf 2854/3655/2873 2869/3653/2871 2858/3617/2846\nf 2869/3653/2871 2854/3655/2873 2870/3656/2874\nf 609/672/603 592/685/612 2864/3636/2861\nf 2877/3674/2869 2862/3639/2863 2876/3681/2875\nf 2896/3664/2879 2895/3659/2876 2881/3625/2852\nf 2875/3650/2870 2881/3625/2852 2860/3651/2865\nf 2849/3637/2837 592/685/612 2834/3661/2821\nf 2871/3669/2881 2872/3662/2877 2856/3663/2878\nf 2890/3676/2886 2896/3664/2879 2875/3650/2870\nf 2819/6224/2807 2834/6225/2821 558/6226/618\nf 2886/3688/2896 2887/3668/2880 2871/3669/2881\nf 2897/3672/2883 2882/3646/2867 640/3670/622\nf 2819/3562/2807 558/698/618 2804/3551/2799\nf 2891/6227/2891 2876/3658/2875 2898/3671/2882\nf 2898/3671/2882 2883/3645/2866 2897/3672/2883\nf 2895/3659/2876 2894/3629/2855 2880/3626/2853\nf 4058/5280/2899 4059/3673/2884 2892/3675/2885\nf 2889/3699/2902 2890/3676/2886 2874/3677/2887\nf 2869/3653/2871 2884/3678/2888 2873/3654/2872\nf 2884/3678/2888 2869/3653/2871 2885/3680/2890\nf 2892/3675/2885 2877/3674/2869 2891/3682/2891\nf 2895/3659/2876 2896/3664/2879 2910/3684/2893\nf 2925/3710/2909 2910/3684/2893 2926/3685/2894\nf 2905/3698/2901 2911/3683/2892 2890/3676/2886\nf 2770/6228/2768 2769/3686/2767 497/757/666\nf 2901/4777/3771 2902/3687/2895 2886/3688/2896\nf 2912/6229/2898 2897/3672/2883 657/3689/641\nf 2906/3705/2906 2891/3690/2891 2913/3692/2897\nf 2913/3692/2897 2898/3691/2882 2912/3694/2898\nf 2910/3684/2893 2909/3620/2849 2895/3659/2876\nf 4057/5282/2910 4058/5280/2899 2907/6230/2900\nf 2904/6231/3764 2905/3698/2901 2889/3699/2902\nf 2884/3678/2888 2899/3700/2903 2888/3679/2889\nf 2899/3700/2903 2884/3678/2888 2900/3702/2905\nf 514/5904/4492 2785/3703/2780 495/724/642\nf 2907/3697/2900 2892/3696/2885 2906/3705/2906\nf 2927/3709/2908 2912/3694/2898 674/3707/654\nf 2921/3721/2917 2906/3705/2906 2928/3708/2907\nf 2928/3708/2907 2913/3692/2897 2927/3709/2908\nf 2910/3684/2893 2925/3710/2909 2909/3620/2849\nf 4056/3740/2931 4057/3711/2910 2922/3712/2911\nf 2904/6231/3764 2919/6232/2912 2905/3698/2901\nf 2899/3700/2903 2914/3716/2914 2903/3701/2904\nf 2914/3731/2914 2899/3718/2903 2915/3720/2916\nf 2922/3712/2911 2907/3697/2900 2921/3721/2917\nf 2940/3746/2935 2925/3722/2909 2941/3724/2918\nf 2905/3698/2901 2920/3725/2913 2911/3683/2892\nf 2765/3510/2770 4039/3509/2769 492/1200/1054\nf 2901/4777/3771 2916/3726/2919 2902/3687/2895\nf 2914/3731/2914 2929/3728/2921 2918/3730/2915\nf 2929/3728/2921 2914/3731/2914 2930/3732/2923\nf 2922/3712/2911 2921/3721/2917 2937/3734/2925\nf 2920/3741/2913 2935/3735/2926 2926/3723/2894\nf 2916/3726/2919 2931/3736/2927 2917/3727/2920\nf 2942/3739/2930 2927/3709/2908 691/800/681\nf 2921/3721/2917 2928/3708/2907 2936/3733/2924\nf 2943/3738/2929 2928/3708/2907 2942/3739/2930\nf 2940/3746/2935 2939/3615/2844 2925/3722/2909\nf 4067/5285/4115 4056/3740/2931 2937/3734/2925\nf 2934/3744/2933 2935/3735/2926 2919/3742/2912\nf 2949/3770/2950 2950/3743/2932 2934/3744/2933\nf 2956/3754/2941 2955/3745/2934 2941/3724/2918\nf 2939/3615/2844 2954/3764/2936 694/641/577\nf 2944/6233/2949 2948/3750/2937 2929/3728/2921\nf 2944/3767/2949 2929/6234/2921 2945/3768/2938\nf 2930/3732/2923 2938/3752/2939 2945/3751/2938\nf 2950/3743/2932 2956/3754/2941 2935/3735/2926\nf 2931/4773/2927 2946/3755/2942 2932/3757/2928\nf 2942/3739/2930 691/800/681 2957/3758/2944\nf 2936/3733/2924 2943/3738/2929 2951/3760/2946\nf 2943/3738/2929 2942/3739/2930 2958/3759/2945\nf 2939/3615/2844 2940/3746/2935 2954/3764/2936\nf 4067/5285/4115 2937/3734/2925 4066/3766/2948\nf 2952/5287/2947 2937/6235/2925 2951/5288/2946\nf 4066/5286/2948 2944/3767/2949 2953/3769/2940\nf 2950/3743/2932 2949/3770/2950 2944/3767/2949\nf 3940/3226/2529 3952/3772/2951 2536/3227/2530\nf 2971/6236/3271 2970/3774/2953 2765/3510/2770\nf 2972/4810/3798 2960/3775/2954 2665/3777/2956\nf 2684/3400/2672 2685/3399/2671 2976/3779/2958\nf 2688/6237/2715 2687/3780/2714 2708/3420/2690\nf 2969/4987/3270 2977/3778/2957 2686/3401/2673\nf 2973/3974/3127 2989/3781/2959 2974/3783/2961\nf 3120/3850/3023 2986/3784/2962 3121/3786/2964\nf 2993/3791/2969 2994/3787/2965 2990/3789/2967\nf 2995/3793/2971 2996/3790/2968 2993/3791/2969\nf 2997/3795/2973 2998/3792/2970 2995/3793/2971\nf 2999/3797/2975 3000/3794/2972 2997/3795/2973\nf 3001/3853/3026 3002/3796/2974 2999/3797/2975\nf 3001/3853/3026 3003/3798/2976 3002/3796/2974\nf 3007/3804/2982 3008/3800/2978 3005/3802/2980\nf 3009/3806/2984 3010/3803/2981 3007/3804/2982\nf 3011/3808/2986 3012/3805/2983 3009/3806/2984\nf 3013/3810/2988 3014/3807/2985 3011/3808/2986\nf 3015/3844/3017 3016/3809/2987 3013/3810/2988\nf 3015/3844/3017 3017/3811/2989 3016/3809/2987\nf 3121/3939/2964 2985/3813/2963 3122/3815/2992\nf 3025/3819/2996 3210/3816/2993 3024/3818/2995\nf 3028/3821/2998 3025/3819/2996 3027/3820/2997\nf 3031/4159/3284 3028/3821/2998 3030/3822/2999\nf 3031/4159/3284 3030/3822/2999 3035/3824/3001\nf 3046/3829/3006 3039/3825/3002 3051/3827/3004\nf 3045/6238/3011 3041/3828/3005 3040/3830/3007\nf 3040/6239/3007 3035/3824/3001 3038/3831/3008\nf 3045/3837/3011 3040/6240/3007 3043/3838/3009\nf 3041/3828/3005 3044/3835/3010 3046/3829/3006\nf 3040/6239/3007 3046/6241/3006 3035/3824/3001\nf 3050/3986/3139 3045/3837/3011 3048/3839/3012\nf 3034/3826/3003 3037/3840/3013 3254/3842/3015\nf 3038/3970/3008 804/887/776 3043/3838/3009\nf 3049/3990/3141 3044/3835/3010 3036/3843/3016\nf 3017/3811/2989 3015/3844/3017 3023/3846/3019\nf 3013/3810/2988 3021/3847/3020 3015/3844/3017\nf 3011/3808/2986 3020/3848/3021 3013/3810/2988\nf 3030/3822/2999 3027/3820/2997 792/894/782\nf 3119/3996/3147 2987/3849/3022 3120/3850/3023\nf 2544/3243/2546 2543/3851/3024 3938/3852/3025\nf 2990/3789/2967 3006/3801/2979 2993/3791/2969\nf 2993/3791/2969 3008/3800/2978 2995/3793/2971\nf 2995/3793/2971 3010/3803/2981 2997/3795/2973\nf 2997/3795/2973 3012/3805/2983 2999/3797/2975\nf 2999/3797/2975 3014/3807/2985 3001/3853/3026\nf 3003/3798/2976 3001/3853/3026 3018/3812/2990\nf 3053/3941/3032 2994/3787/2965 3054/3854/3027\nf 3002/3796/2974 3004/3799/2977 3057/3856/3029\nf 3056/3857/3030 3000/3794/2972 3057/3856/3029\nf 3055/3858/3031 2998/3792/2970 3056/3857/3030\nf 3054/3854/3027 2996/3790/2968 3055/3858/3031\nf 3059/3866/3038 3053/3859/3032 3060/3861/3033\nf 3057/3856/3029 3058/3855/3028 3063/3863/3035\nf 3060/6242/3033 3054/3854/3027 3061/3864/3036\nf 3061/3864/3036 3055/3858/3031 3062/3865/3037\nf 3062/3865/3037 3056/3857/3030 3063/3863/3035\nf 3065/3876/3044 3059/3866/3038 3066/3867/3039\nf 3063/6243/3035 3064/3868/3034 3069/3870/3041\nf 3066/3867/3039 3060/3861/3033 3067/3872/3042\nf 3067/3872/3042 3061/3871/3036 3068/3874/3043\nf 3068/6244/3043 3062/3865/3037 3069/3875/3041\nf 3071/3884/3050 3065/3876/3044 3072/3877/3045\nf 3069/3870/3041 3070/3869/3040 3075/3879/3047\nf 3072/3877/3045 3066/3867/3039 3073/3880/3048\nf 3073/3880/3048 3067/3872/3042 3074/3881/3049\nf 3074/3881/3049 3068/3874/3043 3075/3883/3047\nf 3077/3890/3056 3071/3884/3050 3078/3885/3051\nf 3081/3892/3055 3075/3879/3047 3082/3886/3052\nf 3078/3885/3051 3072/3877/3045 3079/3887/3053\nf 3079/3887/3053 3073/3880/3048 3080/3888/3054\nf 3080/3896/3054 3074/6245/3049 3081/3892/3055\nf 3083/3948/3106 3077/3890/3056 3084/3891/3057\nf 3087/3897/3061 3081/3892/3055 3088/3893/3058\nf 3084/3891/3057 3078/3885/3051 3085/3894/3059\nf 3085/3894/3059 3079/3887/3053 3086/3895/3060\nf 3086/4173/3060 3080/3896/3054 3087/3897/3061\nf 854/949/826 3235/3898/3062 855/950/827\nf 3249/3904/3067 3234/3900/3064 858/951/828\nf 855/950/827 3236/3899/3063 856/955/832\nf 856/955/832 3248/3901/3065 857/957/834\nf 857/959/834 3247/3903/3066 858/951/828\nf 3092/5876/3079 3190/3905/3068 4071/3907/3070\nf 3266/3906/3069 3238/3908/3071 4071/3907/3070\nf 4068/4020/3166 3188/3910/3073 3091/3912/3075\nf 4069/4014/3161 3226/3913/3076 3093/3915/3078\nf 3091/3912/3075 3189/3911/3074 3092/3917/3079\nf 3093/3915/3078 3186/3914/3077 3094/3919/3081\nf 3944/3923/3085 3943/3920/3082 3097/3922/3084\nf 3945/3933/3095 3944/3923/3085 3100/3924/3086\nf 3198/5874/4489 3196/3925/3087 3199/3927/3089\nf 3943/3920/3082 3953/3928/3090 3098/3921/3083\nf 3162/5301/4120 3163/3930/3092 3168/3932/3094\nf 3947/5112/4015 3945/3933/3095 3101/3245/2548\nf 3107/3937/3098 3109/3934/3096 3195/3936/3097\nf 3198/5874/4489 3107/3937/3098 3196/3925/3087\nf 3170/4041/3187 3169/3931/3093 3164/3938/3099\nf 3948/5113/4016 3121/3939/2964 3949/3940/3100\nf 2994/3787/2965 3053/3941/3032 2992/3788/2966\nf 3053/3859/3032 3059/3866/3038 3112/3944/3101\nf 3059/3866/3038 3065/3876/3044 3113/3943/3102\nf 3065/3876/3044 3071/3884/3050 3114/3945/3103\nf 3071/3884/3050 3077/3890/3056 3115/3946/3104\nf 3077/3890/3056 3083/3948/3106 3116/3947/3105\nf 2513/3963/3121 2519/3950/3108 3128/3952/3110\nf 3797/4891/3838 3799/3953/3111 2396/3137/2454\nf 2441/3129/2446 2484/3955/3113 2440/3130/2447\nf 3813/4950/3882 3799/3953/3111 3131/3958/3116\nf 3813/4950/3882 3801/3959/3117 2488/3960/3118\nf 2484/3955/3113 3132/3961/3119 3130/3956/3114\nf 3128/3952/3110 3133/3962/3120 2513/3963/3121\nf 2457/3156/2470 2447/3155/2458 2474/3965/3122\nf 2449/3132/2449 2450/3140/2457 2461/3181/2491\nf 2417/3090/2412 2422/3157/2471 2413/3091/2413\nf 2452/3954/3112 2488/3960/3118 2451/3135/2452\nf 2458/3145/2461 2475/3170/2480 2459/3146/2462\nf 2414/3093/2414 2419/3107/2428 2415/3095/2416\nf 2454/3148/2464 2471/3173/2483 2455/3150/2466\nf 2447/3155/2458 2448/6246/2455 2463/3964/2497\nf 2413/3092/2413 2418/3101/2422 2414/3093/2414\nf 2450/3140/2457 2451/3135/2452 2486/3178/2488\nf 2459/3146/2462 2476/3168/2478 2460/3152/2468\nf 2455/3150/2466 2472/3176/2486 2458/3145/2461\nf 2456/3142/2459 2457/3156/2470 2473/3175/2485\nf 2422/3157/2471 2417/3090/2412 2467/3158/2472\nf 2448/3138/2455 2449/3132/2449 2462/3185/2495\nf 2456/3142/2459 2473/3175/2485 2454/3148/2464\nf 2416/3097/2418 2415/3095/2416 2421/3106/2427\nf 3122/3815/2992 2984/3814/2991 3139/3968/3124\nf 3950/4628/3653 3949/3940/3100 3139/3968/3124\nf 3033/3823/3000 3030/3822/2999 798/3969/891\nf 798/3969/891 804/6247/776 3033/3823/3000\nf 3048/3839/3012 3043/3838/3009 816/1022/892\nf 2974/3783/2961 3145/3972/3125 2973/3974/3127\nf 3141/4142/3272 3148/3975/3128 3143/3977/3130\nf 3147/3981/3134 3149/3976/3129 3140/3978/3131\nf 3118/3980/3133 3144/3979/3132 3149/3976/3129\nf 2988/4090/3232 3118/3980/3133 3147/3981/3134\nf 3029/4800/3790 3026/3982/3135 3151/3984/3137\nf 3255/3985/3138 3051/3827/3004 3254/3842/3015\nf 3031/6248/3284 3035/3836/3001 3255/3985/3138\nf 3045/6238/3011 3050/6249/3139 3041/3828/3005\nf 3052/4662/3681 3047/3989/3140 3049/3990/3141\nf 3042/3991/3142 3039/3825/3002 3047/3989/3140\nf 3039/3825/3002 3042/3991/3142 3034/3826/3003\nf 3151/3984/3137 3150/3983/3136 3152/3993/3144\nf 3213/4089/3231 3147/3981/3134 3212/3994/3145\nf 3213/4089/3231 3150/3983/3136 3214/3995/3146\nf 3142/5158/3745 3119/6250/3147 2982/5115/3148\nf 3154/4008/3158 3251/3998/3149 3019/4000/3151\nf 3020/3848/3021 3155/4001/3152 3021/3847/3020\nf 3021/3847/3020 3156/4002/3153 3022/3845/3018\nf 3023/3846/3019 3022/3845/3018 3158/4004/3155\nf 3220/4012/3159 3218/6251/3156 3005/3802/2980\nf 3215/4013/3160 3216/4007/3157 2992/3788/2966\nf 3219/4093/3233 3154/4008/3158 3218/4005/3156\nf 3217/4094/3234 3216/4007/3157 2984/3814/2991\nf 3217/4094/3234 3220/4012/3159 3006/3801/2979\nf 3211/6252/3173 3215/4013/3160 3112/3942/3101\nf 3185/4016/3163 3226/3913/3076 3090/4015/3162\nf 3103/5299/4118 3185/4016/3163 3095/4017/3164\nf 3811/4953/3884 3089/4018/3165 3812/3929/3091\nf 4070/3909/3072 3238/3908/3071 1878/1067/935\nf 3094/6253/3081 3187/4019/3080 4068/4020/3166\nf 3139/3968/3124 3138/3967/3123 3099/4022/3168\nf 3182/4055/3201 3183/4023/3169 4077/4025/3171\nf 3113/3943/3102 3221/4026/3172 3112/3944/3101\nf 1794/1076/944 3989/4028/3174 935/1077/945\nf 4243/4033/3179 4242/4030/3176 3260/4032/3178\nf 4244/5586/4348 4243/4033/3179 3166/4034/3180\nf 3987/5147/4042 3986/4035/3181 3117/3949/3107\nf 3986/4035/3181 3985/4036/3182 3116/3947/3105\nf 3985/4036/3182 3984/4037/3183 3115/3946/3104\nf 3984/4037/3183 3990/4038/3184 3114/3945/3103\nf 3083/3948/3106 3256/4039/3185 3117/3949/3107\nf 3169/3931/3093 3170/4041/3187 3175/4043/3189\nf 3244/4088/3230 949/1094/962 3243/4044/3190\nf 3168/3932/3094 3169/3931/3093 3174/4045/3191\nf 3171/4050/3196 3172/4046/3192 3177/4048/3194\nf 3223/4099/3238 3168/3932/3094 3224/4049/3195\nf 3170/4041/3187 3171/4050/3196 3176/4042/3188\nf 4089/5865/3240 4083/4051/3197 3225/4053/3199\nf 4086/4056/3202 4085/4054/3200 3182/4055/3201\nf 4087/4060/3205 4086/4056/3202 3181/4057/3203\nf 3239/4131/3265 4090/4058/3204 963/4059/978\nf 4083/4051/3197 4087/4060/3205 3180/4052/3198\nf 4085/4054/3200 4088/4061/3206 3183/4023/3169\nf 4074/4024/3170 4073/4063/3208 3189/3911/3074\nf 3226/3913/3076 4079/4104/3209 3186/3914/3077\nf 3188/3910/3073 4077/4025/3171 3189/3911/3074\nf 3187/4019/3080 4078/4067/3211 3188/3910/3073\nf 4080/4127/3261 1889/1120/986 3238/3908/3071\nf 3186/4066/3077 4075/4065/3210 3187/4019/3080\nf 3246/4128/3262 3241/4068/3212 883/1122/988\nf 3110/4124/3259 3193/4069/3213 3191/4070/2552\nf 2541/4079/3222 2543/3851/3024 3201/4072/3215\nf 2567/4084/3226 3194/4073/3216 2566/3242/2545\nf 3194/4073/3216 3197/4071/3214 2544/3243/2546\nf 3269/4135/3267 3191/3249/2552 3267/4074/3217\nf 3171/4050/3196 3170/4041/3187 3165/4075/3218\nf 3172/4046/3192 3171/4050/3196 3166/4034/3180\nf 2546/4081/3223 3951/4076/3219 252/1136/1002\nf 3201/4072/3215 3202/4077/3220 2541/4079/3222\nf 2545/6254/2952 3952/4080/2951 2546/4081/3223\nf 4248/4083/3225 4245/4082/3224 3194/4073/3216\nf 4249/5587/4349 4248/4083/3225 2567/4084/3226\nf 3166/4034/3180 3260/4032/3178 3172/4046/3192\nf 3208/5306/4124 3207/3926/3088 3205/4086/3228\nf 3206/4105/3242 3205/4086/3228 3195/3936/3097\nf 3197/4071/3214 4245/4082/3224 3201/4072/3215\nf 3210/3816/2993 2991/3782/2960 3209/3817/2994\nf 3260/4032/3178 3245/4031/3177 3265/4085/3227\nf 3150/3983/3136 3213/4089/3231 3153/3992/3143\nf 3147/3981/3134 3213/4089/3231 2988/4090/3232\nf 2986/3784/2962 3218/4005/3156 2985/3785/2963\nf 2983/4096/3235 3138/4010/3123 3215/4092/3160\nf 2987/3849/3022 3219/4093/3233 2986/3784/2962\nf 3006/3801/2979 2990/3789/2967 3217/4094/3234\nf 2984/3814/2991 2985/3813/2963 3217/4094/3234\nf 3111/4098/3237 2983/4096/3235 3211/4027/3173\nf 3221/4026/3172 3160/4097/3236 3211/4027/3173\nf 3983/5145/4040 3221/4026/3172 3990/4038/3184\nf 3167/5302/3287 3223/4099/3238 3173/4100/3239\nf 4084/4163/3288 4089/4101/3240 3179/4103/3241\nf 4076/5297/4117 4079/4104/3209 3185/4016/3163\nf 3205/4086/3228 3206/4105/3242 3229/4107/3244\nf 3208/5306/4124 3205/4086/3228 3230/4108/3245\nf 3245/4031/3177 942/1164/1028 3244/4088/3230\nf 3206/4105/3242 3193/4069/3213 3228/4106/3243\nf 3232/4122/3257 4252/4110/3247 1016/1169/1032\nf 3248/3901/3065 3261/4112/3248 3247/3902/3066\nf 882/1123/989 3241/4068/3212 880/1173/1034\nf 4255/5318/4136 4254/4115/3251 3161/4117/3253\nf 3110/4174/3259 3258/4118/3254 3233/4120/3256\nf 2528/5294/2519 2533/3219/2522 2522/4121/2515\nf 3204/4165/3290 3232/4122/3257 984/1181/1042\nf 3265/4085/3227 3244/4088/3230 3264/4123/3258\nf 3193/4069/3213 3110/4124/3259 3231/4109/3246\nf 3236/3899/3063 3270/4126/3260 3248/3901/3065\nf 4081/4170/3294 4080/5298/3261 3266/4171/3069\nf 3193/4069/3213 3206/4105/3242 3192/3935/2553\nf 3237/4169/3293 3246/4128/3262 1014/1189/1047\nf 3249/3904/3067 3257/4129/3263 3234/3900/3064\nf 3235/3898/3062 3256/4039/3185 3236/3899/3063\nf 4091/4172/3295 4090/4058/3204 3263/4132/3266\nf 3235/3898/3062 854/949/826 3240/4029/3175\nf 3268/4113/3249 3257/4133/3263 3247/3902/3066\nf 3246/4128/3262 3258/4118/3254 3241/4068/3212\nf 4246/4087/3229 3231/4109/3246 4251/4136/3268\nf 2508/6189/2502 2505/4137/2501 2531/3212/2516\nf 2655/3354/2642 4038/6255/3269 2686/3401/2673\nf 2970/3774/2953 2969/4140/3270 2759/3511/2771\nf 2978/5908/3899 2971/4141/3271 734/2037/1699\nf 3148/3975/3128 3141/4142/3272 2974/3783/2961\nf 3140/3978/3131 3148/3975/3128 2991/3782/2960\nf 2991/3782/2960 3210/3816/2993 3140/3978/3131\nf 3153/3992/3143 3212/3994/3145 3025/3819/2996\nf 3025/3819/2996 3028/3821/2998 3153/3992/3143\nf 3027/3820/2997 3024/3818/2995 788/1204/1058\nf 3024/3818/2995 3209/3817/2994 784/1205/1059\nf 781/1207/1061 992/1206/1060 2989/3781/2959\nf 748/1208/1062 781/1207/1061 2973/3974/3127\nf 2973/3974/3127 3146/3973/3126 748/1208/1062\nf 3846/5120/4018 3954/4143/3273 4011/4145/3275\nf 3144/3979/3132 4000/4146/3276 3143/3977/3130\nf 3143/3977/3130 3999/4147/3277 3141/4142/3272\nf 3141/4142/3272 3998/4148/3278 3145/3972/3125\nf 3145/3972/3125 3997/4149/3279 3146/3973/3126\nf 2577/3270/2569 2576/3323/2617 3784/3271/2570\nf 3251/4738/3149 3253/4152/3282 3250/4154/3150\nf 3005/3802/2980 3019/6256/3151 3007/3804/2982\nf 3007/3804/2982 3250/4154/3150 3009/3806/2984\nf 3029/4799/3790 3151/4156/3137 3032/3841/3014\nf 3152/3993/3144 3255/4157/3138 3151/3984/3137\nf 3028/3821/2998 3031/4159/3284 3152/3993/3144\nf 3252/4153/3283 3253/4152/3282 3020/3848/3021\nf 3009/3806/2984 3252/4153/3283 3011/3808/2986\nf 3173/4100/3239 3106/5333/3285 3167/5302/3287\nf 4082/6257/4482 4084/4163/3288 3104/4164/3289\nf 3225/4053/3199 3180/4052/3198 4079/4064/3209\nf 3232/4122/3257 3204/4165/3290 2525/4167/3292\nf 2525/5590/3292 3203/4168/3291 3202/4077/3220\nf 3256/4039/3185 3235/3898/3062 3259/4040/3186\nf 3241/4068/3212 3269/4135/3267 3242/4114/3250\nf 3261/4112/3248 3085/3894/3059 3268/4113/3249\nf 3258/4118/3254 3246/4128/3262 3271/4119/3255\nf 3172/4046/3192 3265/4085/3227 3178/4047/3193\nf 3270/4126/3260 3084/3891/3057 3261/4112/3248\nf 4073/4063/3208 4081/4170/3294 3190/3916/3068\nf 3257/4129/3263 3087/3897/3061 3262/4130/3264\nf 3256/4039/3185 3083/3948/3106 3270/4126/3260\nf 4088/4061/3206 4091/4172/3295 3184/4062/3207\nf 3268/4113/3249 3086/3895/3060 3257/4133/3263\nf 3258/4118/3254 3110/4174/3259 3269/4135/3267\nf 3237/4169/3293 4252/5588/3247 3271/4119/3255\nf 4256/4176/3296 4251/4136/3268 3271/4177/3255\nf 3272/4272/3381 4468/4178/3297 3273/4180/3299\nf 2324/4185/3304 4470/4181/3300 2327/4183/3302\nf 2321/4187/3306 4471/4184/3303 2324/4185/3304\nf 2318/4189/3308 4472/4186/3305 2321/4187/3306\nf 2315/4219/3334 4473/4188/3307 2318/4189/3308\nf 4474/4209/3324 4467/4179/3298 2363/3020/2354\nf 4476/5884/4490 4475/5883/3309 2381/3050/2380\nf 3297/5889/3362 4479/4193/3310 3293/4195/3312\nf 4475/5883/3309 4480/4196/3313 2378/3044/2376\nf 4493/4954/3885 4477/6258/3314 3794/4871/3316\nf 2375/3038/2372 4480/6259/3313 2372/3039/2373\nf 4483/4207/3322 4482/4202/3317 2356/4204/3319\nf 2411/3033/2367 4479/4193/3310 2369/3029/2363\nf 2353/6260/4494 4485/4206/3321 2356/4204/3319\nf 4484/4205/3320 4486/4208/3323 2369/3029/2363\nf 4486/4208/3323 4474/4209/3324 2366/3025/2359\nf 4489/5898/4491 4488/4210/3325 2342/4212/3327\nf 4494/4956/3886 4481/6261/3328 3792/4957/3330\nf 2333/4867/3335 4491/4216/3331 2336/4218/3333\nf 2309/4864/3830 4468/4178/3297 2315/4219/3334\nf 4492/6262/3337 4491/6263/3331 2330/6264/3336\nf 2327/4183/3302 4469/4182/3301 2330/4222/3336\nf 3312/5217/4080 3313/4224/3338 3286/4226/3340\nf 3309/4637/3660 3310/4227/3341 3283/4229/3343\nf 3278/4271/3380 3304/4230/3344 3279/4232/3346\nf 3272/4272/3381 3298/4233/3347 3274/4235/3349\nf 3318/6265/3361 3317/4236/3350 3292/4238/3352\nf 3287/4225/3339 3313/4224/3338 3288/4240/3354\nf 3279/4232/3346 3305/4231/3345 3280/4242/3356\nf 3274/6266/3349 3300/4243/3348 3275/4245/3358\nf 3297/6267/3362 3293/6268/3312 3323/6269/3360\nf 3323/6269/3360 3318/6270/3361 3297/6267/3362\nf 3816/4958/3887 3818/4252/3363 3289/4254/3365\nf 3306/4241/3355 3307/4255/3366 3280/4242/3356\nf 3275/4245/3358 3301/4244/3357 3276/4258/3369\nf 3294/4268/3377 3320/4259/3370 3293/4261/3312\nf 3817/4959/3888 3308/4262/3371 3815/4264/3373\nf 3276/4258/3369 3302/4257/3368 3277/4266/3375\nf 3295/5882/3382 3321/4267/3376 3294/4268/3377\nf 3316/4276/3384 3299/4269/3378 3290/4270/3379\nf 3277/4266/3375 3303/4265/3374 3278/4271/3380\nf 3298/4233/3347 3272/4272/3381 3299/4269/3378\nf 3322/6271/4083 3321/6272/3376 3296/6273/3383\nf 3317/4236/3350 3316/4276/3384 3291/4237/3351\nf 3317/4292/3350 3343/4277/3385 3316/4279/3384\nf 3312/6274/4080 3338/4280/3387 3313/4282/3338\nf 3309/4638/3660 3335/4283/3389 3310/4285/3341\nf 3330/6275/3409 3331/6276/3391 3304/6277/3344\nf 3324/6278/3410 3326/4289/3392 3298/4290/3347\nf 3318/4302/3361 3344/4291/3393 3317/4292/3350\nf 3313/4282/3338 3339/4281/3388 3314/4294/3353\nf 3331/6279/3391 3332/6280/3395 3305/6281/3345\nf 3326/4289/3392 3327/4298/3396 3300/4243/3348\nf 3323/6282/3360 3319/4299/3359 3349/4301/3398\nf 3323/6282/3360 3349/4301/3398 3318/4302/3361\nf 3818/4961/3363 3820/4303/3399 3315/4305/3364\nf 3306/6283/3355 3332/4306/3395 3307/4308/3366\nf 3327/4298/3396 3328/4309/3402 3301/4244/3357\nf 3346/4318/3407 3345/4300/3397 3320/4310/3370\nf 3817/4962/3888 3819/4311/3403 3308/4313/3371\nf 3328/4309/3402 3329/4362/3405 3302/4257/3368\nf 3321/4325/3376 3347/4317/3406 3320/4310/3370\nf 3316/4279/3384 3342/4278/3386 3299/4320/3378\nf 3329/4314/3405 3330/4321/3409 3303/4315/3374\nf 3298/6284/3347 3299/4320/3378 3324/4323/3410\nf 3322/5238/4083 3348/4324/3411 3321/4325/3376\nf 3373/4336/3418 3372/4326/3412 3347/4317/3406\nf 3342/4278/3386 3368/4327/3413 3325/4319/3408\nf 3329/4362/3405 3355/4329/3415 3330/4331/3409\nf 3350/6285/3423 3324/6286/3410 3351/6287/3414\nf 3348/4324/3411 3374/4335/3417 3347/4317/3406\nf 3369/4347/3425 3368/4327/3413 3343/4277/3385\nf 3338/5215/3387 3364/4337/3419 3339/4339/3388\nf 3361/4395/3460 3362/4340/3421 3335/4342/3389\nf 3330/4331/3409 3356/4330/3416 3331/4344/3391\nf 3324/6278/3410 3350/4345/3423 3326/4289/3392\nf 3370/4355/3431 3369/4347/3425 3344/4291/3393\nf 3339/4339/3388 3365/4338/3420 3340/4349/3394\nf 3331/4344/3391 3357/4343/3422 3332/4351/3395\nf 3326/4289/3392 3352/4346/3424 3327/4298/3396\nf 3349/4301/3398 3345/4300/3397 3375/4354/3430\nf 3375/4354/3430 3370/4355/3431 3349/4301/3398\nf 3820/4303/3399 3822/4356/3432 3341/4304/3400\nf 3332/4351/3395 3358/4350/3427 3333/4359/3401\nf 3327/4298/3396 3353/4352/3428 3328/4309/3402\nf 3372/4326/3412 3371/4353/3429 3346/4318/3407\nf 3821/4380/3452 3360/4361/3436 3819/4311/3403\nf 3328/4309/3402 3354/4360/3435 3329/4362/3405\nf 3350/4345/3423 3376/4363/3437 3352/4346/3424\nf 3396/4373/3447 3395/4365/3439 3370/4355/3431\nf 3365/4338/3420 3391/4366/3440 3366/4348/3426\nf 3357/4343/3422 3383/4368/3442 3358/4350/3427\nf 3352/4346/3424 3378/4364/3438 3353/4352/3428\nf 3401/4372/3446 3375/4354/3430 3397/4371/3445\nf 3375/4354/3430 3401/4372/3446 3370/4355/3431\nf 3824/4417/3479 3393/4416/3448 3822/6288/3432\nf 3358/4350/3427 3384/4369/3443 3359/4358/3434\nf 3353/4352/3428 3379/4370/3444 3354/4360/3435\nf 3398/6289/3454 3397/4371/3445 3372/4326/3412\nf 3823/4966/3889 3386/4379/3451 3821/4380/3452\nf 3354/4360/3435 3380/4378/3450 3355/4329/3415\nf 3399/6290/3458 3398/6291/3454 3373/6292/3418\nf 3368/4327/3413 3394/4393/3455 3351/4328/3414\nf 3381/4381/3453 3382/4388/3457 3355/4329/3415\nf 3376/4396/3437 3350/4389/3423 3377/4386/3456\nf 3400/4399/3463 3399/4390/3458 3374/4392/3417\nf 3369/4347/3425 3395/4365/3439 3368/4327/3413\nf 3390/4403/3467 3391/4366/3440 3364/4337/3419\nf 3387/4405/3469 3388/4394/3459 3361/4395/3460\nf 3356/4330/3416 3382/4388/3457 3357/4343/3422\nf 3402/4447/3503 3376/4396/3437 3403/4397/3461\nf 3426/5240/4084 3425/4398/3462 3400/4399/3463\nf 3395/6293/3439 3421/4400/3464 3394/4385/3455\nf 3416/4442/3499 3417/4402/3466 3390/4403/3467\nf 3413/4439/3496 3414/4404/3468 3387/4405/3469\nf 3408/4427/3486 3409/4406/3470 3382/4388/3457\nf 3402/4447/3503 3404/4446/3471 3376/4396/3437\nf 3396/4373/3447 3422/4408/3472 3395/4365/3439\nf 3417/4402/3466 3418/4410/3473 3391/4366/3440\nf 3409/4406/3470 3410/4411/3474 3383/4368/3442\nf 3404/4407/3471 3405/4412/3475 3378/4364/3438\nf 3427/4414/3477 3401/4372/3446 3423/4413/3476\nf 3401/4372/3446 3427/4414/3477 3396/4373/3447\nf 3826/4455/3509 3419/4415/3478 3824/4417/3479\nf 3384/4369/3443 3410/4411/3474 3385/4377/3449\nf 3405/4412/3475 3406/4419/3481 3379/4370/3444\nf 3398/4426/3454 3424/4420/3482 3397/4422/3445\nf 3823/4966/3889 3825/4423/3483 3386/4379/3451\nf 3406/4419/3481 3407/4425/3485 3380/4378/3450\nf 3425/4398/3462 3424/4420/3482 3399/4390/3458\nf 3394/4385/3455 3420/4401/3465 3377/4386/3456\nf 3407/4425/3485 3408/4427/3486 3381/4381/3453\nf 3432/4464/3516 3433/4428/3487 3406/4419/3481\nf 3408/4427/3486 3407/4425/3485 3445/4429/3488\nf 3409/4406/3470 3408/4427/3486 3434/4430/3489\nf 3410/4411/3474 3435/4450/3490 3411/4418/3480\nf 3426/5240/4084 3452/4434/3492 3425/4398/3462\nf 3825/4968/3483 3827/4436/3494 3412/4438/3484\nf 3414/4404/3468 3413/4439/3496 3439/4441/3498\nf 3417/4402/3466 3416/4442/3499 3436/4444/3501\nf 3428/4461/3514 3430/4445/3502 3402/4447/3503\nf 3418/4410/3473 3417/4402/3466 3443/4448/3504\nf 3447/4459/3512 3420/4401/3465 3446/4449/3505\nf 3434/4430/3489 3435/4450/3490 3409/4406/3470\nf 3425/4398/3462 3451/4435/3493 3424/4420/3482\nf 3453/4472/3510 3427/4452/3477 3449/4453/3507\nf 3424/4420/3482 3429/4451/3506 3423/4421/3476\nf 3828/4476/3521 3444/4454/3508 3826/4455/3509\nf 3427/4414/3477 3453/4456/3510 3422/4408/3472\nf 3422/6294/3472 3431/4458/3511 3421/4400/3464\nf 3403/4397/3461 3420/4401/3465 3450/4460/3513\nf 3450/4460/3513 3428/4461/3514 3403/4397/3461\nf 3405/4412/3475 3404/4407/3471 3448/4463/3515\nf 3405/4412/3475 3448/4463/3515 3406/4419/3481\nf 3413/4439/3496 3412/4465/3484 3438/4440/3497\nf 3387/4405/3469 3386/4467/3451 3413/4439/3496\nf 3361/4395/3460 3360/4468/3436 3387/4405/3469\nf 3360/4361/3436 3361/4469/3460 3334/4312/3404\nf 3432/4464/3516 3448/4463/3515 3458/4471/3518\nf 3479/4475/3520 3453/4472/3510 3475/4473/3519\nf 3457/4523/3530 3431/4474/3511 3479/4475/3520\nf 3830/4970/3890 3828/4476/3521 3469/4478/3522\nf 3436/4444/3501 3441/4443/3500 3462/4480/3524\nf 3473/4490/3533 3447/4459/3512 3472/4481/3525\nf 3442/4432/3491 3435/4431/3490 3468/4483/3527\nf 3430/4445/3502 3428/4461/3514 3456/4485/3529\nf 3472/4481/3525 3446/4449/3505 3457/4486/3530\nf 3827/4436/3494 3442/4432/3491 3829/4487/3531\nf 3433/4428/3487 3432/4464/3516 3459/4488/3532\nf 3448/6295/3515 3430/4445/3502 3474/4489/3517\nf 3476/4500/3541 3450/4460/3513 3473/4490/3533\nf 3455/4497/3539 3429/4451/3506 3477/4491/3534\nf 3439/6296/3498 3438/4492/3497 3465/4494/3536\nf 3445/4429/3488 3433/4428/3487 3471/4495/3537\nf 3477/4491/3534 3451/4435/3493 3478/4496/3538\nf 3475/4473/3519 3449/4453/3507 3455/4497/3539\nf 3443/4448/3504 3436/4444/3501 3469/4498/3522\nf 3434/4430/3489 3445/4429/3488 3460/4499/3540\nf 3428/4461/3514 3450/4460/3513 3454/4484/3528\nf 3438/4492/3497 3437/4437/3495 3464/4493/3535\nf 3435/4431/3490 3434/4502/3489 3461/4482/3526\nf 3829/4487/3531 3468/4483/3527 3831/4505/3544\nf 3459/4488/3532 3458/4471/3518 3485/4507/3546\nf 3499/4534/3567 3473/4490/3533 3498/4508/3547\nf 3503/4510/3549 3477/4491/3534 3504/4509/3548\nf 3481/4515/3554 3455/4497/3539 3503/4510/3549\nf 3491/4536/3569 3465/4494/3536 3490/4511/3550\nf 3471/4495/3537 3459/4488/3532 3497/4512/3551\nf 3454/4484/3528 3476/4500/3541 3480/4514/3553\nf 3501/4522/3558 3475/4473/3519 3481/4515/3554\nf 3469/4478/3522 3462/4516/3524 3495/4518/3556\nf 3460/4503/3540 3471/4519/3537 3486/4521/3557\nf 3505/4524/3559 3479/4475/3520 3501/4522/3558\nf 3483/4548/3564 3457/4523/3530 3505/4524/3559\nf 3464/4493/3535 3463/4501/3542 3490/4511/3550\nf 3461/4482/3526 3460/4503/3540 3487/4526/3561\nf 3474/4489/3517 3456/4485/3529 3500/4528/3563\nf 3498/4508/3547 3472/4481/3525 3483/4529/3564\nf 3830/4970/3890 3469/4478/3522 3832/4530/3565\nf 3462/4480/3524 3467/4479/3523 3488/4532/3555\nf 3468/4483/3527 3461/4482/3526 3494/4504/3543\nf 3456/4485/3529 3454/4484/3528 3482/4527/3562\nf 3458/4471/3518 3474/4470/3517 3484/4506/3545\nf 3502/4513/3552 3476/4500/3541 3499/4534/3567\nf 3507/4543/3575 3481/4515/3554 3529/4535/3568\nf 3517/4626/3651 3491/4536/3569 3516/4537/3570\nf 3497/4520/3551 3485/4538/3546 3523/4540/3572\nf 3480/4514/3553 3502/4513/3552 3506/4542/3574\nf 3527/4547/3579 3501/4522/3558 3507/4543/3575\nf 3495/4518/3556 3488/4517/3555 3521/4545/3577\nf 3486/4521/3557 3497/4520/3551 3512/4546/3578\nf 3531/4549/3580 3505/4524/3559 3527/4547/3579\nf 3509/4554/3585 3483/4529/3564 3531/6297/3580\nf 3516/4537/3570 3490/4511/3550 3515/4550/3581\nf 3487/4526/3561 3486/4521/3557 3513/4551/3582\nf 3500/4528/3563 3482/4527/3562 3526/4553/3584\nf 3524/4564/3592 3498/4508/3547 3509/4554/3585\nf 3832/4530/3565 3495/4518/3556 3834/4555/3586\nf 3488/4517/3555 3493/4556/3566 3514/4544/3576\nf 3494/4504/3543 3487/4526/3561 3520/4558/3588\nf 3482/4527/3562 3480/4514/3553 3508/4552/3583\nf 3484/4533/3545 3500/4528/3563 3510/4559/3589\nf 3528/4541/3573 3502/4513/3552 3525/4560/3590\nf 3831/4505/3544 3494/4504/3543 3833/4561/3591\nf 3485/4538/3546 3484/4562/3545 3511/4539/3571\nf 3525/4560/3590 3499/4534/3567 3524/4564/3592\nf 3503/4510/3549 3504/4509/3548 3529/4535/3568\nf 3568/4611/3638 4012/4566/3594 3567/4568/3596\nf 3548/4610/3637 3551/4569/3597 3536/4571/3599\nf 3540/4600/3628 3559/4572/3600 4018/4574/3602\nf 4017/5205/3611 4016/4575/3603 3836/4577/3605\nf 3564/4586/3614 3565/4578/3606 3535/4580/3608\nf 3836/4577/3605 3557/6298/3609 4017/5205/3611\nf 3535/4580/3608 4013/4584/3612 3564/4586/3614\nf 3567/4568/3596 3532/4567/3595 3566/4588/3616\nf 3541/4601/3629 3544/4589/3617 3558/4591/3619\nf 4016/4575/3603 3539/4592/3620 3835/4576/3604\nf 3840/4624/3649 4021/4594/3622 3838/4596/3624\nf 3538/4608/3635 3546/4597/3625 3561/4599/3627\nf 3559/4572/3600 3540/4600/3628 3558/4591/3619\nf 4013/6299/3612 3537/4602/3630 3569/4604/3613\nf 3546/4597/3625 3545/4605/3632 3553/4598/3626\nf 4015/4612/3639 3571/4607/3634 3539/4592/3620\nf 3549/4615/3642 3538/4608/3635 3550/4609/3636\nf 3551/4569/3597 3548/4610/3637 3568/4611/3638\nf 3840/4624/3649 3555/4590/3618 4021/4594/3622\nf 3571/4607/3634 4015/4612/3639 3570/4614/3641\nf 3550/4609/3636 3562/4603/3631 3549/4615/3642\nf 3554/4606/3633 3545/4605/3632 3839/4617/3644\nf 3547/6300/3648 3552/4618/3645 3543/4620/3647\nf 3563/4570/3598 3570/4614/3641 3536/4571/3599\nf 4018/4574/3602 3837/4573/3601 3547/4622/3648\nf 3533/4587/3615 3534/4579/3607 3566/4588/3616\nf 3839/4617/3644 4020/4616/3643 3556/4619/3646\nf 3840/4624/3649 3838/4596/3624 3506/4542/3574\nf 3520/4558/3588 3513/4551/3582 3563/4570/3598\nf 3569/4604/3613 3562/4603/3631 3514/4544/3576\nf 3559/4572/3600 3524/4564/3592 3837/4573/3601\nf 3838/4596/3624 3557/4581/3609 3508/4552/3583\nf 3834/4555/3586 3521/4545/3577 3550/4609/3636\nf 3512/4546/3578 3571/4607/3634 3513/4551/3582\nf 3564/4586/3614 3569/4585/3613 3519/5197/3587\nf 3837/4573/3601 3509/4554/3585 3552/4621/3645\nf 3552/4618/3645 3531/4549/3580 3556/4619/3646\nf 3833/4561/3591 3551/4569/3597 3515/4550/3581\nf 3571/4607/3634 3512/4546/3578 3560/4593/3621\nf 3515/4550/3581 3568/4611/3638 3516/4537/3570\nf 3507/4543/3575 3839/4617/3644 3527/4547/3579\nf 3506/4542/3574 3528/4541/3573 3840/4624/3649\nf 3519/5197/3587 3518/4625/3650 3564/4586/3614\nf 3835/4576/3604 3560/4593/3621 3511/4539/3571\nf 3516/4537/3570 3567/4568/3596 3517/4626/3651\nf 3529/4535/3568 3554/4606/3633 3507/4543/3575\nf 2553/4945/3877 2518/4627/3652 3129/3951/3109\nf 3946/4949/3881 3950/4628/3653 3099/4022/3168\nf 3159/6301/4141 3096/4629/3167 2983/4096/3235\nf 2518/4627/3652 2497/4630/3654 3128/3952/3110\nf 3130/3956/3114 3133/3962/3120 3131/3958/3116\nf 2440/3130/2447 3130/3956/3114 2453/3957/3115\nf 2453/3957/3115 2397/4631/3655 2440/3130/2447\nf 2344/3004/2338 3757/3052/2382 2341/4633/3657\nf 2341/4633/3657 2340/4634/3658 2344/3004/2338\nf 2340/4634/3658 3724/4635/3659 2343/3005/2339\nf 4489/5891/4491 4481/4636/3328 3283/4229/3343\nf 3283/4229/3343 3282/4263/3372 3309/4637/3660\nf 3335/4283/3389 3309/4638/3660 3334/4312/3404\nf 3582/6302/3669 3583/4639/3661 3573/4641/3663\nf 3573/4641/3663 3578/4640/3662 3572/4643/3665\nf 3158/4004/3155 3586/4644/3666 3023/3846/3019\nf 3574/4731/3735 3579/4646/3668 3582/4648/3669\nf 3576/4655/3676 3581/4649/3670 3594/4651/3672\nf 3594/4651/3672 3622/4650/3671 3621/4653/3674\nf 3575/4861/3829 3580/4654/3675 3576/4655/3676\nf 3036/3843/3016 3585/6303/3677 3049/3990/3141\nf 3050/3986/3139 3623/4659/3679 3036/3987/3016\nf 3049/3990/3141 3584/4660/3678 3052/4662/3681\nf 3583/4639/3661 3632/4663/3682 3578/4640/3662\nf 3017/3811/2989 3588/4665/3684 3018/3812/2990\nf 3070/3869/3040 3616/4667/3686 3076/3878/3046\nf 3611/4672/3691 3612/4669/3688 3262/4130/3264\nf 3064/3868/3034 3617/4670/3689 3070/3869/3040\nf 3612/4669/3688 1399/1717/1479 3234/3900/3064\nf 3262/4130/3264 3088/3893/3058 3611/4672/3691\nf 3058/3855/3028 3618/4676/3692 3064/3862/3034\nf 3003/3798/2976 3620/4674/3693 3004/3799/2977\nf 3614/4677/3695 3613/4671/3690 3082/3886/3052\nf 3004/3799/2977 3619/4675/3694 3058/3855/3028\nf 3615/4668/3687 3614/4677/3695 3076/3878/3046\nf 3619/4675/3694 3602/4678/3696 3618/4676/3692\nf 3607/4682/3700 3608/4680/3698 3614/4677/3695\nf 3620/4674/3693 3601/4681/3699 3619/4675/3694\nf 3606/4683/3701 3607/4682/3700 3615/4668/3687\nf 3605/4684/3702 3606/4683/3701 3616/4667/3686\nf 3604/4687/3704 3605/4684/3702 3617/4670/3689\nf 3610/4688/3705 3609/4685/3703 3611/4672/3691\nf 3618/4673/3692 3603/4686/3697 3617/4670/3689\nf 3611/4672/3691 3613/4671/3690 3610/4688/3705\nf 3609/4685/3703 1394/1735/1496 3612/4669/3688\nf 3596/4700/3714 3593/4689/3706 3605/4684/3702\nf 3593/4689/3706 3592/4690/3707 3606/4683/3701\nf 3592/4690/3707 3591/4691/3708 3607/4682/3700\nf 3600/4730/3734 3599/4720/3709 3601/6304/3699\nf 3610/4688/3705 3608/4680/3698 3589/4693/3710\nf 3599/4720/3709 3598/4694/3711 3602/4695/3696\nf 3589/4693/3710 3590/6305/3712 3610/4688/3705\nf 3598/4694/3711 3597/4699/3713 3603/4686/3697\nf 3597/4699/3713 3596/4700/3714 3604/4687/3704\nf 3586/4644/3666 3630/4701/3715 3587/4645/3667\nf 3585/4656/3677 3629/4703/3716 3584/4657/3678\nf 3623/4659/3679 3627/4705/3718 3585/4656/3677\nf 3584/4660/3678 3628/4706/3717 3624/4661/3680\nf 3588/4665/3684 3017/3811/2989 3587/4645/3667\nf 3588/4665/3684 3632/4708/3682 3625/4666/3685\nf 3630/4859/3715 3577/4642/3664 3631/4664/3683\nf 3601/4681/3699 3620/4674/3693 3633/4709/3720\nf 3632/4663/3682 3583/4639/3661 3633/6306/3720\nf 3628/4706/3717 3581/6307/3670 3626/4707/3719\nf 3632/4708/3682 3588/4665/3684 3631/4702/3683\nf 3627/4705/3718 3595/4652/3673 3629/4703/3716\nf 3629/4703/3716 3622/4650/3671 3628/4704/3717\nf 3600/4730/3734 3601/6304/3699 3579/4646/3668\nf 3620/4674/3693 3003/3798/2976 3625/4666/3685\nf 3634/4715/3721 3048/3839/3012 1422/1766/1522\nf 3635/4717/3723 3634/4715/3721 1424/1768/1524\nf 3637/4718/3724 3636/4716/3722 1428/1772/1528\nf 3623/4659/3679 3050/3986/3139 3634/4715/3721\nf 3634/4715/3721 3635/4717/3723 3623/4659/3679\nf 3595/4652/3673 3627/4705/3718 3636/4716/3722\nf 3621/4653/3674 3595/4652/3673 3637/4718/3724\nf 3639/4724/3729 1431/1773/1529 3590/4696/3712\nf 3646/4729/3733 3645/4719/3725 3599/4720/3709\nf 3589/4725/3710 3591/6308/3708 3638/6309/3727\nf 3645/4719/3725 3644/4723/3728 3598/4694/3711\nf 3638/6309/3727 3639/4724/3729 3589/4725/3710\nf 3644/4723/3728 3643/4726/3730 3597/4699/3713\nf 3643/4726/3730 3642/4727/3731 3596/4700/3714\nf 3642/4727/3731 3641/4728/3732 3593/4689/3706\nf 3641/4728/3732 3640/4721/3726 3592/4690/3707\nf 3647/4732/3736 3646/4729/3733 3600/4730/3734\nf 3579/4646/3668 3574/4731/3735 3600/4730/3734\nf 3649/4734/3738 3648/4733/3737 3158/4004/3155\nf 3650/4798/3789 3649/4734/3738 3157/4003/3154\nf 3650/4798/3789 3157/4003/3154 3651/4735/3739\nf 3651/4735/3739 3156/4002/3153 3652/4736/3740\nf 3652/4736/3740 3155/4001/3152 3653/4737/3741\nf 3653/4737/3741 3253/4152/3282 3654/4739/3742\nf 3655/4801/3791 3654/4740/3742 3154/4008/3158\nf 3655/4801/3791 3656/4741/3743 3026/3982/3135\nf 3657/4802/3792 3656/4741/3743 2987/3849/3022\nf 3657/4802/3792 3658/4742/3744 2988/4090/3232\nf 3659/4803/3793 3658/4742/3744 3142/4743/3745\nf 3659/4803/3793 4001/4744/3746 3144/3979/3132\nf 2586/3251/2554 295/1804/1553 3769/4745/3747\nf 3769/4991/3747 3770/4746/3748 2586/3268/2554\nf 3662/4809/3797 2684/3400/2672 3661/4747/3749\nf 3662/4809/3797 4040/4748/3750 2684/3400/2672\nf 3663/4812/3799 3664/4749/3751 2689/4750/3752\nf 3664/4814/3751 3665/4813/3753 2726/6310/2700\nf 3665/4751/3753 3666/4752/3754 2727/3432/2701\nf 3666/4815/3754 2775/3422/2692 3667/4753/3755\nf 3668/4756/3756 2729/3435/2704 3667/4755/3755\nf 3669/6311/3800 2730/3545/2795 3668/4756/3756\nf 3669/6311/3800 3670/4757/3757 2730/3545/2795\nf 3670/4820/3757 2797/3537/2790 3671/4758/3758\nf 3671/4758/3758 3672/4759/3759 2814/4760/3760\nf 3672/4759/3759 3673/4761/3761 2829/3587/2824\nf 3673/4761/3761 2842/3601/2833 3674/4762/3762\nf 3674/4762/3762 2857/3630/2856 3675/4763/3763\nf 3676/4767/3765 2889/4764/2902 3675/4763/3763\nf 3677/4822/3801 2904/4766/3764 3676/4767/3765\nf 3677/4822/3801 2902/3687/2895 3678/4768/3766\nf 3679/4771/3767 3678/4769/3766 2932/3757/2928\nf 3680/4772/3768 3679/4771/3767 2947/3756/2943\nf 3681/4824/3802 2948/3771/2937 3680/4772/3768\nf 3681/6312/3802 2946/6313/2942 3682/6314/3769\nf 3683/4829/3803 3682/4775/3769 2916/3726/2919\nf 3683/4829/3803 3684/4776/3770 2918/3717/2915\nf 3685/4830/3804 3684/4776/3770 2886/3688/2896\nf 3685/4830/3804 3686/4778/3772 2888/3679/2889\nf 3687/4831/3805 2858/3617/2846 3686/4778/3772\nf 3687/4831/3805 2856/3663/2878 3688/4779/3773\nf 3688/4779/3773 2841/3631/2857 3689/4780/3774\nf 3690/4832/3806 2813/3567/2812 3689/4780/3774\nf 3690/4832/3806 3691/4781/3775 2813/3567/2812\nf 3692/4833/3807 3691/4781/3775 2719/4782/3776\nf 3692/4833/3807 3693/4783/3777 2721/3444/2712\nf 3693/4834/3777 3694/4784/3778 2718/3441/2709\nf 3694/4784/3778 3695/4785/3779 2715/3442/2710\nf 3695/4785/3779 2774/4786/2775 3696/4788/3780\nf 3697/4837/3808 2709/3439/2707 3696/4788/3780\nf 3697/4837/3808 2707/6315/2691 3698/4838/3781\nf 4041/4839/3809 2654/3446/2713 3699/4790/3782\nf 3699/4790/3782 2664/3776/2955 3700/4791/3783\nf 2571/4793/3785 2585/3269/2568 3767/4792/3784\nf 2625/3319/2613 2571/4793/3785 3773/4794/3786\nf 3648/4733/3737 3711/4795/3787 3586/4644/3666\nf 3712/4860/3828 3711/4796/3787 3580/4654/3675\nf 3712/4860/3828 3713/4797/3788 3577/4642/3664\nf 3052/4662/3681 3624/4661/3680 3649/4734/3738\nf 3047/3989/3140 3052/4662/3681 3650/4798/3789\nf 3042/3991/3142 3047/3989/3140 3651/4735/3739\nf 3042/3991/3142 3651/4735/3739 3037/3840/3013\nf 3037/3840/3013 3652/4736/3740 3032/3841/3014\nf 3032/3841/3014 3653/4737/3741 3029/4799/3790\nf 3026/3982/3135 3029/4800/3790 3655/4801/3791\nf 3154/4008/3158 3219/4093/3233 3655/4801/3791\nf 2988/4090/3232 3214/3995/3146 3657/4802/3792\nf 2987/3849/3022 3119/3996/3147 3657/4802/3792\nf 3144/3979/3132 3118/3980/3133 3659/4803/3793\nf 2622/4979/3897 2570/4804/3794 2652/4806/2612\nf 3773/4794/3786 3845/4807/3795 2625/3319/2613\nf 3810/3321/2615 3845/4807/3795 2626/3322/2616\nf 2665/3777/2956 3662/4809/3797 2972/4810/3798\nf 2647/5249/4093 4040/4748/3750 2665/3777/2956\nf 2688/3448/2715 2708/4811/2690 3663/4812/3799\nf 2708/3420/2690 2711/3419/2689 3664/4814/3751\nf 2711/3419/2689 2775/3422/2692 3665/4813/3753\nf 2777/6210/2717 3666/4816/3754 2728/4754/2719\nf 2714/6316/2695 2717/4817/2694 3667/4755/3755\nf 2717/4817/2694 2720/6317/2697 3668/4756/3756\nf 2720/3427/2697 2797/3537/2790 3669/4818/3800\nf 2814/4760/3760 2799/6318/2810 3671/4758/3758\nf 2827/3577/2818 3672/4759/3759 2812/3574/2816\nf 2842/3601/2833 3673/4761/3761 2827/3577/2818\nf 2859/6319/2864 2844/3609/2839 3674/4762/3762\nf 2859/6319/2864 3674/4762/3762 2874/4765/2887\nf 2887/3668/2880 3676/4767/3765 2872/3662/2877\nf 2902/3687/2895 3677/4822/3801 2887/3668/2880\nf 2904/4766/3764 3677/4822/3801 2919/4823/2912\nf 2919/3742/2912 3678/4769/3766 2934/3744/2933\nf 2949/3770/2950 2934/3744/2933 3680/4772/3768\nf 2946/3755/2942 3681/4824/3802 2947/3756/2943\nf 2948/3750/2937 3681/6320/3802 2933/3729/2922\nf 2918/3717/2915 2933/4828/2922 3683/4829/3803\nf 2916/3726/2919 2901/4777/3771 3683/4829/3803\nf 2888/3679/2889 2903/3701/2904 3685/4830/3804\nf 2871/3669/2881 3686/4778/3772 2886/3688/2896\nf 2871/3669/2881 2856/3663/2878 3686/4778/3772\nf 2858/3617/2846 3687/4831/3805 2843/3611/2841\nf 2843/3611/2841 3688/4779/3773 2828/3590/2827\nf 2811/3573/2815 3690/4832/3806 2826/3602/2834\nf 2811/3573/2815 2796/3536/2789 3690/4832/3806\nf 2721/3444/2712 2798/3540/2792 3692/4833/3807\nf 2719/4782/3776 2716/3429/2698 3692/4833/3807\nf 2713/6321/2696 3694/6322/3778 2716/6323/2698\nf 2774/4786/2775 3695/4785/3779 2713/4836/2696\nf 2773/3440/2708 3695/4785/3779 2712/3438/2706\nf 2707/3421/2691 3697/6324/3808 2710/3423/2693\nf 2709/3439/2707 3697/4837/3808 2692/3403/2675\nf 2663/3352/2640 2653/3351/2639 3699/4790/3782\nf 2959/4935/3871 2663/3352/2640 3700/4791/3783\nf 3772/4901/3842 2627/3324/2618 3771/4808/3796\nf 3970/4843/3813 3971/4840/3810 3702/4842/3812\nf 3969/4845/3815 3970/4843/3813 3703/4844/3814\nf 3968/5131/4026 3969/4845/3815 3704/4846/3816\nf 3966/4850/3820 3967/4847/3817 3706/4849/3819\nf 3123/4852/3822 3966/4850/3820 3707/4851/3821\nf 4022/4854/3824 3123/4852/3822 3708/4853/3823\nf 3972/4856/3826 4022/5295/3824 3709/4857/3825\nf 4023/5195/4078 3972/4856/3826 3710/4858/3827\nf 3624/4661/3680 3626/4707/3719 3648/4733/3737\nf 3577/4642/3664 3630/4859/3715 3712/4860/3828\nf 3580/4654/3675 3575/4861/3829 3712/4860/3828\nf 3715/2962/2305 2311/2969/2312 3714/2963/2306\nf 2315/4219/3334 3716/2976/2316 2309/4864/3830\nf 2318/4189/3308 3717/4865/3831 2315/4219/3334\nf 2321/4187/3306 3718/2979/2319 2318/4189/3308\nf 2324/4185/3304 3719/4866/2322 2321/4187/3306\nf 2324/4185/3304 2327/4183/3302 3719/4866/2322\nf 2327/4183/3302 2330/4222/3336 3720/2987/2325\nf 2333/4221/3335 3722/2995/2331 2330/4222/3336\nf 2336/4218/3333 3723/3002/2336 2333/4867/3335\nf 3792/4215/3330 3841/4868/3832 2336/4218/3333\nf 2345/4211/3326 3726/4869/3833 2342/4212/3327\nf 2353/6260/4494 2356/4204/3319 3728/4870/3834\nf 2356/4204/3319 2359/4203/3318 3729/3008/2342\nf 2359/4203/3318 3794/4871/3316 3730/3013/2347\nf 2312/2967/2310 2364/3021/2355 3714/4863/2306\nf 2364/3021/2355 2367/3023/2357 3732/4872/2353\nf 2367/4873/2357 2370/4874/2361 3733/3024/2358\nf 2370/4874/2361 2409/4875/2365 3734/3028/2362\nf 2376/3035/2369 3736/3037/2371 2373/3036/2370\nf 2376/6325/2369 2379/3048/2374 3736/4877/2371\nf 2379/3048/2374 2382/3047/2378 3737/3043/2375\nf 2373/3087/2370 3735/4878/3835 2409/3031/2365\nf 3724/4635/3659 2339/4214/3329 3725/3007/2341\nf 3764/4895/2396 2399/3153/2469 3762/6326/2397\nf 2392/3139/2456 2391/3075/2401 3745/3062/2392\nf 2389/3126/2443 2388/3055/2385 3756/3053/2383\nf 3752/3051/2381 2385/4882/3836 3757/3052/2382\nf 2401/3144/2402 2400/3143/2460 3765/4884/3837\nf 2406/3094/2415 2407/3096/2417 3761/4886/2404\nf 2407/3096/2417 2408/3098/2419 3759/4885/2405\nf 2320/2974/2315 2323/2978/2318 3765/4888/3837\nf 2394/3134/2451 2393/3133/2450 3747/3060/2390\nf 2410/3030/2364 2371/3026/2360 3758/4890/2411\nf 2395/3136/2453 2394/3134/2451 3748/3059/2389\nf 3757/3052/2382 2384/3131/2448 3749/4632/3656\nf 3843/3057/2387 3797/4891/3838 3750/3058/2388\nf 3760/3077/2403 2405/4892/2409 3761/3078/2404\nf 2400/3143/2460 2398/3149/2465 3743/4883/2394\nf 3763/4894/2395 2398/3149/2465 3764/4895/2396\nf 2410/3030/2364 3758/4890/2411 2374/4896/3839\nf 3741/4899/2400 2403/3147/2463 3742/4897/2399\nf 2393/3133/2450 2392/3139/2456 3746/4889/2391\nf 2351/3012/2346 2354/3011/2345 3753/4898/3840\nf 3762/3068/2397 2402/4881/2467 3741/6179/2400\nf 3796/3128/2445 2389/3126/2443 3844/4900/3841\nf 2396/3137/2454 2395/3136/2453 3750/3058/2388\nf 2340/4634/3658 2341/4633/3657 3791/3001/2335\nf 3768/4902/3843 2578/4151/3281 3772/4901/3842\nf 3784/3271/2570 2578/4151/3281 3852/4903/3844\nf 3776/5168/4060 3777/4904/3845 3775/4906/3847\nf 3814/4913/3854 3804/4907/3848 2483/4909/3850\nf 2466/4915/3856 2465/4910/3851 3778/4912/3853\nf 3800/4918/3857 3814/4913/3854 3134/4914/3855\nf 2465/4910/3851 2466/4915/3856 2500/3273/2572\nf 2624/4993/3906 3772/4901/3842 2623/3277/2576\nf 165/1978/1656 2466/4916/3856 1573/1977/1655\nf 2466/4916/3856 165/1978/1656 2501/3265/2566\nf 3777/4904/3845 3800/4918/3857 3774/4905/3846\nf 2624/4993/3906 2605/3279/2578 2582/4919/3858\nf 4010/5124/4020 4007/5123/3859 3955/5121/3861\nf 3710/4858/3827 2540/4923/3862 1503/1925/1630\nf 3710/4858/3827 3709/4857/3825 2540/4923/3862\nf 3709/4857/3825 3708/6327/3823 2539/4924/3863\nf 2962/4947/3879 2961/4925/3864 3707/4851/3821\nf 2602/3292/2590 3851/4927/3865 2645/3295/2593\nf 3787/3465/2731 3848/4928/3866 2645/3295/2593\nf 3850/5259/4098 3849/4929/3867 2644/3357/2645\nf 2602/3292/2590 2598/3291/2586 2628/4931/2624\nf 2594/3283/2582 2599/3285/2584 2598/3287/2586\nf 2590/3275/2574 2595/3282/2581 2594/3283/2582\nf 2595/3282/2581 2590/3275/2574 2591/4932/3868\nf 2591/4936/3868 2569/4805/2573 2587/4933/3869\nf 2585/3269/2568 2571/4793/3785 3785/3263/2565\nf 2661/5246/4090 2662/4934/3870 2959/4935/3871\nf 2592/6328/2579 2591/4936/3868 2588/4937/2611\nf 2588/3317/2611 298/2001/1675 2592/4939/2579\nf 3724/4635/3659 2340/4634/3658 3841/4868/3832\nf 3842/3016/2350 3731/4940/3872 3793/3017/2351\nf 3793/3017/2351 2361/4941/3873 3795/3018/2352\nf 3755/4975/3894 3844/4900/3841 2360/4942/3874\nf 2341/4633/3657 3749/4632/3656 3790/3000/2334\nf 2446/5122/4019 3798/5119/3875 2390/6329/3876\nf 2497/4630/3654 2518/4627/3652 3801/3959/3117\nf 2518/4627/3652 2553/4945/3877 3803/3201/2509\nf 2576/3323/2617 2577/3270/2569 3808/3256/2559\nf 2577/3270/2569 2498/4946/3878 3807/3257/2560\nf 2963/4973/3893 2962/4947/3879 3706/4849/3819\nf 2503/3272/2571 3784/3271/2570 3859/4948/3880\nf 3808/3256/2559 2574/3253/2556 3810/3321/2615\nf 3953/3928/3090 3946/4949/3881 3812/3929/3091\nf 2397/4631/3655 2453/3957/3115 3797/4891/3838\nf 2488/3960/3118 2452/3954/3112 3813/4950/3882\nf 3131/3958/3116 2497/4630/3654 3813/4950/3882\nf 3776/5201/4060 3956/4951/3883 3777/4952/3845\nf 3096/4021/3167 3811/4953/3884 3099/4022/3168\nf 2444/3124/2441 2445/3127/2444 3919/4921/3860\nf 4482/4202/3317 4493/4954/3885 2359/4203/3318\nf 2336/4218/3333 4490/4217/3332 3792/4215/3330\nf 3288/4240/3354 3314/4239/3353 3816/4958/3887\nf 3307/6330/3366 3817/4959/3888 3281/4960/3367\nf 3314/4294/3353 3340/4293/3394 3818/4961/3363\nf 3307/4255/3366 3333/4359/3401 3817/4962/3888\nf 3340/4349/3394 3366/4348/3426 3820/4964/3399\nf 3359/4358/3434 3821/4380/3452 3333/4359/3401\nf 3392/4367/3441 3824/4965/3479 3366/4348/3426\nf 3385/4377/3449 3823/4966/3889 3359/4358/3434\nf 3418/4410/3473 3826/4967/3509 3392/4367/3441\nf 3385/4377/3449 3411/4418/3480 3823/4966/3889\nf 3411/4433/3480 3442/4432/3491 3825/4968/3483\nf 3443/4477/3504 3828/4476/3521 3418/4969/3473\nf 3470/4971/3891 3444/4454/3508 3830/4970/3890\nf 3437/4437/3495 3827/4436/3494 3463/4501/3542\nf 3463/4501/3542 3829/4487/3531 3489/4525/3560\nf 3496/5199/4079 3470/4971/3891 3832/4530/3565\nf 3496/5199/4079 3832/4530/3565 3522/4972/3892\nf 3515/4550/3581 3489/4525/3560 3833/4561/3591\nf 3553/4598/3626 3554/4606/3633 3530/4565/3593\nf 3524/4564/3592 3559/4572/3600 3525/4560/3590\nf 3836/4577/3605 3835/4576/3604 3510/4563/3589\nf 3551/4569/3597 3833/4561/3591 3563/4570/3598\nf 3566/4588/3616 3565/4578/3606 3517/4626/3651\nf 3561/4599/3627 3553/4598/3626 3522/4972/3892\nf 3550/4609/3636 3561/4599/3627 3834/4555/3586\nf 2964/5008/3919 2963/4973/3893 3705/4848/3818\nf 2339/4214/3329 3724/4635/3659 3792/4215/3330\nf 3794/4871/3316 2362/4974/3315 3842/3016/2350\nf 3749/4632/3656 2397/4631/3655 3843/3057/2387\nf 2390/4944/3876 3796/3128/2445 3755/4975/3894\nf 3923/6331/3943 3870/4976/3895 1721/2085/1739\nf 3928/5084/3992 3919/4921/3860 3956/4951/3883\nf 2623/3277/2576 3809/4977/3896 2606/3278/2577\nf 3785/3263/2565 2572/3320/2614 2583/3267/2567\nf 2652/4806/2612 2581/4978/2610 2622/4979/3897\nf 2628/4931/2624 3788/4980/2677 2602/3292/2590\nf 3899/5014/3925 3701/4841/3811 4032/4981/3898\nf 3849/4929/3867 3852/4903/3844 2582/4919/3858\nf 2628/6332/2624 2629/3349/2623 3788/3406/2677\nf 2970/6333/2953 2971/6334/3271 2975/6335/3900\nf 3859/4948/3880 3852/4903/3844 3789/4985/3901\nf 2975/4984/3900 2979/4988/3902 2970/6336/2953\nf 2977/3778/2957 2969/4987/3270 3125/4989/3903\nf 3125/4989/3903 3124/4990/3904 2977/3778/2957\nf 2588/4937/2611 2587/4933/3869 3769/4991/3747\nf 2587/4933/3869 2570/4804/3794 3770/4746/3748\nf 3773/4794/3786 3767/4792/3784 2622/4979/3897\nf 2622/4979/3897 3809/4977/3896 3773/4794/3786\nf 3771/4808/3796 3845/4807/3795 2623/3277/2576\nf 2485/5126/3917 2464/4992/3905 2503/3272/2571\nf 2582/4919/3858 3768/4902/3843 2624/4993/3906\nf 3124/4990/3904 3660/4994/3907 2976/3779/2958\nf 2972/4810/3798 3661/4747/3749 3855/4995/3908\nf 3855/4995/3908 3856/4996/3909 2972/4810/3798\nf 3856/4996/3909 3857/4997/3910 2960/3775/2954\nf 2959/4935/3871 3700/4791/3783 3858/4998/3911\nf 2661/5246/4090 2959/4935/3871 3965/4999/3912\nf 3859/5004/3880 3789/6337/3901 3782/5005/3913\nf 4025/5261/4100 4024/5001/3914 3854/5003/3916\nf 2503/3272/2571 3859/4948/3880 2485/5126/3917\nf 3136/4144/3274 2426/3105/2426 3804/4907/3848\nf 3705/4848/3818 3704/4846/3816 2964/5008/3919\nf 2967/5009/3920 2968/5007/3918 3703/4844/3814\nf 4011/4145/3275 3136/4144/3274 3814/4913/3854\nf 2965/5010/3921 2967/5009/3920 3702/4842/3812\nf 2966/5016/3927 2965/5010/3921 3701/4841/3811\nf 4010/5124/4020 4011/4145/3275 3800/4918/3857\nf 3915/5051/3960 3888/5011/3922 3916/5013/3924\nf 3701/4841/3811 3899/5014/3925 2966/5016/3927\nf 3897/5020/3931 3900/5015/3926 3896/5017/3928\nf 3896/5017/3928 3893/5018/3929 3897/5020/3931\nf 3893/5018/3929 3890/5021/3932 3894/5019/3930\nf 3887/5023/3934 3888/5011/3922 3890/5021/3932\nf 3865/5049/3958 3867/5012/3923 3887/5023/3934\nf 4001/5156/3746 3659/6338/3793 4002/5110/3935\nf 3929/5046/3956 3880/5025/3936 1735/2104/1758\nf 2434/6184/3937 132/147/136 3778/4917/3853\nf 2428/3115/2436 2434/5026/3937 3779/4911/3852\nf 3917/5033/3944 3927/5027/3938 3869/5029/3940\nf 3779/4911/3852 3964/5030/3941 2428/3115/2436\nf 3879/5039/3950 3924/5031/3942 3880/5025/3936\nf 3921/5092/3998 3917/5033/3944 3876/5034/3945\nf 3926/5045/3955 3920/5035/3946 3883/5037/3948\nf 3878/5041/3951 3922/5040/3949 3879/6339/3950\nf 3920/5035/3946 3922/5040/3949 3877/5036/3947\nf 3921/5092/3998 3925/5042/3952 3881/5044/3954\nf 3146/3973/3126 3996/4150/3280 733/2236/1862\nf 3925/5042/3952 3926/5045/3955 3882/5043/3953\nf 3930/5048/3957 3879/5039/3950 3929/5046/3956\nf 3931/5099/4003 3878/5047/3951 3930/5048/3957\nf 4027/5241/4085 3865/5049/3958 4028/5050/3959\nf 3914/5081/3989 3891/5022/3933 3915/5051/3960\nf 4029/5052/3961 4028/5050/3959 3890/5021/3932\nf 4030/5055/3964 4029/5052/3961 3893/5018/3929\nf 3964/5030/3941 3962/5053/3962 2514/4908/3849\nf 3134/4914/3855 2483/4909/3850 3960/5054/3963\nf 4031/5056/3965 4030/5055/3964 3896/5017/3928\nf 4032/4981/3898 4031/5056/3965 3899/5014/3925\nf 3912/5060/3969 3911/5057/3966 2562/5059/3968\nf 3905/5079/3987 3912/5060/3969 2561/5061/3970\nf 2550/3231/2534 2551/3229/2532 2557/5063/3972\nf 2551/3229/2532 2552/3228/2531 3898/5062/3971\nf 2552/3228/2531 3805/3233/2536 3895/5064/3973\nf 3889/5066/3975 3892/5065/3974 2553/4945/3877\nf 3886/5293/4116 3889/5066/3975 3129/3951/3109\nf 3886/5293/4116 3129/3951/3109 3781/5067/3976\nf 3911/5057/3966 3913/5068/3977 2563/5058/3967\nf 2546/4081/3223 252/1136/1002 3903/5070/3979\nf 2545/6254/2952 2546/4081/3223 3904/5071/3980\nf 2535/3225/2528 2536/3227/2530 3901/5073/3982\nf 2538/3223/2526 2537/3222/2525 3902/5075/3984\nf 2537/3222/2525 2535/3225/2528 3907/5074/3983\nf 2536/3227/2530 2545/3773/2952 3906/5072/3981\nf 2561/5061/3970 2558/5077/3985 3905/5079/3987\nf 2558/5077/3985 2559/3241/2544 3908/5078/3986\nf 2559/3241/2544 2560/3240/2543 3909/5080/3988\nf 2564/5082/3990 3806/5069/3978 3914/5081/3989\nf 3137/5114/4017 2564/5082/3990 3915/5051/3960\nf 3137/5114/4017 3915/5051/3960 2981/5083/3991\nf 2443/3125/2442 2444/3124/2441 3928/5084/3992\nf 3916/5013/3924 3867/5012/3923 3918/5086/3994\nf 3885/5091/3997 3884/5087/3995 3917/5033/3944\nf 3924/5094/3942 3871/5088/3996 3923/5090/3943\nf 3881/5044/3954 3885/5091/3997 3921/5092/3998\nf 3874/5097/4002 3873/5093/3999 3926/5045/3955\nf 3872/5095/4000 3871/5088/3996 3922/5040/3949\nf 3873/5093/3999 3872/5095/4000 3920/5035/3946\nf 3876/5034/3945 3875/5096/4001 3921/5092/3998\nf 3875/5096/4001 3874/5097/4002 3925/5042/3952\nf 3932/5118/4009 3877/5098/3947 3931/5099/4003\nf 3960/5054/3963 3958/5100/4004 3134/4914/3855\nf 3958/5100/4004 3957/5101/4005 3774/4905/3846\nf 3766/5102/4006 3775/4906/3847 3860/3329/2622\nf 3863/5167/4059 3766/5102/4006 3861/3328/2621\nf 3927/5027/3938 3853/5103/4007 3868/5028/3939\nf 3933/5106/4010 3883/5037/3948 3932/5105/4009\nf 3934/5107/4011 3882/5043/3953 3933/5106/4010\nf 3881/5044/3954 3882/5043/3953 3935/5108/4012\nf 3885/5091/3997 3881/5044/3954 3936/5109/4013\nf 4003/5157/4050 3936/5109/4013 4002/5110/3935\nf 3918/5086/3994 2980/5111/4014 3916/5013/3924\nf 2543/3851/3024 2541/4079/3222 3937/3221/2524\nf 2541/4079/3222 2542/4078/3221 3939/3224/2527\nf 2565/3246/2549 2566/3242/2545 3941/3247/2550\nf 2538/3223/2526 2560/3240/2543 3938/3852/3025\nf 2559/3241/2544 2558/5077/3985 3941/3247/2550\nf 2542/4078/3221 3203/4168/3291 3940/3226/2529\nf 2562/5059/3968 2563/5058/3967 3944/3923/3085\nf 2561/5061/3970 2562/5059/3968 3945/3933/3095\nf 2563/5058/3967 3806/5069/3978 3943/3920/3082\nf 2558/5077/3985 2561/5061/3970 3947/5112/4015\nf 2980/5111/4014 3948/5113/4016 2981/5083/3991\nf 3137/5114/4017 2981/5083/3991 3950/4628/3653\nf 3951/4076/3219 3204/4165/3290 1753/2189/1827\nf 3952/4080/2951 3203/4166/3291 3951/4076/3219\nf 2564/5082/3990 3137/5114/4017 3946/4949/3881\nf 3806/5069/3978 2564/5082/3990 3953/3928/3090\nf 3121/3939/2964 3948/5113/4016 3120/5116/3023\nf 4000/4146/3276 3933/5117/4010 3999/4147/3277\nf 2445/3127/2444 3798/4943/3875 3955/4922/3861\nf 3798/5119/3875 2446/5122/4019 3846/5120/4018\nf 3800/4918/3857 3777/4904/3845 4010/5124/4020\nf 2432/3112/2433 2428/3115/2436 3804/4907/3848\nf 3867/5012/3923 3865/5049/3958 3866/5085/3993\nf 3127/5002/3915 3862/5104/4008 3854/5003/3916\nf 3860/3329/2622 3957/5101/4005 3782/5000/3913\nf 3858/4998/3911 3857/4997/3910 3862/5104/4008\nf 3869/5029/3940 3868/5028/3939 3856/4996/3909\nf 3957/5101/4005 3958/5100/4004 2485/5126/3917\nf 3959/5127/4022 2464/4992/3905 3960/5054/3963\nf 3876/5034/3945 3869/5029/3940 3855/4995/3908\nf 3875/5096/4001 3876/5034/3945 3660/4994/3907\nf 3802/3259/2562 2498/4946/3878 3959/5127/4022\nf 3874/5097/4002 3875/5096/4001 3124/4990/3904\nf 3961/5128/4023 3959/5127/4022 3962/5053/3962\nf 3124/4990/3904 3125/4989/3903 3874/5097/4002\nf 2502/3260/2563 3802/3259/2562 3961/5128/4023\nf 3961/5128/4023 3963/5129/4024 2502/3260/2563\nf 3963/5129/4024 2465/4910/3851 2499/3258/2561\nf 3963/5129/4024 3961/5128/4023 3964/5030/3941\nf 3964/5030/3941 3779/4911/3852 3963/5129/4024\nf 3125/4989/3903 2979/4988/3902 3873/5093/3999\nf 2979/4988/3902 2975/4984/3900 3872/5095/4000\nf 3870/5089/3895 3871/5088/3996 2978/4983/3899\nf 4024/5001/3914 4033/5130/4025 3127/5002/3915\nf 3704/4846/3816 3705/4848/3818 3968/5131/4026\nf 2054/5591/1836 4242/4030/3176 1776/2220/1837\nf 3988/5134/4029 3989/4028/3174 3974/5133/4028\nf 3987/5147/4042 3988/5134/4029 3975/5135/4030\nf 4244/5586/4348 4247/5136/4031 3975/5135/4030\nf 4247/5136/4031 4250/5138/4033 3976/5137/4032\nf 4250/5138/4033 4253/5140/4035 3977/5139/4034\nf 4253/5140/4035 4257/5142/4037 3978/5141/4036\nf 4257/5142/4037 4254/4115/3251 3979/5143/4038\nf 3982/5148/4043 3983/5145/4040 3981/5146/4041\nf 3975/5135/4030 3976/5137/4032 3987/5147/4042\nf 1776/2220/1837 3973/5132/4027 1794/1076/944\nf 3978/5141/4036 3979/5143/4038 3984/4037/3183\nf 3979/5143/4038 3980/5144/4039 3990/4038/3184\nf 3259/4040/3186 3240/4029/3175 3988/5134/4029\nf 3976/5137/4032 3977/5139/4034 3986/4035/3181\nf 3977/5139/4034 3978/5141/4036 3985/4036/3182\nf 3117/3949/3107 3259/4040/3186 3987/5147/4042\nf 3160/4097/3236 3221/4026/3172 3982/5148/4043\nf 3965/4999/3912 3858/4998/3911 3127/5002/3915\nf 3991/5152/4047 3993/5149/4044 3992/5151/4046\nf 3853/5103/4007 3927/5027/3938 3993/5149/4044\nf 3993/5149/4044 3991/5152/4047 3853/5103/4007\nf 4025/5261/4100 3854/5003/3916 4035/5153/4048\nf 3993/5149/4044 3884/5087/3995 3994/5150/4045\nf 3936/5109/4013 3995/5154/4049 3885/5091/3997\nf 3999/4147/3277 3932/5118/4009 3998/4148/3278\nf 3998/4148/3278 3931/5099/4003 3997/4149/3279\nf 3997/4149/3279 3930/5048/3957 3996/4150/3280\nf 4001/5156/3746 3934/5107/4011 4000/5155/3276\nf 3934/5107/4011 4001/5156/3746 3935/5108/4012\nf 2982/5115/3148 4003/5157/4050 3142/5158/3745\nf 3866/5085/3993 3864/5125/4021 4005/5160/4052\nf 4009/5165/4057 4008/5161/4053 3847/5163/4055\nf 4003/5157/4050 4004/5164/4056 3936/5109/4013\nf 3776/5201/4060 4009/6340/4057 2493/6341/4058\nf 4004/5164/4056 4003/5157/4050 3918/5086/3994\nf 3766/5102/4006 3863/5167/4059 4009/5165/4057\nf 4009/5165/4057 3776/5168/4060 3766/5102/4006\nf 4005/5160/4052 4004/5164/4056 3866/5085/3993\nf 4003/5157/4050 2982/5115/3148 2980/5111/4014\nf 3994/5150/4045 3995/5154/4049 4005/5160/4052\nf 3955/5121/3861 3846/5120/4018 4010/5124/4020\nf 4005/5160/4052 4006/5159/4051 3994/5150/4045\nf 3847/5163/4055 3780/5162/4054 2519/3950/3108\nf 2519/3950/3108 2513/3963/3121 3847/5163/4055\nf 3135/5169/4061 2493/5166/4058 3132/3961/3119\nf 2492/5171/4063 3135/5169/4061 2484/3955/3113\nf 2484/3955/3113 2441/3129/2446 2492/5171/4063\nf 2386/6342/4065 2442/5170/4062 2385/4882/3836\nf 2385/6343/3836 3752/5172/2381 2386/5174/4065\nf 2348/5178/4067 3751/5173/4064 2347/5175/2337\nf 2347/3003/2337 2346/3006/2340 2348/6344/4067\nf 2346/3006/2340 3726/4869/3833 2349/5180/4066\nf 3894/5019/3930 3891/5022/3933 3913/5068/3977\nf 3897/5020/3931 3894/5019/3930 3911/5057/3966\nf 3900/5015/3926 3897/5020/3931 3912/5060/3969\nf 3912/5060/3969 3905/5079/3987 3900/5015/3926\nf 3905/5079/3987 3908/5078/3986 2966/5016/3927\nf 3908/5078/3986 3909/5080/3988 2965/5010/3921\nf 3909/5080/3988 3910/3244/2547 2967/5009/3920\nf 3525/4560/3590 3558/4591/3619 3528/4541/3573\nf 3517/4626/3651 3518/4625/3650 3491/4536/3569\nf 3465/4494/3536 3491/4536/3569 3466/5182/4070\nf 3440/5185/4071 3439/4441/3498 3466/5184/4070\nf 3415/5186/4072 3414/4404/3468 3440/5185/4071\nf 3414/4404/3468 3415/5186/4072 3388/4394/3459\nf 3388/4394/3459 3389/5187/4073 3362/4340/3421\nf 3362/4340/3421 3363/5188/4074 3336/4341/3390\nf 3310/4285/3341 3336/4284/3390 3311/5191/4076\nf 3310/4227/3341 3311/5192/4076 3284/4228/3342\nf 4487/5218/4081 4488/5194/3325 3285/5193/4077\nf 2350/6345/4082 3727/5179/4068 2345/4211/3326\nf 2964/5008/3919 2968/5007/3918 3902/5075/3984\nf 3902/5075/3984 3907/5074/3983 2964/5008/3919\nf 3907/5074/3983 3901/5073/3982 2963/4973/3893\nf 3901/5073/3982 3906/5072/3981 2962/4947/3879\nf 2539/4926/3863 2961/4925/3864 3904/5076/3980\nf 2540/4923/3862 2539/4924/3863 3903/5070/3979\nf 238/2350/1924 2534/3220/2523 1830/1924/1629\nf 3510/4559/3589 3526/4553/3584 3836/5196/3605\nf 3518/4625/3650 3519/5197/3587 3492/5181/4069\nf 3530/4565/3593 3504/4509/3548 3522/4972/3892\nf 2493/6341/4058 3135/5200/4061 3776/5201/4060\nf 3928/6346/3992 3956/6347/3883 2492/5171/4063\nf 2492/5171/4063 2442/5170/4062 3928/6346/3992\nf 2387/3056/2386 2443/3125/2442 2386/5204/4065\nf 3954/4143/3273 2421/3106/2427 3136/4144/3274\nf 2446/5122/4019 2416/3097/2418 3954/4143/3273\nf 2390/6329/3876 2408/3098/2419 2446/5122/4019\nf 4019/4595/3623 3542/4582/3610 3838/4596/3624\nf 4021/4594/3622 3544/4589/3617 4019/4595/3623\nf 4019/4595/3623 3541/4601/3629 3542/4582/3610\nf 3542/4582/3610 3540/4600/3628 4017/4583/3611\nf 4016/4575/3603 4017/5205/3611 3547/5207/3648\nf 4016/4575/3603 3547/5207/3648 3539/4592/3620\nf 4020/5209/3643 4015/4612/3639 3543/5208/3647\nf 4015/4612/3639 4020/5209/3643 4014/4613/3640\nf 3545/5210/3632 3546/5211/3625 4014/4613/3640\nf 3546/5211/3625 3538/5212/3635 3536/4571/3599\nf 3538/5212/3635 3549/5213/3642 3548/4610/3637\nf 4012/4566/3594 3549/5213/3642 3532/4567/3595\nf 3532/4567/3595 3537/5214/3630 3533/4587/3615\nf 4013/4584/3612 3535/4580/3608 3533/4587/3615\nf 3492/6348/4069 3493/4531/3566 3466/5184/4070\nf 3441/4443/3500 3440/5185/4071 3467/4479/3523\nf 3440/5185/4071 3441/4443/3500 3415/5186/4072\nf 3390/4403/3467 3389/5187/4073 3416/4442/3499\nf 3389/5187/4073 3390/4403/3467 3363/5188/4074\nf 3363/5188/4074 3364/4337/3419 3337/5189/4075\nf 3338/4280/3387 3312/6274/4080 3337/6349/4075\nf 3286/4226/3340 3285/5193/4077 3312/5217/4080\nf 4485/5890/3321 4487/5218/4081 3286/4226/3340\nf 2353/6260/4494 3728/4870/3834 2350/5220/4082\nf 2349/5224/4066 3727/5219/4068 2352/3010/2344\nf 2348/5178/4067 2349/5177/4066 2351/6350/2346\nf 2351/6350/2346 3753/5225/3840 2348/5178/4067\nf 2386/5174/4065 3751/5173/4064 2387/5226/2386\nf 3755/4975/3894 3740/5227/2407 2390/4944/3876\nf 3740/5227/2407 3755/4975/3894 2383/5229/2377\nf 2361/4941/3873 2382/5230/2378 2360/4942/3874\nf 3731/4940/3872 3738/6351/2379 2361/4941/3873\nf 3738/6351/2379 3731/4940/3872 2381/5232/2380\nf 4476/6352/4490 4477/5233/3314 3296/5235/3383\nf 3289/4254/3365 3315/4253/3364 3296/5237/3383\nf 3315/4253/3364 3341/6353/3400 3322/5236/4083\nf 3374/4335/3417 3348/4324/3411 3367/4357/3433\nf 3393/4416/3448 3400/4399/3463 3367/5239/3433\nf 3400/4399/3463 3393/4416/3448 3426/5240/4084\nf 3426/5240/4084 3419/4415/3478 3452/4434/3492\nf 3444/4454/3508 3470/4971/3891 3452/4434/3492\nf 3504/4509/3548 3478/4496/3538 3496/5199/4079\nf 4026/5244/4088 3864/5125/4021 4027/5241/4085\nf 4035/5153/4048 3991/5152/4047 4034/5242/4086\nf 4006/5159/4051 4036/5243/4087 3992/5151/4046\nf 4036/5243/4087 4006/5159/4051 4026/5244/4088\nf 4033/5130/4025 2657/5245/4089 3965/4999/3912\nf 2657/5245/4089 2659/5247/4091 2661/5246/4090\nf 2660/5253/4095 2696/3408/2678 2648/3350/2638\nf 2739/3362/2649 2735/3493/2720 2643/3363/2650\nf 2665/3777/2956 2664/3776/2955 2647/5249/4093\nf 4045/3405/2676 2642/5248/4092 4046/5251/2729\nf 2641/3456/2722 2740/3455/2721 4037/5252/4094\nf 4043/5260/4099 4042/3468/2734 2659/5247/4091\nf 2760/5255/2772 2766/5254/4096 4038/4138/3269\nf 2691/3353/2641 2760/3512/2772 2655/3354/2642\nf 4040/4748/3750 3663/4812/3799 2658/3361/2648\nf 3698/4789/3781 2687/3780/2714 4041/6354/3809\nf 2647/5249/4093 2688/3448/2715 4040/4748/3750\nf 2653/3404/2639 2692/3403/2675 4041/5257/3809\nf 2659/5247/4091 2660/5253/4095 2662/4934/3870\nf 2704/3416/2686 2702/3414/2684 2750/5258/4097\nf 2702/3414/2684 2771/3413/2683 2734/3461/2727\nf 2733/3520/2724 2778/3462/2728 2700/3515/2681\nf 2700/3411/2681 2698/3409/2679 2733/3458/2724\nf 2698/3409/2679 2696/3408/2678 2732/3459/2725\nf 2696/3408/2678 2660/5253/4095 2695/3467/2733\nf 2657/5245/4089 4033/5130/4025 3850/5259/4098\nf 2659/5247/4091 2657/5245/4089 4043/5260/4099\nf 3789/4985/3901 3849/4929/3867 4024/5001/3914\nf 3783/3327/2620 3789/4985/3901 4025/5261/4100\nf 3783/3327/2620 4025/5261/4100 3861/3328/2621\nf 3861/3328/2621 4035/5153/4048 3863/5167/4059\nf 3863/5167/4059 4034/5242/4086 4008/5161/4053\nf 4026/5244/4088 3780/5162/4054 4036/5243/4087\nf 3780/5162/4054 4026/5244/4088 3781/5067/3976\nf 363/399/366 2643/3363/2650 1852/2326/1910\nf 2643/3363/2650 2642/5248/4092 4044/3364/2651\nf 4046/3463/2729 2641/3456/2722 4047/3464/2730\nf 3788/4980/2677 4045/6355/2676 3851/4927/3865\nf 2750/5258/4097 4063/3531/2784 2788/5264/4102\nf 2779/3471/2737 2738/3470/2736 4062/3519/2776\nf 4065/5267/4104 4064/5265/4103 4037/5252/4094\nf 2737/3521/2739 2779/3471/2737 4053/5266/2723\nf 2694/3490/2754 2736/3474/2740 4055/3466/2732\nf 4037/5252/4094 2694/3490/2754 4065/5267/4104\nf 2736/3474/2740 2737/3473/2739 4052/3489/2753\nf 2750/5258/4097 2734/3461/2727 4063/3531/2784\nf 2803/5270/4105 2788/5268/4102 4060/3556/2802\nf 2818/5272/4107 2803/5270/4105 4051/5271/4106\nf 2833/5273/4108 2818/6356/4107 4050/5274/2823\nf 2848/5276/4109 2833/5292/4108 4049/3638/2862\nf 2863/5278/4110 2848/5276/4109 4048/5277/2868\nf 2878/5279/4111 2863/5278/4110 4059/3673/2884\nf 2893/5281/4112 2878/5279/4111 4058/5280/2899\nf 2908/5291/4113 2893/5281/4112 4057/5282/2910\nf 2923/5284/4114 2908/5283/4113 4056/3740/2931\nf 2938/3752/2939 2923/5284/4114 4067/5285/4115\nf 2938/3752/2939 4067/5285/4115 2953/3753/2940\nf 4042/3468/2734 4043/5260/4099 4065/5267/4104\nf 3848/4928/3866 3850/5259/4098 2646/3356/2644\nf 3850/5259/4098 3848/4928/3866 4043/5260/4099\nf 3787/3465/2731 4047/3464/2730 3848/4928/3866\nf 2956/3754/2941 2950/3743/2932 4066/5286/2948\nf 2956/3754/2941 4066/5286/2948 2955/3745/2934\nf 2952/5287/2947 2951/5288/2946 2957/5290/2944\nf 2954/3764/2936 2955/3745/2934 2957/5290/2944\nf 2954/3764/2936 2957/5290/2944 711/786/689\nf 2930/3732/2923 2915/3720/2916 2938/3752/2939\nf 2908/5283/4113 2923/5284/4114 2900/3719/2905\nf 2893/5281/4112 2908/5291/4113 2885/3680/2890\nf 2878/5279/4111 2893/5281/4112 2870/3656/2874\nf 2863/5278/4110 2878/5279/4111 2855/3619/2848\nf 2855/3619/2848 2840/3613/2842 2863/5278/4110\nf 2833/5292/4108 2848/5276/4109 2825/3612/2828\nf 2818/5272/4107 2833/5292/4108 2810/3568/2813\nf 2803/5270/4105 2818/5272/4107 2795/3558/2803\nf 2788/5268/4102 2803/5270/4105 2706/3557/2688\nf 2706/3418/2688 2704/3416/2686 2788/5264/4102\nf 4028/5050/3959 3886/5293/4116 4027/5241/4085\nf 4028/5050/3959 4029/5052/3961 3886/5293/4116\nf 4029/5052/3961 4030/5055/3964 3889/5066/3975\nf 4030/5055/3964 4031/5056/3965 3892/5065/3974\nf 4031/5056/3965 4032/4981/3898 3895/5064/3973\nf 4032/4981/3898 3971/4840/3810 3898/5062/3971\nf 2554/3237/2540 2557/5063/3972 3970/4843/3813\nf 2555/3236/2539 2554/3237/2540 3969/4845/3815\nf 2556/3235/2538 2555/3236/2539 3968/5131/4026\nf 3968/5131/4026 3967/4847/3817 2556/3235/2538\nf 2529/3217/2520 2530/3238/2541 3966/4850/3820\nf 2527/3218/2521 2529/3217/2520 3123/4852/3822\nf 2528/3215/2519 2527/3218/2521 4022/4854/3824\nf 2533/3219/2522 2528/5294/2519 3972/4856/3826\nf 2534/3220/2523 2533/3219/2522 4023/5195/4078\nf 3183/4023/3169 3184/4062/3207 4074/4024/3170\nf 4078/4067/3211 3181/4057/3203 4077/4025/3171\nf 4080/5298/3261 3239/4131/3265 1889/5296/986\nf 4075/4065/3210 3180/4052/3198 4078/4067/3211\nf 3179/4103/3241 3225/4102/3199 4076/5297/4117\nf 3263/4132/3266 3239/4131/3265 4081/4170/3294\nf 3184/4062/3207 3263/4132/3266 4073/4063/3208\nf 3185/4016/3163 3103/5299/4118 4076/5297/4117\nf 4076/5297/4117 4072/5300/4119 3179/4103/3241\nf 3222/4116/3252 3162/5301/4120 3223/4099/3238\nf 3161/4117/3253 3222/4116/3252 3167/5302/3287\nf 4249/5587/4349 2567/4084/3226 4258/5304/4122\nf 4095/5311/4129 4094/5305/4123 3230/4108/3245\nf 3207/3926/3088 3208/5306/4124 4093/5307/4125\nf 4097/5329/4145 4093/5307/4125 4098/5308/4126\nf 4258/5304/4122 4092/5303/4121 4259/5310/4128\nf 4099/5316/4134 4098/5308/4126 4095/5311/4129\nf 4097/5329/4145 4098/5308/4126 4101/5313/4131\nf 4259/5310/4128 4096/5309/4127 4260/5315/4133\nf 4103/5350/4163 4102/5312/4130 4099/5316/4134\nf 4108/5321/4139 3982/5148/4043 4107/5317/4135\nf 4261/5592/4350 4255/5318/4136 4106/5319/4137\nf 4104/5844/4140 3111/4098/3237 4105/5320/4138\nf 3982/5148/4043 4108/5321/4139 3160/4097/3236\nf 3111/4098/3237 4104/5844/4140 2983/4096/3235\nf 3167/5302/3287 3105/5325/3286 3161/4117/3253\nf 3101/3245/2548 3100/3924/3086 4096/5309/4127\nf 4092/5303/4121 2565/3246/2549 4096/5309/4127\nf 4097/5329/4145 4101/5313/4131 3200/5327/4143\nf 3199/3927/3089 3207/3926/3088 3227/5328/4144\nf 3200/5327/4143 3227/5328/4144 4097/5329/4145\nf 2565/3246/2549 4092/5303/4121 2566/3242/2545\nf 3100/3924/3086 3097/3922/3084 4100/5314/4132\nf 3089/4018/3165 4109/5330/4146 3098/3921/3083\nf 4454/5873/4488 4444/5331/4147 3095/4017/3164\nf 4443/5836/4477 4445/5332/4148 3106/5333/3285\nf 4455/5837/4478 4446/5334/4149 3811/4953/3884\nf 4115/5367/4179 4426/5335/4150 4120/5337/4152\nf 4457/5838/4479 4448/5338/4153 3159/5340/4141\nf 4108/5321/4139 4458/5341/4154 4105/5320/4138\nf 4432/5364/4176 4431/5343/4156 4122/5345/4158\nf 4430/5810/4467 4433/5346/4159 4130/5348/4161\nf 4461/5840/4480 4451/5349/4162 4103/5350/4163\nf 4446/5334/4149 4459/5351/4164 3089/4018/3165\nf 4113/6357/4486 4438/6358/4165 4123/6359/4167\nf 4428/5809/4466 4439/5355/4168 4118/5357/4170\nf 4437/5353/4166 4434/5358/4171 4123/5354/4167\nf 4445/5332/4148 4453/5360/4173 3105/5325/3286\nf 4439/5823/4168 4429/5361/4174 4126/5363/4169\nf 4441/5593/4351 4432/5364/4176 4262/5365/4177\nf 4121/5859/4197 4436/5366/4178 4115/5367/4179\nf 3103/5299/4118 4444/5331/4147 4072/5300/4119\nf 4424/6360/4473 4427/5369/4181 4119/5371/4183\nf 4442/5594/4352 4440/5372/4184 4263/5374/4186\nf 4147/5428/4223 4146/5375/4187 4125/5376/4188\nf 4140/5439/4200 4134/5377/4189 4118/5378/4170\nf 4132/5386/4196 4153/5379/4190 4110/5380/4191\nf 4130/5414/4161 4129/5381/4160 4152/5383/4193\nf 4123/5354/4167 4124/5359/4172 4145/5384/4194\nf 4119/5371/4183 4141/5385/4195 4110/5380/4191\nf 4143/5857/4230 4121/5387/4197 4137/5389/4198\nf 4118/5378/4170 4126/6361/4169 4140/5439/4200\nf 4262/5365/4177 4122/5345/4158 4264/5394/4202\nf 4114/5410/4211 4136/5395/4203 4120/5397/4152\nf 4117/5858/4484 4139/5398/4205 4116/5400/4207\nf 4138/5399/4206 4150/5401/4208 4116/5400/4207\nf 4126/6362/4169 4127/6363/4175 4148/6364/4199\nf 4137/5389/4198 4115/5388/4179 4142/5407/4204\nf 4141/5385/4195 4119/5371/4183 4134/5377/4189\nf 4113/5868/4486 4123/5354/4167 4135/5408/4210\nf 4265/5595/4353 4263/5409/4186 4150/5401/4208\nf 4133/5421/4218 4136/5420/4203 4111/6365/4212\nf 4122/5345/4158 4131/5344/4157 4144/5393/4201\nf 4152/5383/4193 4149/5412/4209 4130/5414/4161\nf 4135/6366/4210 4145/6367/4194 4157/5811/4214\nf 4265/5595/4353 4150/5401/4208 4267/5418/4216\nf 4155/5867/4392 4158/5419/4217 4133/5421/4218\nf 4144/5393/4201 4153/5379/4190 4166/5423/4220\nf 4174/5433/4227 4171/5424/4221 4152/5426/4193\nf 4169/5579/4344 4168/5427/4222 4147/5428/4223\nf 4140/5439/4200 4162/5429/4224 4134/5377/4189\nf 4154/5435/4229 4175/5422/4219 4132/5386/4196\nf 4152/5383/4193 4151/5382/4192 4174/6368/4227\nf 4145/5384/4194 4146/5375/4187 4167/5415/4213\nf 4141/5385/4195 4163/5434/4228 4132/5386/4196\nf 4165/6369/4391 4143/5436/4230 4159/5438/4231\nf 4162/5429/4224 4140/5439/4200 4170/5441/4232\nf 4264/5394/4202 4144/5393/4201 4266/5442/4233\nf 4136/5420/4203 4158/5419/4217 4142/6370/4204\nf 4139/6371/4205 4161/5446/4235 4138/5448/4206\nf 4138/5399/4206 4160/5449/4236 4150/5401/4208\nf 4148/5440/4199 4149/5425/4209 4170/5441/4232\nf 4137/6372/4198 4142/5445/4204 4159/5450/4231\nf 4163/5434/4228 4141/5385/4195 4156/5430/4225\nf 4334/5581/4346 4357/5582/4237 4268/5597/4239\nf 4363/5480/4265 4354/5454/4240 4192/5456/4242\nf 4362/5478/4263 4310/5457/4243 4181/5459/4245\nf 4185/6373/4387 4369/5460/4246 4178/5462/4248\nf 4368/5575/4343 4350/5463/4249 4179/5465/4251\nf 4333/5599/4354 4364/5466/4252 4269/5468/4254\nf 4357/5451/4237 4306/5469/4255 4188/5452/4238\nf 4305/5635/4381 4367/5471/4257 4196/5473/4259\nf 4350/5463/4249 4366/6374/4260 4189/5464/4250\nf 4187/5760/4456 4349/5477/4262 4181/5459/4245\nf 4184/5634/4380 4313/5479/4264 4192/5456/4242\nf 4176/6375/4269 4405/6376/4266 4197/6377/4256\nf 4185/5644/4387 4408/5483/4268 4176/5484/4269\nf 4180/5492/4276 4412/5485/4270 4186/5458/4244\nf 4183/6378/4483 4413/5487/4272 4182/5489/4274\nf 4402/5488/4273 4403/5490/4275 4182/5489/4274\nf 4416/5757/4453 4412/5485/4270 4177/5493/4277\nf 4396/5604/4356 4414/5494/4278 4196/5473/4259\nf 4400/5768/4454 4407/6379/4279 4191/5598/4280\nf 4184/5634/4380 4399/5498/4281 4178/5462/4248\nf 4237/5562/4336 4229/5500/4283 4336/5502/4285\nf 4223/5542/4320 4233/5503/4286 4220/5505/4288\nf 4304/5642/4385 4317/5506/4289 4241/5508/4291\nf 4237/5562/4336 4336/5502/4285 4273/5510/4293\nf 4221/5533/4313 4325/5511/4294 4222/5513/4296\nf 4316/5692/4412 4234/5514/4297 4341/5516/4299\nf 4239/5534/4309 4340/5517/4300 4227/5519/4302\nf 4229/5500/4283 4228/5520/4303 4315/5501/4284\nf 4240/5515/4298 4235/5507/4290 4341/5516/4299\nf 4236/5552/4328 4335/5522/4305 4275/5524/4307\nf 4238/5850/4315 4337/5525/4308 4239/5527/4309\nf 4345/5725/4419 4272/5724/4310 4308/6380/4312\nf 4222/5513/4296 4227/5531/4302 4221/5533/4313\nf 4204/5537/4316 4239/5534/4309 4216/5535/4314\nf 4205/6381/4459 4238/5536/4315 4204/5537/4316\nf 4241/5569/4291 4235/5538/4290 4202/5540/4318\nf 4270/5773/4323 4210/5541/4319 4223/5542/4320\nf 4223/5542/4320 4230/6382/4321 4270/5773/4323\nf 4237/6383/4336 4206/6384/4324 4229/6385/4283\nf 4234/5514/4297 4209/6386/4326 4240/5515/4298\nf 4207/5777/4355 4236/5552/4328 4198/5553/4329\nf 4211/5798/4342 4212/5554/4330 4232/5556/4311\nf 4225/6387/4338 4218/5557/4332 4226/5559/4295\nf 4275/5524/4307 4224/5560/4334 4198/5553/4329\nf 4206/6384/4324 4237/6383/4336 4200/6388/4337\nf 4230/5661/4321 4231/5555/4331 4213/5564/4322\nf 4218/5788/4332 4225/5565/4338 4215/5567/4339\nf 4210/6389/4319 4219/5561/4335 4233/5568/4286\nf 4274/5707/4386 4241/5569/4291 4199/5570/4340\nf 4222/5602/4296 4271/5571/4341 4227/5519/4302\nf 4201/5706/4425 4211/5572/4342 4272/5574/4310\nf 4350/5463/4249 4368/5575/4343 4167/5577/4213\nf 4366/5474/4260 4350/6390/4249 4168/5427/4222\nf 4168/5427/4222 4169/5579/4344 4366/5474/4260\nf 4169/5579/4344 4266/5442/4233 4311/5580/4345\nf 4357/5582/4237 4334/5581/4346 4166/5423/4220\nf 4306/5469/4255 4357/5451/4237 4175/6391/4219\nf 4175/6391/4219 4154/6392/4229 4306/5469/4255\nf 3974/5133/4028 3973/5132/4027 4243/4033/3179\nf 3975/5135/4030 3974/5133/4028 4244/5586/4348\nf 3229/4107/3244 3228/4106/3243 4248/4083/3225\nf 3230/4108/3245 3229/4107/3244 4249/5587/4349\nf 3228/4106/3243 3231/4109/3246 4245/4082/3224\nf 3237/4169/3293 1014/1189/1047 4252/5588/3247\nf 3981/5146/4041 3980/5144/4039 4255/5318/4136\nf 3201/4072/3215 4246/4087/3229 3202/4077/3220\nf 4252/4175/3247 3232/5589/3257 4256/4176/3296\nf 4256/4176/3296 2525/5590/3292 4251/4136/3268\nf 942/1164/1028 3245/4031/3177 2054/5591/1836\nf 3166/4034/3180 3165/4075/3218 4244/5586/4348\nf 3165/4075/3218 3164/3938/3099 4247/5136/4031\nf 3164/3938/3099 3163/3930/3092 4250/5138/4033\nf 3163/3930/3092 3162/5301/4120 4253/5140/4035\nf 3162/5301/4120 3222/4116/3252 4257/5142/4037\nf 3230/4108/3245 4249/5587/4349 4095/5311/4129\nf 4095/5311/4129 4258/5304/4122 4099/5316/4134\nf 4099/5316/4134 4259/5310/4128 4103/5350/4163\nf 4107/5317/4135 3981/5146/4041 4261/5592/4350\nf 4435/5816/4469 4441/5593/4351 4125/5376/4188\nf 4433/5346/4159 4442/5594/4352 4129/5347/4160\nf 4125/5376/4188 4262/5365/4177 4147/5428/4223\nf 4129/5381/4160 4263/5409/4186 4151/5382/4192\nf 4151/5431/4192 4265/6393/4353 4173/5432/4226\nf 4147/5428/4223 4264/5394/4202 4169/5579/4344\nf 4311/5580/4345 4334/5581/4346 4191/5598/4280\nf 4367/5471/4257 4333/5599/4354 4195/5472/4258\nf 4236/5663/4328 4207/5600/4355 4273/5510/4293\nf 4240/5551/4298 4203/5550/4327 4235/5538/4290\nf 4214/5785/4325 4215/5567/4339 4229/5601/4283\nf 4271/5571/4341 4222/5602/4296 4217/5558/4333\nf 4163/6394/4228 4369/6395/4246 4154/6396/4229\nf 4369/5460/4246 4163/5434/4228 4351/5461/4247\nf 4280/6397/4457 4396/5604/4356 4279/5606/4358\nf 4397/5765/4372 4407/5495/4279 4282/5608/4360\nf 4285/5797/4460 4398/5609/4361 4284/5611/4363\nf 4287/6398/4455 4399/6399/4281 4286/6400/4365\nf 4417/5762/4377 4411/5614/4366 4298/5616/4368\nf 4410/5612/4364 4414/5494/4278 4286/5613/4365\nf 4284/5611/4363 4409/5610/4362 4290/5618/4370\nf 4283/5778/4450 4408/5483/4268 4296/5779/4371\nf 4404/5843/4481 4397/5622/4372 4276/5624/4373\nf 4418/5633/4379 4403/5625/4275 4299/5627/4375\nf 4411/5767/4366 4395/5482/4267 4288/5629/4367\nf 4400/5768/4454 4417/5630/4377 4289/5632/4378\nf 4279/5606/4358 4406/5605/4357 4299/5627/4375\nf 4313/6401/4264 4184/6402/4380 4351/6403/4247\nf 4162/5429/4224 4313/5479/4264 4156/5430/4225\nf 4313/5479/4264 4162/5429/4224 4363/5480/4265\nf 4354/5454/4240 4363/5480/4265 4171/5424/4221\nf 4171/5424/4221 4174/5433/4227 4354/5454/4240\nf 4367/5471/4257 4305/5635/4381 4173/5432/4226\nf 4182/5489/4274 4194/5491/4253 4365/5637/4382\nf 4173/5432/4226 4267/5638/4216 4367/5471/4257\nf 4232/5556/4311 4231/5555/4331 4308/5640/4312\nf 4320/5523/4306 4323/5641/4384 4275/5524/4307\nf 4196/5473/4259 4193/5455/4241 4305/5635/4381\nf 4319/5696/4416 4304/5642/4385 4274/5643/4386\nf 4369/6404/4246 4185/5644/4387 4312/5645/4347\nf 4183/6378/4483 4182/5489/4274 4355/5646/4388\nf 4364/5466/4252 4333/5599/4354 4172/5647/4215\nf 4180/5492/4276 4186/5458/4244 4356/5648/4389\nf 4160/5447/4236 4365/5649/4382 4172/5647/4215\nf 4191/5598/4280 4190/5475/4261 4311/5580/4345\nf 4176/6405/4269 4197/5650/4256 4312/5584/4347\nf 4161/5446/4235 4355/5651/4388 4160/5447/4236\nf 4177/5493/4277 4180/5492/4276 4307/5652/4390\nf 4349/5477/4262 4165/5853/4391 4362/5478/4263\nf 4362/5654/4263 4159/5450/4231 4310/5655/4243\nf 4158/5443/4217 4356/5656/4389 4164/5444/4234\nf 4158/5443/4217 4155/5657/4392 4356/5656/4389\nf 4225/5684/4338 4226/5512/4295 4324/5659/4393\nf 4220/5669/4288 4327/5660/4394 4223/5662/4320\nf 4327/5660/4394 4328/5639/4383 4230/5661/4321\nf 4335/5678/4305 4236/5663/4328 4346/5509/4292\nf 4328/5639/4383 4327/5660/4394 4303/5665/4396\nf 4233/5503/4286 4224/5666/4334 4309/5504/4287\nf 4220/5669/4288 4343/5668/4397 4327/5660/4394\nf 4359/5732/4398 4343/5668/4397 4309/5670/4287\nf 4301/5674/4400 4359/5671/4398 4323/5667/4384\nf 4323/5667/4384 4320/5672/4306 4301/5674/4400\nf 4320/5672/4306 4335/5675/4305 4348/5673/4399\nf 4361/6406/4403 4338/6407/4401 4346/6408/4292\nf 4346/5509/4292 4336/5502/4285 4361/5680/4403\nf 4332/5681/4404 4339/5679/4402 4315/5501/4284\nf 4331/5683/4406 4332/5681/4404 4314/5521/4304\nf 4314/5521/4304 4324/5659/4393 4331/5683/4406\nf 4324/5659/4393 4314/5521/4304 4225/5684/4338\nf 4353/5686/4408 4300/5682/4405 4325/5511/4294\nf 4325/5511/4294 4221/5533/4313 4353/5686/4408\nf 4352/5689/4410 4344/5685/4407 4326/5532/4301\nf 4326/5532/4301 4340/5687/4300 4352/5689/4410\nf 4337/5525/4308 4318/5690/4411 4340/5526/4300\nf 4329/5742/4445 4316/5692/4412 4322/5693/4413\nf 4322/5693/4413 4341/5516/4299 4330/5694/4414\nf 4317/5506/4289 4304/5642/4385 4330/5694/4414\nf 4304/5642/4385 4319/5696/4416 4342/5695/4415\nf 4358/5849/4420 4360/5698/4418 4308/5700/4312\nf 4303/5665/4396 4358/5701/4420 4328/5639/4383\nf 4392/5733/4441 4391/5702/4421 4352/5689/4410\nf 4383/5710/4428 4385/5703/4422 4303/5665/4396\nf 4201/5706/4425 4199/5570/4340 4276/5624/4373\nf 4391/5702/4421 4379/5705/4424 4344/5685/4407\nf 4380/5746/4448 4300/5682/4405 4379/5705/4424\nf 4199/5570/4340 4201/5706/4425 4274/5707/4386\nf 4384/5716/4432 4371/5715/4426 4383/6409/4428\nf 4387/5735/4443 4370/5711/4429 4389/5713/4430\nf 4360/5698/4418 4347/5697/4417 4345/5699/4419\nf 4375/5731/4440 4373/5719/4431 4384/5730/4432\nf 4375/5731/4440 4386/5717/4433 4373/5719/4431\nf 4361/6410/4403 4382/5720/4435 4338/5676/4401\nf 4373/5714/4431 4381/5722/4436 4371/5715/4426\nf 4274/5643/4386 4272/6411/4310 4319/5696/4416\nf 4371/5715/4426 4388/5723/4437 4372/5712/4427\nf 4381/5722/4436 4393/5727/4438 4388/5723/4437\nf 4372/5709/4427 4370/5729/4429 4383/5710/4428\nf 4302/5664/4395 4384/5730/4432 4303/5665/4396\nf 4343/5668/4397 4375/5731/4440 4302/5664/4395\nf 4343/5668/4397 4359/5732/4398 4375/5731/4440\nf 4376/5740/4444 4377/5728/4439 4392/5733/4441\nf 4376/5740/4444 4378/5734/4442 4389/5713/4430\nf 4373/6412/4431 4374/5721/4434 4381/5736/4436\nf 4347/5697/4417 4385/5737/4422 4342/5695/4415\nf 4342/5695/4415 4370/5738/4429 4330/5694/4414\nf 4388/5723/4437 4377/5728/4439 4389/5713/4430\nf 4348/5673/4399 4386/5741/4433 4301/5674/4400\nf 4321/5691/4409 4318/5690/4411 4390/5743/4446\nf 4378/5848/4442 4322/5693/4413 4387/5739/4443\nf 4392/5733/4441 4390/5744/4446 4376/5740/4444\nf 4382/5747/4435 4394/5745/4447 4381/5722/4436\nf 4352/5689/4410 4321/5688/4409 4392/5733/4441\nf 4394/5745/4447 4380/5746/4448 4393/5727/4438\nf 4393/5727/4438 4379/5705/4424 4377/5728/4439\nf 4394/5745/4447 4382/5747/4435 4339/5679/4402\nf 4338/5676/4401 4374/5721/4434 4348/5673/4399\nf 4300/6413/4405 4380/6414/4448 4331/6415/4406\nf 4380/5746/4448 4394/5745/4447 4332/5681/4404\nf 4405/6416/4266 4278/6417/4449 4395/6418/4267\nf 4408/5483/4268 4283/5778/4450 4405/5481/4266\nf 4412/5485/4270 4291/5752/4451 4401/5486/4271\nf 4293/5795/4458 4292/5753/4452 4413/5755/4272\nf 4292/5753/4452 4294/5626/4374 4402/5754/4273\nf 4297/5704/4423 4291/5752/4451 4416/5757/4453\nf 4280/6397/4457 4295/5617/4369 4396/5604/4356\nf 4289/5772/4378 4281/5607/4359 4400/5758/4454\nf 4399/5498/4281 4287/6419/4455 4415/5499/4282\nf 4196/5473/4259 4195/5472/4258 4396/5604/4356\nf 4397/5765/4372 4189/5464/4250 4407/5495/4279\nf 4398/5609/4361 4187/5760/4456 4409/5610/4362\nf 4184/5634/4380 4192/5456/4242 4399/5498/4281\nf 4268/5597/4239 4188/6420/4238 4417/5630/4377\nf 4192/5456/4242 4193/5455/4241 4410/5612/4364\nf 4409/5610/4362 4181/5459/4245 4401/5486/4271\nf 4408/5619/4268 4185/5763/4387 4415/5620/4282\nf 4404/6421/4481 4179/5465/4251 4397/5765/4372\nf 4269/6422/4254 4194/5491/4253 4418/5766/4379\nf 4188/5452/4238 4197/5470/4256 4411/5767/4366\nf 4191/5598/4280 4268/5597/4239 4400/5768/4454\nf 4195/5472/4258 4269/5468/4254 4406/5605/4357\nf 4281/5607/4359 4289/5772/4378 4212/5554/4330\nf 4289/5632/4378 4298/5631/4368 4213/5544/4322\nf 4210/5541/4319 4270/5773/4323 4288/5615/4367\nf 4219/5561/4335 4210/6389/4319 4277/5628/4376\nf 4277/5628/4376 4278/5748/4449 4219/5561/4335\nf 4283/5778/4450 4207/5777/4355 4278/5748/4449\nf 4207/5777/4355 4283/5778/4450 4200/5780/4337\nf 4287/5759/4455 4206/6423/4324 4296/5621/4371\nf 4206/6423/4324 4287/5759/4455 4214/5785/4325\nf 4215/5567/4339 4214/5785/4325 4295/5786/4369\nf 4295/5786/4369 4280/5787/4457 4215/5567/4339\nf 4218/5557/4332 4280/6424/4457 4217/5558/4333\nf 4299/6425/4375 4271/5571/4341 4279/5792/4358\nf 4271/5571/4341 4299/6425/4375 4216/5535/4314\nf 4294/6426/4374 4292/6427/4452 4216/6428/4314\nf 4292/5753/4452 4293/5795/4458 4204/5794/4316\nf 4209/5549/4326 4285/5797/4460 4203/5550/4327\nf 4203/5550/4327 4284/5611/4363 4208/5539/4317\nf 4291/5752/4451 4202/5540/4318 4290/5618/4370\nf 4291/5752/4451 4297/5704/4423 4202/5540/4318\nf 4211/5572/4342 4201/5706/4425 4282/5623/4360\nf 4212/5554/4330 4211/5798/4342 4281/5607/4359\nf 4421/5833/4476 4111/5411/4212 4420/5799/4461\nf 4117/6429/4484 4116/5800/4207 4419/5802/4463\nf 4424/6360/4473 4119/5371/4183 4423/5803/4464\nf 4426/6430/4150 4447/5804/4465 4425/5806/4151\nf 4118/5357/4170 4112/5807/4182 4428/5809/4466\nf 4130/5348/4161 4127/5362/4175 4430/5810/4467\nf 4155/5657/4392 4157/5811/4214 4307/5658/4390\nf 4450/5824/4472 4459/5351/4164 4432/5364/4176\nf 4458/6431/4154 4460/6432/4468 4430/6433/4467\nf 4125/5376/4188 4124/5359/4172 4435/5816/4469\nf 4110/5380/4191 4131/5344/4157 4423/5803/4464\nf 4452/5871/4487 4463/5817/4470 4438/5352/4165\nf 4457/5838/4479 4464/5818/4471 4428/5809/4466\nf 4463/5817/4470 4451/5349/4162 4437/5353/4166\nf 4307/6434/4390 4368/6435/4343 4177/6436/4277\nf 4116/5800/4207 4128/5373/4185 4422/5801/4462\nf 4464/6437/4471 4449/5822/4155 4439/5823/4168\nf 4465/5831/4474 4450/5824/4472 4441/5593/4351\nf 4462/5860/4485 4447/5825/4465 4436/5827/4178\nf 4420/5799/4461 4114/5410/4211 4425/5806/4151\nf 4455/5837/4478 4448/5847/4153 4424/6360/4473\nf 4466/5832/4475 4453/5360/4173 4442/5830/4352\nf 4461/5840/4480 4465/5831/4474 4435/5816/4469\nf 4460/5813/4468 4466/5832/4475 4433/5814/4159\nf 4454/6438/4488 4421/5833/4476 4444/5834/4147\nf 4419/5861/4463 4422/5835/4462 4443/5836/4477\nf 4424/6360/4473 4423/5803/4464 4455/5837/4478\nf 4428/5809/4466 4427/5808/4181 4457/5838/4479\nf 4430/6439/4467 4429/6440/4174 4458/6441/4154\nf 4435/5816/4469 4434/5358/4171 4461/5840/4480\nf 4423/5803/4464 4431/5343/4156 4446/5334/4149\nf 4422/5835/4462 4440/5829/4184 4445/5332/4148\nf 4444/5834/4147 4420/5799/4461 4456/5805/4180\nf 4316/5692/4412 4329/5742/4445 4337/5525/4308\nf 4447/6442/4465 3104/4164/3289 4456/5368/4180\nf 4404/6443/4481 4416/6444/4453 4179/6445/4251\nf 4100/5314/4132 4109/5330/4146 4450/5824/4472\nf 4458/5341/4154 4108/5321/4139 4460/5813/4468\nf 4452/5871/4487 3102/5326/4142 4463/5817/4470\nf 4457/5838/4479 3159/5340/4141 4464/5818/4471\nf 4101/5313/4131 4102/5312/4130 4463/5817/4470\nf 4416/5757/4453 4404/5843/4481 4297/5704/4423\nf 4464/6446/4471 4104/5844/4140 4449/5342/4155\nf 4260/5315/4133 4100/5314/4132 4465/5831/4474\nf 4462/5860/4485 4082/5845/4482 4447/5825/4465\nf 3811/4953/3884 3096/4021/3167 4455/5837/4478\nf 4466/5832/4475 4261/5592/4350 4453/5360/4173\nf 4103/5350/4163 4260/5315/4133 4461/5840/4480\nf 4460/5813/4468 4107/5317/4135 4466/5832/4475\nf 4390/5743/4446 4329/5742/4445 4378/5848/4442\nf 4385/5737/4422 4347/5697/4417 4358/5849/4420\nf 4337/5525/4308 4238/5850/4315 4316/5692/4412\nf 4238/5850/4315 4205/6447/4459 4234/5514/4297\nf 4285/5797/4460 4209/5549/4326 4293/5795/4458\nf 4293/5795/4458 4413/5755/4272 4285/5797/4460\nf 4187/5760/4456 4398/5609/4361 4183/5852/4483\nf 4183/6378/4483 4355/5646/4388 4187/6448/4456\nf 4355/5651/4388 4161/5446/4235 4349/5477/4262\nf 4161/5446/4235 4139/6371/4205 4165/5853/4391\nf 4121/5387/4197 4143/5857/4230 4117/5858/4484\nf 4117/6429/4484 4419/5802/4463 4121/5859/4197\nf 4443/5836/4477 4462/5860/4485 4419/5861/4463\nf 4462/5860/4485 4443/5836/4477 4082/5845/4482\nf 4084/5866/3288 4082/5845/4482 3173/4100/3239\nf 3173/4100/3239 3224/4049/3195 4084/5866/3288\nf 4083/4051/3197 4089/5865/3240 3174/4045/3191\nf 4087/4060/3205 4083/4051/3197 3175/4043/3189\nf 4157/5811/4214 4155/5657/4392 4135/6366/4210\nf 4111/6365/4212 4113/5868/4486 4133/5421/4218\nf 4111/5411/4212 4421/5833/4476 4113/5870/4486\nf 4454/6438/4488 4452/6449/4487 4421/5833/4476\nf 3102/5326/4142 4452/5871/4487 3095/4017/3164\nf 3095/4017/3164 3090/4015/3162 3102/5326/4142\nf 3090/4015/3162 4069/4014/3161 3200/5327/4143\nf 3093/3915/3078 3199/3927/3089 4069/4014/3161\nf 3094/3919/3081 3198/5874/4489 3093/3915/3078\nf 4068/5875/3166 3107/3937/3098 3094/3919/3081\nf 3091/6450/3075 3109/3934/3096 4068/5875/3166\nf 3091/6450/3075 3092/6451/3079 3109/3934/3096\nf 3092/5876/3079 4071/3907/3070 3108/3248/2551\nf 4071/3907/3070 4070/3909/3072 3267/4074/3217\nf 4070/3909/3072 1878/1067/935 3242/4114/3250\nf 4086/4056/3202 4087/4060/3205 3176/4042/3188\nf 4085/4054/3200 4086/4056/3202 3177/4048/3194\nf 4088/4061/3206 4085/4054/3200 3178/4047/3193\nf 3178/4047/3193 3264/4123/3258 4088/4061/3206\nf 4090/4058/3204 4091/4172/3295 3243/4044/3190\nf 1899/2938/2297 4090/4058/3204 956/1093/961\nf 4468/4178/3297 2309/4864/3830 4467/4179/3298\nf 4470/5879/3300 3277/4266/3375 4469/5878/3301\nf 4471/6452/3303 3276/4258/3369 4470/5879/3300\nf 4472/4186/3305 3275/5880/3358 4471/4184/3303\nf 4473/4188/3307 3274/4235/3349 4472/4186/3305\nf 3290/4270/3379 3273/4180/3299 4474/4209/3324\nf 3296/5235/3383 3295/6453/3382 4476/6352/4490\nf 4479/4193/3310 2411/3033/2367 4478/4194/3311\nf 3295/5882/3382 3294/4268/3377 4475/5883/3309\nf 3816/4958/3887 3289/4254/3365 4493/5886/3885\nf 4480/4196/3313 3294/4268/3377 4478/4200/3311\nf 3287/4225/3339 3288/4240/3354 4483/5888/3322\nf 4479/4193/3310 3297/5889/3362 4484/4205/3320\nf 3286/4226/3340 3287/4225/3339 4485/5890/3321\nf 4484/4205/3320 3292/4238/3352 4486/4208/3323\nf 3291/4237/3351 3290/4270/3379 4486/4208/3323\nf 3283/4229/3343 3284/4228/3342 4489/5891/4491\nf 3815/4264/3373 3282/4263/3372 4494/5892/3886\nf 3280/6454/3356 3281/5893/3367 4491/5895/3331\nf 4468/4178/3297 3272/4272/3381 4473/4188/3307\nf 4492/5897/3337 3279/4232/3346 4491/5896/3331\nf 4469/5878/3301 3278/4271/3380 4492/5897/3337\nf 2342/4212/3327 2339/4214/3329 4489/5898/4491\nf 3288/4240/3354 3816/4958/3887 4482/5887/3317\nf 3281/4960/3367 3815/4264/3373 4490/5899/3332\nf 2350/6345/4082 2345/4211/3326 4487/5900/4081\nf 2353/6260/4494 2350/5220/4082 4485/4206/3321\nf 2381/6455/2380 2362/4198/3315 4476/5902/4490\nf 4023/5195/4078 3710/4858/3827 1830/1924/1629\nf 2526/3214/2518 228/239/219 2520/5903/2511\nf 2804/3551/2799 541/697/623 2789/3552/2781\nf 2767/6456/2773 494/725/637 2768/3704/2774\nf 2769/3686/2767 2785/3703/2780 496/744/655\nf 497/6457/666 493/2320/669 2770/5905/2768\nf 2766/5254/4096 493/2320/669 4039/3509/2769\nf 2971/4141/3271 2765/5906/2770 725/1202/1056\nf 3870/4976/3895 2978/5908/3899 1672/2086/1740\nf 3880/5025/3936 3923/5032/3943 1681/2105/1759\nf 3996/4150/3280 3929/5046/3956 1806/2182/1823\nf 3636/4716/3722 3635/4717/3723 1426/1770/1526\nf 245/1985/1663 2540/4923/3862 1702/2144/1789\nf 3590/4696/3712 1375/1738/1497 3609/4697/3703\nf 2822/3561/2806 2807/3550/2798 555/591/529\nf 2807/3550/2798 2792/3549/2788 538/573/516\n";

},{}],4:[function(require,module,exports){
module.exports={"upper_cheek_right": [0.00043710035970434546, 5.979343768558465e-06, 0.00019676645752042532, 0, 7.943639502627775e-05, 0, 0.0016520769568160176, 0.000948056869674474, 0.0006575910374522209, 0.004740183707326651, 0.0031691635958850384, 0.0023896880447864532, 0.008719237521290779, 0.006996753625571728, 0.005714369937777519, 0.01136161107569933, 0.010563120245933533, 0.009606387466192245, 0.014890660531818867, 0.014763763174414635, 0.014676986262202263, 0.01776362955570221, 0.019055217504501343, 0.020704954862594604, 0.01963300257921219, 0.023567069321870804, 0.02663465589284897, 0.021807702258229256, 0.028166579082608223, 0.03083597682416439, 0.024205731227993965, 0.03083597682416439, 0.03083597682416439, 0.024293914437294006, 0.03083597682416439, 0.03083597682416439, 0.019390517845749855, 0.029227280989289284, 0.03083597682416439, 0.018760787323117256, 0.014249146915972233, 0.009384670294821262, 0.004938483238220215, 0.0036025852896273136, 0.0023154316004365683, 0.00048136129043996334, 0.00036209708196111023, 0.00032054047915153205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03083597682416439, 0.03083597682416439, 0.03083597682416439, 0.007136606611311436, 0.00042322982335463166, 0, 0, 0.003972381353378296, 0.008425391279160976, 0.014768524095416069, 0.023794732987880707, 0.03083597682416439, 0.03083597682416439, 0.03083597682416439, 0, 0, 0.0003321528492961079, 0.0014253847766667604, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03083597682416439, 0.03083597682416439, 0.03194727748632431, 0.007814403623342514, 0.0003248571592848748, 0, 0, 0.0030682857614010572, 0.006685266736894846, 0.014057265594601631, 0.024837404489517212, 0.03083597682416439, 0.03083597682416439, 0.03083597682416439, 0, 0, 0.00020187205518595874, 0.0010009363759309053, 0, 0, 0, 0.011179253458976746, 0.0050242627039551735, 0.0015998814487829804, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.442909233963292e-07, 0.0004979288787581027, 0, 0, 0, 0, 0, 2.7100872102892026e-05, 0, 0, 0, 0.1417226642370224, 0.0, 0.023193977773189545, 0.03083597682416439, 0.03083597682416439, 0.007625707425177097, 0.002386218635365367, 0.00044830047409050167, 0.12652984261512756, 0.5724678635597229, 0.020116664469242096, 0.03083597682416439, 0.0319053940474987, 0.15464553236961365, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.0043615009635686874, 0.0007907935651019216, 0, 0.8133860230445862, 0, 0.01572299189865589, 0.031029613688588142, 0.04455703869462013, 0.5839868783950806, 0.806519627571106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0019831338431686163, 0.00014943299174774438, 0, 0.010580921545624733, 0.03295855596661568, 0.12386112660169601, 0.804489016532898, 0.0007560041849501431, 0, 0, 0.008015547879040241, 0.00011880491365445778, 0, 0, 0.011784994043409824, 0.07509830594062805, 0.09319882839918137, 0.11213992536067963, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0.00025770958745852113, 0.017351392656564713, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.010550335049629211, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 2.8549582566483878e-05, 0.0, 0.0, 0.003053700551390648, 0, 0, 7.965640543261543e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 1.647099817647657e-11, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.8284140229225159, 0.8441421389579773, 0.06286486238241196, 0.03180751949548721, 0.6846151351928711, 0.5166285037994385, 0.0, 0.6170223355293274, 0, 0.002174133900552988, 0.0, 0.0, 5.720050084631612e-13, 0, 1.6085512015706627e-06, 5.1169489652391764e-12, 5.40047665253951e-07, 0, 0, 9.298556933115543e-13, 1.7958052579702954e-13, 6.608333671942468e-12, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0959712717711293e-15, 8.452769463106885e-14, 0, 0.0, 4.606728613485399e-14, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004665257874876261, 0, 0.0019161936361342669, 0.00483748922124505, 0.008085481822490692, 0.01087329350411892, 0.013956275768578053, 0.016558468341827393, 0.018175195902585983, 0.019924739375710487, 0.020733710378408432, 0.019769417122006416, 0.015823615714907646, 0.007632500026375055, 0.002020579297095537, 0.00028912469861097634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.011265488341450691, 0.022369464859366417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009192662313580513, 0.01725618541240692, 0, 0, 0, 0, 0, 0, 0.027540069073438644, 0, 0, 0.004148272331804037, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0032112793996930122, 0, 0.00018169793474953622, 0.0005848768632858992, 0, 0, 0, 0, 0, 0, 2.0520037651294842e-05, 0, 0.004419014789164066, 0, 0, 0.01978323981165886, 0, 0, 0, 0, 0, 0, 0, 0, 0.0028173825703561306, 0, 0, 0.01525838952511549, 0, 0, 0, 0, 0, 0, 0.009704521857202053, 0.005461213644593954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 1.482511162442801e-11, 4.654715723972913e-07, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.012262703850865364, 0.0003269471926614642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00029099095263518393, 0.0012586554512381554, 0.0039711217395961285, 0.007445991039276123, 0.010862124152481556, 0.01445807982236147, 0.017844296991825104, 0.021403301507234573, 0.02446284145116806, 0.02854747325181961, 0.029114816337823868, 0.023203939199447632, 0.011342782527208328, 0.002913685515522957, 0.00034750052145682275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004606691363733262, 0.004674977622926235, 0.009016798809170723, 0.014771845191717148, 0.022026311606168747, 0.030417757108807564, 0.03083597682416439, 0.03083597682416439, 0.024375835433602333, 0.03083597682416439, 0.0061921626329422, 0.0005593433161266148, 0, 0, 0.03083597682416439, 0, 0, 0, 0, 0, 3.6069104680791497e-06, 0, 0.0018929775105789304, 0.021136224269866943, 0.0, 0.0, 0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.2779100835323334, 0.43425869941711426, 0.23905840516090393, 0, 0, 0, 0.617733359336853, 0.7919535636901855, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.03083597682416439, 0.03083597682416439, 0.023133767768740654, 0, 0, 0, 0, 0.03083597682416439, 0, 0.03083597682416439, 0.0, 0.040493518114089966, 0.0, 0.22305376827716827, 0, 0.4996326267719269, 0.15388096868991852, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03083597682416439, 0, 0.02041700668632984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03083597682416439, 0, 0.0011060975957661867, 0.00038953355397097766, 0, 0, 0, 0, 0.02709096111357212, 0, 0.03083597682416439, 0, 0.0, 0, 0.6752890348434448, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3124230206012726, 0.5179364681243896, 0.2435450255870819, 0.36327964067459106, 0.0, 0.0, 0, 0, 0, 0, 1.1267106856394093e-06, 0, 2.85900168819353e-05, 4.170186730334535e-05, 0, 0, 0, 0, 0.001756195561029017, 0.0004314829711802304, 0, 1.1295932381472085e-05, 0.0, 0.004042952787131071, 0.8865471482276917, 0.7331494688987732, 0.530402660369873, 0.866670548915863, 0.869251549243927, 0.7067803144454956, 0.6826177835464478, 0.7817677855491638, 0.6863837838172913, 0.2510787546634674, 0.29381000995635986, 0.3119928538799286, 0.049578554928302765, 0.060931526124477386, 0.06926709413528442, 0, 0, 0, 0, 0, 0.015645872801542282, 0, 0, 0.00018377375090494752, 0, 0, 0.28096243739128113, 0.08208417147397995, 0.4600132405757904, 0.4479147493839264, 0.27633988857269287, 0.22535747289657593, 0.0, 0.14246582984924316, 0.011620593257248402, 0, 0, 0.0007737206760793924, 0, 0, 0, 0.00025327506591565907, 7.371158972091507e-06, 0.0, 0.055924952030181885, 0, 0, 0, 7.666451837511773e-14, 8.211026397475507e-06, 0, 0.00036730681313201785, 0.0027313861064612865, 0.012913214974105358, 0, 0, 0, 0, 0, 0, 0.02275523543357849, 0.006776225753128529, 0.00760985491797328, 0.0, 1.4687998373119626e-05, 0.0, 0.0, 0.0, 0, 0, 0, 0.0016014426946640015, 0, 0, 0.3748670220375061, 0.07976362109184265, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0.0004287719202693552, 0.008398818783462048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 1.4627081013421361e-12, 3.2956058930722065e-06, 0, 0.00010901614587055519, 0.0014823339879512787, 0.0, 0.04740748554468155, 0.0280676931142807, 0.16293400526046753, 0.10091402381658554, 0.2478383183479309, 0.3488360047340393, 0, 0, 0, 0, 0.002041173167526722, 0.0010759670985862613, 0.00031692194170318544, 0.0001385156938340515, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.5349013209342957, 0.7289912700653076, 0.8699696063995361, 0.8986018300056458, 0.7792128324508667, 0.3103235065937042, 0.06135173141956329, 0.0, 0.0, 0.0, 0.19711479544639587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.004415870178490877, 0.00042865797877311707, 0.0, 0.0, 0.03874743729829788, 0.018051158636808395, 0.0, 0.0, 0.039763785898685455, 0.030998650938272476, 0.010338450782001019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0.0, 0.001250357017852366, 0.004491407424211502, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.541693048551679e-05, 0, 0.0, 0, 0.0, 0, 0.0, 0, 0.0, 0, 0.0, 0.0017436909256502986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 9.446514013689011e-06, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004063448868691921, 0.0005422306130640209, 0.025235144421458244, 0.0, 0.0, 0.024611759930849075, 0.021609297022223473, 0.0, 0.0, 0.0, 0.03103814087808132, 0.0, 0.0, 0.023801403120160103, 0.008811227977275848, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.01028482336550951, 0.0, 0.0, 0.01997106522321701, 0.0019118643831461668, 0.0038666927721351385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.02318967692553997, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 4.627807720680721e-05, 0, 0.0, 0, 0.0, 0, 0, 0.000957627547904849, 0, 0.0, 0, 0.0, 0.0, 0.0, 9.012271766550839e-05, 0.00013670306361746043, 0, 0, 0.0, 0, 0.0, 0, 0.0, 0, 0.0003056225832551718, 0, 6.828217738075182e-05, 0.0, 0.0, 0, 3.221480073989369e-05, 0.0004540031950455159, 0.014194680377840996, 0.011212768964469433, 0.008693847805261612, 0.004735701717436314, 0.0017737062880769372, 0, 0, 0, 0, 0, 0, 0, 0.02153666689991951, 0, 0.0002813589235302061, 0, 0.002069110283628106, 0, 0.008353467099368572, 0.016987863928079605, 0.020757712423801422, 0.01983609050512314, 0.017927261069417, 0.016312655061483383, 0, 0.021231969818472862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "upper_cheek_lefte-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0016561788506805897, 0.0009987415978685021, 2.2548390916199423e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00047008824185468256, 0.0016150780720636249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0038939849473536015, 0.0024515273980796337, 0.0006755117210559547, 0, 0, 0, 0, 0, 0, 0, 0, 0.00022024608915671706, 0.0009769282769411802, 0.003437369130551815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007154963910579681, 0, 0, 0.0005143481539562345, 0.0017493411432951689, 0, 0, 0, 0.001953715458512306, 0.4049246311187744, 0, 0.0008248775266110897, 0.003853432834148407, 0.018934300169348717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5998467803001404, 0, 0, 0.0011468863813206553, 0.0074054887518286705, 0.24515710771083832, 0.7590180039405823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0015073216054588556, 0.012638866901397705, 0.49474331736564636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0007915778551250696, 0.05191424489021301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.8844017176888883e-05, 2.3228112695505843e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.51203770050779e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.144819730659947e-05, 0, 0, 0, 1.0798241419252008e-05, 0, 0, 0, 0.08422701060771942, 0.09611175209283829, 0.007802014704793692, 0, 0, 0, 0, 0, 1.759572569426382e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.0989389668102376e-05, 0.0002405015693511814, 0.00014737747551407665, 0, 0, 0, 3.2784679206088185e-05, 0, 0, 0, 0.4351184070110321, 0.9042820930480957, 0.010514945723116398, 0.008322873152792454, 0.023883920162916183, 0.0347876101732254, 0, 0.014649340882897377, 0, 0.09054095298051834, 0, 0, 0, 0, 0.002483046380802989, 0, 2.8738037144648843e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0132066563528497e-05, 8.10924539109692e-05, 0.0004151217290200293, 0.00016339108697138727, 5.101932038087398e-05, 1.4058627129998058e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4492337615811266e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000709270010702312, 4.9709517043083906e-05, 0, 0.00021576623839791864, 0, 0, 0, 0, 0.0006304195267148316, 0, 0, 0, 0, 0, 0, 0, 0, 0.1444607526063919, 0, 0, 0, 0, 0, 0, 0, 0, 0.0014865275006741285, 0.20095056295394897, 0, 0, 0, 0.6017121076583862, 0.8726842403411865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010109951253980398, 0, 0.0020098492968827486, 0, 0.009784308262169361, 0, 0.021206537261605263, 0, 0.21276147663593292, 0.011122293770313263, 0, 0, 0, 0, 0, 0, 0.004504680167883635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00041718356078490615, 0, 0, 0, 0.5981799960136414, 0, 0, 0, 0, 0, 0.0025837915018200874, 0.0003895508707500994, 0.0004902395303361118, 0.0005320854834280908, 0.00017542121349833906, 1.0246889360132627e-05, 0, 0.0004603769921232015, 0.001820888021029532, 0.00020884000696241856, 0.04101619869470596, 0.36250734329223633, 0.5776103138923645, 0.32496291399002075, 0.5852675437927246, 0.0011596514377743006, 0.002106491941958666, 0, 0, 0, 0, 4.939648351864889e-05, 0.0004392209812067449, 0.001416581217199564, 0, 0, 0, 0, 0.005242312327027321, 0.0007887028041295707, 3.854458554997109e-05, 0.01502109132707119, 0.010723099112510681, 0.8684065341949463, 0.6582010984420776, 0.585771381855011, 0.8912537693977356, 0.840718150138855, 0.4810410141944885, 0.42448583245277405, 0.43971461057662964, 0.27643492817878723, 0.019251618534326553, 0.03038085252046585, 0.015283635817468166, 0.0017396006733179092, 0.0007326540653593838, 6.551439582835883e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005315243732184172, 0, 0.10581125319004059, 0.30435654520988464, 0.584832489490509, 0.3281101584434509, 0.0065611074678599834, 0.16391749680042267, 0, 0, 0.0032819565385580063, 0, 0, 0, 0.0006973152630962431, 4.4529013393912464e-05, 0.006178353447467089, 0, 0, 0, 0, 0, 3.504007327137515e-05, 0.0008590912912040949, 0.006725768093019724, 0.01898706890642643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004147868603467941, 0, 0.008318502455949783, 0.007934452034533024, 0.0068704537115991116, 0, 0, 0.0010012614075094461, 0, 0, 0.0003831939247902483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006700754631310701, 0.03749167546629906, 0.01296920608729124, 0.04678764566779137, 0.03608090430498123, 0, 0, 0, 0, 3.559862670954317e-05, 0.0008307151147164404, 0.006968244910240173, 0.0333053283393383, 0.08300842344760895, 0.1257212609052658, 0.26133495569229126, 0, 0.22874031960964203, 0.2851283848285675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5852923393249512, 0.7206977009773254, 0.8383846282958984, 0.8475947380065918, 0.454990953207016, 0.03258494287729263, 0.0015681181102991104, 0, 0.021295985206961632, 0.0027260244823992252, 0.24762696027755737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "ear_lobe_lefte-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.587759708054364e-05, 0.04525042697787285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004214946646243334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04525042697787285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0013733762316405773, 0.03709029778838158, 0.006082247942686081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00041765611968003213, 0, 0, 0, 0, 0, 0.03994544595479965, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01419310923665762, 0.04525042697787285, 0, 0, 0, 0, 0, 0, 0.11553778499364853, 0, 0, 0, 0, 0, 0.17037487030029297, 0.0020222896710038185, 0, 0, 0, 0, 0, 0, 0.8184092044830322, 0.6239416003227234, 0.004587581846863031, 0.051064521074295044, 0.175609290599823, 0, 0, 0, 0.09153104573488235, 0, 0, 0, 0, 0, 0.1581011712551117, 0.00631890632212162, 0, 0, 0, 0, 0, 0, 0.6648337841033936, 0.4799148440361023, 0.00021510591614060104, 0.04413843899965286, 0.11371032148599625, 0, 0, 0, 0.11711087077856064, 0, 0, 0, 0, 0, 0.13709087669849396, 0.007101546507328749, 0, 0, 0, 0, 0, 0, 0.1857411414384842, 0.09164034575223923, 0.00022551832080353051, 0.03368472680449486, 0.050758179277181625, 0, 0, 0, 0.018540196120738983, 0, 0, 0, 0.00029709702357649803, 0, 0.02974623441696167, 0.08733682334423065, 0, 0, 0, 0, 0, 0, 0.05734185129404068, 0.060058899223804474, 0.002006004797294736, 0.03885306417942047, 0.048485927283763885, 0, 0, 0, 0.0007497743354178965, 0, 0, 0, 0.003202830208465457, 0.0001365026691928506, 0.015356368385255337, 0, 0, 0, 0, 0, 0, 0, 0.010803503915667534, 0.002926026238128543, 0.023983897641301155, 0, 0.0003330508479848504, 0, 0, 0, 0, 0, 0.00040112866554409266, 7.111867307685316e-05, 0, 0, 0.00023198399867396802, 0.0004079140489920974, 0, 0, 0, 0, 0, 0, 0, 0.0003320408286526799, 0.01374030765146017, 0.03321659564971924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.017775844782590866, 0, 0.003106711432337761, 0, 0.009383956901729107, 0, 0.023709187284111977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.026615913957357407, 0.029235122725367546, 0, 0, 0.04179271683096886, 0, 0, 0.011561875231564045, 0.01874549500644207, 0, 0, 0, 0, 8.12785656307824e-05, 0, 0.00033940086723305285, 0.0024096874985843897, 0.002163391327485442, 0, 0, 0.005570196080952883, 0, 0, 0, 0, 0, 0.04998726397752762, 0, 0, 0, 0, 0, 0, 0, 0.06464266031980515, 0, 0, 0.0014638971770182252, 0, 0, 0, 3.556421506800689e-05, 0, 0.007024834398180246, 0.08670120686292648, 0, 0, 0, 0, 0, 0.038999155163764954, 0, 0, 0, 0.02356594242155552, 0, 0, 0, 0.030233807861804962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.026563145220279694, 0, 0, 0.07296693325042725, 4.145855564274825e-05, 0, 0, 0, 0, 0, 0, 0, 0.15495051443576813, 0.0026071411557495594, 0.00045790517469868064, 0, 0.04582563787698746, 0, 0.05665365234017372, 0.00014569636550731957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002633952535688877, 0, 0, 0, 0, 0, 0, 0, 0, 0.035400282591581345, 0, 0, 0.024249425157904625, 0, 0, 0.00016115653852466494, 0.0009974311105906963, 0, 0, 0.02645866386592388, 0, 0.08696982264518738, 0, 0.02386976219713688, 0, 0, 0, 0.014606286771595478, 0.006656524259597063, 0, 0, 0.014005049131810665, 0, 0, 0, 0.03148182854056358, 0, 0.0001881524221971631, 0, 0, 0.1548967808485031, 0.8466436862945557, 0.2903014123439789, 0.3215634226799011, 0, 0, 0.06566178798675537, 0, 0, 0, 0, 0, 0.8793351650238037, 0.04525042697787285, 0, 0.04525042697787285, 0.04525042697787285, 0, 0.04525042697787285, 0, 0, 0.00010516305337660015, 0.12573552131652832, 0, 0, 0, 0.005215387791395187, 0, 0, 0, 0.24289420247077942, 0.06291226297616959, 0, 0.0024842126294970512, 0, 0, 0, 0.16024717688560486, 0, 0.0030822872649878263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "lower_cheek_left": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005595134571194649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0028722952120006084, 0, 0, 0, 0, 0, 0.11154568195343018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.15154846012592316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00046739919343963265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0008457718649879098, 0, 0, 0.00268343067727983, 0, 0, 0, 0.01099376566708088, 0, 0, 0.01737445779144764, 0.009409577585756779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02734091877937317, 0.14055414497852325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08407265692949295, 0, 0, 0, 0, 0, 0, 0, 0.7428146600723267, 0.6709080934524536, 0.25262317061424255, 0, 0, 0, 0, 0.004857741761952639, 0.00280564371496439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.015183749608695507, 0, 0, 0.0010140419472008944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05774350091814995, 0.03947054594755173, 0.07911168038845062, 0.07697553932666779, 0, 0, 0, 0, 0.2854922413825989, 0, 0.015693284571170807, 0, 0, 0, 0, 0, 0, 0, 0.3260132074356079, 0, 0.0007450653938576579, 0, 0, 0.2848304808139801, 0, 0, 0, 0, 0, 0, 0, 0.0014935325598344207, 0.00022186609567143023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.7472310673838365e-06, 0.01955689862370491, 0, 0, 0, 0, 7.3912133302656e-07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4220087198045803e-06, 0.0031230782624334097, 0.022732527926564217, 0.06387881934642792, 0.04816967993974686, 0.007593870162963867, 0.05588579922914505, 0.011170069687068462, 0.0009081471944227815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006076144985854626, 0.10565028339624405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1558258831501007, 0, 0, 0, 0, 0, 0, 0, 0, 0.00020152420620433986, 0, 0, 0, 0, 0.3473197817802429, 0.28185173869132996, 0.1295393407344818, 0.2854922413825989, 0, 0, 0, 0, 0, 0.19514501094818115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1617434024810791, 0, 0.05887861177325249, 0, 0, 0.0031236198265105486, 0.4815713167190552, 0.4227258265018463, 0.18916460871696472, 0.19032815098762512, 0.19325584173202515, 0.20331847667694092, 0.03915372118353844, 0.15048660337924957, 0.31291308999061584, 0.2854922413825989, 0.48074162006378174, 0.7773481011390686, 0.7179834246635437, 0.7880614995956421, 0.7371695637702942, 0.2854922413825989, 0.24401091039180756, 0, 0, 0, 0, 0, 0.10499834269285202, 0.1914462000131607, 0, 0, 0, 0, 0.28386351466178894, 0.09847617149353027, 0, 0.5397149324417114, 0.4425560235977173, 0.11153353750705719, 0.36152422428131104, 0.5330774188041687, 0.0026258856523782015, 0.1384410858154297, 0.18767698109149933, 0, 0.000115327158709988, 0.0015249146381393075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.21019801497459412, 0.506208598613739, 0.8064135909080505, 0.31302711367607117, 0.8256758451461792, 0, 0, 0.22991064190864563, 0, 0, 0, 0.10596434772014618, 0, 0.3822362720966339, 0, 0, 0, 0, 0, 0, 0.034141816198825836, 0.3123458921909332, 0.7669872045516968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.013943328522145748, 0, 0.2854922413825989, 0.28554514050483704, 0.2660659849643707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.16221751272678375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6044877767562866, 0.7948324084281921, 0.6019361615180969, 0.7366468906402588, 0.7257136106491089, 0, 0, 0, 0, 0, 0.0004250535275787115, 0.304415225982666, 0.7952377200126648, 0.7921206951141357, 0.7706619501113892, 0.7832816243171692, 0, 0.49673992395401, 0.13862766325473785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2854922413825989, 0.32711654901504517, 0.7525441646575928, 0.4244993031024933, 0.24889196455478668, 0.09516407549381256, 0, 0, 0, 0.14450354874134064, 0.7654690146446228, 0.6434463262557983, 0.7972350716590881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "chin_center": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006105484208092093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010059424676001072, 0.017030639573931694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05801539495587349, 0.0001393260172335431, 0, 0, 0, 0, 0.084538035094738, 0.0004548250581137836, 0, 0, 0, 0, 0.07744429260492325, 0.00012018375127809122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09516407549381256, 0.09516407549381256, 0.09516407549381256, 0.09516407549381256, 0, 0.5278960466384888, 0.3539007604122162, 0.149683877825737, 0.00309681030921638, 0.022456731647253036, 0.18122102320194244, 0.6871430277824402, 0.19046497344970703, 0.09984259307384491, 0, 0, 0, 0, 0, 0, 0, 0.009536822326481342, 0.10247202217578888, 0.22383980453014374, 0, 0.13026979565620422, 0.6204506158828735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.21010755002498627, 0.004954556934535503, 0.008620545268058777, 0.00227952073328197, 0.001743384636938572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1443776786327362, 0.010623360984027386, 8.05604358902201e-05, 0, 0, 0, 0.044185440987348557, 0.09516407549381256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.11633162945508957, 0.3210505247116089, 0.013983088545501232, 0.2208164930343628, 0.18094095587730408, 0.4760965406894684, 0.6570942401885986, 0.1111459732055664, 0.21816104650497437, 0.16973808407783508, 0.00547882542014122, 0, 0, 0.008421815000474453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09482542425394058, 0.0951698049902916, 0.12090887129306793, 0, 0.09516407549381256, 0.09516407549381256, 0.04634547606110573, 0, 0, 0, 0, 0.001147173112258315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00020565345766954124, 0.00909225270152092, 0.04562846198678017, 0.1333533674478531, 0.17398251593112946, 0.006033053621649742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3988027572631836, 0.22428573668003082, 0.19361436367034912, 0.10785235464572906, 0.09516407549381256, 0.41671907901763916, 0.034991733729839325, 0.0012907895725220442, 0.22355523705482483, 0.39061832427978516, 0.6462156772613525, 0.6925413608551025, 0.017397915944457054, 0.09713003039360046, 0.704540491104126, 0.10994069278240204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2005324512720108, 0.7031010389328003, 0.0074083139188587666, 0.3633427917957306, 0.7090207934379578, 0.5848552584648132, 0.09516407549381256, 0.09682562947273254, 0, 0, 0.7723187804222107, 0.5749508142471313, 0.35194826126098633, 0.25822684168815613, 0.13646140694618225, 0.7625797986984253, 0.11242364346981049, 0.02250671200454235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7063196301460266, 0.5027749538421631, 0.3318130373954773, 0.28934791684150696, 0.17657653987407684, 0.7064891457557678, 0.14839425683021545, 0.04261112958192825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009522560983896255, 0.01609189622104168, 0.015893427655100822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001815424533560872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004110127338208258, 0.0025584083050489426, 0.017811404541134834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05162394419312477, 0.0005355917965061963, 0, 0, 0, 0, 0.07710829377174377, 0.0005140562425367534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09516407549381256, 0.09666810929775238, 0.09740493446588516, 0, 0.4523116946220398, 0.11996462941169739, 0.19032815098762512, 0.004296497441828251, 0.02398853935301304, 0.1905735582113266, 0.11188973486423492, 0, 0, 0, 0, 0, 0, 0, 0, 0.0009131004917435348, 0.16105090081691742, 0, 0.09516407549381256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006277349311858416, 0.0004138487274758518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00925335381180048, 0, 0, 0, 0, 0, 0.03921019658446312, 0.09516407549381256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06267744302749634, 0.10555645823478699, 0.0002107389154843986, 0.09516407549381256, 0.049757782369852066, 0.22135615348815918, 0.6861205101013184, 0.018964391201734543, 0.09516407549381256, 0.07521099597215652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05413070693612099, 0.034396879374980927, 0, 0.013632303103804588, 0.002358900848776102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004299340071156621, 0.006443627644330263, 0.006475487723946571, 0.0006740285898558795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00023705490457359701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.42221659421920776, 0.24090619385242462, 0.19398045539855957, 0.12363146245479584, 0.09516407549381256, 0.027406936511397362, 0.001641280367039144, 0.2970814108848572, 0.33644798398017883, 0.7004562020301819, 0.7029821872711182, 0.011911340989172459, 0.09516407549381256, 0.09980106353759766, 0, 1.4878573892929126e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.19352051615715027, 0.005883019417524338, 0.2951084077358246, 0.7166884541511536, 0.5769633054733276, 0.06660579890012741, 0.09553907811641693, 0, 0, 0.7599613070487976, 0.47990962862968445, 0.29293254017829895, 0.19785480201244354, 0.09634963423013687, 0.08179298788309097, 0.01087935734540224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6996921896934509, 0.38301846385002136, 0.21740619838237762, 0.10566920042037964, 0.09516407549381256, 0.03482593595981598, 0.0033138971775770187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008250902406871319, 0.014041555114090443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "brow_lefte-05, 0.0012193602742627263, 0.002319705206900835, 0, 0.00010447325621498749, 0.0003671702870633453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.015728166326880455, 0.10656294226646423, 0.12813544273376465, 0.0072142439894378185, 0.06302843987941742, 0.08572655916213989, 0.00115251075476408, 0.017854375764727592, 0.05825313180685043, 0, 0, 5.527679968508892e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.17608067393302917, 0.16511449217796326, 0.06691531836986542, 0.021111303940415382, 0.005087988916784525, 0.000500342866871506, 0, 0.20425021648406982, 0.21483179926872253, 0.18738707900047302, 0.18467116355895996, 0.18454700708389282, 0.12692219018936157, 0.1121656745672226, 0.006302471738308668, 0, 0, 0, 0.00020200978906359524, 0.001722592394798994, 0, 0.028648292645812035, 0.017832107841968536, 0.0005295476876199245, 0, 0, 0.07654522359371185, 0.018181683495640755, 0.00039573447429575026, 0, 0, 0.097737155854702, 0.005770853254944086, 0, 0, 0, 0.10083247721195221, 0, 0.000813487742561847, 0, 0, 0, 0.01807892881333828, 0, 0, 0, 0, 0, 0.0019173951586708426, 0, 0, 0, 0, 0, 0, 0, 0.1871381402015686, 0.13521450757980347, 0.09433240443468094, 0.03129345923662186, 0.005889835301786661, 0.00044321586028672755, 0, 0.2415725588798523, 0.2470654845237732, 0.2546057105064392, 0.2501886188983917, 0.22251078486442566, 0.15194179117679596, 0.181642085313797, 0.11204318702220917, 0.13474556803703308, 0.26656392216682434, 0, 0, 0, 0.16939395666122437, 0.16787564754486084, 0.13491733372211456, 0.024863984435796738, 0.6352450251579285, 0.5888203382492065, 0.6239736080169678, 0.4735341966152191, 0.3298027217388153, 0.30183541774749756, 1.0, 0.9920271635055542, 1.0, 0.7419875860214233, 0.6417255997657776, 0.2270839810371399, 0, 0, 0, 0.04377926513552666, 0.005830422509461641, 0.00029338011518120766, 0.11409154534339905, 0.21587443351745605, 0.3486373722553253, 0, 0, 0.04398290812969208, 0.0036372137255966663, 0, 0, 0, 0, 0, 0, 0, 0, 0.8139567971229553, 0.7139036059379578, 0.795332670211792, 0.5979649424552917, 0.4183596074581146, 0.17042385041713715, 0.11600688099861145, 0.22479188442230225, 0.3335510790348053, 0, 0, 0.030897261574864388, 0.0009808579925447702, 0, 0, 0, 0.0737069845199585, 0.299423485994339, 0.20599307119846344, 0.30831292271614075, 0.25465595722198486, 0, 0.11645899713039398, 0.16787564754486084, 0.10975529253482819, 0.13859236240386963, 0.1319957673549652, 0.14229553937911987, 0.06427592039108276, 0.05978837609291077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1132776066660881, 0.20519468188285828, 0.21301408112049103, 0.013512282632291317, 0, 0, 0, 0.10909350961446762, 0.11974615603685379, 0.13958029448986053, 0.002378807868808508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0014652118552476168, 0, 0.010832691565155983, 0.00020118792599532753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.030115578323602676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07162543386220932, 0, 0.06050889194011688, 0.05604937672615051, 0.027567856013774872, 0.007236055098474026, 0.0011560192797333002, 2.879667135857744e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008888947777450085, 0.0019951723515987396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.758495096117258ee-05, 0.0013338134158402681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.019472893327474594, 0.0668388232588768, 0.0809568390250206, 0.07351680099964142, 0.07260062545537949, 5.494080687640235e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.019555900245904922, 0.07098750025033951, 0.03266226872801781, 0, 0, 0, 0.005171505734324455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.046967800706624985, 0.07275727391242981, 0.0013950334396213293, 0.008846904151141644, 0.028218770399689674, 0.05642625689506531, 0.06170360743999481, 0.008600120432674885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006592217250727117, 0, 0.0031557718757539988, 0, 0, 0, 0, 0, 7.056458707666025e-05, 0, 0], "nose_tip": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.17456290125846863, 0.197761669754982, 0.19180983304977417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.25230610370635986, 0.314836710691452, 0.32884281873703003, 0.32884281873703003, 0.10888635367155075, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4194974899291992, 0.5212406516075134, 0.5155784487724304, 0.414885938167572, 0.355640172958374, 0.33002743124961853, 0.123094342648983, 0.1772373914718628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3378749191761017, 0.3521585166454315, 0.36135968565940857, 0.5921334624290466, 0.7947151064872742, 0.7908362746238708, 0.8041296005249023, 0.8590649366378784, 0.8663108944892883, 0.5168251395225525, 0.5657915472984314, 0.8244938850402832, 0.7991564273834229, 0.7543628215789795, 0.3876135051250458, 0.3716942071914673, 0.6641806960105896, 0.6519163846969604, 0.6460468769073486, 0.13316968083381653, 0.05766168236732483, 0.30841049551963806, 0.28249773383140564, 0.2745973467826843, 0.0008526816382072866, 1.7582016880623996e-05, 0.01712082512676716, 0.00020248504006303847, 3.3756575703591807e-06, 0.0, 0.0, 0.0, 0.06869494169950485, 0.0, 0.0, 0.0, 0.0, 0.0, 0.40304991602897644, 0.4755808413028717, 0.38839468359947205, 0.1326034516096115, 0.002389066619798541, 0.0, 0.0, 0.0, 0.21743138134479523, 0.0, 0.0, 0.13039514422416687, 0.0, 0.0, 0.00033796561183407903, 5.51861717212887e-07, 2.296091376925713e-13, 0.0, 0.0, 0.0, 0.0, 0.38017022609710693, 0.3458247184753418, 0.202104389667511, 0.13035142421722412, 0.03965160995721817, 0.0, 0.0, 0.0, 6.235867145598e-17, 1.012998548075001e-17, 0.0, 0.0, 0.0, 0, 0.0, 0, 0.23402100801467896, 0.24591511487960815, 0.21235795319080353, 0.25785812735557556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0005485904403030872, 0.008337161503732204, 0.029854990541934967, 0.07308845221996307, 0.05587054416537285, 0.0020837108604609966, 0.0, 9.938494622474536e-05, 0.004035532474517822, 2.6403429728816263e-05, 0.0055274683982133865, 0.025052309036254883, 0.017844388261437416, 0.01956101879477501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.5324969574857376e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5400773286819458, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.45761576294898987, 0.0, 0.8520592451095581, 0.689119279384613, 0.849772036075592, 0.0, 0.0, 0.15474292635917664, 0.0, 0, 0, 0, 0.0028512077406048775, 0.003545162035152316, 0.003110472811385989, 0, 0, 0.0, 0, 0.0, 0.46208828687667847, 6.978133552221731e-15, 0.0, 0.0, 1.426394788950347e-07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0.03905106708407402, 0.0018185526132583618, 0.0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0.6478469967842102, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.04518194496631622, 0.0, 0.14878547191619873, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 7.853178090799968e-16, 1.3414327970900225e-13, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1404533088207245, 0.1843145340681076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.27409985661506653, 0.32884281873703003, 0.32884281873703003, 0.194270059466362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.26436373591423035, 0.3035116493701935, 0.30290350317955017, 0.315902441740036, 0.31203874945640564, 0.2954825758934021, 0.2028186023235321, 0.20961342751979828, 0, 0, 0, 0, 0, 0, 0, 0.32884329557418823, 0.33868175745010376, 0.435314804315567, 0.7253645658493042, 0.7761874794960022, 0.854749321937561, 0.3437494933605194, 0.5292782187461853, 0.7947623133659363, 0.7820473313331604, 0.27481552958488464, 0.2805873453617096, 0.6454989910125732, 0.6406705379486084, 0.10799035429954529, 0.08350308984518051, 0.2681475579738617, 0.25150299072265625, 0.0008723466889932752, 0.00029014659230597317, 0.0024750917218625546, 3.2699870189389912e-06, 0, 0, 0, 0.0, 0.0016807075589895248, 0, 0, 0, 0, 0.2260267287492752, 0.28182390332221985, 0.20983903110027313, 7.580235978821293e-05, 8.873848128132522e-05, 0.004864734597504139, 0, 0, 0.14118783175945282, 0, 0, 0.2007310539484024, 0, 0, 0.00015931090456433594, 0.0, 0, 0.0, 0.001845007762312889, 0, 0.19729788601398468, 0.22390036284923553, 0.13867512345314026, 3.222006853320636e-05, 1.8337870642426424e-05, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.14352427423000336, 0.1625734567642212, 0.07967276126146317, 0.13964438438415527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.49152159690856934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3108823001384735, 0, 0.8284965753555298, 0.5706036686897278, 0, 0, 0.19786056876182556, 0, 0, 0, 0, 0.006448748521506786, 0.008831074461340904, 0, 0, 0, 0, 0, 0.36633145809173584, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0319691076874733, 0, 0, 0, 0, 0.06667742878198624, 0.03203877806663513, 0, 0.015251901932060719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0019508467521518469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0012347963638603687, 0, 0.09149017930030823, 3.4471877370378934e-06, 0.10478381812572479, 0.0063524749130010605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "nose_bridge": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003637484915088862, 3.0637231247965246e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.132015965296887e-05, 6.090653550927527e-05, 4.534077015705407e-05, 0.0004298975400160998, 0.0009482229361310601, 7.158963853726164e-05, 0.0010741034056991339, 0.0029989592730998993, 9.17123270482989e-06, 0.0011935251532122493, 0.0035317938309162855, 0, 0, 0, 0, 0.0, 0.0, 0.019097743555903435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.002372464630752802, 0.017804615199565887, 0.03531640022993088, 0.0377262644469738, 0.0, 0.0, 0.0, 8.511338819516823e-05, 0.010539299808442593, 0.038076724857091904, 0.0504559651017189, 0.054403673857450485, 0.001098606619052589, 0.020255684852600098, 0.04539071023464203, 0.08440573513507843, 0.08805189281702042, 0.0042976317927241325, 0.043556053191423416, 0.05479748919606209, 0.1326020359992981, 0.15204529464244843, 0.003315779147669673, 0.6854974031448364, 0.05669346824288368, 0.0854525938630104, 0.22672151029109955, 0.4397576153278351, 0.020290877670049667, 0.8384786248207092, 0.05319521948695183, 0.0932365283370018, 0.3355153203010559, 0.6332386136054993, 0.03615749254822731, 0.9988692998886108, 0.05230769142508507, 0.07654663175344467, 0.31588348746299744, 0.6939327716827393, 0.033798698335886, 0, 0, 0, 0, 0.0, 0.0, 0.04804159700870514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0.05157007649540901, 0.49783599376678467, 0.8088670969009399, 0.9926386475563049, 7.428781827911735e-05, 0.0001356913853669539, 1.1307916793157347e-05, 0.010070857591927052, 0.018621599301695824, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.19575896859169006, 0, 0.016020487993955612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08131546527147293, 0.25225457549095154, 0.4433210492134094, 0.7156469225883484, 0.9473322629928589, 0.18216489255428314, 0.11089630424976349, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0.5037376284599304, 0, 0, 0, 0, 0, 0.00018718100909609348, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 3.2477494187332923e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004660230595618486, 0.007723538670688868, 0.023800073191523552, 0.09799531102180481, 0.12170100957155228, 0.21699436008930206, 0.10089576989412308, 0.1512119174003601, 0.03282348811626434, 0.06307482719421387, 0.013343147933483124, 0.00017689631204120815, 0.0, 0.0007593883201479912, 0.0, 0.36038315296173096, 0.5975480675697327, 0.8724077343940735, 0.1575368344783783, 0.28278833627700806, 0.3802717924118042, 0.06441058218479156, 0.0814676433801651, 0.08912403136491776, 0.007043879944831133, 0.008405990898609161, 0.03321245685219765, 0.04568471387028694, 0.03163186460733414, 0.0, 0.002089985879138112, 0.010340534150600433, 0.004915458615869284, 0.005019661504775286, 0.0030044782906770706, 0.0006550982361659408, 0.0006886112969368696, 0.00035463509266264737, 0.00030942753073759377, 0.0007967732381075621, 5.593074092757888e-06, 0.00014348755939863622, 4.169337262283079e-05, 0.0, 0.0, 0.00018105635535903275, 6.928117363713682e-05, 0.0009848108747974038, 0.0004437023017089814, 0.00010086855036206543, 0.00016311199578922242, 3.9348858990706503e-05, 0.0, 0.004862195812165737, 0.0, 0.0, 0.007706176023930311, 0.005587839987128973, 0.0026446906849741936, 0.0, 0.0004030092095490545, 0.01932707615196705, 0.0010897018946707249, 0.0001283377641811967, 0.06445779651403427, 0.015517164953052998, 0.01088105421513319, 0.0, 0.0, 0.0, 0.0014507747255265713, 2.4933124223025516e-05, 0.0015313097974285483, 0.001065769698470831, 7.998922956176102e-05, 5.212043834035285e-05, 0.0, 9.876093827188015e-05, 0.021771417930722237, 0.011791639029979706, 0.003461599349975586, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0023988126777112484, 0.0018118431326001883, 6.30403810646385e-05, 0.004039368592202663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0028380060102790594, 0, 3.5092391044599935e-05, 0.001838158117607236, 0, 0, 0, 8.05774616310373e-05, 7.110414298949763e-05, 0.0, 0.007051683496683836, 0, 0, 6.1571947298944e-05, 0, 0.00011292211274849251, 0.00013076129835098982, 9.65580838965252e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.42209431529045105, 0, 0, 0, 0, 0, 0, 0, 0.08385509997606277, 0, 0.1257868856191635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.690423444728367e-06, 0.00014549974002875388, 0.0002785276446957141, 0.00023065089771989733, 0.0, 0.013220852240920067, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.003082266077399254, 0.0, 0, 0.0, 0.01146772876381874, 0.00037799839628860354, 0.004175949841737747, 0, 0, 0, 0, 4.967005140521508e-10, 0.06417497992515564, 0.002447273349389434, 0.16655999422073364, 0.10903918743133545, 0.20960593223571777, 0.007830007001757622, 0.0035315125714987516, 0.033487625420093536, 0.03117361105978489, 1.430464271834353e-05, 0, 0.014907211065292358, 0.7895398139953613, 0.9977585673332214, 0.593279242515564, 0.017086846753954887, 0, 2.9037099391615584e-09, 1.5821711996100163e-11, 0.02285579778254032, 0.24454855918884277, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0009639297495596111, 0, 0.016232136636972427, 0, 0.07483897358179092, 0, 0.09375005215406418, 0, 0.30371102690696716, 0, 0, 0.09289642423391342, 0.06868815422058105, 0.0042509823106229305, 0.031294021755456924, 0, 0, 0, 0.14372795820236206, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0.011526977643370628, 0.06534314900636673, 0, 0.5630112290382385, 0, 0.0, 0, 0, 0.0013981566298753023, 0, 0, 0, 0, 0, 0, 0.0052878218702971935, 4.967005140521508e-10, 1.5821711996100163e-11, 0, 1.5821711996100163e-11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00015481829177588224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08157531172037125, 0.001523075276054442, 0, 0.004717825911939144, 0.04327288642525673, 0.07678280770778656, 0.07609307765960693, 0.21196338534355164, 0.2075992375612259, 0.29310035705566406, 0.41451719403266907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0067269885912537575, 0.017086846753954887, 0.008187241852283478, 0.06230650469660759, 0.09617523849010468, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.626121088788462e-12, 2.7170492418460146e-12, 2.3335337568514136e-13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.031050144069013e-06, 1.235868353433034e-06, 1.4104101353495935e-07, 7.954792090458795e-05, 4.840415567741729e-05, 1.6414328456448857e-06, 0.002461708150804043, 0.0009730762103572488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.1042127375258133e-06, 1.2766090549121145e-05, 0.0, 1.0059668056783266e-05, 5.024339770898223e-05, 0.0, 7.143216862459667e-06, 4.09842687076889e-05, 0, 0, 0, 1.3320041944098193e-05, 0.0003222660452593118, 0.007248237729072571, 0.000413955538533628, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0.0, 8.470188913634047e-05, 0.0007526851259171963, 0.0014982365537434816, 0.0017620706930756569, 0.0, 0.0, 0.0, 0.0, 0.0008377906633540988, 0.0032115881331264973, 0.007124677300453186, 0.009904496371746063, 1.6480071280966513e-05, 0.0035461517982184887, 0.011128383688628674, 0.013213017955422401, 0.012671399861574173, 0.0004991546738892794, 0.009516187012195587, 0.016886582598090172, 0.02446506917476654, 0.04217522218823433, 0.0015719047514721751, 0.5578849911689758, 0.02645736001431942, 0.038976363837718964, 0.12920978665351868, 0.26406291127204895, 0.006219433154910803, 0.8578320145606995, 0.03633121773600578, 0.0636979416012764, 0.23569102585315704, 0.6155318021774292, 0.029786311089992523, 0, 0, 0, 3.269631997682154e-05, 0.0008481107070110738, 0.011383160017430782, 0.005641837604343891, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0.016930101439356804, 0.40326371788978577, 0.7760661244392395, 0.0, 0.00013918580953031778, 0.0007948838174343109, 0.003973471932113171, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.16833652555942535, 0, 0.0001357521250611171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0122652817517519, 0.2499750554561615, 0.35991448163986206, 0.7377767562866211, 0.1505412459373474, 0.000307000387692824, 0, 0, 0, 0, 0.0, 4.951508003614435e-07, 0, 0, 0, 0, 0.373203843832016, 0, 0, 0, 0, 0, 2.1497695342986844e-05, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0013120396761223674, 0.0018267263658344746, 0.008437590673565865, 0.1167750358581543, 0.18342825770378113, 0.20394910871982574, 0.07737266272306442, 0.13087379932403564, 0.002864372916519642, 0.005071415565907955, 0.000107133062556386, 0.0, 0.0, 0.0011326288804411888, 0.0, 0.35309699177742004, 0.6111965775489807, 0.22490417957305908, 0.3788374662399292, 0.021849531680345535, 0.06986737251281738, 0.00019308473565615714, 0.00029062581597827375, 0.0034066468942910433, 0.016436908394098282, 3.0917297408450395e-05, 6.198083428898826e-05, 0.0011742203496396542, 0.002727242186665535, 0.0, 0.0, 0.00013752489758189768, 0.00018204387743026018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004310720250941813, 0.0005652006366290152, 0.0, 0.0, 0.0, 0.0, 0.0015660385834053159, 0.00027485459577292204, 5.7145887694787234e-05, 1.7100042896345258e-05, 1.4599205314880237e-05, 0.0, 0.0, 0.0, 0.0033299466595053673, 2.5923968678398523e-06, 0.0, 0.023313743993639946, 0.00267206528224051, 8.309243276016787e-05, 0.0, 0.0, 0.0, 0, 0.00013754621613770723, 0.0, 0.0017941577825695276, 0.0007741511799395084, 0.0004005145747214556, 0.00040189034189097583, 0.0004914090968668461, 0.0001487037807237357, 2.5150759483949514e-06, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0.002393759787082672, 0.0017534028738737106, 0, 0.003105548908933997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00025232238112948835, 0, 0.0001075809050234966, 0.000109981803689152, 0, 0.001930921571329236, 0.0021164328791201115, 0.0024040588177740574, 0.0021755420602858067, 0.0006842080038040876, 0.0003260755038354546, 0, 0, 4.998660642741015e-06, 0, 0, 0.002748819999396801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.489629328250885, 0, 0, 0, 0, 0, 0, 0, 0.04961930587887764, 0, 0.04889247938990593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.708607204724103e-07, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.902299792775011e-07, 0.00010022817150456831, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01877589151263237, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.0003894787805620581, 0, 0, 0.0, 0.00010446175292599946, 0, 0, 0, 0, 0, 0, 0.0008947658352553844, 0.00014133461809251457, 0, 1.442730649614532e-06, 0, 0, 0, 0, 2.2867661755299196e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.263589173409855e-07, 1.3701749594474677e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.430975526607654e-07, 0.0, 0.0, 0.0003044223412871361, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.356883775675669e-06, 0.00013910257257521152, 4.392176379042212e-06, 0.004386311396956444, 0, 0.0, 0.0004060936043970287, 8.766013479544199e-07, 0.00014636153355240822, 0.0, 0, 0.0, 0, 0, 0.038386669009923935, 0.0, 0.20092108845710754, 0.12933722138404846, 0.0003836412215605378, 0.0, 0.004509029909968376, 0.006270861718803644, 9.000587851915043e-06, 0, 0.0016064633382484317, 0.8391650319099426, 0.5179368853569031, 0, 0, 0, 0, 0.00030188518576323986, 0.33958733081817627, 0.0, 0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 6.19635684415698e-05, 0, 0.01724926196038723, 0, 0.07247841358184814, 0, 0.18753214180469513, 0, 0, 0.05017484724521637, 0.010747138410806656, 0.003022669581696391, 0.0033163712359964848, 0, 0, 0, 0.11245716363191605, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009648168459534645, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0.002969937166199088, 0.005181389860808849, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001924456562846899, 0, 0, 0, 0, 0, 0, 0, 0, 5.727728785132058e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.018277239054441452, 0.02430432289838791, 5.54616708541289e-05, 5.488003807840869e-06, 0.016288267448544502, 0.09460272639989853, 0.08942427486181259, 0.16859643161296844, 0.16333264112472534, 0.2783610224723816, 0.3566492795944214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002649859059602022, 0, 0, 0.024883298203349113, 0.04203556478023529, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 8.517988021594647e-07, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0], "lower_lip_centere-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0013640912948176265, 0, 0, 6.158655742183328e-05, 0.0004815050633624196, 0.0015270969597622752, 0.014113740995526314, 0.07514426112174988, 0.5488349795341492, 0.5434663891792297, 0.15937165915966034, 0.29396873712539673, 0.031238984316587448, 0.2290092259645462, 0.8594356179237366, 0.8230007290840149, 0.2041361927986145, 0.35379526019096375, 0.04216063395142555, 0.24351359903812408, 0.946932852268219, 0.8921288847923279, 0.22429798543453217, 0.35489630699157715, 0.0653008371591568, 0.237786203622818, 0.9912376403808594, 0.925420880317688, 3.984779687016271e-05, 0.0002501982089597732, 0.0006645412649959326, 0.0048120515421032906, 0.010202785022556782, 0.15142878890037537, 0.05664211884140968, 0, 0, 0, 0, 0, 0, 0.26960572600364685, 0.47803235054016113, 0.5278602838516235, 0.5767435431480408, 0.0009283185354433954, 0.00036569818621501327, 0.0020545870065689087, 0.008781402371823788, 0.0015375285875052214, 0.0061819544062018394, 0.01995435729622841, 0.006016312632709742, 0.0018502908060327172, 0.02346150390803814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003130017314106226, 0, 0, 0, 0, 0, 0.0233707707375288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0014475977513939142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00045501822023652494, 0.004496613517403603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08893698453903198, 0.034599874168634415, 0, 0, 0, 0, 0.10037507861852646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01763852685689926, 0.008253035135567188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.011467616073787212, 0.04322613775730133, 0.08856451511383057, 0.12375231832265854, 0, 0, 0, 1.2872383194917347e-05, 0.0013403361663222313, 9.92781060631387e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00013515532191377133, 0.0057546342723071575, 0.04790390655398369, 0.04616880044341087, 0.041026581078767776, 0.026115644723176956, 0.013033286668360233, 0.0074612232856452465, 0.0031812554225325584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0005556301912292838, 0.002014764118939638, 0.001909312792122364, 0.0012116681318730116, 0.00048208271618932486, 0.00011196239211130887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.217283234000206, 0.30300912261009216, 0.30467912554740906, 0.03469088301062584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000780891627073288, 0, 2.4910228603403084e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01943066157400608, 0, 0, 0, 0, 0, 0, 0.003057804424315691, 0.17072370648384094, 0.1678299754858017, 0, 0.04691753908991814, 0, 0, 0, 0, 0, 0.0004594965430442244, 0.007027250714600086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.021990319713950157, 0.03955157473683357, 0.06411437690258026, 0.005008084699511528, 0.021266257390379906, 0.07405287772417068, 0.18113358318805695, 0.35271361470222473, 0, 0, 0, 0, 0, 0, 0, 5.288459942676127e-05, 0, 0.0034922210033982992, 0.005187138449400663, 0.0062317270785570145, 0.009737182408571243, 0, 0, 0.004277008585631847, 0.017829179763793945, 0, 0.004387898836284876, 0.014001664705574512, 0.0003493308322504163, 0.004452742636203766, 0.006544590927660465, 0.002466859994456172, 0.0026465586852282286, 0.0049126907251775265, 0, 0, 0.0014883229741826653, 0, 0.014843009412288666, 0.0633854866027832, 0.15720650553703308, 0.1680612415075302, 0.08581089973449707, 0.08330292254686356, 0.035429418087005615, 0.01234833151102066, 0.010143682360649109, 0.01348546426743269, 0, 0, 0.0006728215957991779, 0, 0, 0, 0.00018528811051510274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004303299356251955, 0.0009689511498436332, 0.001236870069988072, 0.0014463798142969608, 0.00162970507517457, 0.020108284428715706, 0.08887262642383575, 0.36063364148139954, 0.5196595788002014, 0.15242624282836914, 0.27858081459999084, 0.03880317881703377, 0.1938217282295227, 0.8048072457313538, 0.8239002227783203, 0.2230197787284851, 0.3920634984970093, 0.0875077098608017, 0.24550938606262207, 0.9320025444030762, 0.8810322284698486, 0.0008588554919697344, 0.0013303086161613464, 0.001348548918031156, 0.005167882423847914, 0.010263956151902676, 0.13265655934810638, 0.05830570310354233, 0, 0, 0, 0, 0, 0.23457558453083038, 0.43122947216033936, 0.5442898869514465, 0.00477980263531208, 0.002778350142762065, 0.004377760458737612, 0.030877085402607918, 0.004881318658590317, 0.005300255957990885, 0.013277488760650158, 0.007280546240508556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.015991590917110443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00020602934819180518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.11121322214603424, 0.10964664071798325, 6.761078111594543e-05, 0, 0, 0.03171764314174652, 0, 0.04000000283122063, 0, 0.04000000283122063, 0, 0, 0, 0.005432072561234236, 2.5512232241453603e-05, 0, 0, 0, 0.00964306853711605, 7.226069283206016e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.021355248987674713, 0.08262172341346741, 0.10005062818527222, 0.0006235996843315661, 0, 0, 0.0002007178554777056, 0.007035569287836552, 1.3420553841569927e-05, 0.00019325801986269653, 0.00013487524120137095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005620368756353855, 0.020000001415610313, 0.02923041209578514, 0.03368653357028961, 0.03691410273313522, 0.025375906378030777, 0.012967548333108425, 0.006955921649932861, 0.00428753113374114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04000000283122063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0025006269570440054, 0.0023436937481164932, 0.0015013330848887563, 0.0007610381580889225, 0.0004783813201356679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.23096074163913727, 0.3017136752605438, 0.02292455919086933, 8.939601684687659e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.104316783719696e-05, 0, 0, 0, 0, 0, 0, 0.002850588643923402, 0, 0.0011956871021538973, 0, 0, 0.006743988022208214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "upper_ear_left": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0029988521710038185, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.6888911724090576, 0, 0.5845703482627869, 0.6605822443962097, 0.7428942918777466, 0.2994357943534851, 0.49406108260154724, 0, 0, 0.7939207553863525, 0.792493999004364, 0.0, 0.6010169982910156, 0.5662546157836914, 0.2513982057571411, 0, 0, 0.01327535416930914, 0, 0, 0, 0, 0.9047009348869324, 0, 0.8210543394088745, 0.8808939456939697, 0.9345043897628784, 0.37021297216415405, 0.5621238350868225, 0, 0, 0.9150606393814087, 0.909527599811554, 0.0, 0.6765986680984497, 0.4834420680999756, 0.2222447395324707, 0, 0, 0.17017044126987457, 0, 0, 0.0, 0, 0.9980936050415039, 0, 0.9022488594055176, 0.9606211185455322, 0.986075758934021, 0.6490987539291382, 0.8447338342666626, 0, 0, 1.0, 1.0, 0.0, 0.8468185663223267, 0.38802358508110046, 0.3142978549003601, 0, 0, 0.28504884243011475, 0, 0, 0.0, 0.0, 0.8668124079704285, 0, 0.7849084138870239, 1.0, 1.0, 0.39589858055114746, 0.6019961833953857, 0, 0, 1.0, 0.8245164752006531, 0.0, 0.4495445787906647, 0.2539960741996765, 0.25247636437416077, 0, 0, 0.3950144648551941, 0.006817021407186985, 0, 0.0, 0.0, 0.40329957008361816, 0, 0.3861788809299469, 0.40724167227745056, 0.39991095662117004, 0.39121174812316895, 0.3960683047771454, 0, 0, 0.4040504992008209, 0.39808204770088196, 0.0, 0.2462681084871292, 0.04647517204284668, 0.0, 0, 0, 0.2268771380186081, 0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0.030033327639102936, 0.2392682284116745, 0.0, 0.34687793254852295, 0.3320122957229614, 0.0, 0.0, 0.20000000298023224, 0, 0.3629768490791321, 0.23757030069828033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.055043045431375504, 0.003795451018959284, 0.04983856901526451, 0.048704661428928375, 9.154696272162255e-06, 0.0219721719622612, 0.0, 0, 0.23889799416065216, 0.0, 0.2383437156677246, 0.0, 0.6106376051902771, 0.0, 0.0, 0.0, 0.0, 0.1965002566576004, 0.40223199129104614, 0, 0.6202262043952942, 0.418333500623703, 0, 0, 0.0, 0.008707154542207718, 0.6275806427001953, 0.629386842250824, 0.3896837830543518, 0.3981090784072876, 0.26073065400123596, 0.0, 0, 0.6021907925605774, 0.0, 0.0476362518966198, 0.15974940359592438, 0.0, 0.0, 0.06807407736778259, 0.23475678265094757, 0, 0.0, 0.9827953577041626, 0.17578919231891632, 0.0, 1.0, 0.3037828505039215, 0, 0, 0.0, 0.0, 0.20000000298023224, 0.23420962691307068, 0.0, 0.23558250069618225, 0.0, 0.0, 0.20000000298023224, 0.0, 0, 0, 0, 0.0, 0.02787507325410843, 0.0, 0.20000000298023224, 0.0, 1.0386846952314954e-05, 0.060042086988687515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.23447257280349731, 0.2331119328737259, 0.0, 0.20000000298023224, 0.23542827367782593, 0.0, 0.2331119328737259, 0.0, 1.0, 0.49511176347732544, 0, 0.0, 0.20000000298023224, 0, 0.818626880645752, 1.0, 0.0, 0.2331119328737259, 0.0, 0.2331119328737259, 0.036040306091308594, 1.0, 0, 0.40007323026657104, 0.45021873712539673, 0.30980509519577026, 0, 0.7556105256080627, 0, 0.20000000298023224, 0.23008449375629425, 0.20000000298023224, 0.023302214220166206, 0.023301899433135986, 0.0, 0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 0.10493046790361404, 0.06479135900735855, 0.027143895626068115, 0.2331119328737259, 0.030795805156230927, 0.2331119328737259, 0.0, 0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 0.20000000298023224, 0.19829869270324707, 0.0009090946987271309, 0.0, 0.0, 0.48557549715042114, 0.6173980832099915, 0, 0.048704661428928375, 0.8736623525619507, 0.38723140954971313, 0.30428826808929443, 0.6943326592445374, 0.0, 0.0, 0.2487046718597412, 0, 0.8325713872909546, 0, 0.0, 0.7914952039718628, 0.4191439151763916, 0, 0, 0.7393916845321655, 0.0, 0.02455293945968151, 0.4277607202529907, 0.26076579093933105, 0.2899773418903351, 0.3630387485027313, 0, 0, 0.36946192383766174, 0.47921013832092285, 0, 0, 0, 0, 0, 0.0, 0, 0.2836951017379761, 0.06295646727085114, 0.5220101475715637, 0.2620379328727722, 0.30735456943511963, 0, 0.1705666184425354, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0.0, 0.0, 0.1264428049325943, 0.06305564194917679, 0.003131681587547064, 0, 0.0, 0, 0, 0, 0, 0.0, 0.000946747197303921, 6.992626003921032e-05, 0, 0.024784274399280548, 0.048704661428928375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "upper_ear_right": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0035960949026048183, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0017519415123388171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.029559969902038574, 0.0, 0, 0, 0, 0.48416268825531006, 0, 0.30633851885795593, 0.3829006552696228, 0.659558892250061, 0.6346166133880615, 0.4826737940311432, 0, 0, 0.579939603805542, 0.6283196806907654, 0, 0.2127772718667984, 0.11008550226688385, 0.0015553153352811933, 0, 0, 0, 0, 0, 0, 0, 0.9436361193656921, 0, 1.0, 1.0, 0.914998471736908, 0.41386836767196655, 0.5894625186920166, 0, 0, 1.0, 0.8922279477119446, 0, 0.6593831777572632, 0.2797077000141144, 0.1514442265033722, 0, 0, 0.38238340616226196, 0.10522877424955368, 0, 0, 0, 0.9109590649604797, 0, 0.899467408657074, 1.0, 1.0, 0.5491044521331787, 0.847121000289917, 0, 0, 1.0, 0.8922279477119446, 0, 0.5619900822639465, 0.2549222707748413, 0.23853589594364166, 0, 0, 0.38244667649269104, 0.10044968873262405, 0, 0, 0, 1.0, 0, 1.0, 1.0, 1.0, 0.516880989074707, 0.716227114200592, 0, 0, 0.9848361015319824, 0.8786892890930176, 0, 0.3974016606807709, 0.2549222707748413, 0.1594729721546173, 0, 0, 0.39377591013908386, 0.0021696211770176888, 0, 0, 0, 0.27994877099990845, 0, 0.24002766609191895, 0.25578537583351135, 0.2549222707748413, 0.30125969648361206, 0.38238340616226196, 0, 0, 0.2549222707748413, 0.2621121406555176, 0, 0.13055787980556488, 0.12822477519512177, 0.08282215148210526, 0, 0, 0.2562906742095947, 0, 0, 0, 0, 0.08310507237911224, 0.21482764184474945, 0, 0, 0, 0.007011628244072199, 0.2559697926044464, 0, 0, 0.00674044294282794, 0.05223585292696953, 0.12746113538742065, 0, 0.2549222707748413, 0.13746720552444458, 0, 0, 0.29426467418670654, 0.30536165833473206, 0.22624756395816803, 0.07388681173324585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005896285641938448, 0, 0, 0, 0, 0, 0.0, 0, 0, 0.0014717665035277605, 0.2665691375732422, 0.024931572377681732, 0.2701467275619507, 0.025518333539366722, 0.266226202249527, 0.0016333966050297022, 0.24951820075511932, 0.12746909260749817, 0, 0.058095723390579224, 0, 0.38268420100212097, 0, 0, 0.00015124352648854256, 0, 0.16476969420909882, 0.21736888587474823, 0, 0.3273739516735077, 0.42905110120773315, 0, 0, 0, 0.12819263339042664, 0.3122304677963257, 0.31149858236312866, 0.4136096239089966, 0.44864171743392944, 0.32101091742515564, 0, 0, 0.4049728512763977, 0.00742680300027132, 0.2549222707748413, 0, 0, 0, 0, 0.007335645612329245, 0, 0, 0.8922279477119446, 0.010325366631150246, 0, 1.0, 0.1879676729440689, 0, 0, 0, 0, 0.16236424446105957, 0.025598587468266487, 0.2549222707748413, 0.0027812873013317585, 0, 0.21562805771827698, 0.05442005768418312, 0, 0, 0.009884653612971306, 0.18647220730781555, 0, 0.0006058303988538682, 0.18891113996505737, 0.00596237275749445, 0, 0, 0.30864155292510986, 0.039721254259347916, 0, 0, 0.2576751112937927, 0, 0, 0.2514222264289856, 0.0746038407087326, 0, 0, 0.03416994586586952, 0.011913781054317951, 0, 0, 0, 0.8922279477119446, 0.4417385160923004, 0, 0.1262906938791275, 0.0022522106301039457, 0, 0.7911216616630554, 1.0, 0, 0, 0, 0.0020341379567980766, 0, 1.0, 0, 0.3852319121360779, 0.5196760296821594, 0.2549222707748413, 0.006637427024543285, 0.969921350479126, 0, 0, 0, 0, 0, 0, 0, 0.001207388355396688, 0, 0.023278063163161278, 0, 0, 0, 0, 0, 0, 0, 0, 0.0011038050288334489, 0, 0, 0.09271828085184097, 0.008544271811842918, 0.03784160315990448, 0, 0, 0, 0, 0.42235028743743896, 0.6900522112846375, 0, 0.13533461093902588, 0.8398473262786865, 0.4852425456047058, 0.38811996579170227, 0.8751398324966431, 0, 0.0041492050513625145, 0.2549222707748413, 0, 0.7306033968925476, 0, 0, 0.9548339247703552, 0.6473400592803955, 0, 0, 0.8811190128326416, 0.017219871282577515, 0.2605805993080139, 0.6691014170646667, 0, 0.02808280661702156, 0, 0, 0, 0, 0.0121436333283782, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.1204618290066719, 0.0, 0.0, 0, 0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0.02008499950170517, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "ear_lobe_righte-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.16679611802101135, 0, 0, 0, 0, 0, 0.6578876376152039, 0.0, 0, 0, 0, 0, 0, 0, 0.20698709785938263, 0.1507541835308075, 0, 0.04177108779549599, 0.2802793085575104, 0, 0.0, 0, 0.3153264820575714, 0, 0, 0, 0, 0, 0.8528020977973938, 0.0, 0, 0, 0, 0, 0, 0, 0.8152750134468079, 0.6882416605949402, 0, 0.19336265325546265, 0.512607991695404, 0, 0.0, 0, 0.031017407774925232, 0, 0, 0, 0, 0, 0.3236486315727234, 0.0, 0, 0, 0, 0, 0, 0, 0.8829142451286316, 0.6870711445808411, 0, 0.19222797453403473, 0.49744683504104614, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.11607535183429718, 0.06265823543071747, 0, 0.00069652427919209, 0.06407599151134491, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.10820163786411285, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.046692412346601486, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0856965035200119, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.030282679945230484, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.19588856399059296, 0, 0, 0, 0, 0, 0, 0.0, 0.132253035902977, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0.0004452579596545547, 0.0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.2615988850593567, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.3137838840484619, 0, 0, 0, 0.1342630833387375, 0, 0.0, 0, 0, 0, 0, 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0028619952499866486, 0, 0.0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002597164362668991, 0.08382333815097809, 0.021933160722255707, 0.07337917387485504, 0, 0, 0.05889822542667389, 0, 0, 0, 0, 0, 0.008747111074626446, 0.0, 0, 0.05991195887327194, 0, 0, 0, 0, 0, 0.0011709119426086545, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0.02245231531560421, 0.0, 0, 0.0, 0, 0, 0, 0.00033472906216047704, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "lower_cheek_right": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08953563868999481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004860140907112509, 0.3394472002983093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0003104519273620099, 0, 0, 8.183319005183876e-05, 5.230897295405157e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0005589126376435161, 0.002842661691829562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0014576672110706568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8189682364463806, 0.7984267473220825, 0.27920982241630554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0.02885238453745842, 0.007677797228097916, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0007430043770000339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0008453194750472903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0.04809241741895676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.07236771285533905, 0.12537169456481934, 0.07533250749111176, 0.05922587588429451, 0, 0, 0, 0, 0.28060656785964966, 0, 0.006821854971349239, 0, 0, 0, 0, 0, 0, 0, 0.6838266253471375, 0.0, 0.06904483586549759, 0, 0, 0.24207346141338348, 0, 0.001192031311802566, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.004462543874979019, 0.12567070126533508, 0, 3.536864824127406e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0001558912335895002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.148809552192688, 0, 0.0005822533275932074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.34716925024986267, 0.37558823823928833, 0.10560940206050873, 0.31554925441741943, 0, 0, 0, 0, 0, 0, 0.22620953619480133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.19117991626262665, 0, 0, 0, 0, 0.012060767970979214, 0.061910878866910934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09282080084085464, 0, 0, 0.0024116283748298883, 0, 0, 0.004638172686100006, 0.30961373448371887, 0.31281420588493347, 0.016060953959822655, 0.044702354818582535, 0.04084307327866554, 0.06806691735982895, 0.05686245858669281, 0.1482110619544983, 0.3724137246608734, 0.22516438364982605, 0.316989541053772, 0.7846408486366272, 0.7781709432601929, 0.8104507923126221, 0.8223469257354736, 0.20188622176647186, 0.15283793210983276, 0, 0, 0, 0, 0, 0, 0.008573471568524837, 0.06386446207761765, 0, 0, 0, 0, 0.1408679485321045, 0.032607756555080414, 0, 0, 0.34877103567123413, 0.3284685015678406, 0.2622661888599396, 0.5477197170257568, 0.6902012825012207, 0.007106468081474304, 0.4696461856365204, 0.47750115394592285, 0, 0.1266167014837265, 0.228041872382164, 0, 0, 0.00016303866868838668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2011023610830307, 0.3881690502166748, 0.7235659956932068, 0.843437910079956, 0.2790621519088745, 0.8115334510803223, 0, 0, 0, 0.0785667896270752, 0, 0, 0, 0.02901504933834076, 0, 0.2921702563762665, 0, 0, 0, 0, 0, 0, 0, 0.08265847712755203, 0.2117183655500412, 0.43128830194473267, 0, 0, 0, 0, 0, 0, 0.00013351175584830344, 0, 0, 0.2531414330005646, 0, 0.33726298809051514, 0.35835006833076477, 0.3789585828781128, 0, 0, 0, 0.18889039754867554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06678439676761627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3537443280220032, 0.5407826900482178, 0.385555237531662, 0.6317675709724426, 0.5793389081954956, 0, 0, 0, 0, 0, 0, 0.11931340396404266, 0.32332929968833923, 0.7317124605178833, 0.7948890924453735, 0.7578985691070557, 0.6868141889572144, 0, 0.3212149143218994, 0.11122230440378189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3113158345222473, 0.32698923349380493, 0.6210716366767883, 0.5192398428916931, 0.40616700053215027, 0.23715125024318695, 0.021720129996538162, 0, 0, 0.023083113133907318, 0.43918806314468384, 0.39250263571739197, 0.48028478026390076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0017425776459276676, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "jaw_right": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.026740185916423798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09903217107057571, 0.16360428929328918, 0, 0, 0, 0, 0.09583455324172974, 0, 0, 0.7382404804229736, 0.41164666414260864, 0.32644277811050415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09371191263198853, 0, 0.09485066682100296, 0.09516407549381256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0730493813753128, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.09968772530555725, 0.09499579668045044, 0.0, 0.0, 0.008610976859927177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.13887906074523926, 0.0, 0.03105686977505684, 0.09136282652616501, 0.4921855330467224, 0.38737714290618896, 0.6352794766426086, 0.702252984046936, 0.3618148863315582, 0.22192098200321198, 0.08437424898147583, 0.26346883177757263, 0.18608371913433075, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.09619376808404922, 0.580118715763092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.02396540343761444, 0.06587690114974976, 0.0730162039399147, 0.04624345153570175, 0, 0.040471151471138, 0.00013606989523395896, 0.45337975025177, 0.3246570825576782, 0.28377464413642883, 0.11980471760034561, 0.15909765660762787, 0.4542178511619568, 0.09516407549381256, 0.5292565226554871, 0, 0.04216902703046799, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.12243638932704926, 0, 0.1399712860584259, 0, 0.22131672501564026, 0.0002849138982128352, 0.03751009702682495, 0.21495366096496582, 0.021171458065509796, 0.1848391890525818, 0.04934569448232651, 0.2755110561847687, 0, 0, 0.18486541509628296, 0.28624337911605835, 0.45486047863960266, 0.6715208888053894, 0.6865049004554749, 0.09516407549381256, 0.7269003987312317, 0.6081964373588562, 0.2879601716995239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.13530604541301727, 0, 0.21981565654277802, 0.19720014929771423, 0.1340661346912384, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.032348521053791046, 0.2436678409576416, 0.30122998356819153, 0.5776492357254028, 0.7598180174827576, 0.8263809680938721, 0.09552093595266342, 0.8017303347587585, 0.8326874375343323, 0.7511539459228516, 0.1204562857747078, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09050000458955765, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.229902591148857e-05, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.00018915026157628745, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0.05423625186085701, 0.09516407549381256, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0.0001750453229760751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0036867118906229734, 0.0012650557328015566, 9.763320122146979e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.03746318817138672, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.09516407549381256, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09516407549381256, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "brow_right": [0.027011651545763016, 0.0270213820040226, 0.07517966628074646, 0.08402873575687408, 0.10645093768835068, 0.12183646112680435, 0.03184691444039345, 0.06637834012508392, 0.08007226139307022, 0.03655212000012398, 0.059434812515974045, 0.06609135121107101, 0.028362270444631577, 0.056276630610227585, 0.05776800215244293, 0.021393632516264915, 0.05088019743561745, 0.056324154138565063, 0.013233150355517864, 0.030531905591487885, 0.042321473360061646, 0.007751758676022291, 0.016202222555875778, 0.018648769706487656, 0.004887097980827093, 0.007669401820749044, 0.007642114534974098, 0.002764463424682617, 0.0029086575377732515, 0.0023608815390616655, 0.000329780945321545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0203537680208683, 0.07244297116994858, 0.13416941463947296, 0.017234142869710922, 0.05713199824094772, 0.11183416098356247, 0.009603049606084824, 0.03213225305080414, 0.05552954971790314, 0.0011778896441683173, 0.003078753361478448, 0.005118048749864101, 0.0001441416679881513, 0.0003319923998787999, 0.0006259176298044622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06683360785245895, 0.06183375418186188, 0.05921049416065216, 0.022768542170524597, 0.005959137808531523, 0.0009036391275003552, 0, 0.21415889263153076, 0.2488621026277542, 0.1497766226530075, 0.09034089744091034, 0.24808619916439056, 0.16685764491558075, 0.13597771525382996, 0.0249001607298851, 0.005077960900962353, 0.0009027723572216928, 4.051424184581265e-05, 0.011774508282542229, 0.02141028642654419, 0.0031509418040513992, 0.04640084505081177, 0.048282697796821594, 0.020000949501991272, 0.005217086989432573, 0.0006254622712731361, 0.08149595558643341, 0.057987846434116364, 0.033687859773635864, 0.01238822191953659, 0.001400302047841251, 0.11734630912542343, 0.05687674507498741, 0.03187505155801773, 0.015559674240648746, 0.0011746685486286879, 0.12368419766426086, 0, 0.052666619420051575, 0.027570264413952827, 0.013369021937251091, 0.0003300547250546515, 0.10799477249383926, 0, 0.04168401658535004, 0.02446742169559002, 0.00850730761885643, 0.0007061700453050435, 0.0969574898481369, 0, 0.023730110377073288, 0.006526446435600519, 0.0011040243552997708, 0, 0.05166364461183548, 0, 0, 0, 0, 0, 0, 0, 0.08926866203546524, 0.07995499670505524, 0.06818953901529312, 0.024452945217490196, 0.0044361380860209465, 0.0003441167646087706, 0, 0.3307839632034302, 0.4114959239959717, 0.25324028730392456, 0.1409454047679901, 0.33431071043014526, 0.18409192562103271, 0.140260249376297, 0.07858376204967499, 0.0882933959364891, 0.16529503464698792, 0, 0, 0, 0, 0.14250440895557404, 0.1801871359348297, 0.16095174849033356, 0.1248815655708313, 0.09159061312675476, 0.8528701663017273, 0.9086281061172485, 0.6921135783195496, 0.3678346872329712, 0.7033079266548157, 0.27257853746414185, 0.9607468247413635, 1.0, 0.8880159258842468, 0.5469568967819214, 0.8696988224983215, 0.4132641553878784, 0, 0, 0, 0.035665351897478104, 0.0057386006228625774, 0.00023379610502161086, 0.07958056032657623, 0.14201433956623077, 0.21528002619743347, 0, 0, 0.03762122988700867, 0.00956946425139904, 0.0002927427995018661, 0, 0, 0, 0, 0, 0, 0, 0, 0.4443369507789612, 0.3046683371067047, 0.40485841035842896, 0.32775378227233887, 0.3295249938964844, 0.398669570684433, 0.08144167810678482, 0.14857354760169983, 0.24650263786315918, 0, 0, 0.030880700796842575, 0.011028573848307133, 0.00013589733862318099, 0, 0, 0.09687115997076035, 0.1520708054304123, 0.19587746262550354, 0.18274949491024017, 0.19050085544586182, 0.19050085544586182, 0, 0.046545565128326416, 0.14979717135429382, 0.0611126683652401, 0.007991697639226913, 0.11813458800315857, 0.1486748307943344, 0.08589442074298859, 0.022986941039562225, 0.0353364460170269, 0, 0.01796724461019039, 0.0034265760332345963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08043920993804932, 0.15794816613197327, 0.2339528650045395, 0.025472190231084824, 0.004624214954674244, 0, 0, 0.060978733003139496, 0.16649284958839417, 0.19050085544586182, 0.022994516417384148, 0.015610567294061184, 0.044438593089580536, 0.015534963458776474, 0, 0, 0, 0, 0.018960194662213326, 0.0009387515019625425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0013867045054212213, 0.02382843941450119, 0, 0.06913623958826065, 0.06798278540372849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007369174621999264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01357601210474968, 0.01234021782875061, 0.014580927789211273, 0.012933204881846905, 0.011708051897585392, 0.009166656993329525, 0.006711644120514393, 0.004555590450763702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.010445993393659592, 0.008326633833348751, 0.003940579481422901, 0.00036377765354700387, 4.088954483449925e-06, 0, 0, 0.0012325645657256246, 0.00787473376840353, 0.007088660728186369, 0.00888990517705679, 0.011327843181788921, 0.00926463957875967, 0.006690663751214743, 0.003955308347940445, 0.0019373393151909113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007288516499102116, 0.007444371003657579, 0.003152390941977501, 0.00010771652887342498, 0, 0, 0, 0.0007024193764664233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.050079669803380966, 0.02458810806274414, 0.00031023763585835695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006632172502577305, 0, 0, 0, 0, 0, 0, 0, 0, 0.07536302506923676, 0, 0.05023104324936867, 0, 0.013195114210247993, 0.005406176205724478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010063908994197845, 0, 0, 0.026070773601531982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004882172797806561, 0, 0, 0.009734219871461391, 0, 0.0006488348008133471, 0.010490184649825096, 0.009108321741223335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006227264530025423, 0.028277570381760597, 0.0966097041964531, 0.0988139882683754, 0.013941925950348377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.048526085913181305, 0.05018024891614914, 0.053275808691978455, 0.05423262342810631, 0.04757804796099663, 0.03463513404130936, 0.02180572599172592, 0.012432944029569626, 0.006270522251725197, 0.0029029396828264, 5.203107775741955e-06, 0, 0, 0, 0, 0, 0, 0, 0.04367555305361748, 0.033519402146339417, 0.018347589299082756, 0.0020362073555588722, 0.00021858554100617766, 0, 0, 0.005877342540770769, 0, 0.1537528932094574, 0.09253241121768951, 0.10082373023033142, 0.06051144376397133, 0.057533569633960724, 0.05262358486652374, 0.021807139739394188, 0.007139105815440416, 0, 0.0016582253156229854, 0, 0, 0, 0, 0, 0, 0, 0.03490937501192093, 0.00016010490071494132, 0.010124205611646175, 0.0014790237182751298, 0.18699316680431366, 0.150192528963089, 0.17392414808273315, 0.07272720336914062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0003412054793443531, 0.0007206287700682878, 0.001474696327932179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0042732288129627705, 0.003208588110283017, 0, 0.0069725909270346165, 0.001017240108922124, 0, 1.8933051251224242e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00015581966727040708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.022914418950676918, 0.05402698367834091, 0.03464416414499283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03665360063314438, 0.005145836155861616, 0, 0, 0, 0, 0.010641361586749554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006318155210465193, 0.09974656254053116, 0.14158686995506287, 0.1210017129778862, 0.03900953382253647, 0.010414432734251022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005360602866858244, 0, 0, 3.7441721360664815e-05, 0.004623510874807835, 0, 9.905733122650417e-07, 0.0004869271069765091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006636934704147279, 0.0024671657010912895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.016791507601737976, 0.019561760127544403, 0.009940508753061295, 0.015622993931174278, 0.019366607069969177, 0.022892184555530548, 0.021571114659309387, 0.013495502062141895, 0, 0, 0, 0.0007881901692599058, 0.002229805802926421, 0.00012501611490733922, 0.00039132285746745765, 0, 0, 0.007130294572561979, 0, 0.011422701179981232, 0, 0, 0, 0.002654541516676545, 0.004691374488174915, 0.0067438301630318165, 0, 0.0012381882406771183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006757916416972876, 0, 0, 0, 0.0008704859646968544, 0, 0.004988241940736771, 0.00033432518830522895, 0, 0, 0.013421157374978065, 0, 0.011780381202697754, 0.0011827651178464293, 0, 0, 0.022862449288368225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.760192834713962e-06, 0.006989911198616028, 0.023733245208859444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.023065777495503426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00010699775157263502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "under_eyes": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06632684916257858, 0, 0, 0.1685965210199356, 0, 0, 0.18262319266796112, 0, 0.0014299644390121102, 0.05313350260257721, 0.012500745244324207, 0, 0, 0.0027576680295169353, 0, 0, 0.00018681531946640462, 0, 0, 0.0029266050551086664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6006161570549011, 0.6000000238418579, 0.6080272197723389, 0.6107230186462402, 0.5800814032554626, 0.3296547532081604, 0, 0, 0, 0, 0, 0.20254914462566376, 0.27139508724212646, 0.5100471377372742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6748365163803101, 0.6700589060783386, 0.7992072105407715, 0.800000011920929, 0.6843879818916321, 0.38534900546073914, 0, 0, 0, 0, 0.003729806514456868, 0.2024587243795395, 0.3149507939815521, 0.6585794687271118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0.14878952503204346, 0.2530369758605957, 0, 0, 0, 0.800000011920929, 0.2244197279214859, 0, 0, 0.09461493045091629, 0.6064099669456482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.24697397649288177, 0, 0, 0, 0, 0.2377948760986328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.28281188011169434, 0, 0.800000011920929, 0.7373744249343872, 0.800000011920929, 0.800000011920929, 0, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.056445468217134476, 0.4185551702976227, 0.21726220846176147, 0.24649769067764282, 0.45504677295684814, 0.07430709898471832, 0.053746093064546585, 0, 0.03724921867251396, 0.443624347448349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00196756306104362, 0, 0.23598529398441315, 0.21132080256938934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.21176691353321075, 0, 0, 0, 0, 0, 0.20000000298023224, 0.4011208117008209, 0.17750108242034912, 0.4047674834728241, 0, 0.4676438868045807, 0, 0.030300837010145187, 0, 0.00017794880841393024, 0, 0, 0, 0, 0, 0, 0, 0.42712780833244324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.30423006415367126, 1.4032319995749276e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7968693971633911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3315584063529968, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6343550682067871, 0, 0, 0.015257533639669418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07144033908843994, 0, 0, 0.044015273451805115, 0, 0.00455888919532299, 0.04785575345158577, 0.09284266084432602, 0.016574615612626076, 0, 0.12137915194034576, 0.02379775606095791, 0, 0.060627661645412445, 0.005643393844366074, 0, 0.06330718100070953, 0.0016397698782384396, 0, 0.0007690094644203782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5428875088691711, 0.49132803082466125, 0.5375421047210693, 0.6258245706558228, 0.6139438152313232, 0.5716733932495117, 0.20000000298023224, 0, 0, 0, 0, 0.003086066571995616, 0.20227481424808502, 0.44722986221313477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008931698277592659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6896364688873291, 0.800000011920929, 0.800000011920929, 0.800000011920929, 0.7427670955657959, 0.5816534161567688, 0.20000000298023224, 0, 0, 0, 0, 0.0935153216123581, 0.20975655317306519, 0.6151721477508545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0.03644777461886406, 0.2129039168357849, 0, 0, 0, 0.800000011920929, 0.3285179138183594, 0, 0, 0.06030948832631111, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.200283482670784, 0, 0, 0, 0.006503533571958542, 0.32073327898979187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00012549481471069157, 0.004140833392739296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2792472541332245, 0, 0.800000011920929, 0.800000011920929, 0.800000011920929, 0.800000011920929, 0, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00013321134611032903, 0.0017821724759414792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009963526390492916, 0, 0, 0, 0, 0, 0, 0, 0, 0.2938776910305023, 0, 0.313726007938385, 0.40581318736076355, 0.4359409511089325, 0.5301523804664612, 0.173473060131073, 0.4048205316066742, 0.3414956033229828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2753288447856903, 0.2602919340133667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00010365049820393324, 0, 0, 0.001791180344298482, 0, 0.01376840565353632, 0.26881808042526245, 0.28344929218292236, 0.24157480895519257, 0.4357958734035492, 0.0011748805409297347, 0.6172214150428772, 0, 0.21963274478912354, 0, 0.037963151931762695, 0, 0, 0, 0, 0, 0, 0, 0.5983076095581055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14222458004951477, 0.18413980305194855, 0, 0.21208402514457703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.49280431866645813, 0.800000011920929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0.2683154344558716, 0.03583807498216629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "eye_lids": [0.30604487657546997, 0.3658866882324219, 0.13730388879776, 0.10861089825630188, 0.0, 0.0, 0.30678653717041016, 0.14428773522377014, 0.0, 0.28096550703048706, 0.12870043516159058, 0.0, 0.2675233781337738, 0.07590470463037491, 0.0, 0.35443514585494995, 0.0, 0.0, 0.21154816448688507, 0.0, 0.0, 0.0003066137433052063, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0004361901665106416, 0, 0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0.30604487657546997, 0.1774340718984604, 0.0, 0.3041224479675293, 0.1132403016090393, 0.0, 0.2323930710554123, 0.09922659397125244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0.0009935494745150208, 0, 0.12290290743112564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.38255608081817627, 0.38068875670433044, 0.35026639699935913, 0.3119850158691406, 0.35902559757232666, 0.316769003868103, 0.2310788482427597, 0.22953365743160248, 0.17941130697727203, 0.0, 0, 0, 0, 0, 0.0, 0, 0, 0.0, 0.30604487657546997, 0.3520185351371765, 0.3550570607185364, 0.0906774178147316, 0.00017925263091456145, 0.024475153535604477, 0.003980519250035286, 0.20300771296024323, 0.4089410901069641, 0.4000915586948395, 0.31869372725486755, 0.2682311534881592, 0.31193840503692627, 0.30388522148132324, 0.2807373106479645, 0.23288585245609283, 0.0743856430053711, 0.003275614697486162, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.46983492374420166, 0.5139211416244507, 0.3540990650653839, 0.08894645422697067, 0.012768639251589775, 0.000506143900565803, 0, 0.3968462347984314, 0, 0, 0, 0, 0, 0.003944655880331993, 0.22953365743160248, 0.2575352191925049, 0.07651121914386749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009675196371972561, 0, 0, 0, 0, 0, 0, 0.003768285270780325, 0.07603155076503754, 0.021113235503435135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07651121914386749, 0.06809176504611969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07651121914386749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.0013725287280976772, 0, 0.0, 0, 0.0, 0.012510147877037525, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.008661800064146519, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.0037181901279836893, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0.001545734703540802, 0.0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0.009376905858516693, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.013974852859973907, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2562377452850342, 0.2698606252670288, 0.19368956983089447, 0.30568012595176697, 0.1829420030117035, 0.13563817739486694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0, 0.2106570154428482, 0.35810956358909607, 0.24070338904857635, 0, 0, 0, 0, 0.0010174911003559828, 0, 0.0, 0, 0.0, 0.0, 0.0, 5.251169204711914e-05, 0.0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.002926133805885911, 0, 0.002336962381377816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.30604487657546997, 0.29966288805007935, 0.23016919195652008, 0.26542654633522034, 0.39763471484184265, 0.27424874901771545, 0.30604487657546997, 0.36805665493011475, 0, 0, 2.512233731977176e-05, 0.026049766689538956, 0.15443968772888184, 0.0006877861451357603, 0.0, 0.0, 0.0, 0.23011283576488495, 0.0, 0.33475062251091003, 0.0, 0.0, 0.0, 0.003113682148978114, 0.04412948340177536, 0.17748767137527466, 0.0, 0.0, 0.2375636249780655, 0.23450325429439545, 2.2652873667539097e-05, 0, 0, 0, 0.19904552400112152, 0.05084642022848129, 0, 0.1620219498872757, 0.07651121914386749, 0, 0.15444067120552063, 0.015240246430039406, 0, 0.11710232496261597, 0, 0, 0.0, 0.0, 0, 0.007051929831504822, 0.0, 0, 0.004981443285942078, 0.0, 0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0.004405749961733818, 0, 0, 0.047096673399209976, 0, 0, 0, 0, 0, 0.05589412897825241, 0, 0, 0.04283390939235687, 0.38255608081817627, 0.020451465621590614, 0, 0.4557188153266907, 0.15302243828773499, 0, 0.19703976809978485, 0.14149592816829681, 0, 0.006857546977698803, 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.032707925885915756, 0, 0.17655472457408905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3144722580909729, 0.39422380924224854, 0.3842466473579407, 0.45980364084243774, 0.32902586460113525, 0.2596145272254944, 0.15302243828773499, 0.15302243828773499, 0.15302243828773499, 0.040420811623334885, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0.4088442921638489, 0.38255608081817627, 0.31125035881996155, 0.27451229095458984, 0.0, 0.0, 0, 0.4328184723854065, 0.5271351933479309, 0.5068521499633789, 0.44463491439819336, 0.318930983543396, 0.22953365743160248, 0.22953365743160248, 0.22953365743160248, 0.0020043491385877132, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0.48141515254974365, 0.46262919902801514, 0.4249425530433655, 0, 0.0, 0.0, 0, 0.13694801926612854, 0, 0, 0, 0, 0, 0, 0.19892139732837677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.305574893951416, 0.38255608081817627, 0.2936696708202362, 0.044045351445674896, 0, 0.07651121914386749, 0.22953365743160248, 0.05402137339115143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07651121914386749, 0.07651121914386749, 0, 0, 0, 0, 0, 0, 0.3103935718536377, 0.11622340977191925, 0.17209485173225403, 0, 0, 0, 0.07651121914386749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.32344138622283936, 0.008114331401884556, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009324101731181145, 0, 0, 0.00039303911034949124, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09985996037721634, 0.15302243828773499, 0.15302243828773499, 0.15302243828773499, 0.07651121914386749, 0.07651121914386749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0007344067562371492, 0.02840477041900158, 0.15450459718704224, 0.23064757883548737, 0.22831885516643524, 0.00017591918003745377, 0, 0.0, 0.0, 0.15844957530498505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.006887689232826233, 0.0018784268759191036, 0.0008223552722483873, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.38480043411254883, 0.3939041495323181, 0.11765515804290771, 0.22455058991909027, 0.3181408941745758, 0.31063312292099, 0.38255608081817627, 0.3885740041732788, 0.0, 0.0, 0.0, 0.09687711298465729, 0.2417040318250656, 0.0, 0.0, 0, 0, 0.38509780168533325, 0, 0.45311105251312256, 0.001072955084964633, 0.0, 0.0, 0.04044214263558388, 0.0033710822463035583, 0.013595230877399445, 0, 0.0], "jaw_left": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07213396579027176, 0, 0, 0, 0, 0, 0.19151058793067932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.20569674670696259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0037102617789059877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004080170765519142, 0.19032815098762512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00030594770214520395, 0, 0, 0, 0, 0.0018149871611967683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.011507797054946423, 0.0016363116446882486, 0.0008903846028260887, 0, 0, 0.09093775600194931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.11702761054039001, 0.006007238756865263, 9.087128273677081e-05, 0, 0, 0.19032815098762512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5552788376808167, 0.6437214612960815, 0, 0, 0, 0, 0, 0.38048991560935974, 0.20442815124988556, 0.8355200290679932, 0, 0, 0, 0, 0.003837830852717161, 0.14697696268558502, 0.04730197787284851, 0, 0.1351315677165985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7345187067985535, 0.39068013429641724, 0.17651206254959106, 0.012108737602829933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.19032815098762512, 0, 0, 0.21911628544330597, 0.6768045425415039, 0.811241865158081, 0.7581578493118286, 0.8208367824554443, 0.6408711671829224, 0.4911833107471466, 0.30747365951538086, 0.722914457321167, 0.8048213124275208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0016066315583884716, 0, 0, 0, 0.0003679317014757544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0042442199774086475, 0.5402272343635559, 0.8186704516410828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04106549173593521, 0.09516407549381256, 0.09516407549381256, 0.09718962013721466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01020801905542612, 0.0034156739711761475, 0.009347716346383095, 0.010118989273905754, 0.06557399034500122, 0.01898021809756756, 0.02857169695198536, 0, 0.01776162162423134, 0.002526374999433756, 0.09516407549381256, 0.09516407549381256, 0, 0.09516407549381256, 0.09516407549381256, 0, 0.0014005460543558002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05021302029490471, 0.2598434388637543, 0, 0.29368123412132263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.13037240505218506, 0.17823125422000885, 0.33397677540779114, 0.2430025339126587, 0.20572182536125183, 0.23874202370643616, 0.1960761398077011, 0.09926845133304596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2154928296804428, 0.19032815098762512, 0.001420788117684424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09096292406320572, 0.22585870325565338, 0.5833714008331299, 0.65706467628479, 0.7482497096061707, 0.7681511044502258, 0.7371533513069153, 0.6195935606956482, 0.3273378908634186, 0.09516407549381256, 0.031097358092665672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04891255497932434, 0.09516407549381256, 0.004312390461564064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "nose_nostrils": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.020812485367059708, 0.0, 0.0, 0.0, 0.15350376069545746, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.06066625192761421, 0.06200343742966652, 0.06200343742966652, 0.06200343742966652, 0.30416619777679443, 0.2367081195116043, 0.38738346099853516, 0.2985938787460327, 0.2515851855278015, 0.0, 0.1925816386938095, 0.27839598059654236, 0.08303458988666534, 0.007762778550386429, 0.0, 0.0, 0.03341701999306679, 0.0, 0.0, 0.04628575220704079, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3723287284374237, 0.34802061319351196, 0.06047458201646805, 0.07392875105142593, 0.21723350882530212, 0.2323431372642517, 0.1821523904800415, 0.13206495344638824, 0.3057531714439392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.274345338344574, 0.44437462091445923, 0.4053807854652405, 0.30646786093711853, 0.3498091697692871, 0.3044132590293884, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05678366497159004, 0.07321333885192871, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0.0465586893260479, 0.0, 0.0, 0, 0, 0, 0.04391442611813545, 0.0, 0.06200343742966652, 0.11662739515304565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.03001362830400467, 0.008818619884550571, 0.06200343742966652, 0.06200343742966652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.035962317138910294, 0.0, 0.06200343742966652, 0.01656240224838257, 0.06200343742966652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06200343742966652, 0.28740769624710083, 0.0, 0.06200343742966652, 0.0, 0.3853161334991455, 0.37059497833251953, 0.26933911442756653, 0.0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0, 0.13762922585010529, 0.01527874544262886, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0.19943661987781525, 0, 0.0, 0, 0, 0.3222699463367462, 0.4373052418231964, 0.4583157002925873, 0.5580309629440308, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5570683479309082, 0, 0, 0.0, 0, 0.0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.024331819266080856, 0.0, 0.03896239772439003, 0.0, 0.015337962657213211, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.010216527618467808, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0002954924711957574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062003444880247116, 0.062003444880247116, 0.019147491082549095, 0.0, 0.06200795993208885, 0.0013136158231645823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.008464734070003033, 0.060503650456666946, 0.062003444880247116, 0.06218862161040306, 0.062003444880247116, 0.3414899706840515, 0.22652848064899445, 0.436825156211853, 0.1785082370042801, 0.22636772692203522, 0.0, 0.27913111448287964, 0.30321332812309265, 0.022912759333848953, 0.040489692240953445, 0.0, 0.04364565759897232, 0.0, 0.01736685074865818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.44007402658462524, 0.45296427607536316, 0.3014695644378662, 0.09214019775390625, 0.2351902276277542, 0.29026085138320923, 0.17058545351028442, 0.30020660161972046, 0.3615889847278595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07080703973770142, 0.0882597267627716, 0.25465133786201477, 0.49602752923965454, 0.43004029989242554, 0.3123069107532501, 0.49602752923965454, 0.40883511304855347, 0.0, 0.0, 0.1402052938938141, 0.01988484337925911, 0.09236981719732285, 0.14900436997413635, 0.00026600807905197144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01375729963183403, 0, 0, 0, 0.00874194223433733, 0.0, 0.001255688606761396, 0, 0, 0.12849360704421997, 0.07955692708492279, 0.0793868750333786, 0.17357853055000305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0333365835249424, 0.0, 0.10698866844177246, 0.06511090695858002, 0.0019491277635097504, 0.0, 0.0, 0.0, 0.007998015731573105, 0.010950792580842972, 0.013588238507509232, 0.0, 0.0, 0.11152268946170807, 0.0, 0.0555899553000927, 0.0934651792049408, 0.0039380379021167755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.00011092072236351669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062003444880247116, 0.1981416940689087, 0.0, 0.03763839602470398, 0.49602752923965454, 0.3335839807987213, 0.3100172281265259, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0.04223240911960602, 0.04786616191267967, 0.0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06315016746520996, 0, 0, 0, 0, 0.2803356945514679, 0.44362738728523254, 0.349142849445343, 0.46872538328170776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4595052897930145, 0, 0, 0, 0, 0, 0.0, 0.023853953927755356, 0, 0, 0, 0, 0, 0, 2.000942731683608e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062003444880247116, 0.01232030801475048, 0.062003444880247116, 0.017501521855592728, 0.04676150530576706, 0.003299132687970996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "upper_lip_center": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.893108467105776e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.416488031391054e-05, 0.00018760038074105978, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.39188480377197266, 0.38017353415489197, 0.4439719617366791, 0, 8.599206194048747e-05, 0, 0.0001483061205362901, 0.4695403575897217, 0.330527126789093, 0, 0, 0, 0, 0.17303450405597687, 0.003293360350653529, 0, 0, 0.011211304925382137, 0, 0.30151066184043884, 0.3948816657066345, 0.136693075299263, 0.2708466053009033, 0.17957453429698944, 0.00018481204460840672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.011644256301224232, 0.0015607998939231038, 0, 0, 0, 0.1549752950668335, 0.31366387009620667, 0.7965123057365417, 0.538875937461853, 0.43194058537483215, 0.2509406805038452, 0.45823347568511963, 0.20047760009765625, 0.33345603942871094, 0.15264689922332764, 0.15369285643100739, 0.11995936930179596, 0.10970514267683029, 0, 0, 0.027437057346105576, 0.006795330438762903, 0.15154467523097992, 0.03967931121587753, 0.015335669741034508, 0.14644619822502136, 0.05447511374950409, 0.03752266615629196, 0.12416018545627594, 0.02709958516061306, 0.04264283552765846, 0.06348095089197159, 0.0005725085502490401, 0.019204607233405113, 0, 0.06736509501934052, 0.029223138466477394, 0.00027387196314521134, 0, 0.00011613695096457377, 0.002094900468364358, 0.022758902981877327, 0.03912314027547836, 0, 0, 0.5378026962280273, 0.5161687731742859, 0.19453002512454987, 0.6701862812042236, 0.9395838975906372, 0.86002516746521, 0.3755117356777191, 0.7427623271942139, 0.7448397874832153, 0.7487785220146179, 0.990709125995636, 0.9353447556495667, 0.43768471479415894, 0.924054741859436, 0.961834192276001, 0.49414926767349243, 0.8472257852554321, 0.854552149772644, 0.42853251099586487, 0.7675713300704956, 0.7919677495956421, 0.4093318283557892, 0.11003254354000092, 0.18081016838550568, 0.15287558734416962, 0.16348887979984283, 0.11762692034244537, 0.08533291518688202, 0.043082963675260544, 0.017204899340867996, 0, 0, 0, 0, 0.01787024736404419, 0.0021843635477125645, 0, 0, 0, 0, 0.011174792423844337, 0.001660998910665512, 0, 0, 0, 0, 0.01124874409288168, 0.002019410952925682, 0, 0, 0.19534169137477875, 0.17745345830917358, 0.1383531242609024, 0.04890047386288643, 0.027315469458699226, 0.00585076492279768, 0.01188590843230486, 0.3790360689163208, 0.6957277059555054, 0.7765492796897888, 0.718322217464447, 0.6214435696601868, 0.5364549160003662, 0.0016660623950883746, 0, 0, 0, 0.05355501547455788, 0.0751447007060051, 0.08094964921474457, 0.02630075067281723, 0.06331048160791397, 0.0477360300719738, 0.009324231185019016, 0.021262941882014275, 0.040081363171339035, 0.019058147445321083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.014171884395182133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02486943081021309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.020000001415610313, 0.020000001415610313, 0, 0, 0.005183172412216663, 0, 0, 0.00637850072234869, 0.0032183413859456778, 0, 0, 0, 0, 0.049305301159620285, 0.0237354077398777, 0.009672892279922962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08048976957798004, 0, 0, 0, 0, 0.1039358526468277, 0.11853214353322983, 0, 0.0003463003668002784, 0.06415724009275436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00029017298948019743, 0.0021725676488131285, 0.006114642601460218, 0.015964090824127197, 0.029586918652057648, 0.035212840884923935, 0, 0, 0, 0, 0, 0, 0, 0.05408581718802452, 0, 0.006906142458319664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04382124915719032, 0.0949988141655922, 0.09546953439712524, 0.09317920356988907, 0.08882026374340057, 0.0662958025932312, 0.04563190042972565, 0.006634643767029047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006230214610695839, 0.013405581936240196, 0.0046513997949659824, 0.008902445435523987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0009292112663388252, 0, 0, 0.010167548432946205, 0, 0, 0, 0, 0, 1.2567737030622084e-05, 0.004200757015496492, 0, 0, 0, 0.060299407690763474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.015095355920493603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5060296654701233, 0, 0, 0, 0, 0.05702877417206764, 0.4168291985988617, 0.19674977660179138, 0.0965173989534378, 0.11148474365472794, 0.09261421114206314, 0.1401524394750595, 0.17348812520503998, 0, 0, 0, 0, 0.7956852316856384, 0.6795983910560608, 0.3092491924762726, 0.671389102935791, 0, 0, 0, 0, 0, 0.0787278562784195, 0.5065103769302368, 0.13226614892482758, 0.1790090948343277, 0.5292930603027344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.41919445991516113, 0.3531774878501892, 0.44051024317741394, 0, 0, 0, 0.005292925983667374, 0.33193013072013855, 0, 0, 0, 0, 0.1865982562303543, 0.03569430857896805, 0, 0, 0.005417770240455866, 0, 0.23279941082000732, 0.5007694959640503, 0.032249800860881805, 0.2751851975917816, 0.1725805103778839, 0.014729012735188007, 0.0002365027612540871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04689473286271095, 0.01580251008272171, 0.00028071936685591936, 0, 0, 0.18421608209609985, 0.3169191777706146, 0.7711166739463806, 0.6506675481796265, 0.5223808884620667, 0.3364957273006439, 0.4816138744354248, 0.3381527066230774, 0.4632303714752197, 0.15427164733409882, 0.1846240609884262, 0.11242661625146866, 0.10939843952655792, 0, 0.07559767365455627, 0.06037674844264984, 0.031212642788887024, 0.17885541915893555, 0.0625753179192543, 0.03779999166727066, 0.15706971287727356, 0.034227605909109116, 0.02561808191239834, 0.1086193174123764, 0.012266191653907299, 0.02653282694518566, 0.0767068862915039, 0.007774392608553171, 0.003242705250158906, 0, 0.06663298606872559, 0.030486278235912323, 0.0004941557417623699, 0, 0.0018026804318651557, 0.006759654730558395, 0.0319727323949337, 0.04730619490146637, 0.027202319353818893, 0.030397817492485046, 0.6615606546401978, 0.5054564476013184, 0.33201873302459717, 0.7229887247085571, 0.9000099897384644, 0.8898890614509583, 0.42234909534454346, 0.7874554991722107, 0.7539122700691223, 0.9692405462265015, 0.9976118206977844, 0.4205490052700043, 0.8995993733406067, 0.9677127599716187, 0.46792370080947876, 0.8472428321838379, 0.830367386341095, 0.4712916910648346, 0.12935516238212585, 0.15508204698562622, 0.11329098790884018, 0.10205938667058945, 0.09514681249856949, 0.048849646002054214, 0.0318598672747612, 0.0003452827222645283, 0, 0, 0, 0.014401604421436787, 0.0030592612456530333, 0, 0, 0, 0, 0.0032292543910443783, 0, 0, 0, 0.3814968466758728, 0.23028671741485596, 0.13219153881072998, 0.062362827360630035, 0.04505410045385361, 0.0063659995794296265, 0.021797120571136475, 0.4722386598587036, 0.6545447707176208, 0.7490707635879517, 0.7699492573738098, 0.6297398805618286, 0.008826816454529762, 6.55344920232892e-05, 0, 0.030029388144612312, 0.05324723199009895, 0.08427061885595322, 0.010726828128099442, 0.04510008543729782, 0.021437564864754677, 0.014487260021269321, 0.020308613777160645, 0, 0, 0.0018940480658784509, 0.00013046433741692454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004425766528584063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006687181070446968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.025259429588913918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0011031606700271368, 0.03872823342680931, 0, 0, 0, 0.006018569692969322, 0.0019320064457133412, 0, 0, 0, 0, 0.03054164908826351, 0.016374466940760612, 0.009238390251994133, 0, 0, 0, 0.006082415115088224, 0.025142524391412735, 0.0005674327840097249, 0, 0.11898800730705261, 0, 0, 0, 0, 0.10812143236398697, 0, 0.08642493933439255, 0.0005071770283393562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004659699276089668, 0.012328180484473705, 0.02155432105064392, 0.03198114410042763, 0.04204786568880081, 0.04561696946620941, 0.0001811348192859441, 0, 0, 0, 0, 0, 0, 0, 0, 0.003412895370274782, 0.04000000283122063, 0.08000000566244125, 0.0008744613151066005, 9.95428636088036e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04784734547138214, 0.04812491312623024, 0.08611946552991867, 0.0932122990489006, 0.09376246482133865, 0.08533379435539246, 0.07705538719892502, 0.039630454033613205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.011276254430413246, 0.0005519100232049823, 0.00720482412725687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.979429210536182e-05, 0, 0, 0.0030587741639465094, 0, 0, 0, 0, 0, 0.0011418960057199001, 0.001222357153892517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5020419359207153, 0, 0, 0.00046086954534985125, 0.08211885392665863, 0.5664075613021851, 0.1848207712173462, 0.08849091827869415, 0.09632067382335663, 0.11690182983875275, 0.13986240327358246, 0, 0, 0, 0, 0.8064258098602295, 0.7125887274742126, 0.3651582896709442, 0.7501052021980286, 0, 0, 0, 0, 0, 0.06740061938762665, 0.5521548986434937, 0.1484704464673996, 0.15991872549057007, 0.5351521968841553, 0.08969363570213318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}
},{}],5:[function(require,module,exports){
module.exports = "# Blender v2.76 (sub 0) OBJ File: 'ponytail.blend'\n# www.blender.org\nmtllib ponytail.mtl\no ponytail-ponytail01\nv 0.147441 2.889045 -1.982666\nv 0.215121 2.900172 -1.976349\nv 0.258135 2.800309 -1.911376\nv 0.279191 2.784666 -1.907165\nv 0.330327 2.803917 -1.941757\nv 0.316791 2.701045 -1.876784\nv 0.280695 2.655023 -1.856029\nv 0.270468 2.763008 -1.885207\nv 0.301451 2.599374 -1.816324\nv 0.234372 2.422505 -1.716458\nv 0.119467 2.353319 -1.699312\nv 0.117662 2.407464 -1.737213\nv 0.075249 2.300378 -1.660208\nv 0.284004 2.496800 -1.750749\nv 0.089989 2.927545 -2.003421\nv 0.163985 2.871296 -1.967325\nv 0.138116 2.914613 -2.001616\nv -0.127790 2.885734 -2.035907\nv -0.283304 2.776243 -1.958000\nv -0.195470 2.894759 -2.039817\nv -0.263451 2.606893 -1.820234\nv -0.220738 2.590048 -1.782634\nv -0.203291 2.459502 -1.711946\nv -0.128392 2.371971 -1.696906\nv -0.092296 2.343996 -1.681264\nv 0.040657 2.297371 -1.661712\nv 0.004261 2.302483 -1.664420\nv -0.043567 2.916417 -2.016957\nv -0.084175 2.877613 -2.027786\nv -0.235477 2.601480 -1.802487\nv -0.222242 2.562977 -1.747440\nv 0.149848 2.674573 -2.350844\nv 0.252420 2.693222 -2.344227\nv 0.284004 2.561775 -2.275945\nv 0.323710 2.540117 -2.259101\nv 0.413649 2.567791 -2.252182\nv 0.405527 2.460704 -2.177885\nv 0.347774 2.407163 -2.149308\nv 0.301451 2.520263 -2.247068\nv 0.380862 2.358433 -2.104790\nv 0.282200 2.220064 -1.993495\nv 0.158872 2.147874 -1.966122\nv 0.154961 2.187278 -2.018160\nv 0.080965 2.104859 -1.922205\nv 0.323108 2.266387 -2.039216\nv 0.083973 2.697135 -2.393858\nv 0.158872 2.637877 -2.333097\nv 0.153758 2.719393 -2.375209\nv -0.175918 2.713678 -2.412508\nv -0.344366 2.583430 -2.308131\nv -0.222843 2.693523 -2.409500\nv -0.374145 2.393626 -2.094563\nv -0.294433 2.357831 -2.059971\nv -0.236379 2.222471 -2.010038\nv -0.177723 2.151784 -1.945667\nv -0.130197 2.125915 -1.924912\nv 0.039153 2.096738 -1.914384\nv -0.004763 2.096136 -1.910775\nv -0.098011 2.746765 -2.423939\nv -0.133205 2.707663 -2.411004\nv -0.332936 2.380393 -2.069597\nv -0.282101 2.318427 -2.042224\nv 0.204593 2.242927 -2.628182\nv 0.348977 2.230592 -2.595094\nv 0.387179 2.185474 -2.535536\nv 0.455159 2.171036 -2.517187\nv 0.540286 2.150580 -2.486505\nv 0.555626 2.064853 -2.378819\nv 0.486743 2.028757 -2.340617\nv 0.402820 2.155393 -2.504553\nv 0.535774 1.999881 -2.296400\nv 0.392593 2.014921 -2.115017\nv 0.240990 2.091623 -2.017558\nv 0.243998 1.993564 -2.116822\nv 0.115556 1.976418 -1.995299\nv 0.450046 1.963785 -2.210973\nv 0.131198 2.335573 -2.764444\nv 0.213016 2.217058 -2.596598\nv 0.214820 2.288648 -2.691951\nv -0.213518 2.267592 -2.656457\nv -0.492059 2.185173 -2.499439\nv -0.283605 2.248641 -2.626678\nv -0.454760 2.016425 -2.336105\nv -0.343464 1.987247 -2.306927\nv -0.328123 1.938217 -2.213078\nv -0.249915 1.900015 -2.121635\nv -0.192763 1.889788 -2.088247\nv 0.059307 1.915356 -1.998006\nv 0.000049 1.872040 -2.012144\nv -0.107637 2.357530 -2.776175\nv -0.157870 2.279024 -2.673302\nv -0.396705 2.005897 -2.311440\nv -0.357301 1.972207 -2.283465\nv 0.307166 1.309245 -2.939209\nv 0.482532 1.297211 -2.866716\nv 0.557431 1.285783 -2.796931\nv 0.650077 1.276155 -2.773167\nv 0.733098 1.265627 -2.727446\nv 0.718660 1.226224 -2.571932\nv 0.634135 1.207273 -2.512073\nv 0.580593 1.266832 -2.742185\nv 0.662410 1.195541 -2.431459\nv 0.454558 1.172081 -2.108400\nv 0.251518 1.206370 -1.945066\nv 0.284606 1.185314 -2.058467\nv 0.078257 1.197348 -1.933034\nv 0.534270 1.167568 -2.263613\nv 0.156164 1.388956 -3.178645\nv 0.320702 1.289090 -2.879951\nv 0.285809 1.339323 -3.034262\nv -0.427988 1.322478 -3.005384\nv -0.826849 1.303528 -2.771663\nv -0.529358 1.307438 -2.948233\nv -0.740820 1.204565 -2.514179\nv -0.596737 1.185314 -2.469059\nv -0.530561 1.178997 -2.316252\nv -0.406331 1.188624 -2.163747\nv -0.325717 1.192534 -2.108099\nv 0.006366 1.197947 -1.945968\nv -0.071842 1.199152 -1.973642\nv -0.225250 1.390761 -3.186165\nv -0.337448 1.330301 -3.029148\nv -0.669531 1.204867 -2.476278\nv -0.602753 1.181404 -2.426646\nv 0.315287 0.130713 -3.443650\nv 0.494865 0.100331 -3.328444\nv 0.600746 0.090104 -3.233090\nv 0.718359 0.069647 -3.135932\nv 0.807396 0.048293 -3.013506\nv 0.805591 0.009790 -2.735568\nv 0.733700 0.001967 -2.633596\nv 0.629322 0.070852 -3.112771\nv 0.765885 -0.007356 -2.476278\nv 0.540286 0.029942 -2.029892\nv 0.277988 0.063032 -1.862045\nv 0.337246 0.058219 -1.975146\nv 0.109240 0.065138 -1.823844\nv 0.643460 -0.001340 -2.231427\nv 0.115256 0.205008 -3.631349\nv 0.321303 0.111759 -3.359426\nv 0.269867 0.154474 -3.522460\nv -0.623508 0.171017 -3.418082\nv -1.005825 0.165905 -3.040277\nv -0.729991 0.158986 -3.338370\nv -0.842190 0.063632 -2.544860\nv -0.676449 0.052203 -2.431158\nv -0.559739 0.052504 -2.159536\nv -0.394600 0.069349 -1.968829\nv -0.307669 0.072355 -1.920701\nv 0.037950 0.066340 -1.821437\nv -0.039055 0.068747 -1.830161\nv -0.371739 0.223057 -3.606683\nv -0.526049 0.183952 -3.448763\nv -0.769396 0.069647 -2.468758\nv -0.670734 0.043480 -2.338813\nv 0.192862 -1.893971 -3.393718\nv 0.388683 -1.994738 -3.307388\nv 0.469297 -2.003462 -3.208425\nv 0.571870 -2.019406 -3.165411\nv 0.651581 -2.043167 -3.087503\nv 0.636541 -2.107238 -2.819491\nv 0.560138 -2.179431 -2.706691\nv 0.501482 -2.022111 -3.114876\nv 0.576983 -2.246207 -2.565917\nv 0.394699 -2.143636 -2.117725\nv 0.197073 -2.278092 -1.893329\nv 0.242193 -2.186950 -2.048542\nv 0.052088 -2.338853 -1.807300\nv 0.462679 -2.252223 -2.348439\nv 0.017195 -1.660851 -3.719484\nv 0.213918 -1.954133 -3.302275\nv 0.159172 -1.810049 -3.535695\nv -0.461678 -1.689428 -3.462601\nv -0.729390 -1.690031 -3.048700\nv -0.530862 -1.701158 -3.371459\nv -0.605159 -1.768537 -2.504554\nv -0.471003 -1.752295 -2.396266\nv -0.427688 -1.724018 -2.080426\nv -0.333537 -1.738757 -1.843697\nv -0.267662 -1.809748 -1.784740\nv -0.002056 -2.264257 -1.763684\nv -0.061615 -2.159577 -1.733905\nv -0.323611 -1.608211 -3.717077\nv -0.400616 -1.676794 -3.504713\nv -0.535976 -1.743872 -2.426346\nv -0.476417 -1.755003 -2.310839\nv -0.030933 -4.824962 -3.174435\nv 0.247006 -4.829474 -3.065546\nv 0.257233 -4.862863 -3.040278\nv 0.416958 -4.187568 -3.095325\nv 0.423275 -4.749161 -2.933795\nv 0.418462 -4.841508 -2.812273\nv 0.405527 -4.609891 -2.797533\nv 0.272574 -4.746754 -3.042985\nv 0.266257 -4.762999 -2.688644\nv 0.219332 -4.741341 -2.562308\nv 0.104728 -4.555447 -2.290385\nv 0.197976 -4.478142 -2.508163\nv 0.084574 -4.508522 -2.280458\nv 0.241592 -4.953104 -2.626980\nv -0.069435 -4.856847 -3.209027\nv -0.010479 -4.631850 -3.208426\nv -0.041762 -4.858353 -3.183459\nv -0.085077 -5.161859 -2.972899\nv -0.119067 -5.191036 -2.907024\nv -0.098914 -5.177502 -2.950640\nv -0.121173 -5.204875 -2.840848\nv -0.176520 -4.910089 -2.753616\nv -0.170203 -4.989201 -2.697668\nv -0.166894 -4.907984 -2.688343\nv -0.151253 -4.573494 -2.346935\nv -0.092296 -4.656214 -2.331895\nv -0.114856 -4.645385 -2.336407\nv -0.119970 -4.833385 -3.222563\nv -0.077256 -5.100194 -3.024938\nv -0.116360 -5.202467 -2.810768\nv -0.173211 -4.990704 -2.719024\nv -0.075752 -4.546422 -2.312644\nv -0.146139 -4.647490 -3.294755\nv 0.280996 -4.448363 -2.714813\nv -0.119067 -5.168477 -2.803549\nv 0.118865 -4.300370 -2.260305\nv 0.403422 -3.886469 -3.128413\nv 0.235275 -4.637565 -3.099235\nv -0.174114 -4.370155 -2.325879\nv -0.289019 -2.945265 -3.227376\nv -0.349480 -3.112209 -2.759933\nv -0.311880 -3.146200 -2.638410\nv -0.283003 -3.156728 -2.594493\nv -0.233371 -2.922405 -3.286633\nv -0.371137 -2.997905 -3.049302\nv -0.208405 -2.917892 -3.294755\nv -0.219234 -3.815479 -2.519895\nv -0.231867 -3.813975 -2.589380\nv -0.199080 -3.706591 -2.401681\nv -0.237883 -3.696665 -2.585770\nv -0.017397 -3.602815 -2.102084\nv -0.043266 -3.604017 -2.117124\nv -0.086882 -3.533029 -2.115620\nv -0.168699 -3.388346 -2.131563\nv -0.208104 -3.290886 -2.130058\nv 0.148344 -3.565818 -2.099076\nv 0.099012 -3.602815 -2.080426\nv 0.171204 -3.414815 -2.112612\nv 0.333035 -3.574839 -2.514480\nv 0.288817 -3.538144 -2.370397\nv 0.238283 -3.485504 -2.303921\nv 0.378455 -3.541752 -2.640515\nv 0.386276 -3.461740 -2.700074\nv 0.481028 -3.477982 -3.071862\nv 0.479825 -3.596498 -2.909130\nv 0.456964 -3.571833 -2.816183\nv 0.413649 -3.147104 -3.171427\nv 0.441623 -3.272535 -3.169923\nv 0.330929 -3.602212 -3.148566\nv 0.296036 -3.552883 -3.190076\nv 0.344766 -3.590783 -3.093219\nv 0.241592 -3.474675 -3.173833\nv -0.232770 -3.474976 -3.395523\nv -0.178626 -3.507159 -3.470723\nv -0.048379 -3.495429 -3.453577\nv 0.032536 -3.474675 -3.357020\nv 0.055397 -3.435870 -3.262870\nv 0.062917 -3.415718 -3.205116\nv -0.133506 -4.516043 -3.190679\nv -0.105230 -4.444751 -3.224368\nv -0.177723 -4.639670 -3.102845\nv -0.186446 -4.798493 -2.962070\nv -0.174715 -4.843011 -2.894691\nv -0.163285 -4.809021 -2.878147\nv -0.092296 -4.356618 -3.233091\nv -0.652084 -0.757550 -3.458991\nv 0.747837 -0.956681 -3.122998\nv -0.030632 -0.976231 -1.734206\nv 0.614583 -1.069479 -2.270832\nv -0.741723 -0.849895 -2.555088\nv 0.521034 -0.997588 -2.017559\nv -0.486644 -0.725665 -3.592847\nv -0.369633 -0.666408 -3.779944\nv 0.043064 -1.020150 -1.730897\nv 0.761975 -1.003603 -2.839344\nv 0.694295 -1.040001 -2.725641\nv 0.043966 -0.694985 -3.813032\nv -0.668929 -0.832749 -2.476278\nv -0.587412 -0.844783 -2.443792\nv -0.564852 -0.743414 -3.552238\nv -0.499579 -0.821019 -2.142992\nv 0.192862 -0.793044 -3.664738\nv 0.234072 -0.848392 -3.547125\nv -0.585607 -0.847488 -2.348438\nv 0.335140 -1.002100 -1.952887\nv 0.571569 -0.937730 -3.200905\nv 0.652785 -0.936224 -3.229782\nv 0.533367 -0.919982 -3.310095\nv 0.249412 -0.889600 -3.449365\nv 0.279793 -1.029473 -1.803089\nv -0.887310 -0.749128 -3.126006\nv 0.431998 -0.913364 -3.418684\nv -0.362414 -0.811094 -1.917092\nv 0.731895 -1.071283 -2.547869\nv -0.282402 -0.836961 -1.854826\nv 0.112849 -1.052634 -1.743530\nv 0.152856 2.877914 -1.974845\nv 0.261745 2.775942 -1.893930\nv 0.298743 2.678185 -1.866858\nv 0.333636 2.769626 -1.916189\nv 0.271671 2.771132 -1.895133\nv 0.288215 2.626446 -1.838583\nv 0.173912 2.413781 -1.727287\nv 0.117361 2.380092 -1.722775\nv 0.102622 2.326247 -1.673143\nv 0.057803 2.298573 -1.659306\nv 0.263550 2.459200 -1.728189\nv 0.145035 2.903482 -1.991689\nv 0.243697 2.862573 -1.945667\nv 0.306263 2.798504 -1.927018\nv 0.188350 2.886337 -1.971837\nv 0.114955 2.920929 -2.004624\nv 0.301451 2.547635 -1.778122\nv -0.288117 2.698939 -1.883101\nv -0.250216 2.604187 -1.810307\nv -0.221339 2.576815 -1.766391\nv -0.167797 2.415284 -1.702922\nv -0.111246 2.358132 -1.688183\nv -0.045371 2.323840 -1.670736\nv 0.022309 2.298874 -1.662915\nv 0.021105 2.923936 -2.012746\nv -0.103727 2.880321 -2.032598\nv -0.247509 2.845728 -2.000112\nv -0.164187 2.892955 -2.038614\nv -0.064623 2.897166 -2.021168\nv -0.227656 2.595765 -1.793463\nv -0.216226 2.511840 -1.726083\nv 0.150148 2.654722 -2.339414\nv 0.290020 2.538312 -2.256995\nv 0.375748 2.433632 -2.164349\nv 0.425982 2.522971 -2.221500\nv 0.310775 2.528685 -2.251280\nv 0.362212 2.380992 -2.128854\nv 0.212414 2.202017 -2.007632\nv 0.156465 2.168931 -1.996803\nv 0.125182 2.127719 -1.937546\nv 0.059909 2.100347 -1.916790\nv 0.305963 2.244431 -2.012144\nv 0.156465 2.699539 -2.364079\nv 0.273777 2.634567 -2.319862\nv 0.374846 2.563278 -2.260604\nv 0.203089 2.667955 -2.339113\nv 0.124280 2.709768 -2.384233\nv 0.361611 2.317523 -2.070198\nv -0.385576 2.495899 -2.196835\nv -0.355797 2.387309 -2.079523\nv -0.287515 2.337980 -2.052752\nv -0.209307 2.186676 -1.977251\nv -0.154862 2.138247 -1.933033\nv -0.068533 2.109070 -1.913181\nv 0.018097 2.095834 -1.911376\nv -0.011682 2.718790 -2.414012\nv -0.152155 2.708564 -2.410703\nv -0.293832 2.652917 -2.362876\nv -0.201787 2.709768 -2.411907\nv -0.116360 2.729620 -2.418825\nv -0.311579 2.368359 -2.065686\nv -0.262549 2.270300 -2.024176\nv 0.083371 2.777147 -2.275343\nv -0.284206 2.477250 -1.963414\nv -0.320603 2.473939 -2.013046\nv -0.256533 2.453787 -1.963114\nv 0.257233 2.335874 -1.885507\nv -0.153960 2.777747 -2.283465\nv -0.218030 2.323840 -1.902653\nv 0.358903 2.545529 -2.098173\nv 0.145336 2.784365 -2.239549\nv 0.143832 2.750977 -2.213078\nv -0.253525 2.427014 -1.922205\nv 0.135710 2.321434 -1.881296\nv 0.283102 2.598169 -2.159837\nv 0.294532 2.625843 -2.158031\nv -0.077858 2.803315 -2.276246\nv 0.268964 2.638477 -2.171267\nv 0.163083 2.722402 -2.221200\nv 0.137515 2.269999 -1.847306\nv -0.317896 2.651713 -2.201347\nv 0.236177 2.767821 -2.238646\nv -0.114856 2.771731 -2.269629\nv 0.372139 2.651713 -2.178185\nv -0.153058 2.257666 -1.834973\nv 0.312580 2.524172 -2.036809\nv 0.338750 2.468225 -2.042525\nv -0.111848 2.233902 -1.807300\nv 0.077656 2.210440 -1.787748\nv 0.039755 2.199008 -1.782032\nv -0.213819 2.773837 -2.291286\nv -0.001154 2.197806 -1.779927\nv 0.299947 2.390318 -1.947171\nv 0.205496 2.229089 -2.609532\nv 0.393495 2.168931 -2.516585\nv 0.517124 2.045903 -2.358064\nv 0.564951 2.111778 -2.433264\nv 0.426583 2.162011 -2.508463\nv 0.509604 2.014921 -2.322569\nv 0.312279 2.004393 -2.115619\nv 0.245803 2.047105 -2.075613\nv 0.188049 2.039586 -1.997706\nv 0.087582 1.945434 -1.994698\nv 0.425681 1.988751 -2.159235\nv 0.212715 2.266990 -2.662172\nv 0.372139 2.209837 -2.570428\nv 0.503287 2.163213 -2.510569\nv 0.278891 2.223977 -2.595094\nv 0.182334 2.312110 -2.736470\nv 0.499678 1.981530 -2.252483\nv -0.501684 2.107868 -2.417021\nv -0.427688 2.009505 -2.320765\nv -0.349781 1.981229 -2.300611\nv -0.292929 1.920468 -2.164649\nv -0.221941 1.893999 -2.102985\nv -0.098011 1.880161 -2.046134\nv 0.029227 1.892794 -2.002819\nv 0.007269 2.346701 -2.789711\nv -0.183739 2.272406 -2.662774\nv -0.404526 2.222772 -2.569526\nv -0.249614 2.258567 -2.642921\nv -0.132904 2.322337 -2.729852\nv -0.364219 1.995670 -2.310236\nv -0.346472 1.955362 -2.245264\nv 0.391390 2.134036 -2.149609\nv 0.486743 2.291657 -2.306025\nv 0.426283 2.247437 -2.267824\nv 0.051486 2.050114 -1.997104\nv -0.000251 2.026952 -2.002218\nv 0.130596 2.591253 -2.628483\nv -0.370536 2.218862 -2.214582\nv -0.419867 2.231496 -2.244061\nv 0.338750 2.147272 -2.087945\nv -0.323611 2.199912 -2.205558\nv -0.209307 2.533197 -2.570428\nv -0.280897 2.112679 -2.143292\nv 0.228056 2.546132 -2.554185\nv 0.197675 2.476648 -2.494927\nv -0.320904 2.173741 -2.189315\nv 0.202187 2.129825 -2.099376\nv 0.361310 2.374374 -2.415215\nv 0.388081 2.393026 -2.433564\nv -0.125083 2.612610 -2.637506\nv 0.344766 2.402952 -2.429955\nv 0.215422 2.451682 -2.483497\nv 0.200683 2.157499 -2.021168\nv -0.428891 2.408666 -2.429955\nv 0.327019 2.489583 -2.490716\nv -0.169602 2.532297 -2.565916\nv 0.494865 2.400846 -2.414012\nv -0.213518 2.061844 -2.065084\nv 0.468695 2.203521 -2.225411\nv -0.161179 2.043496 -2.037411\nv 0.099614 2.083803 -1.996502\nv -0.271272 2.507030 -2.544559\nv 0.309873 1.297814 -2.905519\nv 0.567959 1.274652 -2.764143\nv 0.671434 1.215696 -2.538543\nv 0.744228 1.249385 -2.652547\nv 0.612478 1.271043 -2.756323\nv 0.646468 1.202158 -2.478684\nv 0.358603 1.178696 -2.079523\nv 0.274980 1.195540 -2.012445\nv 0.166692 1.204264 -1.924010\nv 0.042763 1.197947 -1.937546\nv 0.503889 1.170876 -2.184803\nv 0.300247 1.324885 -2.988239\nv 0.525847 1.293602 -2.837538\nv 0.699108 1.273749 -2.758428\nv 0.396503 1.292099 -2.870626\nv 0.232267 1.369102 -3.120591\nv 0.608567 1.182307 -2.343024\nv -0.816622 1.262922 -2.642319\nv -0.708334 1.205168 -2.490716\nv -0.598843 1.183811 -2.455824\nv -0.473710 1.184112 -2.236541\nv -0.367528 1.190730 -2.133066\nv -0.202088 1.196745 -2.037411\nv -0.032738 1.198550 -1.957399\nv -0.037551 1.402192 -3.221359\nv -0.380763 1.325186 -3.015311\nv -0.706529 1.314658 -2.866415\nv -0.479726 1.315562 -2.979215\nv -0.281800 1.361885 -3.111567\nv -0.625614 1.193736 -2.473270\nv -0.572372 1.181103 -2.367388\nv -0.599144 1.616059 -2.431760\nv 0.421470 1.598614 -2.126147\nv -0.244802 1.804058 -2.849871\nv -0.168098 1.878959 -2.986133\nv 0.494865 1.573646 -2.247670\nv 0.647972 1.654562 -2.480188\nv 0.576382 1.628993 -2.432361\nv 0.035243 1.557102 -1.985975\nv -0.032136 1.539055 -2.008835\nv 0.147140 1.880462 -2.988841\nv -0.527854 1.611847 -2.416419\nv -0.461076 1.592298 -2.404387\nv -0.319400 1.794735 -2.829417\nv -0.426184 1.563720 -2.275946\nv 0.252721 1.822711 -2.870326\nv 0.256631 1.779996 -2.788809\nv -0.481531 1.582369 -2.362877\nv 0.262648 1.587183 -2.093661\nv 0.495767 1.718633 -2.634499\nv 0.554724 1.730363 -2.655855\nv 0.478321 1.742096 -2.674806\nv 0.266257 1.755931 -2.741282\nv 0.267160 1.643133 -1.963414\nv -0.663815 1.748714 -2.639612\nv 0.416055 1.766459 -2.735567\nv 0.650980 1.718332 -2.620662\nv -0.323009 1.550484 -2.156528\nv 0.611575 1.608540 -2.372502\nv -0.253525 1.545673 -2.117424\nv 0.096606 1.583273 -1.971837\nv -0.405429 1.778791 -2.788809\nv 0.314987 0.120483 -3.397026\nv 0.613982 0.078672 -3.164207\nv 0.767991 0.005579 -2.684432\nv 0.831760 0.029343 -2.871529\nv 0.671133 0.069949 -3.122997\nv 0.747837 -0.002542 -2.556291\nv 0.436209 0.043781 -2.001616\nv 0.310174 0.060625 -1.921002\nv 0.197976 0.065436 -1.828958\nv 0.073745 0.066340 -1.821136\nv 0.601950 0.015203 -2.124042\nv 0.296939 0.142744 -3.484859\nv 0.555025 0.096722 -3.288437\nv 0.771901 0.061526 -3.089007\nv 0.399211 0.105144 -3.340175\nv 0.200683 0.181846 -3.588335\nv 0.717457 -0.004949 -2.352349\nv -0.978753 0.117175 -2.793923\nv -0.810305 0.066039 -2.501545\nv -0.670433 0.047691 -2.388746\nv -0.484238 0.061526 -2.058167\nv -0.353390 0.071153 -1.941757\nv -0.178024 0.072355 -1.868062\nv -0.001154 0.067843 -1.823543\nv -0.130498 0.224862 -3.671957\nv -0.573576 0.177035 -3.432220\nv -0.900244 0.167107 -3.198799\nv -0.678855 0.165905 -3.381685\nv -0.449947 0.204408 -3.531784\nv -0.717959 0.060927 -2.452515\nv -0.624110 0.047992 -2.246167\nv 0.792356 0.654103 -2.870326\nv -0.055298 0.631243 -1.891223\nv 0.593226 0.581007 -2.219395\nv -0.810606 0.634852 -2.515683\nv 0.496068 0.600258 -2.041322\nv -0.437313 0.759684 -3.240610\nv -0.305864 0.813526 -3.400636\nv 0.770698 0.612591 -2.638108\nv 0.694897 0.600861 -2.557795\nv 0.019902 0.629137 -1.870768\nv 0.148344 0.800292 -3.397627\nv -0.721870 0.638159 -2.468457\nv -0.653287 0.620715 -2.440483\nv -0.532065 0.750358 -3.221359\nv -0.558235 0.619811 -2.230826\nv 0.305361 0.748252 -3.268585\nv 0.339953 0.718774 -3.175938\nv -0.664718 0.616504 -2.375510\nv 0.301451 0.617706 -1.989584\nv 0.619396 0.667637 -2.935900\nv 0.689783 0.669442 -2.960265\nv 0.608266 0.687190 -3.017417\nv 0.344766 0.699824 -3.114575\nv 0.255729 0.631541 -1.876785\nv -0.954388 0.741935 -2.917551\nv 0.500881 0.695914 -3.098632\nv -0.398510 0.628836 -2.054858\nv 0.727684 0.590935 -2.432963\nv -0.311278 0.631243 -2.008234\nv 0.089989 0.628233 -1.863850\nv -0.646369 0.737724 -3.159695\nv 0.198878 -1.923148 -3.341980\nv 0.483434 -2.011885 -3.153378\nv 0.597438 -2.138822 -2.765347\nv 0.667223 -2.075655 -2.955753\nv 0.533969 -2.020006 -3.139241\nv 0.567959 -2.212518 -2.637507\nv 0.317694 -2.165593 -2.084637\nv 0.219032 -2.232673 -1.970333\nv 0.131800 -2.310881 -1.839787\nv 0.024113 -2.301856 -1.782634\nv 0.436209 -2.197477 -2.223306\nv 0.181131 -1.852760 -3.466511\nv 0.434705 -2.000154 -3.267683\nv 0.619697 -2.032639 -3.137136\nv 0.293931 -1.975189 -3.301072\nv 0.099614 -1.739962 -3.638268\nv 0.529758 -2.250720 -2.460036\nv -0.711041 -1.742969 -2.769558\nv -0.576283 -1.757108 -2.462141\nv -0.469800 -1.753497 -2.356560\nv -0.389486 -1.729736 -1.960708\nv -0.304059 -1.773953 -1.810308\nv -0.167797 -1.985717 -1.745335\nv -0.032738 -2.212819 -1.745335\nv -0.156667 -1.636186 -3.760392\nv -0.429192 -1.685518 -3.485160\nv -0.649979 -1.702363 -3.213840\nv -0.498977 -1.696347 -3.420489\nv -0.363016 -1.643105 -3.617813\nv -0.500180 -1.747481 -2.412208\nv -0.460174 -1.740264 -2.194429\nv -0.704724 -0.285296 -3.435528\nv 0.787543 -0.456150 -3.085999\nv -0.033039 -0.452539 -1.789252\nv 0.650679 -0.538569 -2.274141\nv -0.800980 -0.384560 -2.552681\nv 0.473809 -1.557677 -2.048842\nv -0.517025 -0.257622 -3.559458\nv -0.360008 -1.132047 -3.780546\nv 0.046974 -0.476001 -1.783537\nv 0.792055 -0.500669 -2.804451\nv 0.636842 -1.602196 -2.690147\nv 0.034040 -1.168143 -3.811227\nv -0.723374 -0.373430 -2.470263\nv -0.641255 -0.389070 -2.432963\nv -0.530862 -1.218075 -3.540809\nv -0.536878 -0.381551 -2.143895\nv 0.236478 -0.314774 -3.623228\nv 0.223243 -1.377798 -3.469820\nv -0.640052 -0.395688 -2.340317\nv 0.302955 -1.582344 -1.973943\nv 0.603754 -0.432989 -3.190076\nv 0.622103 -1.484584 -3.197897\nv 0.517124 -1.470444 -3.251740\nv 0.247006 -1.435854 -3.375369\nv 0.250616 -1.641599 -1.811211\nv -0.825044 -1.221084 -3.088105\nv 0.422071 -1.465934 -3.375068\nv -0.383169 -0.369821 -1.938448\nv 0.670231 -1.651829 -2.522000\nv -0.297441 -0.381250 -1.885508\nv 0.086980 -1.684916 -1.729393\nv -0.018901 -4.730813 -3.193686\nv 0.265956 -4.805713 -3.042685\nv 0.413950 -4.727505 -2.805053\nv 0.422673 -4.795785 -2.873334\nv 0.413047 -4.040177 -3.112771\nv 0.275582 -4.609291 -2.704285\nv 0.210609 -4.611397 -2.536439\nv 0.111947 -4.428509 -2.275044\nv 0.094501 -4.531984 -2.285271\nv -0.084175 -4.601770 -2.322570\nv 0.231665 -4.848726 -2.595696\nv -0.035445 -4.842108 -3.179248\nv 0.252420 -4.846620 -3.053514\nv 0.419966 -4.467913 -3.023434\nv 0.243096 -4.736527 -3.086602\nv -0.054095 -4.858652 -3.197897\nv 0.254827 -4.859254 -2.658263\nv -0.122677 -5.198856 -2.875140\nv -0.119669 -5.203670 -2.825808\nv -0.175016 -4.950698 -2.736471\nv -0.168398 -4.948894 -2.693156\nv -0.162382 -4.472425 -2.337610\nv -0.133205 -4.609292 -2.340919\nv -0.103727 -4.650801 -2.334001\nv -0.093198 -4.846921 -3.219254\nv -0.081167 -5.131176 -2.999370\nv -0.110344 -5.185322 -2.930186\nv -0.092296 -5.169679 -2.962371\nv -0.134107 -4.743145 -3.262569\nv -0.118165 -5.185322 -2.806557\nv -0.171707 -4.989800 -2.708497\nv 0.014789 -2.976250 -1.975147\nv -0.073045 -4.128010 -2.242558\nv -0.108238 -4.874897 -3.103747\nv 0.557130 -2.729893 -3.091113\nv -0.076955 -2.861946 -1.951082\nv 0.376350 -2.901048 -2.441085\nv -0.467995 -2.442328 -2.616150\nv 0.235876 -4.142451 -2.478384\nv -0.346773 -2.564753 -3.412367\nv -0.154862 -4.183357 -3.356419\nv 0.534570 -2.834573 -2.860400\nv 0.416657 -4.101239 -2.809866\nv -0.054095 -4.195090 -3.346492\nv -0.415355 -2.445940 -2.522301\nv -0.371438 -2.454962 -2.484099\nv -0.083573 -4.836695 -3.137737\nv -0.306165 -2.783738 -2.299108\nv 0.110142 -2.613483 -3.401538\nv 0.008773 -4.147562 -3.217750\nv -0.330529 -2.776216 -2.456426\nv 0.208504 -3.986035 -2.410705\nv 0.450346 -2.571372 -3.143753\nv 0.433502 -3.743289 -3.122998\nv 0.292126 -4.254046 -3.104048\nv 0.026520 -4.030553 -3.193085\nv 0.118865 -4.061234 -2.202852\nv -0.146440 -4.932049 -3.026442\nv 0.268964 -4.214040 -3.140746\nv -0.275182 -2.753055 -2.102986\nv 0.304158 -4.160196 -2.673303\nv -0.221339 -2.626117 -1.948977\nv 0.072843 -2.975346 -1.973041\nv -0.322709 -2.311179 -3.357923\nv 0.326417 -3.963171 -2.700976\nv -0.333838 -2.707334 -2.499440\nv 0.145035 -3.868119 -2.181495\nv 0.417259 -2.772005 -3.138038\nv 0.232868 -4.070857 -3.140445\nv -0.278190 -2.540089 -1.956497\nv -0.422574 -2.335546 -3.257154\nv -0.154862 -5.009955 -2.908528\nv -0.144936 -5.028303 -2.857091\nv -0.139822 -4.994915 -2.846864\nv -0.358805 -2.321107 -3.338972\nv -0.551016 -2.351188 -3.010800\nv -0.075451 -4.761795 -3.175639\nv -0.263752 -2.934737 -3.260764\nv -0.335643 -3.129958 -2.696464\nv -0.298645 -3.151616 -2.615549\nv -0.340155 -2.973843 -3.146160\nv -0.375048 -3.057163 -2.909431\nv -0.221339 -2.920300 -3.291446\nv -0.187950 -4.420086 -2.641719\nv -0.195170 -4.422493 -2.688643\nv -0.180430 -4.314205 -2.567421\nv -0.203893 -4.314807 -2.692253\nv -0.235176 -3.755923 -2.586672\nv -0.226453 -3.814578 -2.554487\nv -0.209307 -3.761336 -2.460336\nv -0.050485 -4.072665 -2.223607\nv -0.024315 -2.942560 -1.973943\nv -0.103125 -4.090410 -2.244663\nv -0.157269 -3.989644 -2.246769\nv -0.181634 -3.843755 -2.227518\nv -0.030331 -3.603417 -2.109604\nv -0.065525 -3.568523 -2.115018\nv -0.188853 -3.339616 -2.130058\nv -0.128091 -3.460837 -2.120734\nv 0.161278 -2.927219 -2.012747\nv 0.086379 -4.054314 -2.189316\nv 0.185643 -2.805995 -2.091556\nv 0.161579 -3.490616 -2.104189\nv 0.125182 -3.584768 -2.087345\nv 0.268062 -4.275403 -2.592989\nv 0.316491 -2.837579 -2.247370\nv 0.223844 -2.834874 -2.181194\nv 0.464183 -2.878489 -2.608932\nv 0.459671 -2.797874 -2.718723\nv 0.359806 -3.559199 -2.577046\nv 0.314385 -3.557995 -2.438077\nv 0.265656 -3.511973 -2.334301\nv 0.384471 -3.503249 -2.669091\nv 0.442827 -4.131019 -3.001174\nv 0.431396 -4.233292 -2.874839\nv 0.487946 -2.857132 -2.766250\nv 0.407934 -3.531526 -3.150671\nv 0.499678 -2.625216 -3.192783\nv 0.489150 -3.538442 -2.990646\nv 0.470801 -3.584466 -2.861904\nv 0.429290 -3.210271 -3.176540\nv 0.468996 -3.378417 -3.125404\nv 0.404023 -2.768095 -3.196393\nv 0.340254 -2.739219 -3.278211\nv 0.305060 -4.183056 -3.069456\nv 0.227153 -2.669132 -3.233692\nv 0.315889 -3.579051 -3.174134\nv 0.270468 -3.514982 -3.186166\nv 0.339351 -3.597100 -3.122396\nv -0.200283 -4.063037 -3.334460\nv -0.280296 -2.566561 -3.549231\nv 0.005765 -2.573175 -3.542012\nv -0.002056 -4.185162 -3.276406\nv 0.126084 -2.629427 -3.295055\nv 0.138417 -2.649880 -3.249334\nv -0.206600 -3.493022 -3.439440\nv 0.046974 -3.456625 -3.312502\nv -0.113954 -3.504153 -3.477942\nv 0.059307 -3.425945 -3.233994\nv -0.005365 -3.487308 -3.413871\nv -0.216526 -3.738777 -3.173532\nv -0.173512 -3.690348 -3.230684\nv -0.278792 -3.829916 -3.033660\nv -0.273378 -3.973099 -2.839043\nv -0.245704 -4.013407 -2.751812\nv -0.221339 -3.999267 -2.723236\nv -0.148245 -3.638609 -3.235197\nv -0.120270 -4.480546 -3.208726\nv -0.183138 -4.821052 -2.927779\nv -0.169902 -4.826167 -2.886269\nv -0.159074 -4.580412 -3.150672\nv -0.187048 -4.722391 -3.036067\nv -0.099214 -4.401437 -3.230083\nv -0.611176 -1.233416 -3.434626\nv 0.718359 -1.503534 -3.086601\nv -0.048079 -1.546547 -1.692094\nv 0.548708 -1.651226 -2.279254\nv -0.677953 -1.309519 -2.513879\nv 0.547806 -0.488635 -2.034704\nv -0.461678 -1.196718 -3.579010\nv -0.378056 -0.211299 -3.728508\nv 0.022609 -1.625357 -1.697208\nv 0.711140 -1.554969 -2.798736\nv 0.725879 -0.521122 -2.703382\nv 0.081566 -0.238070 -3.755880\nv -0.603355 -1.285153 -2.443491\nv -0.528756 -1.294479 -2.413110\nv -0.603355 -0.272361 -3.525769\nv -0.467694 -1.260488 -2.106295\nv 0.188952 -1.301997 -3.621423\nv 0.278891 -0.355079 -3.523362\nv -0.533870 -1.295379 -2.322570\nv 0.354391 -0.475101 -1.977552\nv 0.550212 -1.488494 -3.157590\nv 0.684669 -0.432687 -3.214742\nv 0.575780 -0.414939 -3.298063\nv 0.293329 -0.383656 -3.445154\nv 0.294532 -0.485628 -1.850615\nv -0.969729 -0.271157 -3.104047\nv 0.467492 -0.402004 -3.417480\nv -0.354293 -1.252966 -1.872573\nv 0.769194 -0.541274 -2.535235\nv -0.281499 -1.298689 -1.803390\nv 0.122776 -0.493750 -1.791358\nv -0.160578 -0.905243 -1.782935\nv 0.687076 -1.073090 -2.408598\nv -0.611176 -0.750330 -3.509525\nv 0.781226 -0.981646 -2.977711\nv 0.580292 -1.031879 -2.138180\nv -0.167496 -0.677237 -3.849128\nv 0.425681 -1.000296 -1.986877\nv -0.429192 -0.695283 -3.692712\nv 0.006667 -0.997588 -1.729393\nv 0.726180 -1.020149 -2.784899\nv -0.551617 -0.834255 -2.242557\nv -0.710439 -0.842376 -2.510570\nv -0.440021 -0.814100 -2.024477\nv -0.624110 -0.838467 -2.461840\nv -0.794663 -0.757852 -3.296559\nv 0.218430 -0.820718 -3.609090\nv -0.582599 -0.845684 -2.399575\nv 0.488849 -0.916973 -3.372361\nv 0.609770 -0.936827 -3.214441\nv 0.237681 -0.869147 -3.492380\nv 0.203390 -1.040603 -1.764586\nv 0.308670 -1.015637 -1.878891\nv 0.333636 -0.901032 -3.431017\nv 0.708433 -0.946153 -3.188271\nv -0.524545 -0.734690 -3.571490\nv -0.867457 -0.809588 -2.832425\nv 0.712945 -1.056845 -2.635401\nv 0.551114 -0.929308 -3.245724\nv -0.325416 -0.823727 -1.882199\nv 0.127588 -0.743112 -3.755579\nv 0.078257 -1.036091 -1.735108\nv -0.239688 2.382197 -1.893930\nv -0.304059 2.480859 -1.975146\nv -0.267963 2.460104 -1.973943\nv -0.185845 2.782259 -2.282563\nv 0.382065 2.610203 -2.146903\nv -0.274881 2.722402 -2.254589\nv -0.187349 2.289850 -1.868662\nv 0.147742 2.768424 -2.226614\nv -0.253525 2.433033 -1.960106\nv 0.262948 2.716986 -2.213980\nv 0.285207 2.605992 -2.167056\nv -0.057704 2.214350 -1.788349\nv 0.152555 2.736539 -2.211273\nv 0.113752 2.243226 -1.794365\nv 0.135710 2.301884 -1.861444\nv 0.198276 2.749473 -2.225712\nv 0.337246 2.657427 -2.153520\nv -0.132302 2.772936 -2.276547\nv -0.340456 2.571399 -2.099977\nv 0.324311 2.500110 -2.026883\nv 0.438916 2.169530 -2.182396\nv 0.275582 2.617722 -2.156528\nv -0.133506 2.245934 -1.819933\nv 0.120369 2.793691 -2.241353\nv -0.003861 2.608999 -2.647734\nv 0.058405 2.203521 -1.783536\nv 0.283102 2.368660 -1.906864\nv 0.561342 1.591695 -2.304822\nv -0.097410 2.793992 -2.264214\nv 0.334238 2.524474 -2.082230\nv 0.019601 2.196604 -1.780528\nv 0.264152 2.142760 -2.097872\nv 0.454558 2.268794 -2.286774\nv 0.025317 2.038083 -1.998307\nv -0.303758 2.143362 -2.163747\nv -0.398209 2.225179 -2.226614\nv -0.242696 2.522067 -2.559599\nv -0.343163 2.209837 -2.210973\nv 0.511710 2.353921 -2.358665\nv -0.250216 2.087412 -2.102083\nv -0.362715 2.466421 -2.493724\nv 0.220836 2.510638 -2.523804\nv -0.322107 2.187881 -2.201347\nv 0.346871 2.451983 -2.465148\nv 0.373342 2.383399 -2.423638\nv -0.082069 2.032667 -2.013648\nv 0.208203 2.462809 -2.484098\nv 0.157067 2.124412 -2.001616\nv 0.202488 2.145166 -2.065686\nv 0.269566 2.470933 -2.487107\nv 0.447940 2.405660 -2.437174\nv -0.189154 2.532595 -2.567420\nv -0.452654 2.327151 -2.330992\nv 0.446135 2.225480 -2.249174\nv 0.353790 2.387912 -2.418825\nv -0.188251 2.052219 -2.049443\nv 0.368830 2.140654 -2.115318\nv 0.190155 2.585238 -2.605020\nv -0.015893 1.890388 -3.019522\nv 0.075249 2.066657 -1.995299\nv -0.144635 1.542664 -2.059370\nv -0.148846 2.585837 -2.611036\nv 0.465387 1.586882 -2.186006\nv 0.672036 0.586423 -2.321065\nv -0.207202 1.842562 -2.921462\nv 0.331531 1.591996 -2.106595\nv 0.606762 1.640124 -2.452214\nv 0.001553 1.548080 -1.995901\nv -0.458068 1.573046 -2.314749\nv -0.563649 1.613052 -2.419427\nv -0.363617 1.787515 -2.811068\nv -0.486043 1.600419 -2.411606\nv 0.669930 1.690357 -2.551478\nv -0.378657 1.557704 -2.213379\nv -0.557032 1.772776 -2.720226\nv 0.258135 1.802254 -2.831222\nv -0.469198 1.588385 -2.390550\nv 0.451249 1.755329 -2.711503\nv 0.522538 1.723745 -2.643523\nv 0.257233 1.766760 -2.761436\nv 0.178724 1.613652 -1.948675\nv 0.269867 1.614555 -2.039517\nv 0.337547 1.760745 -2.736771\nv 0.608868 1.728257 -2.649238\nv -0.279995 1.798645 -2.837538\nv -0.662311 1.690055 -2.535235\nv 0.592023 1.619369 -2.409801\nv -0.289320 1.548680 -2.134269\nv 0.486142 1.729161 -2.650441\nv 0.806794 0.635153 -2.753916\nv 0.212113 1.856099 -2.941615\nv -0.186146 0.631842 -1.944464\nv 0.065624 1.570037 -1.977251\nv 0.555626 0.591836 -2.126749\nv -0.079061 0.819842 -3.447560\nv -0.168398 -1.420814 -1.734506\nv 0.621201 -1.652730 -2.402282\nv -0.375950 0.789463 -3.328744\nv 0.387479 0.606575 -2.007933\nv 0.728285 0.605072 -2.594793\nv -0.018299 0.630942 -1.879191\nv -0.618695 0.618908 -2.297904\nv -0.769095 0.636355 -2.485302\nv -0.591022 0.744945 -3.193986\nv -0.681262 0.629137 -2.455824\nv -0.487848 0.627330 -2.142090\nv -0.833466 0.747050 -3.048399\nv 0.327319 0.733814 -3.224066\nv -0.657198 0.618007 -2.412509\nv 0.565854 0.695914 -3.070959\nv 0.653687 0.669143 -2.948834\nv 0.174513 0.631243 -1.855728\nv 0.339652 0.708246 -3.141647\nv 0.284004 0.624625 -1.939651\nv 0.420567 0.699221 -3.108258\nv 0.752049 0.665833 -2.931689\nv -0.483336 0.754268 -3.229180\nv -0.930324 0.696516 -2.718422\nv 0.709034 0.596047 -2.499440\nv 0.612778 0.676060 -2.971695\nv -0.356097 0.630640 -2.028387\nv 0.287915 -4.218553 -2.632996\nv 0.238884 0.779237 -3.348898\nv 0.055397 0.629435 -1.865956\nv -0.573576 -1.226196 -3.491778\nv 0.740618 -1.530907 -2.939510\nv 0.520734 -1.605804 -2.159236\nv -0.168098 -1.149792 -3.847323\nv -0.130498 -4.040177 -2.243761\nv 0.388382 -1.570913 -2.007933\nv -0.412347 -1.166938 -3.682485\nv -0.012584 -1.585954 -1.690590\nv 0.672938 -1.578133 -2.741584\nv -0.509204 -1.277634 -2.214583\nv -0.646369 -1.298087 -2.473872\nv -0.420469 -1.255373 -1.984170\nv -0.562145 -1.289062 -2.429655\nv -0.741422 -1.233717 -3.262568\nv 0.211812 -1.339898 -3.548629\nv -0.526952 -1.294479 -2.370999\nv 0.478020 -1.468941 -3.322428\nv 0.583300 -1.485786 -3.177142\nv 0.232868 -1.406677 -3.415977\nv 0.176619 -1.663559 -1.759172\nv 0.277086 -1.611220 -1.893329\nv 0.328523 -1.453000 -3.365442\nv 0.681962 -1.494810 -3.152777\nv -0.495368 -1.207547 -3.558856\nv -0.801882 -1.279739 -2.788809\nv 0.653386 -1.626860 -2.604118\nv -0.295035 -2.768999 -2.198340\nv 0.533668 -1.479168 -3.195791\nv -0.321505 -1.275528 -1.834071\nv 0.122776 -1.235522 -3.734222\nv 0.055697 -1.655137 -1.711044\nv -0.061615 -4.100336 -2.233533\nv -0.096507 -4.856247 -3.121795\nv 0.441022 -4.182155 -2.940413\nv 0.253623 -4.208925 -2.534333\nv -0.137115 -2.580396 -3.573896\nv -0.502286 -2.346074 -3.143753\nv 0.223544 -4.064243 -2.442890\nv -0.180430 -4.124401 -3.346492\nv 0.425982 -4.168317 -2.839645\nv -0.088386 -4.109361 -2.243460\nv -0.255029 -3.786603 -3.107357\nv -0.151554 -5.019279 -2.882359\nv -0.143131 -5.011760 -2.851677\nv -0.130498 -4.904977 -3.067651\nv 0.005765 -4.167416 -3.248131\nv -0.199080 -4.368649 -2.691952\nv 0.282500 -4.234795 -3.124502\nv 0.424177 -3.638910 -3.143453\nv 0.013285 -4.089208 -3.205417\nv -0.150050 -2.745837 -1.945969\nv 0.133304 -3.965277 -2.190218\nv 0.252721 -4.144556 -3.145257\nv 0.445534 -3.940913 -3.062838\nv -0.079662 -4.800297 -3.157891\nv -0.155163 -4.973558 -2.968087\nv 0.316491 -4.062435 -2.686538\nv 0.299947 -4.219152 -3.087503\nv -0.169602 -3.916849 -2.237444\nv -0.023112 -4.192683 -3.316112\nv 0.191659 2.322036 -1.907466\nv 0.328222 2.431225 -2.000413\nv -0.536878 -2.402925 -2.820694\nv -0.393396 -2.329228 -3.301974\nv -0.321505 -2.780427 -2.379421\nv -0.448142 -2.445639 -2.564413\nv -0.392193 -2.450151 -2.503050\nv -0.340757 -2.316294 -3.348899\nv -0.184341 -4.367146 -2.604721\nv -0.331432 -2.741324 -2.478083\nv 0.103224 -4.057926 -2.195332\nv -0.004763 -2.959703 -1.973943\nv 0.120068 -2.952486 -1.988081\nv -0.050485 -2.902853 -1.961310\nv -0.251118 -2.583405 -1.950481\nv 0.175416 -2.867057 -2.050948\nv -0.104027 -4.192683 -3.361532\nv 0.424478 -2.889619 -2.527715\nv 0.350180 -2.869163 -2.342423\nv 0.272273 -2.836679 -2.213079\nv 0.465687 -2.839986 -2.659766\nv 0.562545 -2.783738 -2.973200\nv 0.512311 -2.845700 -2.813174\nv 0.472606 -2.597843 -3.176239\nv 0.541790 -2.678757 -3.151574\nv 0.379659 -2.755461 -3.245724\nv 0.283704 -2.705831 -3.255951\nv 0.413649 -2.770502 -3.164809\nv -0.317294 -2.567160 -3.487567\nv -0.191861 -4.421291 -2.665181\nv 0.122776 -2.622508 -3.348598\nv 0.132702 -2.639352 -3.269788\nv 0.072542 -2.595135 -3.483055\nv -0.286011 -3.904516 -2.938307\nv -0.196674 -3.715314 -3.204214\nv -0.263451 -3.993854 -2.793622\nv -0.234274 -4.006186 -2.736170\nv -0.160878 -3.664780 -3.233994\nv -0.000552 2.786772 -2.300310\nv -0.169902 -0.415542 -1.826852\nv 0.724074 -0.540675 -2.404387\nv -0.656596 -0.278377 -3.484559\nv 0.817322 -0.479311 -2.940412\nv 0.610372 -0.513302 -2.146301\nv -0.152155 -0.216411 -3.799496\nv 0.448241 -0.482619 -2.007332\nv -0.448443 -0.233557 -3.649698\nv 0.006366 -0.463669 -1.783537\nv 0.757162 -0.510895 -2.753917\nv -0.597639 -0.388169 -2.238346\nv -0.767291 -0.379144 -2.506057\nv -0.466792 -0.375837 -2.034704\nv -0.677953 -0.380949 -2.453117\nv -0.865953 -0.281685 -3.274300\nv 0.262648 -0.334927 -3.575701\nv -0.637345 -0.392079 -2.389949\nv 0.529457 -0.407722 -3.366344\nv 0.641655 -0.432687 -3.201507\nv 0.283704 -0.369821 -3.478844\nv 0.216024 -0.488334 -1.810007\nv 0.325815 -0.480212 -1.915287\nv 0.373041 -0.392982 -3.428610\nv 0.747537 -0.442613 -3.165110\nv -0.559137 -0.265141 -3.541410\nv -0.941454 -0.327408 -2.828214\nv 0.746333 -0.531349 -2.620361\nv 0.589316 -0.424865 -3.235196\nv -0.343163 -0.374933 -1.908369\nv 0.169099 -0.274467 -3.704744\nv 0.084875 -0.484725 -1.785342\nv 0.246404 2.829486 -1.867158\nv 0.207300 2.683296 -1.809405\nv 0.199480 2.789178 -1.827453\nv 0.081867 2.425210 -1.722474\nv 0.049381 2.329256 -1.673444\nv 0.207601 2.491387 -1.724279\nv 0.118865 2.899572 -1.884906\nv -0.175016 2.621933 -1.757066\nv -0.104328 2.402651 -1.696906\nv -0.004162 2.333769 -1.675248\nv -0.070037 2.904986 -1.928221\nv 0.303255 2.559368 -2.227517\nv 0.256030 2.424008 -2.104489\nv 0.220235 2.508533 -2.243459\nv 0.111044 2.179157 -1.958602\nv 0.054795 2.109673 -1.905661\nv 0.237982 2.249244 -1.999511\nv 0.130596 2.669461 -2.267222\nv -0.227355 2.368961 -2.063581\nv -0.139822 2.181862 -1.945968\nv -0.009275 2.111477 -1.909571\nv -0.105531 2.750374 -2.299708\nv 0.402219 2.140654 -2.431760\nv 0.361611 2.019732 -2.330089\nv 0.297841 2.144263 -2.444393\nv 0.177822 1.967092 -2.158633\nv 0.080664 1.950549 -2.073507\nv 0.333035 1.952052 -2.240150\nv 0.154660 2.207431 -2.506659\nv -0.264654 1.978524 -2.306025\nv -0.193966 1.893397 -2.176982\nv -0.005967 1.862114 -2.100278\nv -0.125083 2.291955 -2.572534\nv 0.456362 1.077326 -2.580956\nv 0.451249 1.007242 -2.435670\nv 0.378155 1.112221 -2.666684\nv 0.231966 0.991901 -2.134570\nv 0.089387 0.980168 -2.052451\nv 0.379659 0.977463 -2.275344\nv 0.227153 1.175388 -2.791215\nv -0.391893 1.065898 -2.429654\nv -0.243899 0.981373 -2.194429\nv -0.062517 0.956106 -2.076515\nv -0.213518 1.281571 -2.956655\nv 0.493962 -0.055784 -2.720227\nv 0.483735 -0.121359 -2.512675\nv 0.420868 -0.017281 -2.856188\nv 0.243998 -0.127676 -2.099978\nv 0.086078 -0.127977 -2.007632\nv 0.398609 -0.133992 -2.289181\nv 0.256631 0.059120 -3.044790\nv -0.434005 -0.006154 -2.444995\nv -0.264955 -0.049468 -2.160439\nv -0.081167 -0.090076 -2.028388\nv -0.242094 0.183952 -3.260764\nv 0.329726 -3.083333 -2.972899\nv 0.258737 -3.317957 -2.667588\nv 0.261745 -3.302315 -3.094422\nv 0.095102 -3.158834 -2.152618\nv -0.012885 -3.174476 -2.029892\nv 0.219332 -3.022272 -2.426045\nv 0.108337 -3.280057 -3.198198\nv -0.330529 -3.021067 -2.413713\nv -0.223445 -3.038815 -2.164650\nv -0.117262 -2.830362 -2.037111\nv -0.260142 -2.948275 -3.203913\nv 0.197675 -5.602530 -2.726544\nv 0.193464 -5.456641 -2.620362\nv 0.197976 -5.560116 -2.685335\nv 0.003057 -5.262627 -2.440785\nv 0.062616 -5.239766 -2.192024\nv 0.049982 -5.737588 -2.551780\nv -0.017999 -5.466871 -2.814980\nv -0.141026 -5.678933 -2.639614\nv -0.133506 -5.673821 -2.588176\nv -0.096206 -5.400092 -2.363479\nv -0.064623 -5.855504 -2.699172\nv -0.067330 -5.301431 -2.349041\nv -0.119067 -5.491837 -2.875741\nv 0.081265 -5.246083 -2.580356\nv -0.085979 -5.899420 -2.554788\nv 0.089086 -5.033419 -2.203754\nv 0.181131 -4.768111 -2.798135\nv 0.170603 -5.459952 -2.734365\nv -0.143131 -5.128772 -2.346634\nv -0.286913 -4.115376 -2.456125\nv -0.228859 -3.894289 -2.939510\nv -0.160578 -4.466410 -2.325578\nv -0.190056 -4.475736 -2.456727\nv -0.028226 -4.318417 -2.191121\nv -0.079061 -4.251038 -2.194430\nv -0.158472 -4.067249 -2.206763\nv 0.061413 -4.304280 -2.139985\nv 0.107736 -4.150270 -2.154724\nv 0.119467 -4.329848 -2.415216\nv 0.064421 -4.233292 -2.273239\nv 0.162481 -4.284124 -2.538244\nv 0.243998 -4.311500 -2.792119\nv 0.236177 -4.398130 -2.603818\nv 0.213316 -4.042283 -2.910634\nv 0.222340 -4.441143 -2.889879\nv 0.153758 -4.332854 -2.919959\nv -0.192462 -4.282621 -3.062838\nv 0.032837 -4.323531 -2.989744\nv -0.156366 -5.551396 -2.583664\nv -0.162082 -5.143809 -2.796631\nv 0.529758 -1.493609 -2.921763\nv -0.079362 -1.316435 -1.973943\nv 0.407332 -1.460820 -2.361072\nv -0.213819 -1.139867 -3.282121\nv 0.498474 -1.540531 -2.643824\nv -0.382267 -1.272519 -2.410103\nv 0.241892 -1.456609 -2.090052\nv 0.463281 -1.505941 -3.064944\nv 0.290020 -1.419612 -3.200003\nv -0.237582 -1.296283 -2.109604\nv 0.075851 -1.447885 -1.948977\nv 0.103524 2.928750 -1.904458\nv -0.197877 2.635772 -1.776016\nv 0.011480 2.960032 -1.916189\nv -0.197275 2.874607 -1.905059\nv 0.132100 2.753685 -2.251280\nv -0.273378 2.393626 -2.089750\nv -0.003259 2.752480 -2.341219\nv -0.225851 2.675477 -2.303920\nv -0.204194 2.509135 -1.871971\nv 0.096305 2.317825 -1.805795\nv 0.213016 2.656827 -2.027485\nv 0.129995 2.798203 -2.048240\nv -0.096206 2.838209 -2.069597\nv 0.281598 2.718191 -2.012144\nv -0.124181 2.309101 -1.785341\nv 0.233470 2.567790 -1.919197\nv 0.052088 2.236008 -1.757968\nv -0.008072 2.239316 -1.759773\nv 0.224446 2.386408 -1.826551\nv 0.154660 2.257667 -2.551478\nv -0.329025 2.003189 -2.314147\nv -0.000552 2.349710 -2.645929\nv -0.311880 2.228188 -2.496131\nv 0.288817 2.115990 -2.189014\nv 0.315588 2.236909 -2.274441\nv -0.005967 2.005897 -2.080726\nv -0.249313 2.193294 -2.232028\nv 0.146238 2.088617 -2.132163\nv 0.266257 2.363247 -2.376412\nv 0.156465 2.444461 -2.423939\nv -0.134107 2.576514 -2.512975\nv 0.367025 2.389114 -2.375510\nv -0.166293 2.053421 -2.135171\nv 0.068933 2.048909 -2.064483\nv 0.157067 1.225621 -2.871830\nv -0.457768 1.098382 -2.503952\nv -0.045071 1.303227 -2.986735\nv -0.440321 1.222013 -2.776476\nv -0.187950 1.795037 -2.727746\nv 0.360708 1.487919 -2.272636\nv 0.416356 1.530031 -2.398672\nv -0.042664 1.431369 -2.101181\nv -0.352789 1.583875 -2.389948\nv 0.215121 1.502959 -2.156829\nv 0.344766 1.644034 -2.564412\nv 0.199480 1.703291 -2.640815\nv 0.431697 1.619068 -2.515683\nv -0.222843 1.455133 -2.189315\nv 0.090891 1.485211 -2.078320\nv 0.167595 0.128607 -3.170223\nv -0.494766 0.045284 -2.604118\nv -0.050485 0.197489 -3.296860\nv -0.472808 0.135523 -2.972898\nv 0.485239 0.518141 -2.689846\nv -0.072744 0.447153 -2.084938\nv 0.388983 0.432113 -2.277750\nv -0.237282 0.744342 -3.155183\nv 0.475914 0.453771 -2.493123\nv -0.415355 0.534085 -2.491017\nv 0.238584 0.445349 -2.114717\nv 0.405227 0.553333 -2.806556\nv 0.243998 0.623721 -2.968988\nv -0.253525 0.476631 -2.220298\nv 0.088485 0.441436 -2.046134\nv 0.045470 -2.931731 -3.276105\nv -0.412347 -2.650182 -2.537642\nv -0.125083 -2.840889 -3.291446\nv -0.410542 -2.571673 -2.877846\nv 0.520734 -0.722358 -2.792118\nv -0.083874 -0.676936 -1.988682\nv 0.395902 -0.750032 -2.287076\nv -0.236379 -0.426970 -3.285429\nv 0.418763 -2.457067 -2.696464\nv -0.424680 -0.612566 -2.389046\nv 0.211812 -2.343968 -2.155927\nv 0.451249 -0.695886 -2.935600\nv 0.229560 -2.366828 -3.232489\nv -0.261346 -0.641743 -2.106596\nv 0.065323 -2.334943 -2.019665\nv -0.034843 -5.668104 -2.775876\nv -0.085979 -5.937020 -2.568324\nv -0.078159 -5.677129 -2.803248\nv -0.081467 -5.929799 -2.639914\nv -0.016495 -3.736970 -2.095767\nv 0.273777 -3.724336 -2.892886\nv -0.097710 -3.562507 -2.094564\nv 0.149848 -3.688541 -2.374308\nv -0.230363 -3.636202 -3.168720\nv 0.199179 -4.947689 -2.592989\nv -0.318798 -3.553184 -2.438077\nv 0.037649 -4.764503 -2.337610\nv 0.240388 -3.657861 -3.010499\nv -0.009877 -4.903471 -2.876343\nv -0.190056 -3.764644 -2.240452\nv 0.030731 -3.734566 -2.059671\nv -0.262850 -3.382628 -3.049603\nv 0.117361 -4.769617 -2.536439\nv -0.248712 -3.757125 -2.404688\nv 0.102923 -4.597860 -2.184804\nv 0.229860 -3.860299 -3.004483\nv 0.158270 -4.919716 -2.819792\nv -0.185243 -3.536939 -2.152919\nv -0.113653 -5.730973 -2.580356\nv -0.102824 -5.539061 -2.762340\nv -0.320001 -4.038072 -2.529821\nv -0.314888 -3.914441 -2.789110\nv -0.147643 -5.084555 -2.461841\nv -0.164488 -5.093576 -2.563210\nv -0.049883 -4.824062 -2.281662\nv -0.089589 -4.843313 -2.295799\nv -0.147643 -4.596056 -2.265118\nv 0.062014 -4.782552 -2.174276\nv 0.098110 -3.649439 -2.107499\nv 0.072542 -5.068310 -2.484701\nv 0.072241 -3.700877 -2.193828\nv 0.190155 -3.757124 -2.534935\nv 0.213316 -4.992207 -2.727447\nv 0.261745 -3.864208 -2.626378\nv 0.184440 -4.436630 -2.846864\nv 0.211812 -5.019279 -2.755722\nv 0.127288 -3.789311 -3.050505\nv -0.165390 -4.942576 -2.975005\nv 0.056299 -3.782091 -3.117584\nv -0.008072 -4.331652 -3.031254\nv -0.114856 -4.321726 -3.088406\nv -0.251720 -4.740139 -2.477181\nv -0.186146 -4.451068 -2.869123\nv -0.169602 -5.568840 -2.617655\nv -0.187349 -5.356477 -2.737072\nv 0.449143 -2.345471 -2.941014\nv -0.082069 -2.105434 -1.977854\nv 0.350782 -2.320807 -2.409802\nv -0.202389 -2.047077 -3.233391\nv 0.492458 -0.772892 -2.543357\nv -0.369633 -2.080770 -2.311440\nv 0.240088 -0.744616 -2.079524\nv 0.388983 -2.414654 -3.101641\nv 0.274379 -0.604144 -3.107055\nv -0.234274 -2.128294 -2.059069\nv 0.081867 -0.744013 -1.977853\nv -0.027925 -1.144078 -3.365141\nv -0.440021 -1.158817 -2.601411\nv -0.423777 -1.083317 -2.972598\nv 0.191057 -1.264398 -3.295958\nv -0.239989 2.530790 -1.888816\nv -0.218933 2.789781 -2.065987\nv 0.123076 2.856256 -2.035907\nv -0.008975 2.627949 -2.555990\nv -0.305563 2.223073 -2.247670\nv -0.279393 2.489281 -2.450710\nv 0.162481 2.512141 -2.454319\nv -0.033339 1.829928 -2.787004\nv -0.429493 1.604329 -2.406793\nv -0.423477 1.759540 -2.633295\nv 0.153758 1.748111 -2.694358\nv -0.051688 0.756373 -3.187068\nv -0.483636 0.578302 -2.617654\nv -0.465288 0.681777 -2.919958\nv 0.161579 0.683280 -3.073065\nv -0.037851 -2.044971 -3.329647\nv -0.420769 -1.884046 -2.499140\nv -0.397909 -1.845844 -2.894089\nv 0.147441 -2.165592 -3.287535\nv -0.138920 -3.606423 -3.206019\nv -0.370235 -3.271935 -2.853181\nv -0.271272 -4.576804 -2.765648\nv -0.119970 -5.759246 -2.606225\nv -0.121474 -5.668405 -2.711204\nv -0.014690 -5.037027 -2.897098\nv -0.367528 -3.372703 -2.555690\nv -0.094101 -5.071620 -2.974403\nv 0.002456 -3.665380 -3.169322\nv -0.284206 -4.741943 -2.526814\nv -0.000251 2.868290 -2.089149\nv -0.042664 -0.416743 -3.338069\nv -0.483336 -0.543380 -2.563510\nv -0.458670 -0.458256 -2.959964\nv 0.177220 -0.503374 -3.220156\nv 0.140824 2.787976 -2.204656\nv 0.205496 2.799104 -2.197135\nv 0.246404 2.698939 -2.130358\nv 0.316491 2.699840 -2.156828\nv 0.302955 2.597871 -2.091856\nv 0.266558 2.550042 -2.076515\nv 0.258135 2.661638 -2.103587\nv 0.286411 2.493492 -2.035005\nv 0.224747 2.288347 -1.919799\nv 0.115256 2.250446 -1.918896\nv 0.112849 2.294362 -1.951984\nv 0.085777 2.826778 -2.226012\nv 0.156465 2.770529 -2.188412\nv -0.273077 2.673974 -2.176381\nv -0.188552 2.794591 -2.264515\nv -0.208706 2.487778 -2.007030\nv -0.192462 2.359936 -1.934839\nv -0.120270 2.272104 -1.920701\nv -0.085378 2.244129 -1.904458\nv 0.040958 2.198710 -1.881296\nv 0.006968 2.203521 -1.884605\nv -0.079963 2.777147 -2.252483\nv -0.223144 2.498905 -2.026582\nv 0.175716 2.706458 -2.349040\nv 0.264152 2.703750 -2.345430\nv 0.284606 2.562977 -2.275945\nv 0.413649 2.567791 -2.252182\nv 0.405527 2.460704 -2.177885\nv 0.347774 2.406561 -2.149008\nv 0.301451 2.520263 -2.247068\nv 0.381163 2.345800 -2.097872\nv 0.283403 2.165921 -1.956797\nv 0.159473 2.112980 -1.919197\nv 0.155563 2.146369 -1.974544\nv 0.108337 2.727514 -2.392355\nv 0.181732 2.666151 -2.331593\nv -0.344366 2.583430 -2.308131\nv -0.222843 2.693523 -2.409500\nv -0.294433 2.357831 -2.059971\nv -0.236379 2.222471 -2.010038\nv -0.177723 2.151784 -1.945667\nv -0.130197 2.124412 -1.923408\nv 0.039153 2.076884 -1.887914\nv -0.004763 2.081999 -1.891824\nv -0.132002 2.709166 -2.411004\nv -0.332936 2.380393 -2.069597\nv 0.227755 2.242927 -2.623369\nv 0.348075 2.236008 -2.617052\nv 0.404625 2.189083 -2.539747\nv 0.563146 2.155996 -2.490416\nv 0.577886 2.068462 -2.371900\nv 0.506295 2.035676 -2.352048\nv 0.394999 2.158701 -2.523804\nv 0.555025 2.005897 -2.306025\nv 0.394999 2.009204 -2.088246\nv 0.241592 2.063049 -1.980259\nv 0.245803 1.977018 -2.076515\nv 0.136312 2.343996 -2.784898\nv 0.212414 2.223073 -2.618255\nv -0.515220 2.190887 -2.497334\nv -0.295937 2.254958 -2.645327\nv -0.366325 1.991757 -2.312342\nv -0.347976 1.939720 -2.199843\nv -0.255630 1.900015 -2.116522\nv -0.192763 1.889788 -2.087946\nv 0.051185 1.908738 -1.966723\nv -0.007471 1.870536 -1.994698\nv -0.165390 2.285639 -2.694357\nv -0.403925 2.000782 -2.290083\nv 0.342660 1.313155 -2.944323\nv 0.511710 1.301422 -2.876642\nv 0.605559 1.295708 -2.813474\nv 0.781527 1.272848 -2.733763\nv 0.751748 1.229230 -2.574339\nv 0.683466 1.215093 -2.523203\nv 0.604657 1.271643 -2.759932\nv 0.707530 1.202158 -2.441385\nv 0.471102 1.174786 -2.088848\nv 0.277387 1.207876 -1.940554\nv 0.296638 1.188022 -2.037712\nv 0.172708 1.390158 -3.181353\nv 0.349879 1.297513 -2.902812\nv -0.849710 1.308944 -2.768054\nv -0.539886 1.315860 -2.966882\nv -0.618695 1.190429 -2.474172\nv -0.545000 1.181404 -2.306026\nv -0.423477 1.191630 -2.148106\nv -0.329326 1.193435 -2.101782\nv 0.001553 1.200354 -1.923709\nv -0.076655 1.200053 -1.962211\nv -0.339553 1.338724 -3.051106\nv -0.675847 1.204264 -2.453718\nv 0.441022 0.116874 -3.495087\nv 0.601950 0.089803 -3.354914\nv 0.722269 0.083787 -3.290242\nv 0.940951 0.048592 -3.055317\nv 0.930723 0.012197 -2.761436\nv 0.861239 0.007383 -2.663376\nv 0.752650 0.067843 -3.168118\nv 0.863044 0.000464 -2.494025\nv 0.594129 0.033554 -2.019965\nv 0.323108 0.066038 -1.854525\nv 0.381163 0.061526 -1.963415\nv 0.186846 0.189067 -3.661730\nv 0.438615 0.102737 -3.407253\nv -1.016954 0.161393 -3.052911\nv -0.726081 0.153573 -3.394619\nv -0.682465 0.050998 -2.438678\nv -0.568161 0.053706 -2.147805\nv -0.389185 0.070551 -1.965520\nv -0.305262 0.075666 -1.900247\nv 0.055998 0.068445 -1.812413\nv -0.029128 0.071753 -1.809406\nv -0.501384 0.176132 -3.523963\nv -0.769697 0.068144 -2.461238\nv 0.264753 -1.897881 -3.425903\nv 0.462379 -1.997446 -3.349500\nv 0.569764 -2.003462 -3.240911\nv 0.769495 -2.036549 -3.110364\nv 0.719863 -2.097614 -2.807760\nv 0.706327 -2.185446 -2.703683\nv 0.588714 -2.018804 -3.156988\nv 0.673540 -2.254931 -2.527414\nv 0.476215 -2.176120 -2.008535\nv 0.234974 -2.343065 -1.731198\nv 0.290321 -2.239291 -1.902654\nv 0.036145 -1.664161 -3.729410\nv 0.270168 -1.956238 -3.333257\nv -0.772404 -1.695745 -3.047497\nv -0.553723 -1.706875 -3.397327\nv -0.522740 -1.779969 -2.328285\nv -0.480628 -1.760115 -1.980260\nv -0.373544 -1.781773 -1.728190\nv -0.295937 -1.859379 -1.662315\nv -0.023112 -2.335245 -1.555230\nv -0.094101 -2.229062 -1.551019\nv -0.408436 -1.684012 -3.541711\nv -0.584705 -1.767636 -2.346333\nv -0.129595 -4.946788 -3.060131\nv 0.231064 -5.000030 -2.982826\nv 0.263249 -5.033720 -2.939511\nv 0.528554 -4.926633 -2.856189\nv 0.543594 -5.033117 -2.692855\nv 0.329726 -5.018378 -2.477482\nv 0.297841 -5.043344 -2.296401\nv 0.178424 -4.901667 -2.005227\nv 0.274679 -4.835192 -2.189918\nv -0.192763 -4.974763 -3.121194\nv -0.263150 -5.420247 -2.786404\nv -0.233973 -5.395579 -2.843555\nv -0.315790 -5.174794 -2.537943\nv -0.302254 -5.269245 -2.477783\nv -0.280597 -5.192241 -2.463345\nv -0.177422 -4.923326 -2.103288\nv -0.093198 -5.012362 -2.093963\nv -0.122075 -5.000031 -2.099978\nv -0.218030 -5.289399 -2.908227\nv -0.251720 -5.455138 -2.661271\nv 0.359806 -4.705847 -2.543357\nv 0.488849 -4.033258 -3.169923\nv 0.214820 -4.799695 -3.019824\nv -0.387681 -3.030995 -3.329948\nv -0.454158 -3.253886 -2.545463\nv -0.520635 -3.087545 -3.094121\nv -0.277589 -3.004824 -3.429513\nv -0.349480 -4.004383 -2.346935\nv -0.325115 -3.891582 -2.195934\nv -0.374145 -3.853380 -2.459133\nv -0.101019 -3.784498 -1.829259\nv -0.163886 -3.703582 -1.829259\nv -0.278792 -3.534231 -1.868062\nv 0.172408 -3.752312 -1.805496\nv 0.335140 -3.746597 -2.107800\nv 0.272574 -3.697566 -2.004024\nv 0.461175 -3.721028 -2.498839\nv 0.473809 -3.636504 -2.576445\nv 0.604657 -3.606724 -3.068854\nv 0.606161 -3.748702 -2.840547\nv 0.481028 -3.247268 -3.233091\nv 0.399511 -3.744491 -3.190076\nv 0.333636 -3.688242 -3.261366\nv 0.253623 -3.605522 -3.249936\nv -0.081467 -3.598001 -3.645186\nv 0.046673 -3.552883 -3.376873\nv -0.280597 -4.642077 -3.139843\nv -0.343464 -4.775030 -2.980119\nv -0.322408 -5.053872 -2.688042\nv -0.212917 -4.473329 -3.248131\nv -0.663515 -0.772290 -3.512834\nv 0.881693 -0.947355 -3.166012\nv -0.008674 -0.972622 -1.702923\nv 0.609770 -0.986159 -2.001015\nv -0.473409 -0.742811 -3.644284\nv 0.079461 -1.018044 -1.700516\nv 0.844996 -0.989768 -2.844457\nv 0.842589 -1.025261 -2.755721\nv 0.091793 -0.719348 -3.853038\nv -0.665019 -0.833352 -2.475376\nv -0.596436 -0.847488 -2.448304\nv -0.498977 -0.820116 -2.136374\nv 0.313783 -0.864634 -3.583823\nv 0.408836 -0.993678 -1.937847\nv 0.672036 -0.936827 -3.265276\nv 0.651581 -0.924193 -3.371157\nv 0.330027 -0.902836 -3.461999\nv 0.331831 -1.025262 -1.798878\nv -0.896935 -0.735892 -3.160297\nv 0.511108 -0.922088 -3.449666\nv -0.366926 -0.809588 -1.901450\nv 0.825444 -1.053538 -2.554787\nv -0.276085 -0.834255 -1.831063\nv 0.259038 2.669762 -2.113814\nv 0.099614 2.225781 -1.894230\nv 0.056600 2.197505 -1.880394\nv 0.252420 2.325946 -1.932733\nv 0.138417 2.802414 -2.213980\nv 0.232568 2.760902 -2.165552\nv 0.293028 2.694728 -2.142089\nv 0.111044 2.823771 -2.223907\nv 0.287012 2.431225 -1.991088\nv -0.276686 2.597871 -2.102083\nv -0.237582 2.501312 -2.033802\nv -0.209307 2.474542 -1.990486\nv 0.018097 2.824069 -2.235638\nv -0.098914 2.779554 -2.257296\nv -0.157870 2.793088 -2.263312\nv -0.061013 2.796697 -2.245564\nv -0.204494 2.410772 -1.950480\nv 0.310775 2.528685 -2.251280\nv 0.125784 2.097940 -1.896336\nv 0.059909 2.078089 -1.887312\nv 0.306865 2.195098 -1.982666\nv 0.183537 2.732629 -2.362275\nv 0.280695 2.642989 -2.319261\nv 0.374846 2.563278 -2.260604\nv 0.150750 2.742554 -2.382428\nv 0.361911 2.288648 -2.054256\nv -0.385576 2.495899 -2.196835\nv -0.355797 2.387309 -2.079523\nv -0.287515 2.337980 -2.052752\nv 0.003358 2.735334 -2.414313\nv -0.151554 2.709467 -2.410703\nv -0.201787 2.709768 -2.411907\nv -0.113051 2.733228 -2.418825\nv -0.262549 2.270300 -2.024176\nv 0.100516 2.781958 -2.311440\nv -0.278792 2.439648 -2.045533\nv -0.253224 2.423104 -2.030793\nv 0.253924 2.227586 -1.937846\nv -0.215022 2.291356 -1.973040\nv 0.357099 2.530790 -2.129155\nv 0.158872 2.743156 -2.273238\nv 0.133905 2.220968 -1.965219\nv 0.282500 2.589148 -2.179689\nv 0.268062 2.625843 -2.199241\nv 0.175716 2.719694 -2.262409\nv 0.136011 2.180359 -1.923408\nv -0.316392 2.632762 -2.242857\nv 0.241592 2.759098 -2.274140\nv -0.114254 2.744057 -2.331894\nv 0.370635 2.638175 -2.206160\nv -0.149147 2.212545 -1.932733\nv 0.307467 2.477849 -2.110806\nv 0.337246 2.421601 -2.068093\nv -0.108238 2.183971 -1.914685\nv 0.040056 2.136744 -1.886410\nv -0.213218 2.752781 -2.339113\nv 0.001253 2.141558 -1.889418\nv 0.418161 2.165620 -2.528918\nv 0.188350 2.014620 -1.965219\nv 0.081867 1.933102 -1.961309\nv 0.445233 1.992058 -2.152016\nv 0.231064 2.266387 -2.657961\nv 0.395300 2.214350 -2.574038\nv 0.505994 2.167726 -2.527113\nv 0.200382 2.316322 -2.746697\nv 0.515319 1.982434 -2.236240\nv -0.524846 2.113282 -2.414012\nv -0.433704 2.005595 -2.302115\nv -0.371438 1.986645 -2.307830\nv 0.010878 2.352719 -2.803849\nv -0.191560 2.279024 -2.683830\nv -0.261947 2.264583 -2.661871\nv -0.154261 2.327151 -2.738876\nv -0.364520 1.957468 -2.237443\nv 0.486743 2.291657 -2.306025\nv 0.426283 2.247437 -2.267824\nv 0.051486 2.031465 -1.972438\nv -0.000552 2.014620 -1.985975\nv 0.133003 2.593958 -2.628483\nv -0.370536 2.218862 -2.214582\nv 0.339351 2.123207 -2.065084\nv -0.323611 2.199912 -2.205558\nv -0.280897 2.112679 -2.143292\nv 0.198878 2.477849 -2.494927\nv 0.202488 2.099446 -2.061776\nv 0.361310 2.374374 -2.415215\nv 0.344766 2.402952 -2.429955\nv 0.215422 2.451381 -2.483497\nv 0.201284 2.125614 -1.979658\nv -0.428891 2.408666 -2.429955\nv 0.327019 2.489583 -2.490716\nv -0.169602 2.532297 -2.565916\nv 0.494865 2.400846 -2.414012\nv -0.213518 2.061844 -2.065084\nv 0.468695 2.203521 -2.225411\nv -0.161179 2.043496 -2.037411\nv -0.271272 2.507030 -2.544559\nv 0.636541 1.276155 -2.774070\nv 0.163684 1.206068 -1.901450\nv 0.038853 1.200053 -1.918595\nv 0.539985 1.175388 -2.179689\nv 0.326417 1.327292 -2.992450\nv 0.568561 1.301724 -2.850774\nv 0.736106 1.283677 -2.783394\nv 0.252420 1.370609 -3.123900\nv 0.631729 1.184413 -2.345430\nv -0.836775 1.267733 -2.639312\nv -0.714049 1.204867 -2.472067\nv -0.621403 1.188624 -2.460937\nv -0.021909 1.409410 -3.244822\nv -0.381966 1.332105 -3.032457\nv -0.489652 1.323984 -2.997865\nv -0.280597 1.363689 -3.115778\nv -0.593128 1.185013 -2.356860\nv 0.424779 1.599515 -2.108701\nv -0.252622 1.810375 -2.867017\nv 0.667223 1.657270 -2.475376\nv 0.597738 1.634711 -2.442889\nv 0.026821 1.558907 -1.964016\nv -0.042664 1.541161 -1.988080\nv 0.152254 1.887984 -3.010197\nv -0.532667 1.609441 -2.394160\nv -0.482132 1.599515 -2.412508\nv -0.442427 1.566127 -2.264515\nv 0.280094 1.782701 -2.787606\nv 0.265956 1.588987 -2.071402\nv 0.493662 1.719835 -2.643222\nv 0.494564 1.746906 -2.682627\nv 0.267761 1.759540 -2.756623\nv 0.287012 1.644034 -1.963414\nv -0.671636 1.751117 -2.638108\nv 0.416958 1.770369 -2.753916\nv 0.670833 1.723145 -2.623369\nv -0.331733 1.551689 -2.148707\nv 0.632932 1.613353 -2.380924\nv -0.265557 1.547478 -2.097571\nv -0.415054 1.784509 -2.802947\nv 0.792055 0.069048 -3.184962\nv 0.224446 0.069048 -1.809706\nv 0.092696 0.067843 -1.819633\nv 0.662711 0.019414 -2.132163\nv 0.419063 0.128004 -3.536898\nv 0.674442 0.089200 -3.349199\nv 0.909367 0.065138 -3.152476\nv 0.299646 0.164700 -3.595553\nv 0.793559 0.001967 -2.346633\nv -0.998305 0.114467 -2.800841\nv -0.815418 0.064234 -2.488310\nv -0.681563 0.046188 -2.394461\nv -0.046575 0.202902 -3.719784\nv -0.550414 0.167709 -3.498095\nv -0.671937 0.158685 -3.442447\nv -0.424379 0.192374 -3.601871\nv -0.618395 0.048293 -2.247671\nv 0.905456 0.662827 -2.893788\nv -0.051688 0.634550 -1.870768\nv 0.537578 0.604168 -2.023575\nv -0.422574 0.764796 -3.289039\nv 0.875677 0.620112 -2.647132\nv 0.774308 0.604470 -2.569526\nv 0.031633 0.631243 -1.861444\nv 0.203691 0.795780 -3.411765\nv -0.725179 0.639063 -2.448304\nv -0.667726 0.622519 -2.444393\nv -0.563649 0.622218 -2.221501\nv 0.439518 0.719979 -3.214140\nv 0.335140 0.621616 -1.970634\nv 0.703620 0.670345 -2.966280\nv 0.713245 0.693808 -3.053813\nv 0.431095 0.700125 -3.150070\nv 0.283102 0.633647 -1.875280\nv -0.976346 0.744342 -2.917250\nv 0.591722 0.705240 -3.150070\nv -0.407233 0.632143 -2.038915\nv 0.793559 0.594845 -2.441084\nv -0.305262 0.632746 -2.003421\nv -0.639451 0.738628 -3.186767\nv 0.626014 -2.016397 -3.178044\nv 0.136312 -2.378561 -1.650584\nv 0.005464 -2.375552 -1.572075\nv 0.534570 -2.229362 -2.135172\nv 0.247006 -1.855770 -3.498697\nv 0.536676 -2.003763 -3.307689\nv 0.731594 -2.028428 -3.160598\nv 0.135108 -1.742670 -3.668348\nv 0.570366 -2.259745 -2.383933\nv -0.744731 -1.752295 -2.743990\nv -0.623207 -1.779969 -2.391152\nv -0.518529 -1.782375 -2.284369\nv -0.147944 -1.640999 -3.789269\nv -0.436712 -1.691835 -3.517948\nv -0.519432 -1.702062 -3.447862\nv -0.362414 -1.646111 -3.637064\nv -0.495668 -1.774254 -2.107498\nv -0.705927 -0.298831 -3.499599\nv 0.933431 -0.456451 -3.134729\nv -0.019202 -0.449532 -1.779626\nv 0.576382 -1.555571 -1.994999\nv -0.499880 -0.273563 -3.643682\nv 0.069534 -0.471790 -1.766090\nv 0.922301 -0.495253 -2.827913\nv 0.768593 -1.584450 -2.694960\nv 0.064421 -1.186792 -3.842210\nv -0.717358 -0.375535 -2.476880\nv -0.649076 -0.392681 -2.440483\nv -0.529358 -0.381551 -2.146301\nv 0.281598 -1.381410 -3.494786\nv 0.379659 -1.591065 -1.907466\nv 0.724676 -0.437200 -3.250537\nv 0.613982 -1.464730 -3.282121\nv 0.312279 -1.439764 -3.415676\nv 0.316491 -1.662056 -1.743230\nv -0.830759 -1.224994 -3.096226\nv 0.492759 -1.465332 -3.415977\nv -0.393396 -0.368918 -1.923409\nv 0.761975 -1.633779 -2.511472\nv -0.293531 -0.379445 -1.874980\nv 0.499978 -4.186065 -3.155184\nv 0.161278 -4.879108 -1.998609\nv -0.083573 -4.960624 -2.077419\nv 0.311678 -5.112829 -2.358666\nv -0.133205 -4.961527 -3.066147\nv 0.257835 -5.016875 -2.959063\nv 0.505393 -4.636363 -2.994557\nv -0.159374 -4.977167 -3.096829\nv 0.320100 -5.104406 -2.445597\nv -0.264654 -5.437091 -2.750308\nv -0.258337 -5.453032 -2.679620\nv -0.315189 -5.222017 -2.520497\nv -0.223144 -4.960925 -3.135030\nv -0.216226 -5.330005 -2.882359\nv -0.226453 -5.384452 -2.855888\nv -0.279393 -4.844816 -3.207824\nv -0.306465 -5.267741 -2.491620\nv -0.098312 -4.401739 -1.945067\nv -0.255029 -5.019279 -2.973802\nv 0.702417 -2.779828 -3.129916\nv -0.158472 -2.980160 -1.691191\nv 0.312580 -4.417379 -2.197438\nv 0.672938 -2.891725 -2.851376\nv -0.140725 -4.297360 -3.431318\nv -0.538683 -2.520536 -2.413412\nv -0.452654 -2.890219 -2.107198\nv -0.046274 -4.268785 -3.257155\nv 0.262046 -4.257656 -2.071703\nv 0.531562 -2.608371 -3.220156\nv 0.315889 -4.408357 -3.104650\nv 0.169400 -4.322326 -1.877387\nv -0.305864 -5.108315 -2.871530\nv 0.274379 -4.365040 -3.172329\nv -0.414753 -2.852921 -1.869867\nv 0.391991 -4.391810 -2.536740\nv -0.332033 -2.724480 -1.698712\nv -0.353089 -2.342766 -3.409961\nv 0.412145 -4.176739 -2.582762\nv -0.477019 -2.802387 -2.387543\nv 0.232568 -4.213739 -3.156989\nv -0.489352 -2.372542 -3.317916\nv -0.296539 -5.279170 -2.676912\nv -0.650279 -2.393300 -3.013807\nv -0.208706 -4.882717 -3.068553\nv -0.359707 -3.022874 -3.374467\nv -0.481531 -3.231327 -2.624272\nv -0.539585 -3.151013 -2.906121\nv -0.292929 -3.008134 -3.421692\nv -0.278491 -4.682987 -2.417623\nv -0.271873 -4.584323 -2.339114\nv -0.323310 -4.548227 -2.491319\nv -0.377755 -3.923467 -2.453117\nv -0.359707 -3.998066 -2.397470\nv -0.088686 -3.068594 -1.697208\nv -0.140424 -4.351506 -1.950782\nv -0.227656 -4.224267 -1.955896\nv -0.083272 -3.784196 -1.820235\nv 0.154360 -3.048440 -1.773611\nv 0.136612 -3.770060 -1.788350\nv 0.359806 -2.943461 -2.087646\nv 0.248510 -2.953387 -1.977553\nv 0.552919 -2.963616 -2.525610\nv 0.569764 -2.869163 -2.673303\nv 0.432900 -3.746597 -2.402282\nv 0.379659 -3.761638 -2.208567\nv 0.538481 -4.285329 -2.986736\nv 0.556228 -4.414071 -2.815581\nv 0.483434 -3.664177 -3.197296\nv 0.508100 -3.318858 -3.236400\nv 0.581194 -3.500541 -3.155184\nv 0.512311 -2.832768 -3.269487\nv 0.405527 -2.800281 -3.386799\nv 0.270468 -2.731399 -3.313705\nv 0.380260 -3.717721 -3.227075\nv 0.018097 -2.633638 -3.654511\nv 0.172408 -2.693797 -3.386799\nv -0.302555 -3.587774 -3.616009\nv 0.030731 -3.567320 -3.445756\nv -0.161781 -3.608529 -3.663836\nv -0.011381 -3.591985 -3.589839\nv -0.342261 -3.843454 -3.280316\nv -0.434005 -3.931289 -3.079984\nv -0.393096 -4.187870 -2.633597\nv -0.241192 -3.747500 -3.377475\nv -0.264354 -4.602673 -3.172931\nv -0.338350 -5.015368 -2.725040\nv -0.328123 -4.869481 -2.872131\nv -0.225550 -4.520254 -3.223465\nv -0.626516 -1.244544 -3.467714\nv 0.848605 -1.494509 -3.113372\nv -0.036347 -1.572416 -1.607268\nv 0.619396 -0.480815 -2.025681\nv -0.465288 -1.209351 -3.623528\nv 0.046974 -1.651829 -1.587416\nv 0.764081 -1.533314 -2.788509\nv 0.868458 -0.514504 -2.736470\nv 0.147140 -0.261833 -3.798594\nv -0.610273 -1.289364 -2.411306\nv -0.541089 -1.301696 -2.389648\nv -0.483035 -1.269211 -2.068996\nv 0.382667 -0.377038 -3.567579\nv 0.415754 -0.468181 -1.960407\nv 0.649175 -1.478867 -3.181052\nv 0.709636 -0.423361 -3.374767\nv 0.399812 -0.402908 -3.480949\nv 0.353489 -0.479613 -1.842493\nv -0.989581 -0.280784 -3.123600\nv 0.560138 -0.415541 -3.456284\nv -0.366325 -1.263795 -1.819633\nv 0.849207 -0.530147 -2.547869\nv -0.276385 -1.313128 -1.748343\nv 0.740618 -1.052634 -2.388144\nv -0.620801 -0.766274 -3.566677\nv 0.687076 -1.019547 -2.141488\nv -0.113954 -0.701600 -3.914402\nv -0.414453 -0.713935 -3.749563\nv -0.560942 -0.835457 -2.236240\nv -0.704724 -0.842678 -2.515683\nv 0.301451 -0.840271 -3.650901\nv -0.587112 -0.847190 -2.403485\nv 0.591121 -0.921187 -3.428610\nv 0.711140 -0.935323 -3.274300\nv 0.248510 -1.038498 -1.755863\nv 0.823338 -0.942842 -3.234294\nv -0.515220 -0.750932 -3.624130\nv -0.888513 -0.799662 -2.854383\nv 0.174513 -0.763867 -3.808520\nv 0.118564 -1.033084 -1.700215\nv -0.235777 2.341288 -1.987478\nv -0.299547 2.445365 -2.056361\nv -0.185243 2.755790 -2.341820\nv 0.165790 2.765113 -2.284368\nv -0.250818 2.407163 -2.018762\nv 0.264452 2.707362 -2.241052\nv 0.284305 2.596666 -2.186909\nv 0.112248 2.160806 -1.899344\nv 0.334839 2.632762 -2.205859\nv -0.131701 2.746464 -2.336105\nv -0.338350 2.550946 -2.144195\nv 0.438916 2.168027 -2.181795\nv 0.138417 2.787976 -2.303920\nv -0.003560 2.609300 -2.647734\nv 0.058705 2.137347 -1.885207\nv 0.279492 2.260974 -1.956496\nv 0.574878 1.592897 -2.292490\nv -0.095304 2.765716 -2.332195\nv -0.303758 2.143362 -2.163747\nv -0.398209 2.225179 -2.226614\nv -0.242696 2.522067 -2.559599\nv 0.223844 2.514247 -2.523503\nv -0.322107 2.187881 -2.201347\nv 0.346871 2.451983 -2.465148\nv 0.373342 2.383399 -2.423638\nv 0.157368 2.094331 -1.962211\nv 0.447940 2.405660 -2.437174\nv -0.189154 2.532595 -2.567420\nv -0.452654 2.327151 -2.330992\nv 0.369131 2.125915 -2.101181\nv 0.194968 2.590952 -2.604719\nv -0.015291 1.891291 -3.021929\nv 0.075249 2.044698 -1.966723\nv -0.148846 2.585837 -2.611036\nv 0.470199 1.587785 -2.184502\nv 0.729789 0.590634 -2.328585\nv -0.209608 1.843465 -2.922665\nv -0.479425 1.577257 -2.305123\nv -0.568161 1.611248 -2.400176\nv -0.375649 1.795037 -2.829417\nv 0.275883 1.803757 -2.829718\nv -0.489953 1.595003 -2.397769\nv 0.473207 1.763751 -2.720226\nv 0.518026 1.725552 -2.657660\nv 0.171806 1.615158 -1.926416\nv 0.614583 1.733372 -2.668489\nv -0.289019 1.805863 -2.857993\nv -0.682766 1.696071 -2.531625\nv 0.232868 1.860611 -2.951842\nv 0.057201 1.571841 -1.955594\nv 0.620298 0.597852 -2.122838\nv -0.027624 0.821647 -3.500802\nv 0.671434 -1.634081 -2.357462\nv -0.363617 0.790966 -3.369954\nv -0.632231 0.621616 -2.287075\nv -0.774209 0.636957 -2.464848\nv -0.586510 0.748855 -3.230985\nv 0.430193 0.735920 -3.264674\nv -0.670433 0.619510 -2.415817\nv 0.665719 0.700426 -3.107055\nv 0.737911 0.673053 -2.982524\nv 0.188952 0.634249 -1.834372\nv 0.853418 0.676361 -2.972297\nv -0.466491 0.757879 -3.273097\nv -0.952282 0.699221 -2.716918\nv 0.375447 -4.464606 -2.466052\nv 0.324913 0.779535 -3.357621\nv 0.067429 0.631243 -1.856330\nv -0.588916 -1.238227 -3.526972\nv 0.627217 -1.599487 -2.131562\nv -0.147042 -1.167540 -3.899061\nv -0.407835 -1.178969 -3.713768\nv -0.508904 -1.286957 -2.182698\nv -0.660206 -1.301696 -2.436873\nv 0.258135 -1.345615 -3.572392\nv -0.544699 -1.302901 -2.345130\nv 0.576983 -1.466835 -3.361532\nv 0.679857 -1.476161 -3.200604\nv 0.222641 -1.685820 -1.655697\nv 0.795364 -1.486689 -3.195190\nv -0.501985 -1.220481 -3.605180\nv -0.803086 -1.280640 -2.788509\nv 0.151652 -1.246050 -3.772123\nv 0.083672 -1.682509 -1.599448\nv -0.087183 -4.368649 -1.930027\nv -0.239688 -4.996117 -2.997565\nv 0.339351 -4.482652 -2.298206\nv -0.145538 -2.641759 -3.684591\nv -0.306165 -4.223664 -3.456585\nv -0.303758 -5.258114 -2.709098\nv -0.049583 -4.284425 -3.295958\nv -0.316993 -4.608388 -2.477181\nv 0.309271 -4.386096 -3.138339\nv 0.509905 -3.776075 -3.161500\nv 0.545399 -4.087404 -3.063139\nv -0.218331 -4.922421 -3.038474\nv -0.310977 -5.175396 -2.809264\nv -0.098914 -4.298863 -3.388002\nv 0.326116 2.360840 -2.023875\nv -0.661710 -2.460378 -2.779786\nv -0.445134 -2.363219 -3.362134\nv -0.476417 -2.885408 -2.206762\nv -0.565755 -2.515726 -2.470263\nv -0.374145 -2.348179 -3.400636\nv -0.477921 -2.839685 -2.356861\nv 0.143531 -4.318115 -1.870769\nv -0.066127 -3.086641 -1.698712\nv 0.104427 -3.075514 -1.727589\nv -0.199982 -4.296158 -3.464105\nv 0.485841 -2.986175 -2.393258\nv 0.428689 -2.977753 -2.191422\nv 0.559838 -2.638452 -3.254447\nv 0.662109 -2.721772 -3.209628\nv 0.471402 -2.816824 -3.326338\nv -0.379560 -2.623713 -3.582018\nv -0.289621 -4.676671 -2.442890\nv 0.159473 -2.682368 -3.446057\nv 0.103224 -2.654694 -3.586831\nv -0.453256 -4.022429 -2.936202\nv -0.319701 -3.821795 -3.326339\nv -0.407534 -4.150571 -2.702480\nv -0.257736 -3.774271 -3.375068\nv 0.009675 2.785570 -2.328585\nv 0.792055 -0.528340 -2.393859\nv -0.647873 -0.293719 -3.545321\nv 0.712343 -0.504277 -2.146602\nv -0.069135 -0.243181 -3.861762\nv -0.436411 -0.251305 -3.733320\nv -0.590119 -0.388771 -2.242256\nv -0.761275 -0.381250 -2.514480\nv 0.368830 -0.358389 -3.624130\nv -0.650881 -0.395688 -2.395363\nv 0.658199 -0.418548 -3.447561\nv 0.762577 -0.436899 -3.259561\nv 0.249112 -0.484424 -1.805796\nv 0.874474 -0.444116 -3.220457\nv -0.542593 -0.281383 -3.617512\nv -0.951380 -0.333122 -2.840847\nv 0.254526 -0.299734 -3.747758\nv 0.110142 -0.479613 -1.763985\nv 0.086379 2.212244 -1.887613\nv 0.103224 2.089216 -1.892726\nv 0.151352 1.987847 -1.967325\nv 0.120670 1.202460 -1.910474\nv 0.176619 0.067542 -1.810308\nv 0.089688 -2.396608 -1.620504\nv 0.154360 -4.867677 -1.996504\nv 0.120369 -3.778783 -1.785342\nv 0.202187 -1.044513 -1.735108\nv 0.094801 2.149980 -1.893328\nv 0.128491 2.076583 -1.963114\nv 0.132401 1.600419 -1.942058\nv 0.145937 0.632746 -1.838282\nv 0.170904 -1.699655 -1.638552\nv 0.132401 -4.316010 -1.868664\nv 0.075550 -3.088747 -1.710142\nv 0.199480 -0.487132 -1.795268\nv 0.114353 2.262176 -1.929725\nv 0.158270 2.121101 -1.936944\nv 0.249112 2.044098 -2.013046\nv 0.290020 1.202460 -1.973943\nv 0.344766 0.065436 -1.882500\nv 0.250916 -2.318400 -1.778724\nv 0.182635 -4.836093 -1.989585\nv 0.174814 -3.713510 -1.811813\nv 0.350180 -1.017140 -1.838282\nv 0.135108 2.190586 -1.936643\nv 0.202187 2.120201 -2.002819\nv 0.292427 1.629897 -2.000413\nv 0.299044 0.630339 -1.907466\nv 0.339652 -1.644307 -1.786846\nv 0.179627 -4.268485 -1.873176\nv 0.165188 -3.017157 -1.798878\nv 0.370033 -0.476905 -1.877085\nv 0.139921 2.292859 -1.943862\nv 0.184440 2.150279 -1.970634\nv 0.280094 1.984841 -2.076515\nv 0.333636 1.184413 -2.051850\nv 0.435006 0.054309 -1.970333\nv 0.333937 -2.223046 -1.934839\nv 0.281598 -4.897758 -2.209169\nv 0.291825 -3.711703 -2.023275\nv 0.459972 -0.991271 -1.950480\nv 0.233771 2.104859 -2.062678\nv 0.299947 1.591093 -2.080726\nv 0.378756 0.615600 -1.985072\nv 0.429290 -1.581742 -1.933937\nv 0.272273 -4.297662 -2.099978\nv 0.161880 2.221871 -1.958903\nv 0.280094 -2.951883 -2.000113\nv 0.465387 -0.472393 -1.976049\nv 0.195870 2.289551 -1.928522\nv 0.248209 2.160207 -1.961610\nv 0.354391 2.000782 -2.087645\nv 0.420567 1.177494 -2.079523\nv 0.541489 0.040470 -1.998307\nv 0.432900 -2.192366 -1.979057\nv 0.288215 -4.998826 -2.272337\nv 0.323409 -3.735768 -2.076516\nv 0.557130 -0.987963 -1.991389\nv 0.302052 2.116291 -2.064182\nv 0.380561 1.595906 -2.094864\nv 0.483434 0.608982 -2.017559\nv 0.527351 -1.564295 -1.975447\nv 0.296638 -4.377373 -2.164951\nv 0.222040 2.225179 -1.945367\nv 0.335441 -2.946772 -2.056964\nv 0.568561 -0.478107 -2.004925\nv 0.396203 -3.767653 -2.262109\nv 0.721367 -1.038196 -2.204356\nv 0.261745 2.344896 -1.945066\nv 0.315287 2.210440 -1.998307\nv 0.459972 1.979123 -2.176982\nv 0.557130 1.173885 -2.219094\nv 0.689482 0.011594 -2.187510\nv 0.561943 -2.254030 -2.198941\nv 0.311678 -5.149527 -2.385137\nv 0.288516 2.277517 -1.971235\nv 0.380561 2.126819 -2.122237\nv 0.491857 1.581770 -2.213078\nv 0.643460 0.592740 -2.169462\nv 0.645566 -1.620543 -2.193226\nv 0.348375 -4.514239 -2.343927\nv 0.446436 -2.993396 -2.249476\nv 0.740017 -0.516610 -2.212477\nv 0.278891 2.397238 -1.973040\nv 0.342660 2.256763 -2.034704\nv 0.487946 1.971906 -2.218192\nv 0.596836 1.177193 -2.302115\nv 0.742122 0.003473 -2.290986\nv 0.538481 -2.266362 -2.311741\nv 0.316791 -5.146518 -2.427249\nv 0.416657 -3.759833 -2.358366\nv 0.690084 -1.050529 -2.324976\nv 0.415153 2.147573 -2.162544\nv 0.544798 1.583875 -2.260605\nv 0.688881 0.587926 -2.275043\nv 0.629924 -1.635885 -2.290685\nv 0.366423 -4.503711 -2.430557\nv 0.311979 2.327750 -2.004925\nv 0.443729 -2.994297 -2.349642\nv 0.750244 -0.527439 -2.327082\nv -0.193666 -3.664178 -1.834071\nv -0.076655 -0.937730 -1.728490\nv -0.016795 2.214048 -1.887914\nv -0.036949 2.092226 -1.899043\nv -0.058607 1.874748 -2.007030\nv -0.146741 1.200655 -1.984471\nv -0.096206 0.072355 -1.837681\nv -0.151854 -2.134009 -1.551620\nv -0.135010 -4.981981 -2.099978\nv -0.026722 2.151784 -1.895735\nv -0.041160 2.021536 -1.997104\nv -0.099214 1.542965 -2.013046\nv -0.114254 0.633647 -1.907165\nv -0.096206 -1.508348 -1.643665\nv -0.160578 -4.319320 -1.954692\nv -0.205698 -2.918194 -1.683371\nv -0.092597 -0.430281 -1.786845\nv -0.062517 2.233601 -1.898742\nv -0.099515 2.113884 -1.912880\nv -0.148546 1.884673 -2.061475\nv -0.262850 1.194037 -2.071101\nv -0.239387 0.075666 -1.874077\nv -0.247810 -1.952928 -1.627723\nv -0.164488 -4.943478 -2.100881\nv -0.252021 -3.577548 -1.850916\nv -0.206901 -0.869448 -1.805194\nv -0.081467 2.172840 -1.907466\nv -0.121774 2.035977 -2.022973\nv -0.211112 1.545975 -2.068093\nv -0.239086 0.632143 -1.977853\nv -0.224949 -1.372687 -1.692094\nv -0.206600 -4.255249 -1.949880\nv -0.293230 -2.791859 -1.693297\nv -0.232770 -0.395688 -1.835876\nv -0.326619 -3.919255 -2.234135\nv -0.398209 -0.811995 -1.961009\nv -0.139221 2.294061 -1.922807\nv -0.193365 2.169229 -1.961309\nv -0.283003 1.911446 -2.132765\nv -0.457166 1.189224 -2.184502\nv -0.429493 0.066039 -2.014852\nv -0.413249 -1.775155 -1.776919\nv -0.288718 -5.212092 -2.465450\nv -0.166594 2.232098 -1.941757\nv -0.231867 2.074477 -2.083434\nv -0.359406 1.554996 -2.177283\nv -0.450548 0.632746 -2.092157\nv -0.392494 -1.265901 -1.881598\nv -0.427688 -2.863750 -1.930027\nv -0.277889 -4.609590 -2.356260\nv -0.427988 -0.372526 -1.977552\nv -0.175317 2.337980 -1.930327\nv -0.222843 2.205027 -1.993194\nv -0.330529 1.930695 -2.175478\nv -0.521236 1.184714 -2.263011\nv -0.523643 0.057917 -2.101783\nv -0.452654 -1.766133 -1.914686\nv -0.300449 -5.250596 -2.473271\nv -0.339253 -3.976709 -2.311140\nv -0.477019 -0.817411 -2.072004\nv -0.199682 2.271502 -1.961910\nv -0.265557 2.100046 -2.122538\nv -0.421973 1.563419 -2.231126\nv -0.533870 0.626429 -2.172771\nv -0.459873 -1.268308 -2.000714\nv -0.448443 -2.880293 -2.053355\nv -0.280296 -4.659826 -2.398071\nv -0.494465 -0.378244 -2.090954\nv -0.207502 2.436039 -1.960707\nv -0.272174 2.294362 -2.033200\nv -0.368129 1.965589 -2.257296\nv -0.608167 1.184714 -2.386339\nv -0.643060 0.045585 -2.293993\nv -0.501083 -1.779969 -2.170666\nv -0.307669 -5.267138 -2.497636\nv -0.365723 -3.995358 -2.421834\nv -0.578087 -0.842075 -2.290083\nv -0.242696 2.365952 -1.997104\nv -0.312181 2.158402 -2.176682\nv -0.491156 1.581770 -2.328886\nv -0.650881 0.619811 -2.328585\nv -0.523041 -1.295379 -2.238045\nv -0.480628 -2.882700 -2.259703\nv -0.295937 -4.673360 -2.455223\nv -0.616590 -0.392982 -2.291888\nv -0.529960 -3.181995 -2.802646\nv -0.325717 -4.920015 -2.821898\nv -0.801882 -0.832150 -2.701878\nv -0.264354 2.551846 -2.070499\nv -0.379861 2.444763 -2.145699\nv -0.499278 2.063648 -2.365283\nv -0.782631 1.234646 -2.575542\nv -0.925210 0.087998 -2.666083\nv -0.715553 -1.772149 -2.586973\nv -0.264354 -5.444309 -2.726243\nv -0.328424 2.501613 -2.102083\nv -0.436411 2.279623 -2.287376\nv -0.647271 1.656065 -2.472067\nv -0.887911 0.667038 -2.606224\nv -0.762478 -1.298388 -2.632995\nv -0.316091 -5.207278 -2.774973\nv -0.630427 -2.485946 -2.648035\nv -0.444833 -4.069053 -2.854083\nv -0.887009 -0.365007 -2.689846\nv -0.519432 -3.196734 -2.753917\nv -0.330830 -4.947387 -2.798736\nv -0.769396 -0.841473 -2.631190\nv -0.322107 2.474843 -2.089149\nv -0.427988 2.255260 -2.265718\nv -0.634337 1.638018 -2.444393\nv -0.857530 0.651094 -2.555388\nv -0.720967 -1.305609 -2.563811\nv -0.313985 -5.224725 -2.760234\nv -0.614785 -2.499480 -2.586371\nv -0.435208 -4.092817 -2.815581\nv -0.841287 -0.376138 -2.626077\nv -0.256533 2.526579 -2.058768\nv -0.376853 2.419194 -2.120131\nv -0.484238 2.041089 -2.345731\nv -0.763380 1.219907 -2.543958\nv -0.882497 0.075063 -2.610134\nv -0.689985 -1.782074 -2.514480\nv -0.262850 -5.447921 -2.716317\nv -0.529659 -3.134470 -2.952445\nv -0.331131 -4.846018 -2.898602\nv -0.882497 -0.782516 -2.931087\nv -0.332936 2.571399 -2.168560\nv -0.446638 2.347906 -2.355657\nv -0.685172 1.711413 -2.557193\nv -0.957997 0.710653 -2.766851\nv -0.807898 -1.265901 -2.866416\nv -0.308872 -5.157949 -2.823402\nv -0.660807 -2.443533 -2.838742\nv -0.446638 -3.998366 -2.971997\nv -0.968526 -0.320489 -2.910934\nv -0.275784 2.616821 -2.120733\nv -0.374446 2.517256 -2.226915\nv -0.522740 2.132232 -2.435670\nv -0.841889 1.278863 -2.671196\nv -0.996500 0.126200 -2.864911\nv -0.745633 -1.735751 -2.820694\nv -0.264053 -5.433182 -2.759633\nv -0.273979 2.654722 -2.157731\nv -0.354894 2.562675 -2.278352\nv -0.515220 2.171334 -2.475676\nv -0.847002 1.299016 -2.735868\nv -1.018458 0.149361 -2.989443\nv -0.770900 -1.709581 -2.972598\nv -0.264053 -5.424757 -2.777680\nv -0.525448 -3.103188 -3.048099\nv -0.341358 -4.800297 -2.955152\nv -0.902951 -0.753038 -3.083593\nv -0.321806 2.612309 -2.217891\nv -0.434907 2.387912 -2.404988\nv -0.677953 1.738484 -2.611036\nv -0.964314 0.732311 -2.867919\nv -0.818126 -1.237628 -3.020124\nv -0.308270 -5.125763 -2.856189\nv -0.659003 -2.411347 -2.957558\nv -0.428590 -3.952345 -3.042685\nv -0.972135 -0.292815 -3.053513\nv -0.255931 2.708865 -2.198339\nv -0.319099 2.618325 -2.335504\nv -0.464686 2.211943 -2.548771\nv -0.779323 1.316463 -2.832726\nv -0.968225 0.165001 -3.154882\nv -0.712846 -1.697851 -3.137436\nv -0.255329 -5.414530 -2.803549\nv -0.495668 -3.074008 -3.164508\nv -0.327822 -4.743446 -3.024336\nv -0.859636 -0.764470 -3.245122\nv -0.295035 2.668557 -2.268425\nv -0.395502 2.437542 -2.461539\nv -0.613582 1.762850 -2.683228\nv -0.904154 0.748855 -3.000572\nv -0.801882 -1.235522 -3.196693\nv -0.624411 -2.390592 -3.101641\nv -0.422875 -3.909631 -3.140144\nv -0.293832 -5.086660 -2.900407\nv -0.926414 -0.282588 -3.225270\nv -0.247208 2.726613 -2.209168\nv -0.306465 2.635772 -2.349040\nv -0.443329 2.220667 -2.566217\nv -0.751649 1.320373 -2.859196\nv -0.939649 0.163498 -3.195791\nv -0.690587 -1.700559 -3.180450\nv -0.253525 -5.411523 -2.810467\nv -0.483636 -3.067691 -3.195491\nv -0.325416 -4.725400 -3.042985\nv -0.831060 -0.766575 -3.287234\nv -0.284507 2.686306 -2.281359\nv -0.378958 2.451983 -2.477481\nv -0.591624 1.771273 -2.708195\nv -0.876481 0.750960 -3.037570\nv -0.776014 -1.238227 -3.238805\nv -0.604558 -2.387583 -3.138639\nv -0.412648 -3.899404 -3.162102\nv -0.288417 -5.075530 -2.912138\nv -0.905057 -0.291312 -3.272495\nv -0.213518 2.770228 -2.243760\nv -0.257134 2.670964 -2.389046\nv -0.353992 2.240822 -2.614946\nv -0.620500 1.313456 -2.913641\nv -0.803086 0.153573 -3.301372\nv -0.616891 -1.706875 -3.316713\nv -0.241794 -5.402197 -2.831824\nv -0.433704 -3.047538 -3.280617\nv -0.300750 -4.674863 -3.101642\nv -0.735707 -0.771386 -3.426805\nv -0.243297 2.727213 -2.314748\nv -0.316993 2.486874 -2.518991\nv -0.489953 1.783605 -2.770159\nv -0.730593 0.739227 -3.116079\nv -0.691489 -1.244245 -3.379880\nv -0.528155 -2.375853 -3.243318\nv -0.374446 -3.866013 -3.237302\nv -0.265857 -5.041841 -2.948234\nv -0.790452 -0.296122 -3.411465\nv -0.226152 2.758197 -2.233532\nv -0.276686 2.664045 -2.372502\nv -0.385576 2.235707 -2.602914\nv -0.666222 1.316463 -2.895292\nv -0.849710 0.157182 -3.264975\nv -0.649076 -1.707173 -3.275804\nv -0.245403 -5.405806 -2.826410\nv -0.449045 -3.053855 -3.253545\nv -0.305864 -4.693213 -3.084195\nv -0.767291 -0.769582 -3.378376\nv -0.258638 2.715784 -2.304521\nv -0.339854 2.476949 -2.506358\nv -0.529057 1.782701 -2.756623\nv -0.782631 0.744342 -3.091413\nv -0.719463 -1.241537 -3.329948\nv -0.547707 -2.377657 -3.204815\nv -0.389787 -3.878047 -3.216246\nv -0.270971 -5.051164 -2.934698\nv -0.827150 -0.293719 -3.361833\nv -0.050786 2.806625 -2.243459\nv -0.102824 2.742856 -2.421532\nv -0.141627 2.344297 -2.762338\nv -0.254427 1.379031 -3.154581\nv -0.388283 0.202902 -3.646389\nv -0.348577 -1.630170 -3.690005\nv -0.269768 -4.890238 -3.168118\nv -0.283605 -3.596196 -3.634658\nv -0.388584 -0.699796 -3.798594\nv -0.084776 2.774138 -2.331593\nv -0.136814 2.599073 -2.624271\nv -0.187650 1.861211 -2.953647\nv -0.322709 0.800292 -3.403042\nv -0.387681 -1.162727 -3.767612\nv -0.285109 -4.257053 -3.459292\nv -0.352187 -2.622207 -3.610895\nv -0.399713 -0.241076 -3.775432\nv -0.211413 -3.607327 -3.655113\nv -0.253224 -0.691976 -3.896354\nv -0.009576 2.820160 -2.238646\nv -0.044469 2.744057 -2.419126\nv -0.053192 2.360840 -2.803849\nv -0.126888 1.402491 -3.221961\nv -0.200283 0.205008 -3.707451\nv -0.241794 -1.629869 -3.780847\nv -0.247208 -4.950698 -3.140746\nv -0.064322 2.611104 -2.642620\nv -0.091995 1.884673 -3.002677\nv -0.155464 0.814128 -3.467413\nv -0.265256 -1.157013 -3.872591\nv -0.234274 -2.633638 -3.652104\nv -0.239387 -4.291345 -3.464706\nv -0.032437 2.784064 -2.329788\nv -0.232770 -0.232955 -3.865672\nv -0.231867 -3.607026 -3.652105\nv -0.307969 -0.688668 -3.884021\nv -0.094702 2.611706 -2.640213\nv -0.130197 1.881667 -2.994255\nv -0.219534 0.816836 -3.464405\nv -0.314286 -1.152500 -3.855144\nv -0.273378 -2.625818 -3.640374\nv -0.255029 -4.288335 -3.463203\nv -0.053493 2.782862 -2.330390\nv -0.292629 -0.230849 -3.844917\nv -0.025218 2.818054 -2.239850\nv -0.068533 2.748570 -2.421532\nv -0.081768 2.363545 -2.800540\nv -0.176219 1.400988 -3.217749\nv -0.264955 0.205309 -3.690306\nv -0.284808 -1.622950 -3.769416\nv -0.255329 -4.946486 -3.141949\nv -0.141928 -3.605824 -3.660226\nv -0.059208 -0.706113 -3.899662\nv 0.029829 2.604787 -2.642620\nv 0.026520 1.890689 -3.020725\nv 0.031934 0.813827 -3.482152\nv -0.093800 -1.171752 -3.891240\nv -0.105531 -2.638452 -3.674063\nv -0.185243 -4.297059 -3.456585\nv 0.029829 2.783464 -2.324975\nv -0.004162 -0.247094 -3.862062\nv 0.035243 2.824371 -2.233232\nv 0.026821 2.732026 -2.410102\nv 0.040056 2.346701 -2.791516\nv 0.026219 1.405801 -3.229782\nv 0.020504 0.198390 -3.713166\nv -0.104629 -1.647015 -3.768213\nv -0.215624 -4.964533 -3.131721\nv 0.068933 2.826175 -2.228419\nv 0.081265 2.728719 -2.398371\nv 0.104728 2.345800 -2.789109\nv 0.122475 1.392565 -3.191580\nv 0.122174 0.196284 -3.681883\nv -0.009576 -1.658444 -3.738434\nv -0.200283 -4.971452 -3.124502\nv -0.101320 -3.601010 -3.651203\nv 0.035544 -0.714836 -3.863266\nv 0.096907 2.596365 -2.632393\nv 0.111345 1.890089 -3.017717\nv 0.142027 0.798485 -3.420789\nv 0.010878 -1.181376 -3.852437\nv -0.022811 -2.635744 -3.662632\nv -0.155464 -4.297059 -3.440041\nv 0.077054 2.782560 -2.315951\nv 0.082769 -0.258222 -3.801903\nv 0.121572 2.818656 -2.223907\nv 0.165790 2.747368 -2.377916\nv 0.219032 2.305192 -2.725340\nv 0.280695 1.355869 -3.080885\nv 0.341758 0.152669 -3.565474\nv 0.178724 -1.778465 -3.625032\nv -0.150952 -4.979574 -3.087504\nv 0.007269 -3.587473 -3.554946\nv 0.210910 -0.787330 -3.761295\nv 0.151051 2.785268 -2.299708\nv 0.213918 2.579219 -2.584265\nv 0.253323 1.844065 -2.916348\nv 0.362212 0.764495 -3.317916\nv 0.189553 -1.277634 -3.713768\nv -0.081768 -4.299466 -3.364540\nv 0.130897 -2.665824 -3.549833\nv 0.292427 -0.319284 -3.706850\nv 0.274078 -3.626578 -3.255952\nv 0.376350 -0.908252 -3.458088\nv 0.168196 2.778048 -2.190819\nv 0.201886 2.678784 -2.334902\nv 0.245502 2.226682 -2.617353\nv 0.388683 1.300522 -2.901608\nv 0.480126 0.100029 -3.396424\nv 0.314686 -1.965863 -3.330851\nv 0.217528 -4.851133 -3.012003\nv 0.191358 2.730523 -2.265718\nv 0.242494 2.461306 -2.485302\nv 0.302955 1.761347 -2.750908\nv 0.470199 0.699221 -3.144655\nv 0.353790 -1.440966 -3.419286\nv 0.243697 -4.251338 -3.160598\nv 0.299646 -2.748542 -3.341980\nv 0.441623 -0.407119 -3.466210\nv 0.192561 2.792188 -2.195030\nv 0.244299 2.701045 -2.340617\nv 0.313182 2.232399 -2.614345\nv 0.468695 1.300220 -2.883260\nv 0.553521 0.093110 -3.370556\nv 0.411844 -1.983611 -3.337167\nv 0.227153 -4.952502 -3.001475\nv 0.314084 -3.668690 -3.262569\nv 0.460273 -0.917575 -3.464405\nv 0.224145 2.750076 -2.271433\nv 0.298443 2.480557 -2.488911\nv 0.377854 1.768565 -2.758127\nv 0.546602 0.702532 -3.146760\nv 0.442827 -1.456006 -3.412668\nv 0.265355 -4.326239 -3.175337\nv 0.369131 -2.783737 -3.380182\nv 0.510206 -0.412532 -3.458389\nv 0.560439 -3.447001 -3.186768\nv 0.790852 -0.938330 -3.251740\nv 0.279793 2.687508 -2.132163\nv 0.350180 2.553352 -2.256694\nv 0.480727 2.170133 -2.530121\nv 0.711441 1.284578 -2.790914\nv 0.882896 0.068144 -3.177442\nv 0.706026 -2.022412 -3.178044\nv 0.499978 -4.486565 -3.050807\nv 0.314084 2.621632 -2.198038\nv 0.418161 2.399642 -2.435369\nv 0.587812 1.735176 -2.673603\nv 0.824240 0.678768 -2.990044\nv 0.761674 -1.481575 -3.212937\nv 0.550212 -3.991146 -3.109161\nv 0.638045 -2.694399 -3.239107\nv 0.838077 -0.440206 -3.242415\nv 0.610673 -3.643122 -3.011401\nv 0.901847 -0.959087 -3.090511\nv 0.317995 2.682396 -2.143292\nv 0.419063 2.543424 -2.241053\nv 0.575479 2.136744 -2.463644\nv 0.790551 1.265326 -2.696764\nv 0.962007 0.040169 -2.982825\nv 0.783633 -2.051291 -3.041481\nv 0.537278 -4.954607 -2.817085\nv 0.375748 2.618626 -2.187811\nv 0.503287 2.377384 -2.386339\nv 0.684369 1.710211 -2.589379\nv 0.903652 0.652597 -2.833327\nv 0.855223 -1.505339 -3.035164\nv 0.544497 -4.317515 -2.944624\nv 0.705124 -2.807800 -3.058326\nv 0.949373 -0.466377 -3.058627\nv 0.311076 2.631560 -2.111107\nv 0.415754 2.491688 -2.199542\nv 0.582398 2.092226 -2.398371\nv 0.769495 1.241565 -2.613142\nv 0.956592 0.021219 -2.829116\nv 0.745431 -2.082574 -2.879350\nv 0.537278 -5.007549 -2.732861\nv 0.602852 -3.713510 -2.894090\nv 0.843492 -0.978938 -2.917552\nv 0.369131 2.565082 -2.149308\nv 0.499377 2.322940 -2.332496\nv 0.682564 1.675919 -2.509667\nv 0.895831 0.631842 -2.706089\nv 0.785437 -1.523385 -2.858896\nv 0.559838 -4.382487 -2.858294\nv 0.677450 -2.861644 -2.915145\nv 0.925911 -0.484725 -2.900406\nv 0.270168 2.535604 -2.067491\nv 0.354993 2.391219 -2.137578\nv 0.517726 2.028456 -2.343325\nv 0.689181 1.212385 -2.506358\nv 0.869360 0.005880 -2.623369\nv 0.710538 -2.203493 -2.663978\nv 0.354993 -4.794884 -2.517789\nv 0.471102 -3.656957 -2.557796\nv 0.846800 -1.032783 -2.708195\nv 0.313783 2.463713 -2.100579\nv 0.436209 2.236610 -2.258499\nv 0.606462 1.630198 -2.431158\nv 0.777015 0.602063 -2.539446\nv 0.784836 -1.597984 -2.654352\nv 0.407332 -4.231186 -2.574340\nv 0.571569 -2.892324 -2.639613\nv 0.881092 -0.518414 -2.693456\nv 0.280094 2.507328 -2.047037\nv 0.371838 2.361141 -2.112010\nv 0.542993 2.014319 -2.319561\nv 0.702116 1.206069 -2.465449\nv 0.861540 0.002871 -2.536739\nv 0.663914 -2.235077 -2.568324\nv 0.345668 -4.950397 -2.482897\nv 0.461476 -3.699671 -2.517188\nv 0.817623 -1.045417 -2.601411\nv 0.328222 2.435138 -2.077718\nv 0.457566 2.214350 -2.237443\nv 0.624510 1.619369 -2.400476\nv 0.786641 0.597252 -2.474774\nv 0.758065 -1.621447 -2.555990\nv 0.390487 -4.337667 -2.547568\nv 0.553822 -2.941054 -2.562307\nv 0.848605 -0.525333 -2.593590\nv 0.581796 2.829863 3.548439\nv 0.745431 3.303092 3.189284\nv 0.931626 3.771891 2.692363\nv 0.942154 3.957785 2.142501\nv 0.913879 4.104272 1.611890\nv 0.899741 4.162328 1.023827\nv 0.894026 4.103372 0.326273\nv 0.812810 3.920785 -0.333381\nv 0.593527 3.619385 -0.933175\nv 0.407332 3.205184 -1.372042\nv 1.454115 -0.229045 0.247463\nv 1.319056 -0.071427 -0.197721\nv 0.957194 0.228169 -0.834213\nv 0.700612 0.934749 -1.399415\nv 0.385374 1.958369 -1.624413\nv 0.501182 2.075682 -1.571172\nv 1.013744 1.313155 -1.356401\nv 1.474268 0.753065 -0.869106\nv 1.769353 0.486556 -0.189900\nv 1.861398 0.223659 0.507053\nv 1.924566 0.570558 2.214091\nv 2.007285 0.620329 1.980971\nv 2.011797 0.701725 1.808613\nv 2.093916 0.840926 1.587826\nv 2.123996 1.062480 1.333049\nv 2.111061 1.050556 0.827404\nv 2.061429 1.094472 0.131655\nv 1.707087 1.267133 -0.758712\nv 1.154518 1.651854 -1.323914\nv 0.558334 2.198710 -1.544400\nv 0.614884 2.346402 -1.547108\nv 1.219491 1.937614 -1.299850\nv 1.760931 1.641627 -0.655538\nv 2.057519 1.474083 0.183693\nv 2.125801 1.332406 0.848160\nv 2.107151 1.285481 1.361925\nv 2.057218 1.286955 1.693407\nv 1.994050 1.280591 2.014661\nv 1.934793 1.183491 2.321176\nv 1.840342 1.156215 2.606334\nv 1.730249 1.734652 2.888484\nv 1.850870 1.752115 2.551288\nv 1.927874 1.786641 2.197547\nv 2.029244 1.817558 1.789663\nv 2.101135 1.761045 1.308383\nv 2.128508 1.884372 0.759424\nv 2.038268 2.017325 0.129249\nv 1.800636 2.126818 -0.601995\nv 1.267318 2.265787 -1.255031\nv 0.634135 2.504622 -1.540490\nv 0.569463 3.004852 -1.419268\nv 0.611876 2.733228 -1.497777\nv 1.232726 2.778349 -1.154865\nv 1.015850 3.308960 -1.072747\nv 1.407190 3.547494 -0.457611\nv 1.770556 2.846932 -0.570110\nv 1.960060 2.816551 0.108494\nv 1.587670 3.638637 0.190311\nv 1.619856 3.635028 0.862298\nv 1.984725 2.705855 0.805446\nv 2.054812 2.669460 1.375161\nv 1.682121 3.531851 1.414265\nv 1.690543 3.435897 1.925023\nv 1.963670 2.691718 1.865765\nv 1.821692 2.680167 2.365393\nv 1.574736 3.375736 2.501656\nv 1.275741 3.095410 2.996772\nv 1.640611 2.604861 2.798846\nv 1.387037 2.432807 3.232900\nv 0.993891 2.720372 3.434736\nv 0.326116 2.848213 3.569495\nv 0.365822 3.377123 3.266289\nv 0.451249 3.908151 2.789220\nv 0.450046 4.158720 2.233944\nv 0.447038 4.320247 1.712658\nv 0.433502 4.379505 1.130912\nv 0.421470 4.317241 0.432455\nv 0.387479 4.097055 -0.224792\nv 0.304158 3.723463 -0.863089\nv 0.217828 3.261432 -1.349783\nv 0.867556 -1.217172 0.025472\nv 0.723172 -0.772591 -0.212159\nv 0.495767 -0.147228 -0.738859\nv 0.379057 0.623119 -1.341963\nv 0.255729 1.844064 -1.641860\nv 0.422071 -1.597084 -0.150195\nv 0.264753 -1.143777 -0.310822\nv 0.216024 -0.291011 -0.755403\nv 0.208504 0.564463 -1.336548\nv 0.159473 1.801353 -1.649681\nv -0.498376 2.856334 3.542723\nv -0.732699 3.330978 3.176350\nv -0.910772 3.751136 2.670404\nv -0.950778 3.917478 2.139493\nv -0.925210 4.028471 1.616102\nv -0.912276 4.082617 1.012397\nv -0.899642 4.024863 0.311233\nv -0.769697 3.877171 -0.323755\nv -0.519131 3.581183 -0.901591\nv -0.343765 3.182023 -1.344068\nv -1.367988 -0.221828 0.174068\nv -1.209165 -0.049769 -0.273823\nv -0.871668 0.247119 -0.867301\nv -0.643662 0.926627 -1.357303\nv -0.347675 1.940623 -1.595837\nv -0.470100 2.051014 -1.536580\nv -0.967924 1.290593 -1.296542\nv -1.386035 0.762991 -0.878731\nv -1.655552 0.499792 -0.283749\nv -1.817382 0.242308 0.453510\nv -1.862502 0.498064 2.307940\nv -1.926272 0.483441 2.039025\nv -1.968083 0.495794 1.875691\nv -2.025836 0.686940 1.677765\nv -2.060428 0.902762 1.445548\nv -2.024333 0.918804 0.925766\nv -2.038169 1.085748 0.179181\nv -1.675405 1.263521 -0.732843\nv -1.131559 1.614856 -1.250219\nv -0.527854 2.171636 -1.511313\nv -0.582599 2.309101 -1.512817\nv -1.203149 1.870837 -1.224651\nv -1.760832 1.583273 -0.572818\nv -2.071859 1.400686 0.340410\nv -2.101337 1.253596 1.018412\nv -2.102240 1.173484 1.520748\nv -2.031552 1.133029 1.848319\nv -1.912134 1.130014 2.156939\nv -1.938905 1.102209 2.332907\nv -1.793018 1.135458 2.639422\nv -1.676307 1.759016 2.919166\nv -1.808960 1.800904 2.532638\nv -1.870022 1.790051 2.272446\nv -1.964473 1.838645 1.922917\nv -2.086598 1.796238 1.536089\nv -2.149766 1.884673 1.016307\nv -2.070355 2.023042 0.327175\nv -1.805651 2.120800 -0.454603\nv -1.251277 2.245934 -1.162987\nv -0.597339 2.492589 -1.498077\nv -0.514619 2.978082 -1.388887\nv -0.570267 2.710970 -1.464689\nv -1.183296 2.763610 -1.089892\nv -0.933934 3.259327 -1.025822\nv -1.346631 3.508690 -0.449490\nv -1.733760 2.830688 -0.504536\nv -1.947628 2.802715 0.234830\nv -1.571027 3.568248 0.160231\nv -1.642016 3.510497 0.840339\nv -1.997862 2.708563 0.930579\nv -2.014406 2.649004 1.446751\nv -1.709696 3.480115 1.410956\nv -1.599303 3.416947 1.922315\nv -1.922963 2.667954 1.915698\nv -1.773466 2.670550 2.387953\nv -1.434765 3.369419 2.478795\nv -1.242855 3.157640 2.944734\nv -1.653747 2.607654 2.719435\nv -1.321363 2.470406 3.250046\nv -0.843092 2.802188 3.448272\nv -0.218331 2.868667 3.575210\nv -0.399413 3.412227 3.256362\nv -0.479425 3.902136 2.803057\nv -0.498676 4.160825 2.287787\nv -0.464385 4.321751 1.747250\nv -0.440622 4.383717 1.122489\nv -0.415355 4.324760 0.399066\nv -0.348878 4.090738 -0.236223\nv -0.229160 3.702407 -0.845041\nv -0.153960 3.248500 -1.333239\nv -0.875278 -1.131144 0.030887\nv -0.673140 -0.762964 -0.211558\nv -0.445736 -0.138505 -0.739461\nv -0.328424 0.625525 -1.314289\nv -0.212917 1.832636 -1.620804\nv -0.427086 -1.596482 -0.168544\nv -0.224046 -1.140771 -0.306310\nv -0.175317 -0.287700 -0.748184\nv -0.165390 0.566268 -1.316996\nv -0.115458 1.794735 -1.635844\nv 0.017195 2.882201 3.592656\nv 0.007569 3.412639 3.280727\nv 0.021406 3.893412 2.836145\nv 0.010577 4.189400 2.307038\nv 0.014187 4.366269 1.775525\nv 0.009675 4.413797 1.194681\nv 0.011480 4.360555 0.412302\nv 0.022008 4.125630 -0.217272\nv 0.034641 3.733689 -0.842033\nv 0.031032 3.270758 -1.333841\nv -0.150952 -1.688224 -0.305708\nv 0.019301 -1.203938 -0.339398\nv 0.019601 -0.314775 -0.763224\nv 0.019902 0.562057 -1.339255\nv 0.022008 1.789319 -1.640356\nv 0.640151 3.025735 3.385706\nv 1.947727 0.606252 2.084446\nv 1.878844 1.157953 2.455633\nv 1.780182 1.716921 2.735979\nv 1.133162 2.843912 3.224478\nv 1.558793 2.499616 3.074078\nv 0.342961 3.058708 3.439850\nv 0.019301 3.083249 3.472938\nv -0.609671 3.065533 3.395031\nv -1.891078 0.510732 2.187019\nv -1.915443 1.105991 2.540158\nv -1.748198 1.773518 2.727857\nv -1.022670 2.942885 3.263281\nv -1.516583 2.523015 3.014820\nv -0.288117 3.088270 3.465719\nv 0.238884 2.925439 -1.998006\nv 0.222641 2.256763 -1.850013\nv 0.275281 2.340086 -1.837680\nv 0.300548 2.422803 -1.853622\nv 0.357099 2.508533 -1.888816\nv 0.402820 2.589147 -1.927619\nv 0.322807 2.837607 -1.956195\nv 0.392593 2.717287 -1.938147\nv 0.126987 2.967253 -1.992291\nv 0.166392 2.177052 -1.857533\nv 0.107134 2.146067 -1.852419\nv -0.249915 2.938976 -1.976950\nv -0.185845 2.244731 -1.839184\nv -0.239086 2.340384 -1.838883\nv -0.264955 2.428520 -1.856330\nv -0.297141 2.514548 -1.880695\nv -0.299547 2.611104 -1.910173\nv -0.329326 2.840315 -1.940854\nv -0.295937 2.714880 -1.912278\nv -0.095906 2.973268 -1.976950\nv -0.127189 2.156897 -1.853021\nv -0.065224 2.129825 -1.853923\nv 0.018097 2.978681 -1.978454\nv 0.021707 2.124111 -1.862647\nv -0.393396 2.448974 -1.695101\nv -0.399713 2.572902 -1.705328\nv 0.308369 3.076140 -1.686678\nv 0.404926 2.922432 -1.679460\nv 0.433502 2.577716 -1.724279\nv 0.425681 2.471234 -1.714653\nv -0.358203 2.907091 -1.658103\nv -0.256833 3.064109 -1.669834\nv -0.111246 3.129684 -1.659908\nv -0.381665 2.714880 -1.683972\nv 0.420567 2.730222 -1.704727\nv 0.162481 3.136603 -1.668932\nv 0.130296 2.162614 -1.716759\nv 0.021105 2.154191 -1.716759\nv -0.088386 2.156897 -1.708637\nv 0.382967 2.364750 -1.703524\nv 0.349278 2.296468 -1.699914\nv -0.315489 2.281427 -1.683972\nv -0.350683 2.348207 -1.686378\nv -0.164488 2.179157 -1.705028\nv -0.244501 2.228788 -1.695402\nv 0.280996 2.243828 -1.710743\nv 0.204593 2.189685 -1.717059\nv 0.024414 3.137805 -1.665923\nv 0.276183 2.663744 -2.457026\nv 0.292727 2.111778 -1.918896\nv 0.358302 2.179458 -1.980560\nv 0.386577 2.255260 -2.041321\nv 0.420868 2.386107 -2.164349\nv 0.425681 2.416788 -2.167056\nv 0.368228 2.598772 -2.322870\nv 0.427787 2.581026 -2.241955\nv 0.148344 2.727815 -2.453116\nv 0.204593 2.060340 -1.868362\nv 0.117662 2.035375 -1.837380\nv -0.226453 2.737439 -2.401680\nv -0.265857 2.102452 -1.903856\nv -0.326318 2.171636 -1.958903\nv -0.353992 2.246536 -2.020867\nv -0.379560 2.316322 -2.079824\nv -0.370837 2.427315 -2.163747\nv -0.347976 2.633064 -2.257596\nv -0.376853 2.511840 -2.210672\nv -0.096808 2.777747 -2.438076\nv -0.179227 2.039887 -1.859638\nv -0.083874 2.015220 -1.850615\nv 0.018398 2.783163 -2.446499\nv 0.019000 2.015822 -1.846103\nv 1.259498 2.533800 -1.221643\nv 1.808758 2.498905 -0.622750\nv 2.003676 2.411976 0.103079\nv 2.062031 2.322939 0.743783\nv 1.886063 2.217655 2.316664\nv 1.768150 2.167451 2.753124\nv 0.621802 2.623138 -1.517028\nv 2.004277 2.259771 1.852831\nv 2.126402 2.241722 1.313497\nv 1.559395 2.132910 3.105060\nv 1.682121 2.172022 2.946538\nv 0.411844 2.654421 -1.937846\nv 0.428990 2.655321 -1.714954\nv 0.422673 2.513645 -2.217891\nv 0.592625 2.868289 -1.461079\nv 1.136170 3.034330 -1.100119\nv 1.620156 3.203078 -0.505438\nv 1.801839 3.253913 0.135866\nv 1.827106 3.171494 0.830413\nv 1.888169 3.116447 1.395916\nv 1.896892 3.085466 1.924722\nv 1.515177 2.837646 2.911044\nv 1.807554 3.057654 2.446910\nv 1.182493 2.625921 3.346000\nv 1.366883 2.708029 3.149277\nv 0.357399 2.781958 -1.942960\nv 0.415153 2.824371 -1.693296\nv 0.407332 2.595464 -2.274141\nv 0.819127 3.476506 -1.003863\nv 1.128650 3.747525 -0.404370\nv 1.247165 3.892211 0.255886\nv 0.501783 3.109830 -1.396407\nv 1.319357 3.837465 1.501497\nv 1.346729 3.709322 2.028498\nv 0.749642 2.797378 3.499408\nv 1.047434 3.210605 3.096036\nv 1.275741 3.911161 0.938400\nv 1.278147 3.573963 2.591595\nv 0.955088 2.950507 3.318628\nv 0.284305 2.879116 -1.984170\nv 0.367025 3.000340 -1.684272\nv 0.314084 2.651110 -2.432962\nv -0.739918 3.431386 -0.967467\nv -1.077114 3.700901 -0.392037\nv -1.255188 3.798059 0.232122\nv -0.441825 3.083961 -1.365725\nv -1.349338 3.761664 1.494879\nv -1.359264 3.709624 2.014962\nv -0.699611 2.829561 3.483767\nv -1.017857 3.257914 3.083403\nv -1.309933 3.799263 0.914336\nv -1.268423 3.610962 2.569336\nv -0.839182 2.993819 3.330960\nv -0.308872 2.891451 -1.959203\nv -0.317294 2.986802 -1.664720\nv -0.293531 2.683297 -2.317456\nv -0.545000 2.843321 -1.429495\nv -1.071399 3.010566 -1.059812\nv -1.562304 3.182323 -0.492805\nv -1.766547 3.224435 0.145191\nv -1.822496 3.121261 0.844851\nv -1.897094 3.113140 1.398323\nv -1.797830 3.096895 1.889529\nv -1.500640 2.943420 2.818999\nv -1.672998 3.065905 2.425554\nv -1.067789 2.696008 3.356829\nv -1.278650 2.807625 3.167025\nv -0.313985 2.778048 -1.926115\nv -0.372341 2.808731 -1.671939\nv -0.378657 2.568393 -2.225411\nv -1.225709 2.504321 -1.139223\nv -1.796026 2.462511 -0.498821\nv -2.016812 2.395430 0.291681\nv -2.091712 2.302185 0.976902\nv -1.860698 2.181554 2.307940\nv -1.756320 2.098994 2.640926\nv -0.584705 2.598470 -1.484842\nv -1.963571 2.260973 1.914495\nv -2.058022 2.223976 1.496985\nv -1.521095 2.101326 3.115287\nv -1.677811 2.102305 2.858705\nv -0.292629 2.661638 -1.911075\nv -0.390990 2.641486 -1.697507\nv -0.368430 2.470933 -2.189917\nv -1.747597 1.405877 2.774481\nv -1.825504 1.468255 2.432772\nv -1.985228 1.505436 1.899454\nv -1.909728 1.449570 2.225822\nv -2.073062 1.451220 1.548722\nv -2.135027 1.544167 1.036460\nv -0.598843 2.399042 -1.514621\nv -1.234132 2.060039 -1.190058\nv -1.790912 1.842862 -0.481976\nv -2.073363 1.708704 0.359360\nv -1.928076 1.467064 2.685745\nv -0.301352 2.565383 -1.898742\nv -0.400916 2.514247 -1.701117\nv -0.381064 2.378287 -2.127952\nv -1.882054 0.811118 -0.082214\nv -0.497774 2.104859 -1.522442\nv -1.059969 1.447310 -1.271275\nv -1.547565 1.010248 -0.816466\nv -1.938304 0.548823 0.717011\nv -0.251419 2.378287 -1.848208\nv -0.332334 2.309402 -1.683972\nv -0.342862 2.211943 -1.990486\nv -1.431456 0.210724 -0.312325\nv -0.805492 1.116130 -1.337150\nv -0.411445 1.995670 -1.565156\nv -1.575239 0.062429 0.225504\nv -1.111706 0.480240 -0.894974\nv -0.212917 2.291955 -1.838282\nv -0.281499 2.254657 -1.689386\nv -0.295336 2.132533 -1.927318\nv -0.652385 0.055812 -0.794808\nv -0.477019 0.757879 -1.341963\nv -1.177882 -0.597827 0.093453\nv -0.927917 -0.368617 -0.228102\nv -0.280296 1.884974 -1.609975\nv -0.159074 2.199008 -1.846704\nv -0.206600 2.203822 -1.700215\nv -0.233672 2.073576 -1.884304\nv 0.720765 0.047992 -0.770744\nv 0.536375 0.763292 -1.376254\nv 1.216182 -0.640840 0.137671\nv 1.016451 -0.375234 -0.186892\nv 0.322507 1.901518 -1.634941\nv 0.196772 2.213148 -1.857232\nv 0.245502 2.217058 -1.714352\nv 0.256030 2.085306 -1.900848\nv 1.544054 0.190268 -0.226898\nv 0.860336 1.129668 -1.386481\nv 0.444932 2.017928 -1.596740\nv 1.657756 0.041976 0.324167\nv 1.208662 0.461289 -0.863090\nv 0.249412 2.297673 -1.843696\nv 0.316190 2.269697 -1.705328\nv 0.325214 2.140353 -1.945066\nv 1.955849 0.802696 -0.028070\nv 0.528855 2.129524 -1.557335\nv 1.092854 1.477692 -1.338955\nv 1.612937 1.009646 -0.822181\nv 1.993749 0.581910 0.705881\nv 0.286711 2.375579 -1.840989\nv 0.365220 2.325346 -1.700215\nv 0.374846 2.220666 -2.011843\nv 0.887709 4.131046 0.680916\nv 1.806351 0.381578 0.124736\nv 1.413507 -0.158959 0.010733\nv 2.071657 1.051158 0.536531\nv 2.100834 1.407605 0.538035\nv 2.088201 1.956865 0.442080\nv 1.594288 3.630516 0.534727\nv 1.970889 2.746765 0.465543\nv 0.426884 4.345213 0.786496\nv 0.792055 -1.004808 -0.099059\nv 0.353188 -1.392240 -0.253971\nv 0.009675 4.387027 0.803040\nv -0.060411 -1.430740 -0.316236\nv -0.903553 4.055543 0.663168\nv -1.726842 0.408047 0.040813\nv -1.314144 -0.145725 -0.061759\nv -2.030047 0.972348 0.603610\nv -2.081184 1.302627 0.714906\nv -2.107052 1.950850 0.677907\nv -1.595392 3.544786 0.504948\nv -1.966579 2.741352 0.589773\nv -0.427688 4.354539 0.760327\nv -0.769697 -0.951265 -0.098457\nv -0.327822 -1.375994 -0.241939\nv 2.033455 2.367458 0.423431\nv 1.803945 3.216615 0.485396\nv 1.251977 3.897624 0.606016\nv -1.276244 3.798661 0.576839\nv -1.787001 3.179013 0.495322\nv -2.052608 2.355424 0.629779\nv -2.101939 1.610946 0.711597\nv -1.963270 0.693808 0.351539\nv -1.522599 0.128305 -0.054540\nv -1.068391 -0.484725 -0.031680\nv 1.122935 -0.501570 -0.008518\nv 1.620156 0.109054 0.038708\nv 2.018114 0.706441 0.376506\nv -0.154562 2.096738 -1.849110\nv -0.231566 2.169229 -1.862647\nv 0.186846 2.118095 -1.854525\nv 0.112248 2.093729 -1.832867\nv -0.347976 2.613812 -2.058768\nv -0.370536 2.739246 -2.108099\nv 0.136913 2.829185 -2.259702\nv 0.253623 2.764815 -2.262108\nv -0.346171 2.414682 -1.979959\nv -0.347976 2.520564 -2.034403\nv 0.448842 2.615315 -2.085539\nv 0.424177 2.496200 -2.045232\nv 0.324913 2.257666 -1.902352\nv 0.262046 2.179757 -1.876183\nv -0.318197 2.336474 -1.933635\nv 0.019601 2.072071 -1.840387\nv -0.075151 2.073275 -1.842493\nv 0.351684 2.337679 -1.943261\nv -0.242997 2.839411 -2.190518\nv 0.025617 2.867386 -2.238044\nv -0.094402 2.874607 -2.208867\nv 0.397707 2.708564 -2.161040\nv 0.392593 2.416188 -1.995299\nv -0.291726 2.254356 -1.891523\nv 0.445534 2.559368 -2.066288\nv 0.438615 2.669762 -2.111107\nv 0.326718 2.728719 -2.218192\nv -0.326619 2.794893 -2.149609\nv -0.361512 2.672467 -2.077117\nv -0.343765 2.566887 -2.048541\nv -0.350683 2.471533 -2.015453\nv -0.306766 2.294362 -1.913782\nv -0.261947 2.209536 -1.874378\nv -0.199381 2.132834 -1.855127\nv 0.229259 2.146369 -1.869866\nv 0.293630 2.215253 -1.886109\nv 0.339953 2.297974 -1.923408\nv -0.253826 2.134940 -1.878288\nv 0.115857 2.063949 -1.831965\nv -0.396705 2.696231 -2.187209\nv 0.275582 2.696231 -2.350844\nv -0.375349 2.475446 -2.099376\nv 0.439518 2.455290 -2.102985\nv 0.281899 2.144564 -1.892726\nv -0.080264 2.043496 -1.843395\nv -0.248110 2.809933 -2.306025\nv -0.101019 2.850843 -2.334000\nv 0.416958 2.371971 -2.045232\nv -0.317896 2.212847 -1.919197\nv 0.449143 2.535604 -2.140285\nv 0.437713 2.639380 -2.196835\nv 0.331531 2.675477 -2.310537\nv -0.340456 2.757293 -2.243760\nv -0.398209 2.620430 -2.146602\nv -0.373544 2.518157 -2.117725\nv -0.381665 2.427315 -2.068394\nv -0.335342 2.253154 -1.946870\nv -0.285409 2.169530 -1.896336\nv -0.219835 2.102754 -1.865655\nv 0.245803 2.115387 -1.881597\nv 0.315889 2.176449 -1.911677\nv 0.368228 2.259471 -1.963114\nv -0.168699 2.068161 -1.849111\nv 0.197976 2.088014 -1.860842\nv -0.381665 2.559669 -2.130960\nv 0.154360 2.797299 -2.366486\nv -0.377755 2.366253 -2.024477\nv 0.450346 2.597871 -2.169462\nv 0.350481 2.218561 -1.936042\nv -0.348277 2.291356 -1.971235\nv 0.018699 2.043195 -1.840688\nv 0.381463 2.296468 -1.987478\nv 0.025617 2.847834 -2.352048\nv 0.396203 2.663744 -2.249776\nv 2.076469 0.933845 0.425536\nv 1.925769 1.132975 -0.270815\nv 1.571427 1.468968 -0.947013\nv 1.306723 1.673211 -1.203595\nv 0.989680 1.974011 -1.414154\nv 0.732497 2.194797 -1.519434\nv 2.083388 0.817136 0.751904\nv 2.017513 1.055068 -0.029574\nv 1.848463 1.230133 -0.478668\nv 1.703177 1.357975 -0.805938\nv 1.429750 1.580866 -1.081470\nv 1.140381 1.833838 -1.359108\nv 0.858532 2.089518 -1.464989\nv 0.568561 2.302185 -1.520637\nv 2.040674 0.649891 0.297095\nv 1.936297 0.475727 0.239943\nv 1.883356 0.901960 -0.336690\nv 1.779881 0.738627 -0.370079\nv 1.513072 1.306537 -1.013790\nv 1.413206 1.180202 -1.046577\nv 1.260701 1.568534 -1.274884\nv 1.178883 1.474984 -1.300151\nv 0.960202 1.860008 -1.448746\nv 0.878384 1.802555 -1.453258\nv 0.700612 2.108468 -1.548913\nv 0.655793 2.075381 -1.541393\nv 1.942614 0.343075 0.610829\nv 2.008489 0.475426 0.664070\nv 1.895388 0.622820 -0.084620\nv 1.972994 0.792168 -0.103270\nv 1.699567 0.826159 -0.581842\nv 1.800636 0.996112 -0.544543\nv 1.525404 1.055972 -0.936485\nv 1.640009 1.186518 -0.885048\nv 1.301008 1.330900 -1.158776\nv 1.389443 1.426254 -1.132606\nv 0.989079 1.658471 -1.409041\nv 1.100074 1.726754 -1.396708\nv 0.765584 1.957167 -1.498980\nv 0.841988 1.988449 -1.494769\nv 0.549310 2.241421 -1.531767\nv 0.557130 2.273005 -1.548913\nv 2.025634 0.753224 2.020977\nv 2.008790 1.119331 2.201758\nv 1.969986 1.316777 2.260113\nv 2.112265 1.062328 1.577298\nv 2.115874 1.295635 1.615800\nv 2.088201 1.457251 1.618808\nv 2.141141 1.276155 1.033452\nv 2.163701 1.382639 1.045785\nv 2.145052 1.515291 1.041574\nv 2.120386 1.326689 0.429447\nv 2.143548 1.473481 0.428544\nv 2.123394 1.581167 0.445389\nv 1.973596 1.405801 -0.122822\nv 2.011497 1.554397 -0.075295\nv 1.996457 1.612148 -0.051532\nv 1.840041 1.525518 -0.494008\nv 1.879446 1.629897 -0.442572\nv 1.866210 1.692763 -0.410987\nv 1.644521 1.696673 -0.853464\nv 1.698665 1.782102 -0.820376\nv 1.693552 1.840456 -0.792101\nv 1.385533 1.889788 -1.150955\nv 1.427344 1.967393 -1.140427\nv 1.423433 2.018229 -1.112151\nv 1.093757 2.096437 -1.374750\nv 1.143088 2.167726 -1.373847\nv 1.148502 2.200514 -1.345572\nv 0.765885 2.269697 -1.513117\nv 0.822436 2.343393 -1.510109\nv 0.821533 2.375278 -1.488753\nv 0.610372 2.368058 -1.520938\nv 0.611274 2.415586 -1.548010\nv 0.614884 2.438747 -1.525149\nv 0.939447 2.173741 -1.441828\nv 0.987876 2.251048 -1.439421\nv 0.987274 2.286843 -1.413553\nv 1.785596 1.606133 -0.671179\nv 1.816879 1.697577 -0.629067\nv 1.805148 1.754126 -0.599288\nv 1.896290 1.467164 -0.336389\nv 1.942614 1.584173 -0.267205\nv 1.933289 1.644937 -0.226898\nv 2.134824 1.292099 0.701069\nv 2.168213 1.408207 0.731450\nv 2.148962 1.516195 0.736864\nv 2.060226 0.899873 1.814027\nv 2.072559 1.246815 1.874488\nv 2.032252 1.460366 1.925624\nv 2.071957 1.366397 0.123533\nv 2.101135 1.505064 0.159028\nv 2.087298 1.591394 0.198132\nv 1.952540 0.635666 2.227025\nv 1.931484 0.967898 2.435480\nv 1.867414 1.174326 2.614455\nv 2.139938 1.219003 1.219948\nv 2.160092 1.363689 1.309586\nv 2.134223 1.491527 1.315302\nv 1.522096 1.796238 -1.008977\nv 1.568419 1.869033 -0.994539\nv 1.570224 1.919868 -0.958744\nv 1.252278 2.002887 -1.305566\nv 1.291082 2.074778 -1.291428\nv 1.294691 2.125312 -1.252926\nv 1.879145 1.987205 2.458641\nv 1.877340 2.239896 2.497745\nv 1.797027 2.411009 2.567531\nv 2.027439 1.965603 1.922917\nv 2.044284 2.235405 1.907275\nv 1.997961 2.501914 1.913592\nv 2.124898 1.957166 1.379673\nv 2.164303 2.228188 1.370649\nv 2.113167 2.480256 1.309587\nv 2.130312 2.066055 0.755514\nv 2.125500 2.221269 0.717312\nv 2.051804 2.501914 0.704679\nv 2.068649 2.148172 0.208961\nv 2.074664 2.279924 0.223098\nv 2.031650 2.470330 0.241146\nv 1.928777 2.233902 -0.213964\nv 1.953141 2.328654 -0.209452\nv 1.938402 2.461004 -0.194712\nv 1.836130 2.337377 -0.599589\nv 1.856886 2.397837 -0.611621\nv 1.840643 2.487175 -0.608011\nv 1.482691 2.361141 -1.033944\nv 1.496528 2.444160 -1.033342\nv 1.468253 2.517256 -1.009579\nv 0.982160 2.460104 -1.410845\nv 1.004720 2.513346 -1.419569\nv 1.016451 2.584635 -1.381066\nv 0.680157 2.568091 -1.471607\nv 0.672036 2.612309 -1.488752\nv 0.662711 2.640582 -1.465591\nv 1.878844 2.291657 -0.419109\nv 1.899900 2.375880 -0.431442\nv 1.884258 2.471234 -0.432043\nv 1.999465 2.192691 -0.034988\nv 2.026837 2.307297 -0.004908\nv 1.994652 2.468827 0.013742\nv 2.147458 1.971303 1.052102\nv 2.150165 2.207731 1.026534\nv 2.073462 2.505222 0.986828\nv 1.972393 1.969928 2.134680\nv 1.980514 2.297991 2.140997\nv 1.891177 2.537407 2.283275\nv 2.098428 2.110272 0.441178\nv 2.104143 2.239315 0.446592\nv 2.043081 2.490784 0.459527\nv 1.756719 1.805410 2.841259\nv 1.737769 1.933331 2.918865\nv 1.680617 2.038922 2.978724\nv 2.075567 1.955060 1.627833\nv 2.104143 2.212846 1.624524\nv 2.074664 2.480256 1.603769\nv 1.696559 2.350011 -0.802929\nv 1.699267 2.433933 -0.827294\nv 1.681820 2.505222 -0.800824\nv 1.292586 2.399343 -1.249015\nv 1.279350 2.484468 -1.279697\nv 1.281155 2.551545 -1.235479\nv 1.831619 2.121912 2.708907\nv 1.852674 1.894684 2.599415\nv 1.764540 2.253536 2.786513\nv 1.849366 2.479036 2.428862\nv 1.926671 2.313325 2.328094\nv 1.922460 2.008000 2.309144\nv 1.652342 3.369419 2.295007\nv 1.775670 3.256019 2.229733\nv 1.826505 3.126075 2.264024\nv 1.380419 3.151822 2.911946\nv 1.520592 3.107783 2.828023\nv 1.624668 3.023512 2.737483\nv 1.893583 3.162168 1.676262\nv 1.858390 3.281286 1.662726\nv 1.760028 3.410630 1.629036\nv 1.866511 3.189541 1.089101\nv 1.835529 3.299935 1.086393\nv 1.757321 3.409727 1.084589\nv 1.829212 3.226842 0.617447\nv 1.788905 3.353780 0.607821\nv 1.713104 3.459661 0.646324\nv 1.778678 3.355283 0.184596\nv 1.749199 3.453043 0.187604\nv 1.666179 3.553509 0.197230\nv 1.688739 3.280382 -0.287359\nv 1.653545 3.359796 -0.323455\nv 1.577142 3.421460 -0.342706\nv 1.492316 3.125473 -0.712689\nv 1.455619 3.204581 -0.744574\nv 1.383427 3.273165 -0.730737\nv 1.097968 2.939880 -1.206001\nv 1.078115 2.997032 -1.223146\nv 1.048035 3.054783 -1.191262\nv 0.684068 2.842721 -1.396106\nv 0.673540 2.846029 -1.418365\nv 0.665719 2.850842 -1.400017\nv 1.735363 3.325503 -0.053036\nv 1.692649 3.417848 -0.085522\nv 1.627676 3.481919 -0.088229\nv 1.788303 3.314075 0.361165\nv 1.756419 3.416044 0.371693\nv 1.673398 3.533056 0.403278\nv 1.889372 3.169388 1.398624\nv 1.848163 3.298432 1.373356\nv 1.762735 3.420857 1.366438\nv 1.781987 3.099725 2.500453\nv 1.651740 3.254742 2.583173\nv 1.517884 3.354746 2.630699\nv 1.860495 3.166681 0.859590\nv 1.821091 3.311367 0.858086\nv 1.741980 3.435295 0.849965\nv 1.412304 2.492279 3.229290\nv 1.335901 2.585161 3.297873\nv 1.217987 2.654879 3.335172\nv 1.874934 3.171494 1.938559\nv 1.823497 3.294522 1.954501\nv 1.743183 3.399199 1.914495\nv 1.648131 3.214209 -0.506040\nv 1.603913 3.305050 -0.527998\nv 1.526307 3.362802 -0.525291\nv 1.327178 3.045460 -0.921745\nv 1.300106 3.102010 -0.954232\nv 1.246864 3.174202 -0.936183\nv 1.240547 2.805102 3.202519\nv 1.507357 2.746619 3.015121\nv 1.408393 2.827147 3.111076\nv 1.286569 2.977698 3.085809\nv 1.547964 2.892505 2.892394\nv 1.425539 2.959532 3.010910\nv -0.028527 4.176164 2.387653\nv 0.191057 4.222188 2.312754\nv 0.407633 4.171353 2.307941\nv 0.078257 3.693599 3.073777\nv 0.270168 3.747535 3.035876\nv 0.472906 3.775638 2.951050\nv 0.254225 4.376797 1.707244\nv 0.096606 4.414999 1.713862\nv -0.072744 4.395747 1.695814\nv 0.197374 4.426732 1.129107\nv 0.071941 4.460421 1.179341\nv -0.100718 4.434853 1.139033\nv 0.191659 4.390937 0.691745\nv 0.066827 4.426129 0.680314\nv -0.098312 4.401465 0.688135\nv 0.148945 4.282347 0.168052\nv 0.052689 4.317241 0.166247\nv -0.068232 4.307915 0.210766\nv 0.157668 4.113297 -0.283448\nv 0.062014 4.120518 -0.323154\nv -0.032437 4.086829 -0.333080\nv 0.194366 3.863332 -0.684113\nv 0.113150 3.873260 -0.711185\nv 0.019902 3.856717 -0.703364\nv 0.189252 3.486733 -1.162385\nv 0.134507 3.505081 -1.174417\nv 0.059909 3.495755 -1.148247\nv 0.133604 3.231656 -1.371441\nv 0.127889 3.238873 -1.391895\nv 0.120369 3.228345 -1.375351\nv 0.147140 4.203537 -0.050930\nv 0.052689 4.224593 -0.088831\nv -0.048079 4.201133 -0.084620\nv 0.185944 4.370182 0.406586\nv 0.071038 4.406275 0.407489\nv -0.087784 4.383114 0.415911\nv 0.226552 4.405375 1.414867\nv 0.079461 4.441772 1.434118\nv -0.086882 4.421316 1.401030\nv 0.438615 4.066974 2.528728\nv 0.213918 4.053139 2.645739\nv -0.004463 3.989971 2.729361\nv 0.184139 4.412893 0.916141\nv 0.074046 4.443878 0.936896\nv -0.107336 4.419210 0.913434\nv 0.936740 2.805673 3.426916\nv 0.781828 2.848637 3.517457\nv 0.642858 2.893330 3.524976\nv 0.316190 4.289868 1.981272\nv 0.139921 4.331077 2.005938\nv -0.063119 4.318443 1.996613\nv 0.181131 3.996888 -0.469342\nv 0.091493 4.017944 -0.488293\nv 0.001553 3.994782 -0.487089\nv 0.188350 3.714137 -0.912119\nv 0.133604 3.719851 -0.939492\nv 0.043665 3.707519 -0.915729\nv 0.388983 3.135273 3.419395\nv 0.610372 3.262968 3.290052\nv 0.470199 3.201254 3.390820\nv 0.237681 3.400291 3.300880\nv 0.513214 3.493497 3.153489\nv 0.329124 3.474874 3.258468\nv -1.162241 3.744217 2.367499\nv -1.013044 3.879276 2.313957\nv -0.810305 3.964102 2.318770\nv -0.863246 3.427700 3.055428\nv -0.718862 3.583775 3.029560\nv -0.563047 3.711914 2.973009\nv -0.907764 4.066372 1.656710\nv -1.058465 3.990872 1.673555\nv -1.185402 3.880478 1.644979\nv -0.907463 4.116005 1.086093\nv -1.034401 4.050130 1.106848\nv -1.171565 3.925298 1.069850\nv -0.870465 4.110891 0.649332\nv -1.008833 4.045316 0.640909\nv -1.139681 3.930412 0.637300\nv -0.791956 4.075096 0.180385\nv -0.963111 4.002605 0.163239\nv -1.093358 3.908453 0.182791\nv -0.657799 3.986360 -0.256978\nv -0.835873 3.904543 -0.318341\nv -0.968225 3.815506 -0.316837\nv -0.471604 3.761062 -0.717803\nv -0.652084 3.723162 -0.709380\nv -0.771803 3.639537 -0.709380\nv -0.279694 3.391379 -1.162084\nv -0.389185 3.367917 -1.189156\nv -0.490555 3.297227 -1.172612\nv -0.198178 3.171193 -1.328426\nv -0.281499 3.176007 -1.314289\nv -0.358203 3.135398 -1.287217\nv -0.729991 4.027571 -0.049125\nv -0.903252 3.949962 -0.086123\nv -1.023271 3.872658 -0.061458\nv -0.836775 4.106080 0.394554\nv -0.983866 4.038099 0.393050\nv -1.112007 3.928906 0.394253\nv -0.898740 4.101266 1.380876\nv -1.041018 4.026968 1.377868\nv -1.176378 3.911462 1.336959\nv -0.741422 3.904543 2.560914\nv -0.927015 3.806182 2.663486\nv -1.072302 3.641856 2.736279\nv -0.893326 4.117810 0.872826\nv -1.021165 4.059456 0.880647\nv -1.169159 3.929810 0.863802\nv 0.525847 2.885328 3.550243\nv 0.312580 2.901629 3.601981\nv 0.056299 2.923453 3.597168\nv -0.887009 4.016139 1.978264\nv -1.050644 3.939434 1.977362\nv -1.202548 3.831450 1.955705\nv -0.580494 3.902136 -0.455806\nv -0.752251 3.826636 -0.503333\nv -0.836174 3.729478 -0.541233\nv -0.387681 3.621190 -0.937387\nv -0.535976 3.595320 -0.956337\nv -0.633134 3.517715 -0.967166\nv -0.396104 3.105033 3.466621\nv -0.157570 3.377371 3.333066\nv -0.252021 3.252849 3.427217\nv -0.621403 3.215359 3.326148\nv -0.392494 3.531236 3.194097\nv -0.541691 3.385993 3.279825\nv -0.194568 2.998050 3.543927\nv 0.211512 3.155238 3.441655\nv 0.051185 3.105937 3.517156\nv -1.694656 3.103814 2.367198\nv -1.631187 3.251205 2.292299\nv -1.514778 3.390776 2.299218\nv -1.491315 2.999083 2.835544\nv -1.423635 3.185498 2.805163\nv -1.320762 3.345713 2.747108\nv -1.766848 3.311367 1.672953\nv -1.855584 3.175404 1.710853\nv -1.897395 3.020193 1.684083\nv -1.824300 3.239475 1.052102\nv -1.906720 3.095090 1.074963\nv -1.928979 2.919122 1.047590\nv -1.805049 3.205485 0.624365\nv -1.899501 3.032826 0.609325\nv -1.944320 2.865883 0.608423\nv -1.802944 3.192249 0.130452\nv -1.896192 3.000942 0.122331\nv -1.942214 2.839712 0.151809\nv -1.727744 3.034631 -0.327666\nv -1.825203 2.844526 -0.374290\nv -1.835129 2.656827 -0.369477\nv -1.488007 2.807827 -0.776459\nv -1.599904 2.645094 -0.765931\nv -1.608928 2.511539 -0.755403\nv -1.027482 2.571700 -1.292631\nv -1.085536 2.448672 -1.304362\nv -1.127649 2.368961 -1.256836\nv -0.614484 2.445064 -1.458071\nv -0.598542 2.315117 -1.496273\nv -0.561243 2.239918 -1.471005\nv -1.754816 3.112839 -0.106277\nv -1.848665 2.928749 -0.137861\nv -1.891680 2.762408 -0.106578\nv -1.808960 3.192851 0.350337\nv -1.906118 3.015078 0.351540\nv -1.950336 2.859867 0.352141\nv -1.834227 3.286099 1.367040\nv -1.923865 3.163072 1.370950\nv -1.943417 2.970860 1.317708\nv -1.424839 3.403109 2.557905\nv -1.521997 3.263202 2.594603\nv -1.600806 3.064943 2.628894\nv -1.810464 3.219022 0.851168\nv -1.895289 3.086066 0.846656\nv -1.939808 2.890246 0.839437\nv -0.314888 2.924772 3.567389\nv -0.575982 2.891256 3.560471\nv -0.820532 2.842024 3.463613\nv -1.660365 3.336031 1.975858\nv -1.751808 3.212404 2.013157\nv -1.806253 3.053280 2.001426\nv -1.692550 2.969957 -0.530405\nv -1.775571 2.793992 -0.548754\nv -1.789708 2.599072 -0.548152\nv -1.327380 2.672166 -1.001156\nv -1.400474 2.550042 -0.987921\nv -1.421831 2.467924 -0.955134\nv -1.195629 2.886103 3.203722\nv -0.923706 3.130649 3.236810\nv -1.046733 3.019249 3.249143\nv -1.359565 2.930788 3.033169\nv -1.196532 3.255037 2.954360\nv -1.277447 3.092668 3.032266\nv -1.019661 2.845010 3.347505\nv -0.656897 3.072202 3.405559\nv -0.826849 2.966728 3.410973\nv -1.618554 0.184252 0.022164\nv -1.425741 0.366538 -0.513260\nv -1.173370 0.807510 -1.024017\nv -0.901146 1.225320 -1.345271\nv -0.660206 1.480099 -1.458974\nv -0.348878 1.878658 -1.560644\nv -1.637504 0.120184 0.224903\nv -1.542752 0.281712 -0.264799\nv -1.344525 0.475727 -0.689829\nv -1.294893 0.611991 -0.890763\nv -1.019361 1.040630 -1.206302\nv -0.754055 1.356770 -1.411447\nv -0.533569 1.590791 -1.520938\nv -0.872270 2.302784 -1.405130\nv -1.799936 0.425494 0.059463\nv -1.944620 0.675460 0.181888\nv -1.601408 0.579202 -0.531007\nv -1.674502 0.784649 -0.475359\nv -1.262407 0.976258 -1.062820\nv -1.305722 1.105000 -1.034545\nv -0.951981 1.295708 -1.357002\nv -1.015150 1.363990 -1.315492\nv -0.701716 1.516195 -1.469802\nv -0.711643 1.553192 -1.445738\nv -0.356398 1.875950 -1.574781\nv -0.367829 1.896105 -1.553425\nv -1.958758 0.536488 0.637600\nv -1.887168 0.285019 0.484192\nv -1.835731 0.749755 -0.192006\nv -1.728045 0.504004 -0.254873\nv -1.584563 0.834882 -0.676594\nv -1.518387 0.667938 -0.723218\nv -1.470861 0.960919 -0.902795\nv -1.407693 0.784047 -0.926257\nv -1.166452 1.226223 -1.163588\nv -1.091553 1.127860 -1.223748\nv -0.819930 1.450319 -1.396407\nv -0.799777 1.402192 -1.423479\nv -0.605460 1.651555 -1.493566\nv -0.584705 1.622375 -1.525751\nv -0.860538 2.380992 -1.436413\nv -0.837678 2.516353 -1.410244\nv -1.950937 1.677197 2.122046\nv -2.168114 1.674415 1.003974\nv -1.873632 1.766760 -0.320146\nv -1.472666 1.847977 -0.978897\nv -0.991386 1.989353 -1.344369\nv -0.608468 2.156595 -1.452657\nv -1.880250 1.584635 2.739588\nv -2.119987 1.721639 1.482246\nv -2.120287 1.723145 0.522995\nv -1.975603 1.717729 -0.016940\nv -1.713306 1.772173 -0.654034\nv -1.212173 1.943931 -1.247511\nv -0.799175 2.040188 -1.426788\nv -1.941011 1.957930 2.214091\nv -1.879648 2.298823 2.300721\nv -2.184057 1.984238 1.038566\nv -2.130214 2.191489 1.049996\nv -1.890176 1.892195 -0.339096\nv -1.872429 2.002887 -0.308114\nv -1.503949 1.901217 -0.975889\nv -1.525908 1.971906 -0.916030\nv -1.037409 2.051918 -1.350385\nv -1.037409 2.085909 -1.324516\nv -0.627419 2.161409 -1.461681\nv -0.642459 2.180058 -1.442429\nv -1.600205 2.148422 3.016624\nv -1.709997 1.863941 2.914052\nv -2.065542 2.282933 1.578501\nv -2.119084 2.031765 1.536089\nv -2.109158 2.107567 0.587367\nv -2.144953 1.940623 0.548864\nv -2.002976 2.008604 0.045927\nv -2.001772 1.859406 -0.009119\nv -1.729849 1.966490 -0.629669\nv -1.738573 1.878657 -0.650725\nv -1.269927 2.036878 -1.192164\nv -1.260602 1.990555 -1.237284\nv -0.878586 2.131328 -1.403927\nv -0.831361 2.083803 -1.441527\nv -1.875437 1.588910 2.415025\nv -1.763539 2.206017 2.665291\nv -1.841146 1.866065 2.584676\nv -2.036364 2.022439 1.869976\nv -1.982822 2.319629 1.937055\nv -2.030950 1.728198 1.786053\nv -2.145254 1.674114 1.242508\nv -2.155782 1.989651 1.280710\nv -2.104345 2.220064 1.303571\nvt 0.118900 0.054900\nvt 0.121500 0.022000\nvt 0.125100 0.021800\nvt 0.125800 0.054600\nvt 0.148900 0.403300\nvt 0.147700 0.405800\nvt 0.145000 0.402200\nvt 0.096600 0.433200\nvt 0.094400 0.429400\nvt 0.095500 0.429400\nvt 0.099800 0.433300\nvt 0.098800 0.433500\nvt 0.096700 0.429400\nvt 0.079500 0.451000\nvt 0.078700 0.452600\nvt 0.075400 0.449400\nvt 0.927700 0.447300\nvt 0.929600 0.443200\nvt 0.932900 0.445800\nvt 0.079800 0.442500\nvt 0.082700 0.438300\nvt 0.085900 0.441500\nvt 0.150000 0.400700\nvt 0.147600 0.397100\nvt 0.149900 0.395200\nvt 0.482900 0.476700\nvt 0.481300 0.477100\nvt 0.481900 0.473200\nvt 0.147000 0.406800\nvt 0.146400 0.407700\nvt 0.143800 0.404300\nvt 0.807200 0.462000\nvt 0.808800 0.459000\nvt 0.811200 0.461000\nvt 0.936700 0.454800\nvt 0.936100 0.454300\nvt 0.938400 0.450000\nvt 0.156000 0.394800\nvt 0.154500 0.391800\nvt 0.157600 0.390500\nvt 0.479200 0.477000\nvt 0.479100 0.472500\nvt 0.480400 0.472900\nvt 0.165200 0.391600\nvt 0.165100 0.388400\nvt 0.167500 0.388800\nvt 0.168900 0.393300\nvt 0.169600 0.389300\nvt 0.171000 0.390500\nvt 0.812400 0.465400\nvt 0.811500 0.464700\nvt 0.812500 0.462500\nvt 0.933700 0.451600\nvt 0.935200 0.447900\nvt 0.936500 0.448800\nvt 0.078300 0.453700\nvt 0.078000 0.454800\nvt 0.073900 0.451400\nvt 0.088700 0.433900\nvt 0.880900 0.448100\nvt 0.883200 0.443400\nvt 0.884600 0.445600\nvt 0.884000 0.429200\nvt 0.880400 0.427100\nvt 0.884100 0.417000\nvt 0.805800 0.460900\nvt 0.807100 0.457600\nvt 0.807800 0.458300\nvt 0.153800 0.396300\nvt 0.152000 0.393300\nvt 0.153300 0.392600\nvt 0.485400 0.476500\nvt 0.484200 0.476400\nvt 0.484800 0.473500\nvt 0.486300 0.462600\nvt 0.485400 0.448900\nvt 0.491300 0.448800\nvt 0.163400 0.391800\nvt 0.163000 0.388600\nvt 0.164000 0.388500\nvt 0.874500 0.435800\nvt 0.876800 0.437300\nvt 0.875000 0.441400\nvt 0.885700 0.393600\nvt 0.887800 0.370000\nvt 0.894000 0.370700\nvt 0.493900 0.476700\nvt 0.494300 0.473100\nvt 0.495900 0.472900\nvt 0.926000 0.446500\nvt 0.924300 0.445700\nvt 0.925800 0.441400\nvt 0.162400 0.392000\nvt 0.161400 0.392300\nvt 0.160700 0.389100\nvt 0.871300 0.426700\nvt 0.867800 0.426100\nvt 0.869800 0.418600\nvt 0.927500 0.429600\nvt 0.929700 0.417500\nvt 0.931700 0.418100\nvt 0.159800 0.380900\nvt 0.158900 0.372800\nvt 0.160600 0.373700\nvt 0.141800 0.389300\nvt 0.140300 0.391000\nvt 0.135200 0.380000\nvt 0.091500 0.417300\nvt 0.088800 0.404600\nvt 0.090400 0.404500\nvt 0.070400 0.435300\nvt 0.069000 0.436800\nvt 0.063000 0.422100\nvt 0.095600 0.416400\nvt 0.094200 0.416900\nvt 0.092000 0.404400\nvt 0.931400 0.431300\nvt 0.934000 0.418800\nvt 0.937200 0.421200\nvt 0.143300 0.387500\nvt 0.138900 0.377900\nvt 0.142000 0.376700\nvt 0.072600 0.416200\nvt 0.078000 0.412800\nvt 0.080300 0.425900\nvt 0.476400 0.460800\nvt 0.474200 0.446200\nvt 0.476600 0.446900\nvt 0.139700 0.391800\nvt 0.139300 0.392500\nvt 0.133900 0.381200\nvt 0.809100 0.449800\nvt 0.810000 0.439500\nvt 0.811900 0.440400\nvt 0.943500 0.438700\nvt 0.942700 0.438600\nvt 0.944600 0.425900\nvt 0.151500 0.383300\nvt 0.148400 0.374600\nvt 0.153700 0.373700\nvt 0.474800 0.459900\nvt 0.471900 0.445500\nvt 0.472900 0.445900\nvt 0.165000 0.382700\nvt 0.165200 0.377100\nvt 0.168900 0.379500\nvt 0.172800 0.385200\nvt 0.170500 0.385200\nvt 0.171200 0.381600\nvt 0.815100 0.453500\nvt 0.813100 0.453600\nvt 0.813500 0.441200\nvt 0.937800 0.436500\nvt 0.940300 0.423500\nvt 0.942400 0.424700\nvt 0.068200 0.437500\nvt 0.067400 0.438100\nvt 0.060400 0.423900\nvt 0.085900 0.421700\nvt 0.887100 0.431100\nvt 0.890800 0.418800\nvt 0.892500 0.420100\nvt 0.807800 0.448600\nvt 0.808200 0.438400\nvt 0.808900 0.438900\nvt 0.148600 0.384400\nvt 0.145100 0.375400\nvt 0.146700 0.375000\nvt 0.880900 0.418500\nvt 0.481100 0.462600\nvt 0.478800 0.447500\nvt 0.482300 0.448200\nvt 0.492100 0.421500\nvt 0.483700 0.421600\nvt 0.482100 0.392600\nvt 0.162500 0.381500\nvt 0.162200 0.374600\nvt 0.163700 0.375900\nvt 0.144200 0.355300\nvt 0.140300 0.335900\nvt 0.147700 0.335700\nvt 0.498900 0.461800\nvt 0.496400 0.462600\nvt 0.496800 0.448800\nvt 0.881700 0.394400\nvt 0.878100 0.395200\nvt 0.878400 0.370200\nvt 0.895800 0.336700\nvt 0.888600 0.336400\nvt 0.891100 0.303600\nvt 0.504400 0.420800\nvt 0.500100 0.421300\nvt 0.503000 0.392200\nvt 0.873600 0.395300\nvt 0.869200 0.395200\nvt 0.868700 0.371700\nvt 0.932500 0.394400\nvt 0.935800 0.370400\nvt 0.938500 0.370700\nvt 0.156900 0.354300\nvt 0.155200 0.335500\nvt 0.157300 0.335400\nvt 0.127300 0.358500\nvt 0.118800 0.337100\nvt 0.121900 0.336800\nvt 0.085800 0.380200\nvt 0.082700 0.356100\nvt 0.084400 0.356500\nvt 0.057000 0.393800\nvt 0.054800 0.395100\nvt 0.046400 0.368100\nvt 0.089200 0.380900\nvt 0.086400 0.356900\nvt 0.088800 0.356800\nvt 0.937300 0.395400\nvt 0.941600 0.371100\nvt 0.946100 0.372000\nvt 0.132300 0.357100\nvt 0.125300 0.336400\nvt 0.130300 0.336200\nvt 0.061300 0.362300\nvt 0.068500 0.359600\nvt 0.073300 0.385700\nvt 0.469700 0.420400\nvt 0.465600 0.393100\nvt 0.468400 0.392900\nvt 0.126100 0.359300\nvt 0.125100 0.359900\nvt 0.116500 0.337900\nvt 0.809500 0.417000\nvt 0.808900 0.392200\nvt 0.811600 0.392400\nvt 0.950300 0.400900\nvt 0.955100 0.374600\nvt 0.957200 0.375400\nvt 0.466700 0.420100\nvt 0.462200 0.393300\nvt 0.463700 0.393200\nvt 0.163600 0.356500\nvt 0.163100 0.335300\nvt 0.167500 0.335600\nvt 0.174400 0.358100\nvt 0.171200 0.359500\nvt 0.171000 0.335800\nvt 0.813800 0.418100\nvt 0.814300 0.392500\nvt 0.818700 0.393000\nvt 0.945300 0.398600\nvt 0.950200 0.372900\nvt 0.952600 0.373700\nvt 0.053000 0.396200\nvt 0.051300 0.397200\nvt 0.042000 0.370400\nvt 0.074900 0.358000\nvt 0.895000 0.395300\nvt 0.899300 0.371400\nvt 0.901900 0.372000\nvt 0.140300 0.355700\nvt 0.135400 0.336000\nvt 0.137800 0.335900\nvt 0.807000 0.416200\nvt 0.805600 0.391900\nvt 0.807000 0.392000\nvt 0.951500 0.337700\nvt 0.945000 0.336700\nvt 0.949900 0.302700\nvt 0.474600 0.420900\nvt 0.471100 0.392800\nvt 0.476800 0.392700\nvt 0.150000 0.275100\nvt 0.157500 0.274800\nvt 0.156400 0.305000\nvt 0.160400 0.355200\nvt 0.159400 0.335300\nvt 0.161300 0.335300\nvt 0.884800 0.304500\nvt 0.494400 0.357800\nvt 0.481500 0.357900\nvt 0.482800 0.322400\nvt 0.149400 0.172000\nvt 0.155700 0.164300\nvt 0.156400 0.191600\nvt 0.899800 0.214500\nvt 0.891700 0.214700\nvt 0.889200 0.184600\nvt 0.512700 0.358100\nvt 0.507000 0.358000\nvt 0.510200 0.323100\nvt 0.872300 0.338400\nvt 0.867000 0.339400\nvt 0.867100 0.307400\nvt 0.941700 0.336400\nvt 0.938600 0.336200\nvt 0.943000 0.302200\nvt 0.158400 0.304900\nvt 0.120000 0.306400\nvt 0.115500 0.306800\nvt 0.113400 0.276300\nvt 0.083200 0.325900\nvt 0.081200 0.296300\nvt 0.083900 0.296300\nvt 0.039400 0.335700\nvt 0.036300 0.336900\nvt 0.028700 0.305000\nvt 0.090600 0.326200\nvt 0.088100 0.326600\nvt 0.086600 0.296400\nvt 0.130600 0.305900\nvt 0.124700 0.306000\nvt 0.124400 0.275800\nvt 0.053300 0.332200\nvt 0.046300 0.302700\nvt 0.055400 0.302100\nvt 0.467000 0.357700\nvt 0.464100 0.357900\nvt 0.466700 0.321400\nvt 0.113700 0.307200\nvt 0.112100 0.307600\nvt 0.108600 0.277300\nvt 0.815800 0.358300\nvt 0.812100 0.358200\nvt 0.817900 0.323700\nvt 0.965400 0.340600\nvt 0.973600 0.306400\nvt 0.976200 0.307200\nvt 0.168400 0.304900\nvt 0.164000 0.304700\nvt 0.165300 0.274600\nvt 0.462200 0.358000\nvt 0.460600 0.358100\nvt 0.461800 0.321500\nvt 0.175200 0.304900\nvt 0.172100 0.305000\nvt 0.174200 0.274600\nvt 0.824000 0.359300\nvt 0.819400 0.358500\nvt 0.825800 0.324000\nvt 0.961700 0.339600\nvt 0.957800 0.338700\nvt 0.965200 0.304900\nvt 0.034000 0.338000\nvt 0.031700 0.339200\nvt 0.023500 0.306800\nvt 0.067100 0.299500\nvt 0.902500 0.337000\nvt 0.906200 0.303300\nvt 0.910600 0.303700\nvt 0.809600 0.358100\nvt 0.807600 0.358100\nvt 0.811100 0.323400\nvt 0.139000 0.305600\nvt 0.136500 0.305700\nvt 0.137500 0.275500\nvt 0.873900 0.078900\nvt 0.866100 0.040200\nvt 0.869200 0.046000\nvt 0.475800 0.357700\nvt 0.469800 0.357600\nvt 0.471900 0.321400\nvt 0.162200 0.304800\nvt 0.160400 0.304800\nvt 0.161500 0.274600\nvt 0.023800 0.207600\nvt 0.027100 0.207400\nvt 0.027000 0.231100\nvt 0.956700 0.216100\nvt 0.956500 0.186100\nvt 0.965700 0.188200\nvt 0.882300 0.187700\nvt 0.485700 0.245700\nvt 0.486000 0.220100\nvt 0.496400 0.221400\nvt 0.148300 0.071300\nvt 0.146100 0.073900\nvt 0.147300 0.043000\nvt 0.866900 0.218200\nvt 0.865300 0.188600\nvt 0.870600 0.189700\nvt 0.514800 0.245200\nvt 0.508800 0.247300\nvt 0.506700 0.222300\nvt 0.158400 0.189800\nvt 0.948900 0.213100\nvt 0.948000 0.182200\nvt 0.952300 0.184100\nvt 0.110900 0.206000\nvt 0.110800 0.183600\nvt 0.117100 0.184100\nvt 0.079000 0.224800\nvt 0.077900 0.202100\nvt 0.080800 0.202200\nvt 0.130000 0.206500\nvt 0.122900 0.206800\nvt 0.123500 0.184500\nvt 0.087100 0.224500\nvt 0.084800 0.225100\nvt 0.083900 0.202400\nvt 0.038300 0.231600\nvt 0.037900 0.208100\nvt 0.047800 0.209000\nvt 0.464100 0.233700\nvt 0.465400 0.204200\nvt 0.469500 0.207400\nvt 0.108300 0.206100\nvt 0.106100 0.206200\nvt 0.106100 0.183800\nvt 0.821500 0.235300\nvt 0.822000 0.204300\nvt 0.826500 0.204800\nvt 0.984700 0.220500\nvt 0.982100 0.220700\nvt 0.981700 0.191200\nvt 0.458900 0.230100\nvt 0.460000 0.199500\nvt 0.462500 0.201800\nvt 0.164400 0.185500\nvt 0.162600 0.155900\nvt 0.167900 0.157300\nvt 0.174700 0.187800\nvt 0.173000 0.158700\nvt 0.178100 0.160600\nvt 0.830800 0.235700\nvt 0.830500 0.205300\nvt 0.836700 0.206200\nvt 0.973500 0.219700\nvt 0.974400 0.190300\nvt 0.978100 0.190800\nvt 0.017800 0.231900\nvt 0.015700 0.232300\nvt 0.016700 0.208000\nvt 0.062500 0.205200\nvt 0.907200 0.214400\nvt 0.903700 0.184100\nvt 0.908600 0.185300\nvt 0.121300 0.133400\nvt 0.118500 0.081300\nvt 0.121500 0.084200\nvt 0.815500 0.234000\nvt 0.815600 0.202600\nvt 0.818300 0.203400\nvt 0.139700 0.204700\nvt 0.137100 0.206000\nvt 0.138100 0.183200\nvt 0.472400 0.238400\nvt 0.473400 0.210600\nvt 0.479900 0.215500\nvt 0.162500 0.186800\nvt 0.160500 0.188000\nvt 0.159100 0.159500\nvt 0.152900 0.066600\nvt 0.152100 0.038600\nvt 0.152700 0.041600\nvt 0.077400 0.019800\nvt 0.078400 0.019400\nvt 0.068800 0.039800\nvt 0.941000 0.070100\nvt 0.930600 0.033400\nvt 0.935100 0.036500\nvt 0.865000 0.046600\nvt 0.494300 0.167400\nvt 0.484500 0.167200\nvt 0.486800 0.111900\nvt 0.042900 0.173900\nvt 0.033900 0.173700\nvt 0.039900 0.140400\nvt 0.866900 0.090900\nvt 0.865400 0.095400\nvt 0.863100 0.068000\nvt 0.495700 0.070500\nvt 0.493300 0.067300\nvt 0.486500 0.022700\nvt 0.939600 0.074100\nvt 0.938100 0.078100\nvt 0.931000 0.047800\nvt 0.151700 0.067600\nvt 0.150500 0.068600\nvt 0.150400 0.039100\nvt 0.055600 0.098400\nvt 0.049700 0.100400\nvt 0.060000 0.060100\nvt 0.084200 0.030100\nvt 0.082600 0.031000\nvt 0.085900 0.017100\nvt 0.085800 0.029200\nvt 0.087900 0.016900\nvt 0.088300 0.018000\nvt 0.072100 0.038200\nvt 0.475000 0.068000\nvt 0.472500 0.068500\nvt 0.477000 0.023400\nvt 0.116800 0.052000\nvt 0.115900 0.054900\nvt 0.118800 0.022000\nvt 0.816500 0.068700\nvt 0.814200 0.026600\nvt 0.815200 0.028000\nvt 0.964900 0.097800\nvt 0.957200 0.072800\nvt 0.961100 0.081200\nvt 0.471300 0.071900\nvt 0.470100 0.075200\nvt 0.474600 0.037000\nvt 0.147800 0.101400\nvt 0.150700 0.098000\nvt 0.153200 0.131200\nvt 0.168100 0.069800\nvt 0.166200 0.043500\nvt 0.167200 0.050300\nvt 0.820200 0.071700\nvt 0.816300 0.029400\nvt 0.817800 0.036200\nvt 0.951500 0.076300\nvt 0.939500 0.039600\nvt 0.948300 0.056200\nvt 0.063700 0.043900\nvt 0.062000 0.046000\nvt 0.073100 0.024600\nvt 0.078900 0.033800\nvt 0.075200 0.036500\nvt 0.081700 0.018600\nvt 0.881400 0.085200\nvt 0.872300 0.051700\nvt 0.875400 0.060600\nvt 0.815200 0.070700\nvt 0.813800 0.072700\nvt 0.813100 0.034800\nvt 0.145000 0.077800\nvt 0.143900 0.081700\nvt 0.145400 0.053700\nvt 0.477300 0.067500\nvt 0.478600 0.021200\nvt 0.480100 0.021400\nvt 0.867500 0.437900\nvt 0.864300 0.437800\nvt 0.865600 0.433500\nvt 0.880300 0.440500\nvt 0.063400 0.136300\nvt 0.072700 0.133600\nvt 0.075200 0.168300\nvt 0.036700 0.140700\nvt 0.112000 0.133500\nvt 0.114200 0.081300\nvt 0.116400 0.081300\nvt 0.078500 0.167900\nvt 0.083600 0.167100\nvt 0.081700 0.167500\nvt 0.080600 0.131800\nvt 0.025800 0.174000\nvt 0.024500 0.174000\nvt 0.031700 0.140800\nvt 0.120500 0.049200\nvt 0.122500 0.016900\nvt 0.122600 0.019400\nvt 0.110300 0.135100\nvt 0.108600 0.136700\nvt 0.112900 0.087500\nvt 0.166800 0.070000\nvt 0.165500 0.070200\nvt 0.164800 0.046100\nvt 0.157700 0.126100\nvt 0.156500 0.127000\nvt 0.153900 0.094600\nvt 0.164400 0.125200\nvt 0.166200 0.094400\nvt 0.168100 0.095200\nvt 0.154800 0.129100\nvt 0.142000 0.144400\nvt 0.140100 0.146300\nvt 0.142100 0.109500\nvt 0.170800 0.127400\nvt 0.169900 0.096100\nvt 0.171200 0.099700\nvt 0.484400 0.067900\nvt 0.481800 0.021600\nvt 0.484100 0.022200\nvt 0.884400 0.151100\nvt 0.881700 0.117500\nvt 0.886300 0.118100\nvt 0.877000 0.118700\nvt 0.869100 0.155500\nvt 0.865400 0.155700\nvt 0.867300 0.122600\nvt 0.896600 0.151500\nvt 0.890700 0.118700\nvt 0.893200 0.120500\nvt 0.953400 0.146600\nvt 0.951300 0.106700\nvt 0.957400 0.109800\nvt 0.949700 0.145900\nvt 0.945900 0.145300\nvt 0.945100 0.108200\nvt 0.978300 0.157100\nvt 0.972700 0.122600\nvt 0.974500 0.125400\nvt 0.968800 0.151900\nvt 0.963500 0.112900\nvt 0.968100 0.117800\nvt 0.819200 0.158000\nvt 0.819800 0.110200\nvt 0.822100 0.111700\nvt 0.827400 0.160300\nvt 0.824400 0.113300\nvt 0.826900 0.115200\nvt 0.816700 0.157600\nvt 0.814800 0.157200\nvt 0.815500 0.110300\nvt 0.504100 0.167200\nvt 0.497200 0.110300\nvt 0.500500 0.110300\nvt 0.117800 0.049200\nvt 0.121300 0.016900\nvt 0.121900 0.016900\nvt 0.468800 0.160600\nvt 0.465000 0.159100\nvt 0.470500 0.112600\nvt 0.461500 0.156900\nvt 0.466100 0.112600\nvt 0.468300 0.112600\nvt 0.472400 0.162200\nvt 0.477800 0.112200\nvt 0.482500 0.112100\nvt 0.068700 0.092800\nvt 0.061400 0.096500\nvt 0.068800 0.054100\nvt 0.057700 0.061600\nvt 0.079400 0.088000\nvt 0.076100 0.089100\nvt 0.079100 0.044600\nvt 0.082600 0.086900\nvt 0.083500 0.041500\nvt 0.084200 0.042400\nvt 0.042700 0.103300\nvt 0.041300 0.104400\nvt 0.052300 0.067500\nvt 0.490500 0.476700\nvt 0.486800 0.476500\nvt 0.487100 0.473000\nvt 0.150000 0.223000\nvt 0.157400 0.218900\nvt 0.157500 0.247000\nvt 0.893400 0.273700\nvt 0.892700 0.244300\nvt 0.901400 0.244200\nvt 0.026400 0.281000\nvt 0.023800 0.256000\nvt 0.027300 0.255600\nvt 0.953900 0.274200\nvt 0.956700 0.245600\nvt 0.964500 0.247200\nvt 0.884900 0.246200\nvt 0.484100 0.297000\nvt 0.485600 0.271400\nvt 0.497700 0.272100\nvt 0.867600 0.277200\nvt 0.866400 0.247500\nvt 0.872000 0.247800\nvt 0.516100 0.297800\nvt 0.510200 0.298200\nvt 0.509600 0.272700\nvt 0.159600 0.246300\nvt 0.947200 0.272600\nvt 0.949500 0.243200\nvt 0.953100 0.244400\nvt 0.112100 0.253100\nvt 0.111100 0.228900\nvt 0.117000 0.229200\nvt 0.080300 0.273000\nvt 0.079100 0.248300\nvt 0.082000 0.248300\nvt 0.123800 0.252900\nvt 0.123000 0.229400\nvt 0.130100 0.229200\nvt 0.088900 0.272200\nvt 0.086300 0.272900\nvt 0.084900 0.248400\nvt 0.041500 0.280500\nvt 0.038600 0.255900\nvt 0.048600 0.256300\nvt 0.465900 0.292700\nvt 0.465900 0.263500\nvt 0.469700 0.265000\nvt 0.109500 0.253400\nvt 0.107200 0.253700\nvt 0.106100 0.229200\nvt 0.820200 0.295300\nvt 0.822300 0.265900\nvt 0.826700 0.266200\nvt 0.981500 0.278800\nvt 0.978900 0.278500\nvt 0.981100 0.250000\nvt 0.461100 0.291700\nvt 0.460100 0.261100\nvt 0.462700 0.262300\nvt 0.165900 0.244700\nvt 0.165200 0.214900\nvt 0.170200 0.215600\nvt 0.175500 0.245400\nvt 0.174600 0.216400\nvt 0.178800 0.217400\nvt 0.829300 0.295800\nvt 0.831000 0.266400\nvt 0.836900 0.267000\nvt 0.969600 0.277000\nvt 0.972800 0.248800\nvt 0.977100 0.249400\nvt 0.020400 0.282000\nvt 0.018000 0.282500\nvt 0.015700 0.257100\nvt 0.063500 0.252100\nvt 0.909300 0.273600\nvt 0.909400 0.244200\nvt 0.914500 0.244800\nvt 0.813900 0.294400\nvt 0.815600 0.264800\nvt 0.818400 0.265300\nvt 0.139900 0.251900\nvt 0.137300 0.252400\nvt 0.137100 0.228900\nvt 0.472300 0.294200\nvt 0.473200 0.266500\nvt 0.479700 0.269000\nvt 0.163800 0.245200\nvt 0.161800 0.245700\nvt 0.161300 0.216500\nvt 0.146300 0.399700\nvt 0.152400 0.404200\nvt 0.151500 0.406900\nvt 0.150500 0.409600\nvt 0.097700 0.433300\nvt 0.099700 0.437600\nvt 0.098800 0.437400\nvt 0.097900 0.429000\nvt 0.099100 0.428600\nvt 0.101400 0.437700\nvt 0.100800 0.433100\nvt 0.100600 0.437800\nvt 0.080300 0.449600\nvt 0.076200 0.448000\nvt 0.084100 0.452600\nvt 0.083600 0.454300\nvt 0.082900 0.456200\nvt 0.931300 0.449800\nvt 0.931700 0.455700\nvt 0.929500 0.454100\nvt 0.925900 0.451500\nvt 0.086700 0.448900\nvt 0.083000 0.445600\nvt 0.077000 0.446600\nvt 0.151900 0.398500\nvt 0.155600 0.399400\nvt 0.153900 0.401800\nvt 0.483600 0.473400\nvt 0.483900 0.480800\nvt 0.482800 0.481200\nvt 0.481700 0.481500\nvt 0.144400 0.403200\nvt 0.149600 0.410400\nvt 0.148900 0.411300\nvt 0.809800 0.463600\nvt 0.809900 0.467500\nvt 0.808200 0.466600\nvt 0.805900 0.465100\nvt 0.937100 0.455100\nvt 0.939200 0.450300\nvt 0.933500 0.459200\nvt 0.933000 0.458500\nvt 0.158700 0.393500\nvt 0.162100 0.395400\nvt 0.159800 0.396600\nvt 0.157500 0.397800\nvt 0.480100 0.477200\nvt 0.480800 0.481800\nvt 0.480000 0.482000\nvt 0.167200 0.392400\nvt 0.168400 0.397100\nvt 0.166800 0.395900\nvt 0.165200 0.394800\nvt 0.171000 0.395600\nvt 0.170200 0.394500\nvt 0.170000 0.399600\nvt 0.169400 0.398400\nvt 0.813400 0.466200\nvt 0.813600 0.462900\nvt 0.811300 0.469100\nvt 0.810700 0.468300\nvt 0.934700 0.452800\nvt 0.932200 0.457000\nvt 0.074600 0.450400\nvt 0.082500 0.457500\nvt 0.082300 0.458600\nvt 0.091200 0.437400\nvt 0.094000 0.441300\nvt 0.089400 0.444800\nvt 0.882100 0.450200\nvt 0.885700 0.447800\nvt 0.879600 0.454900\nvt 0.883100 0.452300\nvt 0.878400 0.452900\nvt 0.887800 0.418000\nvt 0.806300 0.461400\nvt 0.804900 0.464700\nvt 0.804200 0.464300\nvt 0.154900 0.395600\nvt 0.156600 0.398600\nvt 0.485700 0.473300\nvt 0.486600 0.481300\nvt 0.485300 0.481100\nvt 0.491500 0.462800\nvt 0.490800 0.473100\nvt 0.164300 0.391700\nvt 0.164500 0.394900\nvt 0.163700 0.394900\nvt 0.872900 0.439700\nvt 0.873200 0.445600\nvt 0.871000 0.438100\nvt 0.871200 0.443700\nvt 0.872500 0.434400\nvt 0.890700 0.394500\nvt 0.497700 0.477000\nvt 0.495600 0.476800\nvt 0.496200 0.481600\nvt 0.494400 0.481600\nvt 0.492700 0.481500\nvt 0.927700 0.442300\nvt 0.924500 0.450800\nvt 0.923100 0.450100\nvt 0.161800 0.388800\nvt 0.162900 0.395200\nvt 0.875300 0.427300\nvt 0.873800 0.419400\nvt 0.868800 0.433900\nvt 0.929400 0.430400\nvt 0.161200 0.381200\nvt 0.137000 0.378900\nvt 0.092800 0.417100\nvt 0.071800 0.433800\nvt 0.064700 0.421000\nvt 0.096900 0.415800\nvt 0.093700 0.404000\nvt 0.934800 0.434000\nvt 0.146000 0.386000\nvt 0.076200 0.429800\nvt 0.066400 0.419800\nvt 0.478900 0.461700\nvt 0.134400 0.380700\nvt 0.811300 0.451800\nvt 0.944300 0.438800\nvt 0.946200 0.426200\nvt 0.155600 0.382100\nvt 0.475400 0.460400\nvt 0.168100 0.384000\nvt 0.175000 0.384800\nvt 0.174200 0.380000\nvt 0.172100 0.391600\nvt 0.817100 0.453400\nvt 0.816400 0.441400\nvt 0.815000 0.463300\nvt 0.940000 0.437700\nvt 0.061600 0.423000\nvt 0.083000 0.408700\nvt 0.888600 0.432900\nvt 0.894100 0.421400\nvt 0.889900 0.434600\nvt 0.808300 0.449200\nvt 0.150000 0.383900\nvt 0.877700 0.427200\nvt 0.878000 0.420100\nvt 0.483700 0.462800\nvt 0.492800 0.392300\nvt 0.163800 0.382100\nvt 0.150600 0.354800\nvt 0.501900 0.460800\nvt 0.500200 0.447800\nvt 0.498000 0.472600\nvt 0.882900 0.370100\nvt 0.898900 0.303400\nvt 0.509200 0.420200\nvt 0.508300 0.392100\nvt 0.504000 0.446800\nvt 0.873500 0.371000\nvt 0.934800 0.394900\nvt 0.158700 0.354700\nvt 0.129800 0.357800\nvt 0.087500 0.380500\nvt 0.059200 0.392500\nvt 0.049100 0.366800\nvt 0.091500 0.380700\nvt 0.090700 0.356600\nvt 0.095100 0.403600\nvt 0.941400 0.397000\nvt 0.136300 0.356400\nvt 0.067000 0.388900\nvt 0.051900 0.365400\nvt 0.472200 0.420600\nvt 0.117500 0.337500\nvt 0.811700 0.417500\nvt 0.952100 0.401400\nvt 0.959000 0.376000\nvt 0.953500 0.401800\nvt 0.468000 0.420300\nvt 0.167700 0.358000\nvt 0.177800 0.356700\nvt 0.174000 0.335400\nvt 0.177300 0.378000\nvt 0.817500 0.418400\nvt 0.822500 0.393500\nvt 0.820800 0.418700\nvt 0.947800 0.399800\nvt 0.044100 0.369300\nvt 0.078900 0.383000\nvt 0.897000 0.396200\nvt 0.904200 0.372500\nvt 0.898900 0.397100\nvt 0.142300 0.355500\nvt 0.808100 0.416600\nvt 0.957500 0.303800\nvt 0.479300 0.421200\nvt 0.149000 0.305300\nvt 0.141600 0.305600\nvt 0.142700 0.275400\nvt 0.162000 0.355800\nvt 0.882900 0.336900\nvt 0.877700 0.337400\nvt 0.878800 0.305300\nvt 0.496600 0.322500\nvt 0.149400 0.197500\nvt 0.142400 0.203500\nvt 0.143100 0.179900\nvt 0.896700 0.184300\nvt 0.518600 0.358300\nvt 0.516300 0.323300\nvt 0.513900 0.392100\nvt 0.873000 0.306300\nvt 0.946400 0.302400\nvt 0.159500 0.274700\nvt 0.118800 0.276100\nvt 0.085700 0.326200\nvt 0.042600 0.334500\nvt 0.032000 0.304300\nvt 0.092500 0.325900\nvt 0.089500 0.295800\nvt 0.131000 0.275700\nvt 0.061800 0.330400\nvt 0.035400 0.303600\nvt 0.469200 0.321400\nvt 0.110900 0.276800\nvt 0.821800 0.323800\nvt 0.967600 0.341400\nvt 0.978600 0.307800\nvt 0.969500 0.342200\nvt 0.169900 0.274600\nvt 0.464000 0.321500\nvt 0.178400 0.304900\nvt 0.177500 0.274700\nvt 0.177100 0.335000\nvt 0.828000 0.360000\nvt 0.831100 0.324800\nvt 0.969700 0.305700\nvt 0.026100 0.305900\nvt 0.071500 0.328400\nvt 0.909500 0.338100\nvt 0.906100 0.337500\nvt 0.814100 0.323500\nvt 0.140100 0.275500\nvt 0.877700 0.082100\nvt 0.477400 0.321900\nvt 0.163400 0.274600\nvt 0.023500 0.231400\nvt 0.020000 0.231600\nvt 0.020700 0.207700\nvt 0.965000 0.217900\nvt 0.884500 0.217300\nvt 0.877800 0.219800\nvt 0.875800 0.190800\nvt 0.497400 0.246600\nvt 0.148900 0.041000\nvt 0.144700 0.104800\nvt 0.872300 0.219000\nvt 0.521600 0.242800\nvt 0.512400 0.219500\nvt 0.522300 0.269900\nvt 0.515600 0.271300\nvt 0.157300 0.161900\nvt 0.159300 0.217700\nvt 0.952700 0.214600\nvt 0.116900 0.206400\nvt 0.081800 0.225000\nvt 0.130800 0.183900\nvt 0.089000 0.223900\nvt 0.086000 0.201800\nvt 0.089500 0.247000\nvt 0.087400 0.247700\nvt 0.048400 0.232300\nvt 0.468400 0.236100\nvt 0.108300 0.183700\nvt 0.108400 0.229100\nvt 0.826200 0.235500\nvt 0.987000 0.220200\nvt 0.984500 0.190700\nvt 0.986100 0.250000\nvt 0.983700 0.250000\nvt 0.461200 0.231900\nvt 0.169700 0.186600\nvt 0.179500 0.189200\nvt 0.183000 0.162300\nvt 0.184200 0.190500\nvt 0.836700 0.236500\nvt 0.842000 0.207100\nvt 0.841700 0.237300\nvt 0.977900 0.220200\nvt 0.018600 0.207800\nvt 0.020500 0.256300\nvt 0.018100 0.256700\nvt 0.063500 0.228300\nvt 0.912100 0.215300\nvt 0.913500 0.186400\nvt 0.917000 0.216200\nvt 0.126900 0.134400\nvt 0.124400 0.087000\nvt 0.132500 0.135300\nvt 0.818000 0.234600\nvt 0.140600 0.181500\nvt 0.142500 0.227100\nvt 0.139800 0.228000\nvt 0.479400 0.242200\nvt 0.160800 0.157700\nvt 0.163200 0.215700\nvt 0.153700 0.068100\nvt 0.153300 0.044600\nvt 0.154900 0.094600\nvt 0.154500 0.069700\nvt 0.067100 0.040800\nvt 0.065400 0.041700\nvt 0.076500 0.020300\nvt 0.946200 0.073200\nvt 0.871100 0.082700\nvt 0.868300 0.086400\nvt 0.863800 0.053000\nvt 0.492100 0.111100\nvt 0.051300 0.174200\nvt 0.047100 0.139700\nvt 0.863600 0.060500\nvt 0.872600 0.119900\nvt 0.869900 0.121200\nvt 0.498100 0.073600\nvt 0.489000 0.029500\nvt 0.930800 0.040600\nvt 0.948200 0.107500\nvt 0.151200 0.038900\nvt 0.152300 0.096300\nvt 0.064500 0.057100\nvt 0.054200 0.138900\nvt 0.086900 0.017000\nvt 0.081300 0.043000\nvt 0.086400 0.030300\nvt 0.088600 0.019100\nvt 0.086900 0.031300\nvt 0.080100 0.019000\nvt 0.477800 0.022300\nvt 0.474300 0.112400\nvt 0.120000 0.019400\nvt 0.113500 0.084400\nvt 0.818300 0.070200\nvt 0.968000 0.103400\nvt 0.965000 0.089600\nvt 0.971200 0.108900\nvt 0.475900 0.030200\nvt 0.148600 0.136800\nvt 0.143900 0.142400\nvt 0.169200 0.075000\nvt 0.168200 0.057100\nvt 0.170300 0.080200\nvt 0.822400 0.076000\nvt 0.819500 0.042900\nvt 0.825000 0.080300\nvt 0.958200 0.087100\nvt 0.074700 0.022400\nvt 0.055400 0.063200\nvt 0.053900 0.065400\nvt 0.083800 0.017800\nvt 0.074000 0.049400\nvt 0.884200 0.090600\nvt 0.878700 0.069400\nvt 0.887100 0.095900\nvt 0.813700 0.030700\nvt 0.817700 0.110200\nvt 0.146300 0.048400\nvt 0.143400 0.107200\nvt 0.480900 0.067700\nvt 0.866200 0.441900\nvt 0.863100 0.442000\nvt 0.878100 0.444800\nvt 0.875900 0.449300\nvt 0.062900 0.171200\nvt 0.030500 0.173900\nvt 0.027200 0.174000\nvt 0.033600 0.140900\nvt 0.116600 0.133500\nvt 0.076700 0.132600\nvt 0.085300 0.166600\nvt 0.082200 0.131400\nvt 0.087800 0.201200\nvt 0.032600 0.140900\nvt 0.123600 0.054600\nvt 0.122100 0.051900\nvt 0.165500 0.044800\nvt 0.159000 0.125200\nvt 0.167600 0.126200\nvt 0.173800 0.130200\nvt 0.172500 0.103300\nvt 0.176900 0.132900\nvt 0.488900 0.067700\nvt 0.890700 0.151200\nvt 0.878500 0.153200\nvt 0.872800 0.155300\nvt 0.900300 0.152900\nvt 0.895700 0.122200\nvt 0.904000 0.154400\nvt 0.961100 0.149300\nvt 0.980700 0.158000\nvt 0.976700 0.128200\nvt 0.983400 0.159000\nvt 0.973600 0.154600\nvt 0.823400 0.159100\nvt 0.832100 0.161600\nvt 0.829900 0.117100\nvt 0.836800 0.163000\nvt 0.509200 0.165400\nvt 0.504300 0.110200\nvt 0.518900 0.216300\nvt 0.119200 0.049200\nvt 0.463100 0.158000\nvt 0.478500 0.164700\nvt 0.046900 0.101300\nvt 0.044100 0.102200\nvt 0.083900 0.087200\nvt 0.085000 0.043400\nvt 0.085100 0.087600\nvt 0.489700 0.481600\nvt 0.150000 0.249200\nvt 0.142600 0.251500\nvt 0.901700 0.273700\nvt 0.030000 0.280500\nvt 0.022900 0.281400\nvt 0.961500 0.275600\nvt 0.886100 0.275200\nvt 0.879100 0.276500\nvt 0.877600 0.248100\nvt 0.497300 0.297400\nvt 0.873400 0.276900\nvt 0.522600 0.297300\nvt 0.950500 0.273400\nvt 0.117800 0.253100\nvt 0.083300 0.273000\nvt 0.130600 0.252700\nvt 0.091000 0.271500\nvt 0.091900 0.295300\nvt 0.051500 0.280600\nvt 0.469100 0.293500\nvt 0.824800 0.295600\nvt 0.983700 0.279000\nvt 0.463200 0.292200\nvt 0.170900 0.245100\nvt 0.179200 0.245900\nvt 0.182900 0.218300\nvt 0.182900 0.246400\nvt 0.834700 0.296500\nvt 0.842000 0.267700\nvt 0.839400 0.297100\nvt 0.974500 0.277900\nvt 0.064900 0.276900\nvt 0.914000 0.274100\nvt 0.919500 0.245500\nvt 0.914900 0.304000\nvt 0.816600 0.294800\nvt 0.478400 0.295600\nvt 0.140700 0.374300\nvt 0.149000 0.366200\nvt 0.152100 0.375000\nvt 0.061200 0.416500\nvt 0.065800 0.407500\nvt 0.068400 0.410700\nvt 0.170100 0.373400\nvt 0.163800 0.370100\nvt 0.163800 0.364400\nvt 0.073000 0.167800\nvt 0.044900 0.173700\nvt 0.048300 0.139700\nvt 0.815500 0.072700\nvt 0.815000 0.034800\nvt 0.820600 0.042900\nvt 0.138000 0.291600\nvt 0.116100 0.294100\nvt 0.112800 0.266400\nvt 0.472600 0.277600\nvt 0.473000 0.255500\nvt 0.496900 0.261000\nvt 0.876600 0.078900\nvt 0.870000 0.040200\nvt 0.880700 0.069400\nvt 0.949500 0.412500\nvt 0.946000 0.409900\nvt 0.948000 0.398800\nvt 0.946700 0.311200\nvt 0.949200 0.283800\nvt 0.966500 0.286700\nvt 0.874000 0.288700\nvt 0.894200 0.285700\nvt 0.893000 0.313000\nvt 0.162600 0.182100\nvt 0.160900 0.154500\nvt 0.179300 0.160600\nvt 0.163700 0.263100\nvt 0.156800 0.263300\nvt 0.156600 0.238100\nvt 0.815800 0.362600\nvt 0.816900 0.359500\nvt 0.823900 0.365100\nvt 0.887700 0.393700\nvt 0.890800 0.384100\nvt 0.899300 0.388700\nvt 0.163500 0.070200\nvt 0.162800 0.046100\nvt 0.165800 0.057100\nvt 0.491300 0.426900\nvt 0.491600 0.423300\nvt 0.497700 0.422900\nvt 0.164100 0.236100\nvt 0.156400 0.212600\nvt 0.871500 0.213700\nvt 0.869600 0.187100\nvt 0.889800 0.183400\nvt 0.116200 0.087500\nvt 0.162700 0.290600\nvt 0.155900 0.290800\nvt 0.517100 0.237800\nvt 0.496500 0.240600\nvt 0.495700 0.219100\nvt 0.891900 0.362600\nvt 0.903000 0.366100\nvt 0.874800 0.315400\nvt 0.893200 0.341700\nvt 0.492200 0.413200\nvt 0.501000 0.411600\nvt 0.155500 0.187600\nvt 0.154700 0.162300\nvt 0.881700 0.412000\nvt 0.883200 0.407800\nvt 0.890000 0.418900\nvt 0.164000 0.359000\nvt 0.174800 0.360000\nvt 0.159100 0.362700\nvt 0.127900 0.342800\nvt 0.141600 0.338400\nvt 0.145900 0.357400\nvt 0.022400 0.270300\nvt 0.021500 0.249000\nvt 0.039500 0.247000\nvt 0.815100 0.290700\nvt 0.816900 0.273400\nvt 0.838300 0.275700\nvt 0.135800 0.363300\nvt 0.484900 0.426900\nvt 0.484800 0.431500\nvt 0.482400 0.432400\nvt 0.871800 0.239000\nvt 0.893900 0.236300\nvt 0.895300 0.261000\nvt 0.951600 0.260000\nvt 0.952700 0.235800\nvt 0.970900 0.241000\nvt 0.158300 0.354800\nvt 0.817700 0.342600\nvt 0.816300 0.325700\nvt 0.828400 0.328000\nvt 0.154900 0.319100\nvt 0.884800 0.403700\nvt 0.892300 0.414300\nvt 0.180400 0.186800\nvt 0.179300 0.212200\nvt 0.953100 0.076300\nvt 0.943800 0.039600\nvt 0.963700 0.089600\nvt 0.060000 0.046000\nvt 0.068000 0.038200\nvt 0.062000 0.057100\nvt 0.980100 0.266500\nvt 0.969200 0.264200\nvt 0.507100 0.375500\nvt 0.492600 0.375800\nvt 0.493100 0.352000\nvt 0.162000 0.318900\nvt 0.175600 0.290900\nvt 0.818200 0.259000\nvt 0.840700 0.261800\nvt 0.818700 0.243200\nvt 0.817800 0.224100\nvt 0.840900 0.227000\nvt 0.938600 0.403500\nvt 0.939900 0.392200\nvt 0.138500 0.243100\nvt 0.111500 0.244900\nvt 0.110400 0.222700\nvt 0.052400 0.067500\nvt 0.055000 0.098400\nvt 0.022300 0.227600\nvt 0.023700 0.205900\nvt 0.040400 0.205500\nvt 0.471000 0.325700\nvt 0.472400 0.352900\nvt 0.467000 0.353500\nvt 0.914400 0.286900\nvt 0.916800 0.262500\nvt 0.150000 0.068600\nvt 0.144000 0.081700\nvt 0.145300 0.053700\nvt 0.817500 0.351300\nvt 0.825700 0.355900\nvt 0.161100 0.377000\nvt 0.155400 0.381000\nvt 0.153700 0.378000\nvt 0.873500 0.263800\nvt 0.073500 0.304400\nvt 0.047800 0.309700\nvt 0.043600 0.285600\nvt 0.885600 0.151100\nvt 0.869400 0.155600\nvt 0.871100 0.122600\nvt 0.138900 0.179900\nvt 0.140600 0.145400\nvt 0.152500 0.130800\nvt 0.485500 0.423500\nvt 0.481700 0.427300\nvt 0.149900 0.039100\nvt 0.152400 0.044600\nvt 0.943400 0.360100\nvt 0.945400 0.339400\nvt 0.956700 0.341800\nvt 0.944800 0.413600\nvt 0.937500 0.407800\nvt 0.157600 0.125000\nvt 0.150200 0.098000\nvt 0.074300 0.199900\nvt 0.074500 0.220100\nvt 0.110200 0.180900\nvt 0.112400 0.136300\nvt 0.878700 0.385600\nvt 0.877900 0.364000\nvt 0.179400 0.237800\nvt 0.163400 0.209000\nvt 0.156400 0.336900\nvt 0.137100 0.319800\nvt 0.177700 0.263500\nvt 0.961700 0.313800\nvt 0.976900 0.289800\nvt 0.941500 0.380800\nvt 0.953400 0.364000\nvt 0.936600 0.412100\nvt 0.514800 0.214700\nvt 0.493800 0.167400\nvt 0.491900 0.111100\nvt 0.472100 0.160600\nvt 0.040800 0.267500\nvt 0.073900 0.260600\nvt 0.073400 0.279900\nvt 0.074600 0.371700\nvt 0.060400 0.382300\nvt 0.056600 0.357600\nvt 0.160500 0.373900\nvt 0.962500 0.112900\nvt 0.968500 0.108900\nvt 0.827300 0.345600\nvt 0.902200 0.154400\nvt 0.910400 0.185300\nvt 0.949900 0.386400\nvt 0.074300 0.019000\nvt 0.079700 0.017000\nvt 0.077600 0.030100\nvt 0.518300 0.300900\nvt 0.496100 0.299100\nvt 0.496600 0.280400\nvt 0.970800 0.317300\nvt 0.963600 0.344900\nvt 0.490700 0.431800\nvt 0.164000 0.376500\nvt 0.948800 0.145300\nvt 0.948100 0.108200\nvt 0.465600 0.326300\nvt 0.466500 0.298900\nvt 0.472800 0.298500\nvt 0.120100 0.322200\nvt 0.071300 0.414000\nvt 0.067800 0.423800\nvt 0.064400 0.419900\nvt 0.077300 0.131100\nvt 0.071700 0.132600\nvt 0.073800 0.088000\nvt 0.481500 0.412200\nvt 0.481600 0.422700\nvt 0.071400 0.329600\nvt 0.053000 0.334700\nvt 0.955400 0.389400\nvt 0.147100 0.389500\nvt 0.144700 0.386000\nvt 0.817200 0.200500\nvt 0.840600 0.204500\nvt 0.515000 0.326800\nvt 0.494400 0.325400\nvt 0.517800 0.259800\nvt 0.970900 0.216000\nvt 0.138200 0.221800\nvt 0.492000 0.400000\nvt 0.877000 0.392800\nvt 0.966700 0.151900\nvt 0.972800 0.128200\nvt 0.502400 0.110200\nvt 0.465900 0.156900\nvt 0.469800 0.112600\nvt 0.476700 0.112400\nvt 0.044100 0.365600\nvt 0.037700 0.342600\nvt 0.162400 0.124900\nvt 0.164100 0.094400\nvt 0.169700 0.103300\nvt 0.162500 0.339000\nvt 0.080100 0.399000\nvt 0.078400 0.395200\nvt 0.081200 0.394600\nvt 0.081000 0.019100\nvt 0.978000 0.159000\nvt 0.980900 0.189400\nvt 0.040100 0.226300\nvt 0.073900 0.240100\nvt 0.814400 0.309700\nvt 0.829300 0.311300\nvt 0.479400 0.398300\nvt 0.475700 0.375400\nvt 0.164000 0.373300\nvt 0.947500 0.417100\nvt 0.945000 0.421800\nvt 0.167800 0.080200\nvt 0.814400 0.366000\nvt 0.822400 0.367900\nvt 0.159900 0.370800\nvt 0.138800 0.264100\nvt 0.477300 0.068000\nvt 0.489200 0.067700\nvt 0.173700 0.132500\nvt 0.473200 0.075200\nvt 0.835700 0.163000\nvt 0.079900 0.239000\nvt 0.080100 0.259500\nvt 0.078400 0.166500\nvt 0.942700 0.078100\nvt 0.937100 0.047800\nvt 0.138100 0.201000\nvt 0.110300 0.201600\nvt 0.463700 0.226800\nvt 0.464600 0.199100\nvt 0.472700 0.206500\nvt 0.485100 0.022200\nvt 0.491200 0.036300\nvt 0.175200 0.339500\nvt 0.833100 0.292600\nvt 0.950500 0.181600\nvt 0.169200 0.377400\nvt 0.475500 0.397300\nvt 0.892500 0.210700\nvt 0.913900 0.212400\nvt 0.916600 0.238000\nvt 0.497400 0.427400\nvt 0.496200 0.432000\nvt 0.873100 0.408500\nvt 0.951600 0.209800\nvt 0.971100 0.189400\nvt 0.056000 0.403300\nvt 0.063100 0.395200\nvt 0.030800 0.316600\nvt 0.025700 0.290200\nvt 0.075300 0.043000\nvt 0.081700 0.403300\nvt 0.082600 0.399000\nvt 0.079800 0.279100\nvt 0.126500 0.087000\nvt 0.471800 0.231900\nvt 0.877000 0.343000\nvt 0.869400 0.095400\nvt 0.883200 0.117500\nvt 0.078200 0.043400\nvt 0.079900 0.199000\nvt 0.511100 0.352700\nvt 0.142400 0.109500\nvt 0.073000 0.350300\nvt 0.465700 0.276400\nvt 0.816400 0.157200\nvt 0.817100 0.110300\nvt 0.829700 0.117100\nvt 0.036100 0.140800\nvt 0.043700 0.104400\nvt 0.477000 0.037000\nvt 0.068800 0.024600\nvt 0.080200 0.219200\nvt 0.076300 0.329800\nvt 0.077600 0.350400\nvt 0.030400 0.173900\nvt 0.478000 0.410600\nvt 0.079700 0.031300\nvt 0.895800 0.401300\nvt 0.842000 0.246000\nvt 0.825400 0.080300\nvt 0.867500 0.068000\nvt 0.050700 0.389800\nvt 0.078400 0.371000\nvt 0.079600 0.382400\nvt 0.887800 0.095900\nvt 0.895200 0.122200\nvt 0.910700 0.315100\nvt 0.907100 0.344500\nvt 0.497000 0.073600\nvt 0.479700 0.022300\nvt 0.079000 0.304300\nvt 0.174600 0.318900\nvt 0.981300 0.216800\nvt 0.874100 0.404300\nvt 0.875200 0.400100\nvt 0.959800 0.367200\nvt 0.502800 0.398600\nvt 0.076400 0.383500\nvt 0.471000 0.375300\nvt 0.464800 0.252600\nvt 0.154800 0.094700\nvt 0.931300 0.444500\nvt 0.151000 0.399600\nvt 0.157300 0.394200\nvt 0.170300 0.389900\nvt 0.813100 0.462700\nvt 0.084200 0.437200\nvt 0.883900 0.444500\nvt 0.486900 0.448900\nvt 0.869600 0.426400\nvt 0.935600 0.420000\nvt 0.140400 0.377300\nvt 0.151000 0.374200\nvt 0.171700 0.385200\nvt 0.814100 0.453500\nvt 0.081700 0.424800\nvt 0.891700 0.419500\nvt 0.484700 0.392500\nvt 0.144000 0.335800\nvt 0.871400 0.395300\nvt 0.943800 0.371500\nvt 0.127800 0.336300\nvt 0.172800 0.358800\nvt 0.816500 0.392800\nvt 0.900600 0.371700\nvt 0.948200 0.337200\nvt 0.153800 0.274900\nvt 0.484800 0.357900\nvt 0.152600 0.168200\nvt 0.869600 0.338900\nvt 0.127700 0.305900\nvt 0.173700 0.305000\nvt 0.821700 0.358900\nvt 0.904300 0.337300\nvt 0.961100 0.187100\nvt 0.488600 0.220400\nvt 0.147200 0.072600\nvt 0.868000 0.189100\nvt 0.126500 0.206700\nvt 0.175600 0.159600\nvt 0.833600 0.205700\nvt 0.906200 0.184700\nvt 0.120000 0.082700\nvt 0.932800 0.035000\nvt 0.487000 0.167200\nvt 0.866200 0.093100\nvt 0.149300 0.099700\nvt 0.166700 0.046900\nvt 0.817000 0.032800\nvt 0.076100 0.035900\nvt 0.882800 0.087900\nvt 0.865900 0.437800\nvt 0.122600 0.018100\nvt 0.170600 0.097900\nvt 0.482300 0.021800\nvt 0.867300 0.155600\nvt 0.892000 0.119600\nvt 0.954400 0.108300\nvt 0.825700 0.114300\nvt 0.063200 0.095500\nvt 0.487700 0.476600\nvt 0.153700 0.220900\nvt 0.960600 0.246400\nvt 0.487400 0.297100\nvt 0.869200 0.247700\nvt 0.127200 0.252800\nvt 0.176700 0.216900\nvt 0.832000 0.296200\nvt 0.911900 0.244500\nvt 0.929500 0.448500\nvt 0.153200 0.403000\nvt 0.158600 0.397200\nvt 0.169500 0.393900\nvt 0.812000 0.465000\nvt 0.937500 0.449400\nvt 0.935400 0.453600\nvt 0.087200 0.440400\nvt 0.881500 0.449200\nvt 0.488000 0.473100\nvt 0.867200 0.433700\nvt 0.933100 0.432700\nvt 0.144600 0.386700\nvt 0.153500 0.382700\nvt 0.943500 0.425300\nvt 0.941300 0.438100\nvt 0.887900 0.432000\nvt 0.485800 0.421600\nvt 0.147400 0.355100\nvt 0.883700 0.394000\nvt 0.882500 0.417700\nvt 0.939400 0.396200\nvt 0.134300 0.356700\nvt 0.172700 0.380800\nvt 0.815600 0.418200\nvt 0.953900 0.374200\nvt 0.949100 0.400300\nvt 0.077500 0.383700\nvt 0.073300 0.358400\nvt 0.896000 0.395800\nvt 0.152700 0.305100\nvt 0.152900 0.194500\nvt 0.871100 0.371300\nvt 0.172500 0.335600\nvt 0.963600 0.340100\nvt 0.069000 0.328900\nvt 0.064200 0.300100\nvt 0.960800 0.217000\nvt 0.488600 0.245900\nvt 0.146200 0.103100\nvt 0.869600 0.218600\nvt 0.126500 0.229300\nvt 0.177100 0.188500\nvt 0.833700 0.236100\nvt 0.979900 0.191000\nvt 0.980000 0.220500\nvt 0.059700 0.229300\nvt 0.058900 0.206200\nvt 0.909700 0.214800\nvt 0.124100 0.133900\nvt 0.943600 0.071700\nvt 0.868600 0.121900\nvt 0.150900 0.134000\nvt 0.168600 0.072400\nvt 0.821300 0.073900\nvt 0.952800 0.064500\nvt 0.961600 0.092400\nvt 0.070100 0.052900\nvt 0.864700 0.441900\nvt 0.060000 0.171900\nvt 0.061100 0.136900\nvt 0.121300 0.050500\nvt 0.172300 0.128800\nvt 0.488200 0.111700\nvt 0.898500 0.152200\nvt 0.957300 0.147900\nvt 0.970400 0.120200\nvt 0.975900 0.155900\nvt 0.829800 0.160900\nvt 0.056500 0.138200\nvt 0.487400 0.481400\nvt 0.153700 0.248100\nvt 0.957700 0.274900\nvt 0.486200 0.322400\nvt 0.870000 0.306800\nvt 0.127700 0.275700\nvt 0.177400 0.245600\nvt 0.828400 0.324400\nvt 0.979100 0.249700\nvt 0.971600 0.306100\nvt 0.061500 0.277900\nvt 0.059800 0.253200\nvt 0.908400 0.303500\nvt 0.166200 0.392000\nvt 0.166300 0.388600\nvt 0.166600 0.383300\nvt 0.167100 0.378300\nvt 0.165700 0.357200\nvt 0.165300 0.335400\nvt 0.166200 0.304800\nvt 0.167600 0.274600\nvt 0.167100 0.186100\nvt 0.165200 0.156600\nvt 0.166200 0.070100\nvt 0.165200 0.045400\nvt 0.166000 0.125700\nvt 0.167100 0.094800\nvt 0.168400 0.244900\nvt 0.167700 0.215300\nvt 0.166000 0.395400\nvt 0.873300 0.427000\nvt 0.875900 0.419700\nvt 0.870700 0.434200\nvt 0.875900 0.395300\nvt 0.875900 0.370600\nvt 0.875000 0.337900\nvt 0.875900 0.305800\nvt 0.875000 0.219400\nvt 0.873200 0.190200\nvt 0.874800 0.248000\nvt 0.867600 0.088700\nvt 0.863700 0.056800\nvt 0.871200 0.120600\nvt 0.869200 0.438000\nvt 0.869400 0.441800\nvt 0.867800 0.441800\nvt 0.871000 0.155400\nvt 0.876300 0.276700\nvt 0.875700 0.436500\nvt 0.879000 0.427100\nvt 0.887900 0.304000\nvt 0.885700 0.336700\nvt 0.885700 0.186100\nvt 0.888100 0.216000\nvt 0.865500 0.043400\nvt 0.872500 0.080800\nvt 0.879300 0.118100\nvt 0.881400 0.152100\nvt 0.888800 0.245300\nvt 0.889700 0.274400\nvt 0.873900 0.440600\nvt 0.885300 0.370100\nvt 0.882200 0.428100\nvt 0.886000 0.417500\nvt 0.888200 0.394100\nvt 0.890900 0.370400\nvt 0.892200 0.336600\nvt 0.895000 0.303500\nvt 0.895800 0.214600\nvt 0.892900 0.184400\nvt 0.875800 0.080500\nvt 0.867600 0.043100\nvt 0.876600 0.443100\nvt 0.878600 0.438900\nvt 0.887500 0.151200\nvt 0.884000 0.117800\nvt 0.897500 0.273700\nvt 0.897100 0.244300\nvt 0.874500 0.447400\nvt 0.160000 0.392900\nvt 0.159200 0.389800\nvt 0.160900 0.396000\nvt 0.157700 0.381500\nvt 0.156300 0.373300\nvt 0.153700 0.354500\nvt 0.151500 0.335600\nvt 0.149400 0.069900\nvt 0.149600 0.040100\nvt 0.145300 0.305400\nvt 0.146400 0.275300\nvt 0.145900 0.200500\nvt 0.146300 0.225000\nvt 0.146200 0.176000\nvt 0.146200 0.139600\nvt 0.146300 0.250300\nvt 0.152800 0.397400\nvt 0.150900 0.394300\nvt 0.154800 0.400600\nvt 0.147300 0.385200\nvt 0.143500 0.376100\nvt 0.138300 0.356100\nvt 0.132900 0.336100\nvt 0.133600 0.305800\nvt 0.134300 0.275600\nvt 0.133500 0.206300\nvt 0.134500 0.183500\nvt 0.133600 0.229000\nvt 0.129700 0.134800\nvt 0.122900 0.085600\nvt 0.122800 0.053200\nvt 0.122700 0.020600\nvt 0.122800 0.021800\nvt 0.133900 0.252500\nvt 0.148300 0.404600\nvt 0.145600 0.400900\nvt 0.141000 0.390100\nvt 0.136100 0.379500\nvt 0.128500 0.358200\nvt 0.120400 0.336900\nvt 0.117800 0.306600\nvt 0.116100 0.276200\nvt 0.113900 0.206200\nvt 0.114000 0.183900\nvt 0.114300 0.133500\nvt 0.115300 0.081300\nvt 0.118500 0.049200\nvt 0.121600 0.016900\nvt 0.115000 0.253100\nvt 0.114000 0.229100\nvt 0.151000 0.408200\nvt 0.095200 0.434300\nvt 0.093900 0.435300\nvt 0.091500 0.431700\nvt 0.097600 0.438400\nvt 0.096400 0.439300\nvt 0.090100 0.418400\nvt 0.088700 0.419500\nvt 0.085900 0.406700\nvt 0.093000 0.430500\nvt 0.081600 0.031700\nvt 0.080700 0.032400\nvt 0.084800 0.017500\nvt 0.077800 0.045800\nvt 0.076500 0.047000\nvt 0.074300 0.090000\nvt 0.072400 0.091000\nvt 0.070400 0.134200\nvt 0.068000 0.134900\nvt 0.078800 0.357000\nvt 0.080700 0.356600\nvt 0.084100 0.380900\nvt 0.074200 0.297900\nvt 0.077700 0.297100\nvt 0.080200 0.326500\nvt 0.070200 0.203700\nvt 0.074100 0.202900\nvt 0.075100 0.225700\nvt 0.072100 0.169000\nvt 0.071300 0.250200\nvt 0.075200 0.249300\nvt 0.076400 0.274000\nvt 0.082400 0.381600\nvt 0.087400 0.405600\nvt 0.077300 0.327100\nvt 0.071200 0.226600\nvt 0.069000 0.169700\nvt 0.072600 0.275000\nvt 0.089900 0.438400\nvt 0.087200 0.435000\nvt 0.084500 0.422700\nvt 0.081700 0.409700\nvt 0.078000 0.034500\nvt 0.083200 0.018000\nvt 0.066900 0.093700\nvt 0.072700 0.050500\nvt 0.092900 0.442200\nvt 0.074700 0.385000\nvt 0.079200 0.411800\nvt 0.070100 0.359200\nvt 0.064200 0.329900\nvt 0.058300 0.301500\nvt 0.052200 0.231300\nvt 0.052300 0.255300\nvt 0.051500 0.208000\nvt 0.054200 0.173400\nvt 0.054800 0.279700\nvt 0.080500 0.441400\nvt 0.081300 0.440400\nvt 0.084500 0.443500\nvt 0.074000 0.415300\nvt 0.075300 0.414500\nvt 0.078300 0.427900\nvt 0.063100 0.361600\nvt 0.064900 0.360900\nvt 0.070200 0.387300\nvt 0.055400 0.331700\nvt 0.048600 0.302600\nvt 0.050900 0.302400\nvt 0.040800 0.231800\nvt 0.040400 0.208300\nvt 0.042900 0.208500\nvt 0.044000 0.280500\nvt 0.041100 0.256000\nvt 0.043600 0.256100\nvt 0.083800 0.444600\nvt 0.088100 0.446900\nvt 0.077300 0.428800\nvt 0.068600 0.388100\nvt 0.057500 0.331300\nvt 0.043400 0.231900\nvt 0.046500 0.280500\nvt 0.045000 0.174000\nvt 0.048900 0.139500\nvt 0.050600 0.139300\nvt 0.047100 0.174100\nvt 0.058500 0.097400\nvt 0.057100 0.097900\nvt 0.065600 0.056300\nvt 0.073600 0.037400\nvt 0.072800 0.037800\nvt 0.080500 0.018900\nvt 0.066600 0.055600\nvt 0.038400 0.173800\nvt 0.043500 0.140000\nvt 0.045300 0.139800\nvt 0.054100 0.098900\nvt 0.052700 0.099400\nvt 0.062300 0.058600\nvt 0.071200 0.038600\nvt 0.070400 0.039000\nvt 0.079200 0.019200\nvt 0.035200 0.207900\nvt 0.032500 0.207800\nvt 0.063400 0.057800\nvt 0.081700 0.447600\nvt 0.082300 0.446600\nvt 0.086100 0.449800\nvt 0.078400 0.444500\nvt 0.079100 0.443500\nvt 0.074000 0.431800\nvt 0.075100 0.430800\nvt 0.069500 0.418000\nvt 0.071100 0.417100\nvt 0.063100 0.390700\nvt 0.065100 0.389800\nvt 0.056600 0.363900\nvt 0.059000 0.363100\nvt 0.047900 0.333300\nvt 0.050600 0.332700\nvt 0.040900 0.303200\nvt 0.043600 0.302900\nvt 0.033000 0.255800\nvt 0.032700 0.231400\nvt 0.035500 0.231500\nvt 0.035700 0.280500\nvt 0.038600 0.280500\nvt 0.035800 0.255800\nvt 0.494700 0.476800\nvt 0.495100 0.473000\nvt 0.497700 0.462200\nvt 0.498500 0.448300\nvt 0.502300 0.421100\nvt 0.505700 0.392100\nvt 0.509800 0.358100\nvt 0.513200 0.323200\nvt 0.511800 0.246300\nvt 0.509600 0.220900\nvt 0.494500 0.068900\nvt 0.487800 0.026100\nvt 0.506600 0.166300\nvt 0.498900 0.110300\nvt 0.513200 0.298000\nvt 0.512600 0.272000\nvt 0.493600 0.481600\nvt 0.494000 0.462700\nvt 0.494000 0.448800\nvt 0.495400 0.448800\nvt 0.493400 0.473100\nvt 0.492600 0.473100\nvt 0.498100 0.421400\nvt 0.496100 0.421400\nvt 0.497900 0.392300\nvt 0.500700 0.357900\nvt 0.503400 0.322800\nvt 0.506800 0.323000\nvt 0.500500 0.392200\nvt 0.503100 0.247000\nvt 0.501600 0.221900\nvt 0.504200 0.222100\nvt 0.503700 0.272400\nvt 0.506000 0.247200\nvt 0.499200 0.167300\nvt 0.494700 0.110700\nvt 0.496000 0.110500\nvt 0.501600 0.167200\nvt 0.491100 0.067500\nvt 0.485300 0.022500\nvt 0.485900 0.022600\nvt 0.492200 0.067400\nvt 0.493000 0.476700\nvt 0.492200 0.476700\nvt 0.492000 0.481500\nvt 0.491200 0.481500\nvt 0.503800 0.297800\nvt 0.506600 0.272600\nvt 0.507000 0.298000\nvt 0.490200 0.462800\nvt 0.489800 0.448800\nvt 0.490000 0.421500\nvt 0.490100 0.392400\nvt 0.491200 0.357800\nvt 0.493100 0.322500\nvt 0.494500 0.246400\nvt 0.493800 0.221100\nvt 0.491900 0.167300\nvt 0.490800 0.111300\nvt 0.487700 0.067700\nvt 0.483500 0.022000\nvt 0.489600 0.476600\nvt 0.489900 0.473100\nvt 0.494000 0.297300\nvt 0.494700 0.271900\nvt 0.489000 0.481500\nvt 0.484800 0.476400\nvt 0.485300 0.473400\nvt 0.482400 0.462700\nvt 0.480500 0.447800\nvt 0.477000 0.421100\nvt 0.474000 0.392700\nvt 0.472800 0.357700\nvt 0.474600 0.321600\nvt 0.475900 0.240300\nvt 0.476600 0.213100\nvt 0.479100 0.067600\nvt 0.479300 0.021300\nvt 0.475400 0.163500\nvt 0.480200 0.112100\nvt 0.475300 0.294900\nvt 0.476500 0.267800\nvt 0.484600 0.481000\nvt 0.812900 0.465800\nvt 0.814300 0.463100\nvt 0.811000 0.468700\nvt 0.816100 0.453500\nvt 0.817700 0.441500\nvt 0.819100 0.418600\nvt 0.820600 0.393300\nvt 0.826000 0.359700\nvt 0.833300 0.325100\nvt 0.839200 0.236900\nvt 0.839400 0.206600\nvt 0.839500 0.267400\nvt 0.823700 0.078200\nvt 0.818600 0.039500\nvt 0.828400 0.116200\nvt 0.834500 0.162300\nvt 0.837100 0.296800\nvt 0.835500 0.325400\nvt 0.932500 0.450700\nvt 0.934100 0.446800\nvt 0.930600 0.454900\nvt 0.936300 0.435300\nvt 0.938800 0.422300\nvt 0.943300 0.397800\nvt 0.948100 0.372400\nvt 0.954700 0.338200\nvt 0.961400 0.304300\nvt 0.969200 0.218800\nvt 0.970000 0.189200\nvt 0.968700 0.248000\nvt 0.948800 0.074800\nvt 0.937300 0.038000\nvt 0.960500 0.111400\nvt 0.965000 0.150600\nvt 0.965600 0.276300\nvt 0.882600 0.451200\nvt 0.885200 0.446700\nvt 0.880000 0.455800\nvt 0.889200 0.433800\nvt 0.893300 0.420800\nvt 0.898000 0.396600\nvt 0.903000 0.372200\nvt 0.907800 0.337800\nvt 0.912800 0.303800\nvt 0.914600 0.215700\nvt 0.911000 0.185800\nvt 0.917000 0.245200\nvt 0.885600 0.093200\nvt 0.877100 0.065000\nvt 0.894400 0.121300\nvt 0.902200 0.153700\nvt 0.916400 0.274300\nvt 0.217300 0.453800\nvt 0.238500 0.456400\nvt 0.236700 0.488800\nvt 0.086200 0.680500\nvt 0.116300 0.653300\nvt 0.130400 0.688600\nvt 0.071400 0.565200\nvt 0.102100 0.560500\nvt 0.103300 0.605500\nvt 0.276400 0.800500\nvt 0.241000 0.823800\nvt 0.226800 0.791800\nvt 0.052700 0.717700\nvt 0.065200 0.704200\nvt 0.079300 0.744900\nvt 0.052300 0.579800\nvt 0.070800 0.628600\nvt 0.225800 0.638100\nvt 0.219700 0.605900\nvt 0.241900 0.598500\nvt 0.193900 0.730200\nvt 0.212600 0.761400\nvt 0.179300 0.779300\nvt 0.289000 0.490800\nvt 0.290500 0.468400\nvt 0.343000 0.490600\nvt 0.140100 0.587200\nvt 0.150800 0.630700\nvt 0.130600 0.777800\nvt 0.162300 0.750300\nvt 0.203900 0.841400\nvt 0.163200 0.860000\nvt 0.153400 0.831900\nvt 0.101500 0.716800\nvt 0.341700 0.505900\nvt 0.409000 0.537000\nvt 0.213300 0.562500\nvt 0.235700 0.555400\nvt 0.039900 0.660700\nvt 0.050000 0.649700\nvt 0.352800 0.733700\nvt 0.314300 0.767200\nvt 0.298600 0.742100\nvt 0.395600 0.696700\nvt 0.338000 0.712400\nvt 0.162400 0.665600\nvt 0.288200 0.546200\nvt 0.288300 0.513300\nvt 0.341600 0.521800\nvt 0.190900 0.569500\nvt 0.191300 0.809300\nvt 0.311000 0.666100\nvt 0.365000 0.639300\nvt 0.374300 0.660600\nvt 0.343500 0.546900\nvt 0.406800 0.550300\nvt 0.345500 0.575500\nvt 0.406700 0.565600\nvt 0.126800 0.883200\nvt 0.120400 0.859700\nvt 0.099300 0.898800\nvt 0.072500 0.911700\nvt 0.067600 0.894900\nvt 0.268900 0.688700\nvt 0.324000 0.692600\nvt 0.234900 0.520500\nvt 0.288900 0.585000\nvt 0.292900 0.613300\nvt 0.235900 0.421700\nvt 0.234300 0.385300\nvt 0.300100 0.404000\nvt 0.138200 0.560200\nvt 0.249200 0.700200\nvt 0.284000 0.718800\nvt 0.428900 0.651500\nvt 0.384800 0.678700\nvt 0.211100 0.529500\nvt 0.247800 0.629400\nvt 0.103600 0.809900\nvt 0.144300 0.805600\nvt 0.294800 0.437200\nvt 0.356200 0.449500\nvt 0.213900 0.418400\nvt 0.211500 0.382600\nvt 0.229500 0.711700\nvt 0.247200 0.743600\nvt 0.295300 0.783800\nvt 0.261700 0.771300\nvt 0.197500 0.613300\nvt 0.350100 0.597300\nvt 0.408900 0.580600\nvt 0.415500 0.615600\nvt 0.417900 0.629100\nvt 0.349300 0.470500\nvt 0.417300 0.522700\nvt 0.187300 0.538600\nvt 0.041100 0.593800\nvt 0.083400 0.832800\nvt 0.113800 0.837000\nvt 0.410600 0.714900\nvt 0.371600 0.761800\nvt 0.440600 0.663500\nvt 0.334100 0.800300\nvt 0.256900 0.859000\nvt 0.219200 0.878900\nvt 0.313900 0.817700\nvt 0.293600 0.835100\nvt 0.176600 0.896900\nvt 0.135800 0.915800\nvt 0.105600 0.927800\nvt 0.076700 0.935800\nvt 0.306700 0.374300\nvt 0.314900 0.345500\nvt 0.370800 0.411300\nvt 0.216600 0.345100\nvt 0.230200 0.302900\nvt 0.249600 0.308600\nvt 0.363300 0.429800\nvt 0.425000 0.508800\nvt 0.239600 0.348200\nvt 0.332200 0.320200\nvt 0.381900 0.398900\nvt 0.266600 0.252200\nvt 0.279700 0.261900\nvt 0.431600 0.502400\nvt 0.427300 0.725300\nvt 0.452500 0.671400\nvt 0.394900 0.779800\nvt 0.273700 0.891100\nvt 0.359400 0.824400\nvt 0.337100 0.844300\nvt 0.314900 0.864200\nvt 0.186400 0.929500\nvt 0.231200 0.912800\nvt 0.143100 0.942800\nvt 0.109900 0.950100\nvt 0.346800 0.308700\nvt 0.396200 0.390800\nvt 0.253500 0.242400\nvt 0.278000 0.218800\nvt 0.287600 0.231700\nvt 0.442600 0.496900\nvt 0.297300 0.244500\nvt 0.752200 0.480900\nvt 0.745400 0.448900\nvt 0.766100 0.443100\nvt 0.918000 0.688900\nvt 0.886200 0.665000\nvt 0.895100 0.631200\nvt 0.902800 0.575600\nvt 0.897700 0.533700\nvt 0.929100 0.534400\nvt 0.808700 0.773900\nvt 0.798700 0.807500\nvt 0.760000 0.790200\nvt 0.941900 0.712700\nvt 0.951300 0.675300\nvt 0.965600 0.687800\nvt 0.938400 0.594400\nvt 0.950000 0.546600\nvt 0.784700 0.628000\nvt 0.761700 0.622300\nvt 0.762900 0.593700\nvt 0.863300 0.729600\nvt 0.851000 0.759400\nvt 0.818900 0.742800\nvt 0.700300 0.490800\nvt 0.650200 0.513800\nvt 0.646600 0.498800\nvt 0.861200 0.587100\nvt 0.863500 0.562100\nvt 0.895500 0.752000\nvt 0.885000 0.780000\nvt 0.879900 0.804400\nvt 0.875500 0.830900\nvt 0.835900 0.818400\nvt 0.928000 0.654400\nvt 0.590100 0.560500\nvt 0.587900 0.554800\nvt 0.786600 0.573000\nvt 0.763600 0.569400\nvt 0.763300 0.543900\nvt 0.958600 0.647500\nvt 0.961900 0.612800\nvt 0.973000 0.622200\nvt 0.728700 0.735300\nvt 0.716900 0.763500\nvt 0.673500 0.739400\nvt 0.684900 0.716200\nvt 0.626000 0.710400\nvt 0.851400 0.646500\nvt 0.857900 0.613300\nvt 0.708900 0.543200\nvt 0.654500 0.552800\nvt 0.652700 0.529600\nvt 0.809700 0.576600\nvt 0.809700 0.551300\nvt 0.900100 0.604900\nvt 0.843000 0.787600\nvt 0.704600 0.667500\nvt 0.695600 0.694700\nvt 0.641600 0.672100\nvt 0.594700 0.581900\nvt 0.592100 0.567600\nvt 0.656000 0.569400\nvt 0.595100 0.591000\nvt 0.712400 0.565500\nvt 0.916100 0.825000\nvt 0.914100 0.849400\nvt 0.969100 0.858000\nvt 0.968200 0.873000\nvt 0.942400 0.864200\nvt 0.739200 0.709800\nvt 0.704400 0.513100\nvt 0.758700 0.512200\nvt 0.714800 0.613100\nvt 0.656100 0.607600\nvt 0.657300 0.585700\nvt 0.742700 0.414000\nvt 0.686500 0.438300\nvt 0.676200 0.406000\nvt 0.861500 0.538000\nvt 0.760700 0.718100\nvt 0.749700 0.680500\nvt 0.633800 0.691100\nvt 0.586400 0.671200\nvt 0.783800 0.517600\nvt 0.715100 0.586700\nvt 0.924600 0.774900\nvt 0.918200 0.801600\nvt 0.637300 0.479700\nvt 0.627200 0.459700\nvt 0.764100 0.407300\nvt 0.738800 0.377300\nvt 0.782100 0.726500\nvt 0.793700 0.695900\nvt 0.771200 0.757200\nvt 0.738400 0.776800\nvt 0.695500 0.468800\nvt 0.807700 0.633600\nvt 0.809400 0.602300\nvt 0.594400 0.609700\nvt 0.594900 0.599200\nvt 0.648000 0.651200\nvt 0.593700 0.647400\nvt 0.582800 0.548300\nvt 0.577500 0.541800\nvt 0.809000 0.523000\nvt 0.963000 0.559200\nvt 0.948400 0.796700\nvt 0.943800 0.823400\nvt 0.934700 0.627700\nvt 0.658700 0.770200\nvt 0.613900 0.730500\nvt 0.576700 0.684800\nvt 0.700600 0.801300\nvt 0.829600 0.856300\nvt 0.788300 0.846300\nvt 0.746900 0.829200\nvt 0.723700 0.815200\nvt 0.911500 0.879200\nvt 0.871300 0.866000\nvt 0.972200 0.895900\nvt 0.942800 0.891500\nvt 0.664800 0.376600\nvt 0.616900 0.440700\nvt 0.607000 0.423800\nvt 0.749900 0.333800\nvt 0.727600 0.340300\nvt 0.711900 0.303500\nvt 0.572500 0.535400\nvt 0.567700 0.529200\nvt 0.652600 0.350100\nvt 0.594100 0.413300\nvt 0.730400 0.294900\nvt 0.675100 0.261900\nvt 0.560100 0.523700\nvt 0.631700 0.327700\nvt 0.639100 0.791900\nvt 0.599200 0.743300\nvt 0.566300 0.694300\nvt 0.680500 0.830200\nvt 0.819600 0.894700\nvt 0.774300 0.881900\nvt 0.705300 0.846100\nvt 0.730000 0.862100\nvt 0.909800 0.911400\nvt 0.865700 0.904700\nvt 0.943000 0.915200\nvt 0.578700 0.407400\nvt 0.615500 0.318400\nvt 0.686600 0.250200\nvt 0.662700 0.233000\nvt 0.670300 0.218800\nvt 0.548300 0.519900\nvt 0.655000 0.247200\nvt 0.043100 0.731000\nvt 0.063700 0.764000\nvt 0.030600 0.672100\nvt 0.094900 0.877800\nvt 0.030600 0.594800\nvt 0.062800 0.853300\nvt 0.090700 0.857600\nvt 0.960400 0.730000\nvt 0.977300 0.696600\nvt 0.970700 0.657500\nvt 0.983200 0.635900\nvt 0.943100 0.843200\nvt 0.973500 0.558900\nvt 0.972100 0.815300\nvt 0.969000 0.842600\nvt 0.973200 0.915200\nvt 0.566800 0.604000\nvt 0.545900 0.605400\nvt 0.546800 0.601200\nvt 0.448300 0.620900\nvt 0.444100 0.613100\nvt 0.466900 0.599300\nvt 0.437200 0.580900\nvt 0.434300 0.571100\nvt 0.453700 0.570000\nvt 0.562500 0.644100\nvt 0.558900 0.652500\nvt 0.534300 0.635600\nvt 0.552300 0.663500\nvt 0.529000 0.643900\nvt 0.566600 0.610600\nvt 0.566400 0.617600\nvt 0.544900 0.615000\nvt 0.438700 0.588200\nvt 0.457000 0.577400\nvt 0.453200 0.628700\nvt 0.474900 0.608000\nvt 0.481400 0.615400\nvt 0.456600 0.528000\nvt 0.462200 0.537500\nvt 0.456200 0.541300\nvt 0.538900 0.553100\nvt 0.548000 0.556500\nvt 0.541400 0.566400\nvt 0.433600 0.555800\nvt 0.434000 0.552500\nvt 0.449300 0.555800\nvt 0.567000 0.582000\nvt 0.549200 0.588600\nvt 0.549700 0.584900\nvt 0.557000 0.564000\nvt 0.559900 0.567400\nvt 0.548400 0.574800\nvt 0.443200 0.537600\nvt 0.453000 0.544900\nvt 0.451600 0.547600\nvt 0.553800 0.560700\nvt 0.545100 0.569600\nvt 0.566200 0.626600\nvt 0.565400 0.635800\nvt 0.540800 0.625800\nvt 0.440100 0.595300\nvt 0.461000 0.589000\nvt 0.463800 0.594400\nvt 0.448300 0.532700\nvt 0.433400 0.560100\nvt 0.450800 0.562000\nvt 0.568100 0.592400\nvt 0.547900 0.596500\nvt 0.545100 0.671600\nvt 0.523700 0.650500\nvt 0.438300 0.545100\nvt 0.450500 0.550200\nvt 0.449800 0.553000\nvt 0.461500 0.638500\nvt 0.487700 0.621100\nvt 0.562800 0.570900\nvt 0.565300 0.574500\nvt 0.549800 0.581800\nvt 0.567500 0.598600\nvt 0.590800 0.659300\nvt 0.594200 0.620900\nvt 0.411300 0.591400\nvt 0.407700 0.543000\nvt 0.566200 0.577700\nvt 0.421100 0.515900\nvt 0.594100 0.634000\nvt 0.413400 0.602200\nvt 0.441800 0.604100\nvt 0.413000 0.529900\nvt 0.544800 0.573900\nvt 0.545500 0.576400\nvt 0.544500 0.576900\nvt 0.458000 0.543000\nvt 0.458600 0.543500\nvt 0.455700 0.546900\nvt 0.530800 0.613800\nvt 0.527700 0.617900\nvt 0.523400 0.615200\nvt 0.486800 0.596400\nvt 0.490700 0.592600\nvt 0.496500 0.599000\nvt 0.539500 0.599400\nvt 0.537600 0.602800\nvt 0.534900 0.601900\nvt 0.468300 0.578400\nvt 0.465100 0.574200\nvt 0.467800 0.573200\nvt 0.453400 0.551300\nvt 0.454300 0.551700\nvt 0.454700 0.554300\nvt 0.543800 0.588700\nvt 0.541400 0.595300\nvt 0.539300 0.594900\nvt 0.540300 0.568500\nvt 0.540000 0.569200\nvt 0.534000 0.566300\nvt 0.454000 0.556600\nvt 0.455500 0.556800\nvt 0.456900 0.559100\nvt 0.520800 0.626100\nvt 0.516300 0.622900\nvt 0.519900 0.618700\nvt 0.543600 0.571600\nvt 0.543100 0.572300\nvt 0.492700 0.603100\nvt 0.502200 0.604700\nvt 0.516000 0.633600\nvt 0.511600 0.630100\nvt 0.455100 0.546400\nvt 0.454700 0.549300\nvt 0.535800 0.606200\nvt 0.533700 0.609700\nvt 0.529900 0.608000\nvt 0.474900 0.585800\nvt 0.471400 0.582100\nvt 0.474800 0.579800\nvt 0.460800 0.568600\nvt 0.463200 0.568100\nvt 0.545700 0.579400\nvt 0.545600 0.582400\nvt 0.544200 0.582600\nvt 0.456900 0.562100\nvt 0.458900 0.562200\nvt 0.545000 0.585200\nvt 0.542000 0.588700\nvt 0.511100 0.640100\nvt 0.506900 0.636600\nvt 0.482500 0.592600\nvt 0.478600 0.589400\nvt 0.482500 0.586100\nvt 0.463600 0.539200\nvt 0.464000 0.539800\nvt 0.144900 0.720500\nvt 0.093500 0.780900\nvt 0.233200 0.667800\nvt 0.116600 0.749100\nvt 0.175000 0.697700\nvt 0.355500 0.617900\nvt 0.254300 0.657600\nvt 0.203800 0.646900\nvt 0.212100 0.678100\nvt 0.049900 0.780500\nvt 0.076800 0.804800\nvt 0.459000 0.583400\nvt 0.471400 0.576700\nvt 0.298500 0.639100\nvt 0.063300 0.828400\nvt 0.478600 0.583000\nvt 0.063700 0.877800\nvt 0.422600 0.640400\nvt 0.280200 0.756700\nvt 0.470700 0.603500\nvt 0.486500 0.589000\nvt 0.749900 0.746200\nvt 0.537700 0.630600\nvt 0.524400 0.621600\nvt 0.831200 0.711700\nvt 0.843600 0.679600\nvt 0.907000 0.722200\nvt 0.654400 0.629900\nvt 0.713200 0.639800\nvt 0.771700 0.688200\nvt 0.759200 0.650700\nvt 0.931900 0.747200\nvt 0.804200 0.664800\nvt 0.952000 0.768200\nvt 0.971900 0.787600\nvt 0.543000 0.620500\nvt 0.526700 0.611600\nvt 0.876200 0.698300\nvt 0.781700 0.657800\nvt 0.978200 0.743000\nvt 0.545500 0.610100\nvt 0.532500 0.604900\nvt 0.786200 0.598000\nvt 0.981200 0.666400\nvt 0.537000 0.598800\nvt 0.773100 0.480500\nvt 0.543400 0.585200\nvt 0.549300 0.578300\nvt 0.544600 0.579700\nvt 0.761000 0.371200\nvt 0.546900 0.572100\nvt 0.544100 0.574600\nvt 0.440600 0.541400\nvt 0.453900 0.548900\nvt 0.436000 0.548800\nvt 0.453500 0.554000\nvt 0.216100 0.491500\nvt 0.449800 0.558600\nvt 0.455100 0.559000\nvt 0.196000 0.451300\nvt 0.265600 0.731200\nvt 0.188700 0.380000\nvt 0.193600 0.341900\nvt 0.210700 0.297200\nvt 0.786900 0.437400\nvt 0.786500 0.547600\nvt 0.785600 0.400700\nvt 0.772300 0.327200\nvt 0.748800 0.286200\nvt 0.794100 0.480100\nvt 0.783200 0.365100\nvt 0.191800 0.415100\nvt 0.195500 0.494300\nvt 0.546500 0.575900\nvt 0.457400 0.542400\nvt 0.454400 0.545900\nvt 0.532100 0.620500\nvt 0.482800 0.600300\nvt 0.489000 0.607200\nvt 0.540400 0.603600\nvt 0.462400 0.575300\nvt 0.465200 0.580000\nvt 0.452400 0.551000\nvt 0.452200 0.553600\nvt 0.543600 0.595700\nvt 0.540700 0.567800\nvt 0.534400 0.564900\nvt 0.452400 0.556300\nvt 0.453300 0.558800\nvt 0.525300 0.629300\nvt 0.528800 0.624600\nvt 0.544100 0.571000\nvt 0.495000 0.612900\nvt 0.520300 0.637000\nvt 0.453200 0.548500\nvt 0.537400 0.611500\nvt 0.467900 0.584400\nvt 0.471200 0.588700\nvt 0.458500 0.569000\nvt 0.547000 0.582200\nvt 0.454900 0.562100\nvt 0.545600 0.588700\nvt 0.515300 0.643600\nvt 0.474700 0.592700\nvt 0.463100 0.538600\nvt 0.478600 0.596300\nvt 0.534900 0.616000\nvt 0.539000 0.607500\nvt 0.541900 0.600000\nvt 0.546500 0.585100\nvt 0.546900 0.579000\nvt 0.545500 0.573300\nvt 0.534200 0.565600\nvt 0.498600 0.608800\nvt 0.981200 0.242500\nvt 0.514700 0.814500\nvt 0.484200 0.813400\nvt 0.483500 0.799700\nvt 0.514100 0.827800\nvt 0.406200 0.839100\nvt 0.403900 0.813900\nvt 0.426200 0.811900\nvt 0.404300 0.799300\nvt 0.423700 0.797800\nvt 0.448300 0.811700\nvt 0.453100 0.832000\nvt 0.443200 0.799300\nvt 0.467100 0.812900\nvt 0.465900 0.799900\nvt 0.470500 0.830000\nvt 0.529400 0.815300\nvt 0.517300 0.802700\nvt 0.529100 0.828000\nvt 0.544100 0.816400\nvt 0.531300 0.804500\nvt 0.546200 0.807900\nvt 0.544900 0.828100\nvt 0.560100 0.818600\nvt 0.558600 0.827700\nvt 0.576800 0.821300\nvt 0.561900 0.810100\nvt 0.581100 0.813500\nvt 0.577300 0.829700\nvt 0.590300 0.824300\nvt 0.592000 0.832500\nvt 0.602600 0.827500\nvt 0.593200 0.818200\nvt 0.606000 0.823200\nvt 0.604400 0.834700\nvt 0.615500 0.830000\nvt 0.616000 0.836600\nvt 0.628900 0.835600\nvt 0.616900 0.826600\nvt 0.628600 0.832000\nvt 0.236900 0.059500\nvt 0.213200 0.067400\nvt 0.206000 0.051000\nvt 0.199300 0.076000\nvt 0.185400 0.055200\nvt 0.244300 0.075100\nvt 0.227300 0.086800\nvt 0.215500 0.093600\nvt 0.251900 0.091100\nvt 0.239600 0.100700\nvt 0.232500 0.107400\nvt 0.264800 0.115100\nvt 0.252900 0.119300\nvt 0.246300 0.125200\nvt 0.265300 0.133300\nvt 0.259100 0.139400\nvt 0.271200 0.128200\nvt 0.288100 0.143700\nvt 0.280300 0.148100\nvt 0.274600 0.152800\nvt 0.300200 0.154000\nvt 0.293000 0.160400\nvt 0.287100 0.164600\nvt 0.313500 0.165600\nvt 0.304600 0.171000\nvt 0.299100 0.174500\nvt 0.314400 0.182400\nvt 0.310900 0.184800\nvt 0.324100 0.176800\nvt 0.333200 0.191100\nvt 0.323900 0.194100\nvt 0.319400 0.195900\nvt 0.331800 0.206000\nvt 0.327700 0.208300\nvt 0.339700 0.203000\nvt 0.345200 0.215200\nvt 0.338700 0.218700\nvt 0.335200 0.220800\nvt 0.345600 0.231300\nvt 0.341900 0.233500\nvt 0.352700 0.229300\nvt 0.358300 0.242700\nvt 0.352500 0.244500\nvt 0.348700 0.245800\nvt 0.359000 0.258900\nvt 0.355500 0.260600\nvt 0.370300 0.271700\nvt 0.364700 0.273400\nvt 0.360800 0.274800\nvt 0.368700 0.286100\nvt 0.365900 0.287100\nvt 0.374800 0.284900\nvt 0.379000 0.296900\nvt 0.372700 0.298400\nvt 0.370200 0.299900\nvt 0.377100 0.311600\nvt 0.375000 0.313000\nvt 0.386300 0.322400\nvt 0.382800 0.325700\nvt 0.379700 0.326700\nvt 0.718500 0.055400\nvt 0.707600 0.041300\nvt 0.724000 0.031000\nvt 0.701200 0.030200\nvt 0.718900 0.022500\nvt 0.710100 0.073700\nvt 0.711900 0.087600\nvt 0.691600 0.079000\nvt 0.692800 0.064500\nvt 0.679500 0.060300\nvt 0.691200 0.096200\nvt 0.674300 0.087300\nvt 0.708800 0.102400\nvt 0.702300 0.121000\nvt 0.685500 0.114400\nvt 0.667800 0.107400\nvt 0.695100 0.137100\nvt 0.677800 0.130500\nvt 0.660000 0.126400\nvt 0.685600 0.157700\nvt 0.670500 0.152500\nvt 0.650500 0.146000\nvt 0.673100 0.173000\nvt 0.662800 0.170800\nvt 0.643800 0.163300\nvt 0.664100 0.190900\nvt 0.656100 0.186700\nvt 0.638700 0.179100\nvt 0.656500 0.204100\nvt 0.647900 0.199600\nvt 0.634900 0.193300\nvt 0.647100 0.219000\nvt 0.640300 0.213100\nvt 0.629400 0.207700\nvt 0.633500 0.226200\nvt 0.625300 0.221100\nvt 0.631100 0.241100\nvt 0.625400 0.238700\nvt 0.619200 0.235500\nvt 0.624100 0.251000\nvt 0.620200 0.249000\nvt 0.614200 0.246200\nvt 0.617400 0.266200\nvt 0.611600 0.264500\nvt 0.606800 0.261600\nvt 0.608300 0.285700\nvt 0.603300 0.282800\nvt 0.597800 0.280700\nvt 0.597600 0.302300\nvt 0.591600 0.301300\nvt 0.587700 0.297500\nvt 0.582700 0.322500\nvt 0.580100 0.319600\nvt 0.576100 0.315200\nvt 0.567500 0.338400\nvt 0.563300 0.336700\nvt 0.560500 0.334800\nvt 0.711500 0.063400\nvt 0.698100 0.053700\nvt 0.689900 0.041600\nvt 0.684800 0.050900\nvt 0.059900 0.981800\nvt 0.080000 0.982500\nvt 0.075200 0.993700\nvt 0.036200 0.974400\nvt 0.019200 0.964000\nvt 0.024600 0.956300\nvt 0.066800 0.972200\nvt 0.087000 0.968200\nvt 0.024000 0.980700\nvt 0.013400 0.972900\nvt 0.104700 0.978700\nvt 0.099000 0.990500\nvt 0.127500 0.968500\nvt 0.126500 0.979300\nvt 0.128000 0.989800\nvt 0.147500 0.976300\nvt 0.148800 0.989100\nvt 0.165800 0.966800\nvt 0.167300 0.977200\nvt 0.167400 0.988800\nvt 0.187200 0.967500\nvt 0.187100 0.976400\nvt 0.187000 0.986600\nvt 0.203200 0.965800\nvt 0.202700 0.976400\nvt 0.203100 0.987100\nvt 0.219400 0.968900\nvt 0.219800 0.978200\nvt 0.217200 0.988200\nvt 0.236100 0.974000\nvt 0.235400 0.981800\nvt 0.233400 0.992800\nvt 0.248100 0.977200\nvt 0.247700 0.984700\nvt 0.247200 0.993700\nvt 0.264600 0.975800\nvt 0.266500 0.983200\nvt 0.267500 0.990300\nvt 0.281300 0.974400\nvt 0.283500 0.981000\nvt 0.285700 0.987700\nvt 0.297300 0.972000\nvt 0.298200 0.979200\nvt 0.299400 0.985400\nvt 0.316500 0.972700\nvt 0.317500 0.978600\nvt 0.317900 0.985100\nvt 0.335800 0.973900\nvt 0.337000 0.978100\nvt 0.336400 0.984200\nvt 0.361300 0.975300\nvt 0.361200 0.979300\nvt 0.359800 0.983800\nvt 0.392600 0.982300\nvt 0.393500 0.984700\nvt 0.392900 0.986800\nvt 0.044200 0.979900\nvt 0.043400 0.965900\nvt 0.035800 0.987600\nvt 0.053900 0.970800\nvt 0.051700 0.991000\nvt 0.396600 0.922000\nvt 0.426400 0.921700\nvt 0.422100 0.938200\nvt 0.362400 0.902100\nvt 0.356000 0.912600\nvt 0.329700 0.892000\nvt 0.399300 0.907200\nvt 0.431300 0.905300\nvt 0.349600 0.922300\nvt 0.332300 0.904500\nvt 0.451900 0.919700\nvt 0.448500 0.934900\nvt 0.475200 0.906700\nvt 0.476500 0.919300\nvt 0.478800 0.933500\nvt 0.495000 0.908200\nvt 0.498000 0.919500\nvt 0.500700 0.931100\nvt 0.516200 0.907100\nvt 0.517600 0.917800\nvt 0.521100 0.929400\nvt 0.535100 0.915900\nvt 0.538600 0.927900\nvt 0.535400 0.906500\nvt 0.548700 0.905500\nvt 0.549700 0.913500\nvt 0.552300 0.926400\nvt 0.565400 0.911800\nvt 0.567300 0.923400\nvt 0.581600 0.900600\nvt 0.582000 0.909000\nvt 0.583700 0.920200\nvt 0.598900 0.907600\nvt 0.597900 0.916500\nvt 0.614700 0.898100\nvt 0.617400 0.904600\nvt 0.619100 0.911600\nvt 0.631600 0.895100\nvt 0.634700 0.901100\nvt 0.637700 0.907500\nvt 0.646600 0.890800\nvt 0.647800 0.897100\nvt 0.649700 0.903000\nvt 0.663600 0.887500\nvt 0.665600 0.892700\nvt 0.666900 0.898900\nvt 0.682000 0.884800\nvt 0.683700 0.888400\nvt 0.684100 0.894400\nvt 0.705000 0.881200\nvt 0.705400 0.884900\nvt 0.705400 0.890000\nvt 0.727100 0.879500\nvt 0.728100 0.881700\nvt 0.728100 0.884000\nvt 0.376100 0.920600\nvt 0.369600 0.934000\nvt 0.379200 0.907100\nvt 0.394700 0.935900\nvt 0.404000 0.961700\nvt 0.434100 0.966100\nvt 0.428500 0.980700\nvt 0.344600 0.923100\nvt 0.344500 0.934200\nvt 0.324000 0.926700\nvt 0.406900 0.948900\nvt 0.439100 0.951200\nvt 0.345400 0.950500\nvt 0.332200 0.940100\nvt 0.459500 0.966200\nvt 0.455900 0.979500\nvt 0.482600 0.952300\nvt 0.483700 0.964300\nvt 0.485700 0.976400\nvt 0.504600 0.961400\nvt 0.507300 0.972100\nvt 0.504900 0.950100\nvt 0.523200 0.947100\nvt 0.524600 0.957700\nvt 0.528200 0.969100\nvt 0.542800 0.955100\nvt 0.546400 0.967100\nvt 0.543100 0.945600\nvt 0.557400 0.943300\nvt 0.557900 0.953100\nvt 0.560600 0.965900\nvt 0.574200 0.951500\nvt 0.576000 0.963300\nvt 0.572600 0.941200\nvt 0.589700 0.937800\nvt 0.590800 0.949100\nvt 0.592400 0.960500\nvt 0.606400 0.947600\nvt 0.606700 0.958600\nvt 0.604500 0.934800\nvt 0.620800 0.931600\nvt 0.624000 0.944000\nvt 0.623700 0.953700\nvt 0.635500 0.927500\nvt 0.640200 0.940000\nvt 0.641800 0.950600\nvt 0.651100 0.924100\nvt 0.654700 0.936200\nvt 0.659500 0.943500\nvt 0.671100 0.932000\nvt 0.673200 0.941300\nvt 0.672400 0.920000\nvt 0.690900 0.917500\nvt 0.690800 0.927400\nvt 0.693800 0.935100\nvt 0.715000 0.922600\nvt 0.716400 0.930600\nvt 0.714400 0.915200\nvt 0.733200 0.913500\nvt 0.732200 0.919900\nvt 0.732000 0.926900\nvt 0.382300 0.956700\nvt 0.362800 0.945000\nvt 0.369300 0.935200\nvt 0.376000 0.967000\nvt 0.358700 0.958100\nvt 0.387200 0.943400\nvt 0.401800 0.974900\nvt 0.374900 0.103900\nvt 0.380300 0.119200\nvt 0.366500 0.122200\nvt 0.380700 0.037200\nvt 0.369700 0.046000\nvt 0.368000 0.025700\nvt 0.387600 0.101900\nvt 0.392200 0.116700\nvt 0.358600 0.057800\nvt 0.360800 0.042700\nvt 0.396300 0.133900\nvt 0.385000 0.139400\nvt 0.372500 0.141100\nvt 0.398600 0.159600\nvt 0.387100 0.163800\nvt 0.375000 0.169900\nvt 0.402000 0.183900\nvt 0.389800 0.187300\nvt 0.378700 0.194500\nvt 0.405800 0.205800\nvt 0.395000 0.210800\nvt 0.383000 0.219700\nvt 0.409600 0.227900\nvt 0.398400 0.231200\nvt 0.386600 0.238500\nvt 0.413300 0.241500\nvt 0.402100 0.246500\nvt 0.389900 0.252900\nvt 0.416700 0.256700\nvt 0.404500 0.263200\nvt 0.393500 0.268300\nvt 0.420200 0.274600\nvt 0.407700 0.280000\nvt 0.397100 0.284700\nvt 0.424100 0.288600\nvt 0.410300 0.294800\nvt 0.399900 0.297900\nvt 0.426200 0.306200\nvt 0.413000 0.312700\nvt 0.403000 0.315700\nvt 0.428900 0.321600\nvt 0.415300 0.329300\nvt 0.404400 0.335100\nvt 0.431700 0.336400\nvt 0.418600 0.341400\nvt 0.406800 0.347800\nvt 0.435200 0.361700\nvt 0.420500 0.363200\nvt 0.411500 0.367800\nvt 0.436400 0.383000\nvt 0.425700 0.384900\nvt 0.419400 0.386100\nvt 0.437200 0.413800\nvt 0.430100 0.414100\nvt 0.458100 0.441300\nvt 0.451500 0.449000\nvt 0.444200 0.431500\nvt 0.447600 0.454300\nvt 0.439000 0.433900\nvt 0.383600 0.085500\nvt 0.371500 0.085300\nvt 0.370200 0.064300\nvt 0.360000 0.089600\nvt 0.359200 0.072900\nvt 0.363400 0.106300\nvt 0.380600 0.059200\nvt 0.507300 0.772100\nvt 0.491200 0.771800\nvt 0.491800 0.762000\nvt 0.504800 0.782400\nvt 0.429700 0.787400\nvt 0.425300 0.766200\nvt 0.442400 0.768700\nvt 0.423900 0.746600\nvt 0.443800 0.750700\nvt 0.441800 0.786800\nvt 0.459700 0.769400\nvt 0.461300 0.754600\nvt 0.458800 0.786000\nvt 0.477200 0.771600\nvt 0.478200 0.759500\nvt 0.489700 0.786000\nvt 0.519700 0.779300\nvt 0.522100 0.770100\nvt 0.508500 0.762600\nvt 0.537300 0.771200\nvt 0.536800 0.777000\nvt 0.523200 0.763000\nvt 0.535900 0.763800\nvt 0.550500 0.774700\nvt 0.549700 0.764600\nvt 0.550900 0.770000\nvt 0.562100 0.771600\nvt 0.562400 0.774900\nvt 0.562300 0.768400\nvt 0.571400 0.773400\nvt 0.570900 0.770500\nvt 0.580300 0.770200\nvt 0.571300 0.768300\nvt 0.579900 0.767900\nvt 0.581500 0.773100\nvt 0.599100 0.766300\nvt 0.452300 0.425700\nvt 0.545800 0.872100\nvt 0.550100 0.882800\nvt 0.512300 0.876800\nvt 0.551200 0.892900\nvt 0.516000 0.891800\nvt 0.363000 0.895000\nvt 0.347400 0.872800\nvt 0.373200 0.874800\nvt 0.336500 0.850200\nvt 0.364200 0.851000\nvt 0.429600 0.895000\nvt 0.423700 0.874600\nvt 0.446400 0.872800\nvt 0.416800 0.853600\nvt 0.441300 0.855300\nvt 0.451600 0.893300\nvt 0.464500 0.874500\nvt 0.460900 0.858600\nvt 0.485600 0.893300\nvt 0.480900 0.874000\nvt 0.478600 0.859900\nvt 0.508900 0.865000\nvt 0.573500 0.888000\nvt 0.572100 0.871700\nvt 0.574300 0.879000\nvt 0.597000 0.879000\nvt 0.595900 0.872900\nvt 0.599200 0.885900\nvt 0.622700 0.876900\nvt 0.618400 0.872300\nvt 0.624800 0.880500\nvt 0.647300 0.869800\nvt 0.644600 0.866600\nvt 0.650800 0.872800\nvt 0.664500 0.864600\nvt 0.663400 0.862000\nvt 0.667700 0.868400\nvt 0.679600 0.860700\nvt 0.675200 0.857700\nvt 0.681600 0.863600\nvt 0.693000 0.854700\nvt 0.690500 0.851600\nvt 0.385400 0.894600\nvt 0.399500 0.875500\nvt 0.391000 0.851900\nvt 0.406300 0.894800\nvt 0.469100 0.894600\nvt 0.102300 0.437600\nvt 0.939800 0.450500\nvt 0.933900 0.459700\nvt 0.880500 0.456800\nvt 0.947400 0.426400\nvt 0.819100 0.441600\nvt 0.093300 0.380500\nvt 0.522600 0.323500\nvt 0.180800 0.274800\nvt 0.987000 0.190200\nvt 0.155900 0.094700\nvt 0.491300 0.036300\nvt 0.083900 0.131100\nvt 0.515000 0.163600\nvt 0.918800 0.274600\nvt 0.172700 0.366800\nvt 0.953100 0.401200\nvt 0.887800 0.423400\nvt 0.153500 0.069700\nvt 0.133800 0.134800\nvt 0.943300 0.417700\nvt 0.511400 0.163600\nvt 0.518200 0.281100\nvt 0.078300 0.087600\nvt 0.820700 0.370700\nvt 0.168300 0.381300\nvt 0.083700 0.403500\nvt 0.149300 0.393100\nvt 0.148700 0.396100\nvt 0.156000 0.391200\nvt 0.487600 0.462700\nvt 0.871800 0.419000\nvt 0.814900 0.441300\nvt 0.953700 0.303300\nvt 0.175800 0.274600\nvt 0.148100 0.042000\nvt 0.127200 0.184200\nvt 0.863300 0.064300\nvt 0.082200 0.018400\nvt 0.873900 0.056200\nvt 0.485500 0.067800\nvt 0.488600 0.271600\nvt 0.870500 0.277100\nvt 0.834000 0.266700\nvt 0.911700 0.273800\nvt 0.927700 0.452800\nvt 0.168900 0.397800\nvt 0.810300 0.467900\nvt 0.932600 0.457800\nvt 0.090600 0.443900\nvt 0.879000 0.453900\nvt 0.976700 0.278200\nvt 0.872200 0.444600\nvt 0.085400 0.017300\nvt 0.087400 0.447900\nvt 0.080900 0.018800\nvt 0.040700 0.173900\nvt 0.079600 0.019100\nvt 0.085400 0.450700\nvt 0.495200 0.462700\nvt 0.503900 0.358000\nvt 0.698200 0.238600\nvt 0.079800 0.955700\nvt 0.534800 0.563400\nvt 0.469900 0.645400\nvt 0.487700 0.830500\nvt 0.428900 0.836000\nvt 0.628200 0.839100\nvt 0.229500 0.045400\nvt 0.364600 0.256700\nvt 0.383500 0.310600\nvt 0.730300 0.039700\nvt 0.639400 0.230100\nvt 0.103800 0.968200\nvt 0.146900 0.966800\nvt 0.329400 0.879500\nvt 0.449400 0.904500\nvt 0.564200 0.902700\nvt 0.598900 0.900500\nvt 0.318000 0.913500\nvt 0.457100 0.951700\nvt 0.376500 0.010400\nvt 0.446200 0.410400\nvt 0.476200 0.787400\nvt 0.599600 0.767700\nvt 0.598500 0.763300\nvt 0.694600 0.856100\nvn -0.986900 -0.059200 0.150200\nvn -0.983800 -0.059800 0.168800\nvn -0.913600 -0.243800 0.325300\nvn -0.987400 0.043900 0.152200\nvn -0.927100 -0.127300 0.352500\nvn -0.927200 0.049000 0.371300\nvn -0.853300 -0.103400 0.511000\nvn -0.588500 -0.413200 0.694900\nvn -0.530200 -0.540800 0.652900\nvn -0.406900 -0.642200 0.649500\nvn -0.448100 -0.535300 0.716000\nvn -0.010600 0.896700 -0.442500\nvn 0.221000 0.871800 -0.437100\nvn 0.044800 0.785000 -0.617800\nvn 0.839500 -0.217900 0.497700\nvn 0.772800 -0.126300 0.621900\nvn 0.929700 0.204400 0.306400\nvn -0.759200 0.560900 -0.330100\nvn -0.877300 0.467800 -0.107100\nvn -0.911600 0.407800 -0.051500\nvn -0.833900 -0.355100 0.422500\nvn -0.842800 -0.277900 0.461000\nvn -0.838500 -0.289500 0.461700\nvn 0.999100 -0.005200 0.042500\nvn 0.979200 0.183300 -0.086800\nvn 0.980700 -0.027500 0.193500\nvn -0.974300 0.049900 0.219500\nvn -0.865400 -0.253000 0.432400\nvn -0.735900 -0.336700 0.587400\nvn 0.984600 0.171500 -0.032700\nvn 0.971500 0.227100 0.067700\nvn 0.965200 0.261200 0.012900\nvn -0.846000 0.326200 -0.421600\nvn -0.592100 0.609900 -0.526800\nvn -0.528400 0.549600 -0.647000\nvn -0.533800 -0.596200 0.599700\nvn -0.408400 -0.659000 0.631600\nvn -0.257900 -0.741800 0.618900\nvn -0.019700 0.834300 -0.550900\nvn 0.387600 0.678400 -0.624100\nvn 0.973900 0.214900 -0.072400\nvn 0.505300 -0.676900 0.535200\nvn 0.420700 -0.770200 0.479300\nvn 0.636200 -0.627000 0.449400\nvn 0.979800 -0.080800 0.182700\nvn 0.879800 -0.257300 0.399500\nvn 0.848000 0.481900 0.220300\nvn -0.538400 0.702400 -0.465500\nvn 0.273000 0.836100 -0.475700\nvn 0.352800 0.713500 -0.605300\nvn 0.432300 0.759400 -0.486200\nvn 0.652300 0.674300 -0.346100\nvn -0.149600 0.702700 -0.695500\nvn 0.270900 0.864200 -0.423900\nvn -0.312000 0.884400 -0.347000\nvn -0.487800 0.752000 -0.443200\nvn -0.942300 0.299200 0.150100\nvn 0.941600 0.335000 -0.035100\nvn 0.939700 0.287600 0.184900\nvn 0.871600 0.471700 -0.133500\nvn 0.742200 -0.048700 0.668400\nvn 0.752200 -0.021300 0.658600\nvn 0.790900 0.024700 0.611400\nvn -0.072600 0.769600 -0.634300\nvn 0.191200 0.768500 -0.610600\nvn 0.929400 0.361600 -0.073500\nvn -0.752000 -0.413400 0.513400\nvn -0.725900 -0.423800 0.541600\nvn -0.566000 -0.557700 0.607100\nvn 0.191600 0.865800 -0.462200\nvn 0.783700 0.567700 -0.251900\nvn 0.575900 0.717000 -0.392700\nvn 0.259900 0.707900 -0.656700\nvn 0.391500 0.415200 -0.821200\nvn 0.069900 0.451000 -0.889800\nvn 0.180300 -0.766200 0.616700\nvn 0.183000 -0.813700 0.551600\nvn 0.253400 -0.819600 0.513800\nvn 0.818800 -0.198900 0.538500\nvn 0.824500 -0.141800 0.547800\nvn 0.921400 -0.192600 0.337500\nvn 0.799100 0.042100 0.599600\nvn 0.840700 0.088300 0.534200\nvn 0.789300 0.066100 0.610400\nvn -0.261300 0.899700 -0.349500\nvn -0.239100 0.870700 -0.429700\nvn -0.752500 0.617000 -0.230400\nvn 0.798100 -0.308400 0.517600\nvn 0.982600 0.025000 0.184100\nvn 0.926000 0.086200 0.367500\nvn 0.056600 -0.772800 0.632100\nvn -0.161500 -0.749600 0.641900\nvn -0.081600 -0.799400 0.595200\nvn 0.008300 -0.517900 0.855400\nvn 0.762700 -0.138200 0.631800\nvn 0.716800 0.032100 0.696500\nvn 0.908700 0.186600 0.373400\nvn 0.957100 0.203200 0.206300\nvn 0.528400 -0.105400 0.842400\nvn -0.081000 -0.411000 0.908000\nvn -0.308400 -0.014900 0.951100\nvn -0.226000 -0.002500 0.974100\nvn -0.849500 -0.152200 0.505100\nvn -0.955300 -0.018100 0.295000\nvn -0.969500 0.243200 0.031400\nvn -0.828100 -0.145000 0.541500\nvn -0.691600 -0.042300 0.721000\nvn -0.410800 -0.203400 0.888700\nvn -0.498700 0.446600 -0.742800\nvn -0.146700 0.503400 -0.851500\nvn -0.321600 0.340600 -0.883500\nvn -0.355600 -0.481300 0.801100\nvn -0.366300 -0.474500 0.800300\nvn -0.222000 -0.289700 0.931000\nvn 0.777000 -0.047600 0.627700\nvn 0.789000 0.032100 0.613500\nvn 0.970600 0.234000 0.055400\nvn -0.809100 -0.151900 0.567700\nvn -0.822700 0.068500 0.564300\nvn -0.758900 0.022900 0.650700\nvn -0.573900 0.386100 -0.722200\nvn -0.885600 0.362700 -0.290000\nvn -0.884800 0.394100 -0.248700\nvn 0.993000 0.089500 0.076700\nvn 0.994800 0.012800 0.100400\nvn 0.989900 -0.021900 0.140200\nvn -0.975900 0.012000 0.217800\nvn -0.752400 -0.283100 0.594700\nvn -0.909500 0.047200 0.413100\nvn 0.969700 0.243700 0.014500\nvn 0.951600 0.247800 -0.181700\nvn 0.886600 0.274000 -0.372500\nvn -0.661200 0.275300 -0.697800\nvn -0.412900 0.422000 -0.807100\nvn -0.098400 0.288700 -0.952300\nvn -0.417600 -0.445200 0.792000\nvn -0.440400 -0.093900 0.892800\nvn -0.368700 -0.076100 0.926400\nvn 0.241800 0.495700 -0.834100\nvn 0.567500 0.332400 -0.753200\nvn 0.976700 0.124600 -0.174600\nvn 0.358700 -0.448900 0.818400\nvn -0.029300 0.053300 0.998100\nvn 0.128300 0.098300 0.986800\nvn 0.660600 0.705600 -0.256200\nvn 0.597900 0.747600 0.288900\nvn 0.808800 0.321900 0.492100\nvn -0.212400 0.460300 -0.862000\nvn 0.486100 0.536800 -0.689600\nvn 0.427900 0.359800 -0.829100\nvn 0.748800 0.496500 -0.438900\nvn 0.802200 0.332700 -0.495700\nvn 0.390200 0.345000 -0.853600\nvn 0.102800 0.514500 -0.851300\nvn -0.568800 0.452500 -0.686700\nvn -0.752500 0.282100 -0.595000\nvn -0.967600 0.181100 0.175900\nvn 0.944000 0.313700 0.101500\nvn 0.970300 0.239700 0.030500\nvn 0.732300 0.357800 -0.579400\nvn 0.149600 0.536700 -0.830400\nvn 0.434500 0.373700 -0.819500\nvn 0.934900 0.269400 -0.230900\nvn -0.695900 -0.270800 0.665000\nvn -0.641600 -0.025500 0.766600\nvn -0.513600 -0.076400 0.854600\nvn 0.877600 0.116100 0.465100\nvn 0.965900 0.244400 -0.084700\nvn 0.964700 0.126900 -0.230800\nvn 0.717500 0.309500 -0.624000\nvn -0.014500 0.414100 -0.910100\nvn 0.423400 0.370500 -0.826700\nvn 0.437100 0.321800 -0.839800\nvn 0.184200 -0.432100 0.882800\nvn -0.152100 0.015500 0.988200\nvn -0.074500 0.027100 0.996800\nvn -0.447000 0.063500 0.892300\nvn -0.501600 0.131400 0.855000\nvn -0.465300 0.131900 0.875200\nvn -0.903900 0.295800 -0.308900\nvn -0.468300 0.633600 -0.615800\nvn -0.542200 0.374900 -0.751900\nvn 0.864200 0.070400 0.498200\nvn 0.546200 0.059500 0.835500\nvn 0.604100 0.107600 0.789500\nvn 0.842100 0.083100 0.532900\nvn 0.866400 0.094200 0.490400\nvn 0.897000 0.019200 0.441600\nvn -0.893300 0.276400 -0.354400\nvn -0.605100 0.379200 -0.700100\nvn -0.540800 0.370300 -0.755200\nvn 0.191200 0.065700 0.979300\nvn 0.803800 0.068200 0.591000\nvn 0.728500 0.092000 0.678800\nvn 0.962200 0.119500 0.244800\nvn 0.945200 0.061000 0.320800\nvn 0.586700 -0.051300 0.808200\nvn -0.389100 0.091200 0.916700\nvn -0.405300 0.131400 0.904700\nvn -0.329400 0.129500 0.935300\nvn -0.955700 0.285700 0.070900\nvn -0.970600 0.187500 0.150900\nvn -0.830000 0.155000 0.535800\nvn -0.600400 0.042400 0.798600\nvn -0.729100 0.098100 0.677400\nvn -0.478700 0.032100 0.877300\nvn -0.451800 0.396800 -0.799000\nvn -0.315900 0.390600 -0.864700\nvn -0.337200 0.388900 -0.857300\nvn -0.122600 -0.160600 0.979400\nvn -0.224800 -0.024500 0.974100\nvn -0.116400 -0.035900 0.992600\nvn 0.798000 0.017400 0.602400\nvn 0.812500 0.006600 0.582900\nvn 0.988200 0.114100 0.102100\nvn -0.769900 0.123600 0.626100\nvn -0.784200 0.140700 0.604400\nvn -0.774100 0.141700 0.617000\nvn -0.491500 0.386700 -0.780300\nvn -0.883200 0.354700 -0.306600\nvn -0.867400 0.411900 -0.279000\nvn 0.994900 0.088200 0.047800\nvn 0.991600 0.107000 -0.072300\nvn 0.975300 0.135700 -0.174300\nvn -0.867400 0.344600 -0.358800\nvn -0.881200 0.188800 0.433400\nvn -0.749200 0.125400 0.650300\nvn 0.898700 0.269900 -0.345700\nvn 0.886700 0.238200 -0.396200\nvn 0.680200 0.301200 -0.668300\nvn -0.130900 0.248000 -0.959900\nvn -0.058300 0.263100 -0.963000\nvn -0.420000 0.197600 -0.885700\nvn 0.582200 0.296400 -0.757000\nvn 0.584500 0.304900 -0.751900\nvn 0.970500 0.145200 -0.192400\nvn -0.240200 0.073300 0.967900\nvn -0.116900 0.113900 0.986600\nvn 0.056900 0.098100 0.993500\nvn 0.998800 0.015700 -0.046100\nvn 0.746100 0.066600 0.662500\nvn 0.680400 0.066600 0.729700\nvn 0.318600 0.314300 -0.894200\nvn 0.305900 0.331100 -0.892600\nvn 0.063500 0.323600 -0.944000\nvn 0.818700 0.310000 -0.483400\nvn 0.882900 0.222700 -0.413300\nvn 0.506300 0.286400 -0.813400\nvn -0.290700 0.385800 -0.875500\nvn -0.680100 0.361200 -0.637900\nvn -0.614200 0.373700 -0.695000\nvn -0.916200 0.191400 0.352000\nvn 0.983400 0.147200 0.106100\nvn 0.988600 0.106900 0.106400\nvn 0.939500 0.140100 -0.312400\nvn -0.630100 0.095200 0.770600\nvn -0.680200 0.137100 0.720100\nvn -0.569300 0.133500 0.811200\nvn 0.374700 0.308000 -0.874500\nvn 0.288100 0.289800 -0.912700\nvn 0.918400 0.212800 -0.333400\nvn 0.993500 0.059600 0.096900\nvn 0.856700 -0.001100 0.515800\nvn 0.917200 -0.050400 0.395200\nvn 0.954700 0.162100 -0.249500\nvn 0.916000 0.184600 -0.356000\nvn 0.754300 0.250600 -0.606800\nvn -0.323400 0.090500 0.941900\nvn -0.215500 0.085100 0.972800\nvn -0.336500 0.114200 0.934700\nvn -0.303500 0.086900 0.948800\nvn -0.250900 0.126100 0.959700\nvn -0.175500 0.120700 0.977000\nvn 0.892100 0.037600 0.450300\nvn 0.014000 0.359900 -0.932900\nvn 0.376200 0.325300 -0.867500\nvn 0.340400 0.276600 -0.898600\nvn -0.431100 -0.127000 0.893300\nvn -0.140600 -0.172400 0.974900\nvn -0.162700 0.018700 0.986500\nvn 0.886700 -0.138800 0.441100\nvn 0.909400 -0.144700 0.389900\nvn 0.903100 -0.178000 0.390800\nvn -0.780900 0.309200 -0.542800\nvn -0.494200 0.357500 -0.792400\nvn -0.499500 0.285900 -0.817800\nvn 0.258400 0.083900 0.962400\nvn 0.676000 0.085800 0.731800\nvn 0.631800 0.037100 0.774200\nvn 0.729700 -0.017400 0.683500\nvn 0.968300 0.052000 0.244400\nvn 0.978700 -0.004400 0.205000\nvn -0.257500 0.107700 0.960200\nvn -0.804700 0.095400 0.585900\nvn -0.983100 0.073000 0.168000\nvn -0.973400 -0.018200 0.228200\nvn -0.741200 0.047800 0.669500\nvn -0.847100 -0.041400 0.529800\nvn -0.720900 -0.028900 0.692400\nvn -0.475100 0.366300 -0.800100\nvn -0.302400 0.369700 -0.878500\nvn -0.430800 0.265800 -0.862400\nvn -0.375100 0.052700 0.925400\nvn -0.310200 0.039100 0.949900\nvn -0.475000 -0.011600 0.879900\nvn -0.742700 0.108500 0.660800\nvn -0.764700 0.101800 0.636300\nvn -0.804000 0.025100 0.594100\nvn -0.598200 0.303000 -0.741900\nvn -0.728300 0.161500 -0.665900\nvn -0.967700 0.062800 -0.244100\nvn 0.942400 0.127400 -0.309400\nvn 0.993300 0.049000 -0.104700\nvn 0.976800 0.007700 -0.213800\nvn -0.985200 0.058300 -0.161200\nvn -0.886100 0.077200 0.456900\nvn -0.812900 -0.017400 0.582100\nvn 0.599700 0.290800 -0.745500\nvn 0.925400 0.160900 -0.343000\nvn 0.899700 0.077400 -0.429500\nvn 0.070900 0.280700 -0.957200\nvn 0.241200 0.209600 -0.947500\nvn -0.243600 0.214200 -0.945900\nvn 0.078500 0.090800 0.992800\nvn -0.076400 0.095100 0.992500\nvn 0.068800 0.057300 0.996000\nvn 0.996200 0.038500 -0.078700\nvn 0.663000 0.280200 -0.694200\nvn 0.756500 0.145800 -0.637500\nvn 0.929300 0.058200 0.364500\nvn 0.640200 0.079000 0.764100\nvn 0.672000 0.044800 0.739100\nvn 0.103900 0.365400 -0.925000\nvn 0.252600 0.347900 -0.902800\nvn 0.350500 0.234000 -0.906800\nvn 0.654300 0.226400 -0.721500\nvn 0.937500 0.133900 -0.321200\nvn 0.953200 0.051900 -0.297900\nvn -0.222000 0.368100 -0.902900\nvn -0.579500 0.357600 -0.732300\nvn -0.558600 0.275500 -0.782300\nvn -0.956300 -0.029700 0.290700\nvn 0.990100 0.090900 0.106300\nvn 0.996500 0.029100 0.078400\nvn 0.978400 0.053400 -0.199700\nvn 0.988800 0.084400 -0.123000\nvn 0.483900 0.280800 -0.828800\nvn 0.504500 0.179000 -0.844600\nvn -0.470300 0.139900 0.871300\nvn -0.616100 0.125500 0.777500\nvn -0.633000 0.071700 0.770800\nvn 0.938500 -0.075700 0.336900\nvn 0.935500 -0.054000 0.349100\nvn 0.966400 -0.051700 0.251600\nvn 0.661200 0.263700 -0.702400\nvn 0.855200 0.185900 -0.483700\nvn 0.773900 0.146200 -0.616200\nvn -0.095300 0.100300 0.990400\nvn -0.171200 0.103800 0.979700\nvn -0.029800 0.077000 0.996600\nvn -0.759500 -0.228000 -0.609100\nvn -0.791800 -0.225500 -0.567600\nvn -0.801700 -0.158200 -0.576300\nvn 0.923900 -0.093400 0.370900\nvn 0.921100 -0.144000 0.361600\nvn 0.990100 -0.139000 0.019400\nvn 0.917400 -0.174000 0.357800\nvn 0.399300 -0.089700 -0.912400\nvn 0.409500 -0.182900 -0.893800\nvn -0.038800 -0.185800 -0.981800\nvn -0.371800 -0.179300 0.910800\nvn -0.380300 -0.176600 0.907800\nvn -0.549300 -0.138600 0.824000\nvn 0.745400 -0.111300 0.657300\nvn 0.788700 -0.159500 0.593700\nvn 0.449400 -0.182400 0.874500\nvn -0.875700 -0.097200 -0.473000\nvn -0.634400 -0.078200 -0.769000\nvn -0.642900 -0.168500 -0.747100\nvn 0.061200 -0.010300 0.998000\nvn 0.979700 -0.120200 0.160600\nvn 0.978500 -0.145100 0.146500\nvn 0.858500 -0.137500 0.493900\nvn -0.992600 -0.112500 0.046200\nvn -0.991000 -0.133500 0.011400\nvn -0.964400 -0.133300 0.228200\nvn -0.850200 -0.103000 0.516200\nvn -0.861500 -0.193200 0.469500\nvn -0.714500 -0.160100 0.681100\nvn -0.898100 -0.015800 0.439500\nvn -0.927000 -0.047300 0.372100\nvn -0.948400 -0.110300 0.297200\nvn -0.383300 -0.002600 0.923600\nvn -0.448900 -0.012000 0.893500\nvn -0.503800 -0.114300 0.856200\nvn -0.842200 -0.168200 -0.512200\nvn -0.835600 -0.233000 -0.497500\nvn -0.952700 -0.234300 -0.193400\nvn 0.979900 -0.063400 -0.189200\nvn 0.976800 -0.098200 -0.190100\nvn 0.952400 -0.105100 -0.286200\nvn -0.991100 -0.123600 -0.050000\nvn -0.837200 -0.079500 0.541100\nvn -0.858800 -0.145300 0.491300\nvn 0.916600 -0.089900 -0.389500\nvn 0.917500 -0.099400 -0.384900\nvn 0.762500 -0.100500 -0.639100\nvn -0.488000 -0.027500 -0.872400\nvn 0.078100 -0.068600 -0.994600\nvn -0.033000 -0.004100 -0.999400\nvn 0.581100 -0.133800 -0.802700\nvn 0.521900 -0.139000 -0.841600\nvn 0.944600 -0.113900 -0.307800\nvn 0.390900 -0.081800 0.916800\nvn 0.432400 -0.208800 0.877100\nvn 0.546300 -0.162300 0.821700\nvn 0.811200 -0.088300 0.578100\nvn 0.855500 -0.131900 0.500600\nvn 0.969800 -0.106500 0.219200\nvn 0.312800 -0.111100 -0.943300\nvn 0.302600 -0.103000 -0.947500\nvn -0.054900 -0.099600 -0.993500\nvn 0.937700 -0.099600 -0.332900\nvn 0.927400 -0.115200 -0.355800\nvn 0.686800 -0.075200 -0.723000\nvn -0.450500 -0.124000 -0.884100\nvn -0.718700 -0.120300 -0.684800\nvn -0.758600 -0.183100 -0.625300\nvn -0.956400 -0.217700 0.194900\nvn 0.987500 -0.134200 0.082400\nvn 0.979500 -0.171500 0.105900\nvn 0.971800 -0.144300 -0.186300\nvn -0.978300 -0.135100 0.156800\nvn -0.967300 -0.108400 0.229000\nvn -0.954100 -0.122600 0.273200\nvn 0.283200 -0.093700 -0.954500\nvn 0.224500 -0.034800 -0.973800\nvn 0.929000 -0.098800 -0.356800\nvn -0.671300 0.045900 0.739700\nvn -0.808500 0.023800 0.587900\nvn -0.837300 -0.060000 0.543400\nvn 0.888400 -0.093100 -0.449600\nvn 0.876800 -0.124300 -0.464500\nvn 0.718400 -0.152900 -0.678600\nvn 0.403900 -0.053900 0.913200\nvn 0.249200 -0.036700 0.967700\nvn 0.272400 -0.214900 0.937800\nvn -0.306200 -0.160300 0.938400\nvn -0.229700 -0.154100 0.960900\nvn -0.021100 -0.166300 0.985800\nvn -0.686400 -0.343500 -0.641000\nvn -0.748600 -0.330600 -0.574700\nvn -0.640200 -0.309300 -0.703100\nvn 0.987700 -0.024700 0.154400\nvn 0.994000 -0.010000 0.108500\nvn 0.998900 -0.019500 0.041500\nvn 0.877600 -0.060200 0.475700\nvn 0.022600 -0.149200 -0.988500\nvn 0.442400 -0.147800 -0.884500\nvn 0.524200 -0.119200 -0.843200\nvn -0.857700 -0.233200 -0.458100\nvn -0.793900 -0.222100 -0.566100\nvn -0.786300 -0.156900 -0.597600\nvn 0.716600 -0.166600 0.677300\nvn 0.621100 -0.193400 0.759500\nvn 0.331500 -0.166900 0.928600\nvn -0.719800 -0.146900 -0.678400\nvn -0.427200 -0.189600 -0.884000\nvn 0.103200 -0.201500 -0.974000\nvn 0.955700 -0.035000 0.292000\nvn 0.918300 -0.048700 0.392900\nvn 0.808000 0.018700 0.588800\nvn -0.288500 -0.178400 0.940700\nvn -0.301900 -0.180100 0.936200\nvn -0.323900 -0.147500 0.934500\nvn -0.885700 -0.097200 -0.453900\nvn -0.815300 -0.095000 -0.571100\nvn -0.669900 -0.147600 -0.727600\nvn -0.981600 -0.127000 0.142600\nvn -0.986500 -0.162800 -0.017200\nvn -0.986300 -0.147700 0.073200\nvn -0.948300 -0.070800 0.309400\nvn -0.975200 -0.108800 0.192600\nvn -0.983600 -0.123500 0.131300\nvn -0.750200 -0.290900 -0.593700\nvn 0.987500 -0.069500 -0.141700\nvn 0.994400 -0.058200 -0.087400\nvn 0.860900 -0.102500 -0.498200\nvn -0.973700 -0.075600 0.215000\nvn -0.980700 -0.086400 0.175200\nvn -0.999100 -0.040800 -0.007000\nvn 0.913600 -0.087500 -0.397000\nvn 0.853800 -0.102400 -0.510300\nvn 0.882400 -0.098500 -0.460000\nvn 0.804300 -0.080700 -0.588700\nvn 0.942400 -0.068700 -0.327300\nvn 0.650100 -0.071700 -0.756500\nvn 0.925400 -0.053100 -0.375100\nvn 0.845100 -0.077300 -0.528900\nvn -0.963200 0.043600 -0.265300\nvn -0.494900 -0.190200 0.847800\nvn -0.397700 -0.196100 0.896300\nvn -0.200300 -0.265100 0.943200\nvn 0.419300 -0.189500 0.887800\nvn 0.196900 -0.176400 0.964400\nvn 0.889400 -0.104700 0.444900\nvn 0.319300 -0.104600 -0.941800\nvn 0.840600 -0.102600 -0.531800\nvn 0.780400 -0.102100 -0.616800\nvn 0.994200 -0.062700 -0.087600\nvn 0.999000 -0.033200 -0.028800\nvn 0.977100 -0.054200 -0.205800\nvn -0.577900 -0.307000 -0.756200\nvn -0.845000 -0.142100 -0.515500\nvn -0.931000 -0.154200 -0.330900\nvn -0.957000 -0.203300 -0.206800\nvn -0.880300 -0.248100 -0.404400\nvn -0.942400 -0.230400 -0.242400\nvn 0.963100 -0.097700 0.250800\nvn 0.982000 -0.058500 0.179600\nvn 0.997700 -0.062500 -0.026200\nvn 0.972600 -0.071100 -0.221200\nvn 0.987500 -0.069300 -0.141600\nvn 0.795800 -0.091800 -0.598500\nvn -0.349700 -0.179600 0.919500\nvn -0.350800 -0.182300 0.918500\nvn -0.533500 -0.156800 0.831100\nvn 0.935300 -0.091500 -0.341800\nvn 0.756800 -0.133000 -0.639900\nvn 0.677000 -0.151000 -0.720300\nvn 0.119100 -0.765600 0.632200\nvn 0.770400 -0.482700 0.416500\nvn 0.769300 -0.208000 0.604000\nvn 0.827800 -0.092800 0.553200\nvn -0.986600 -0.162400 0.011700\nvn -0.978600 -0.148200 0.142400\nvn -0.924500 -0.241300 0.294900\nvn -0.689000 -0.149300 -0.709200\nvn -0.993700 -0.112200 0.000300\nvn -0.995000 -0.077000 0.063500\nvn -0.979200 -0.102600 0.175200\nvn -0.848000 -0.238800 0.473100\nvn -0.667100 -0.200000 0.717600\nvn -0.709300 -0.220600 0.669500\nvn -0.900500 -0.157400 0.405200\nvn -0.410800 -0.206200 -0.888100\nvn -0.390200 -0.212100 -0.895900\nvn -0.227400 -0.118700 -0.966500\nvn -0.982500 -0.064500 0.175000\nvn -0.982100 -0.049500 0.181500\nvn -0.177700 -0.103900 0.978500\nvn -0.989900 -0.106100 -0.093600\nvn -0.989600 -0.120400 -0.078200\nvn -0.891900 -0.034200 -0.450800\nvn 0.339400 -0.205900 0.917800\nvn 0.287400 -0.214300 0.933500\nvn 0.037900 -0.187000 0.981600\nvn -0.162100 -0.226500 0.960400\nvn -0.055600 -0.245800 0.967700\nvn -0.370300 -0.193600 0.908500\nvn 0.373600 -0.173000 0.911300\nvn 0.373500 -0.196200 0.906600\nvn 0.460500 -0.174700 0.870300\nvn 0.009000 -0.266400 0.963800\nvn -0.451100 -0.219700 0.865000\nvn -0.500400 -0.189900 0.844700\nvn -0.572100 -0.226200 0.788400\nvn 0.818600 -0.117800 0.562100\nvn 0.740200 -0.144300 0.656700\nvn 0.893700 -0.097500 0.437900\nvn 0.502100 -0.160800 -0.849700\nvn 0.474600 -0.183200 -0.860900\nvn 0.212200 -0.206400 -0.955200\nvn 0.916300 -0.134200 0.377400\nvn 0.942500 -0.114800 0.313700\nvn 0.943100 -0.118000 0.310600\nvn 0.939100 -0.117800 0.322900\nvn 0.570100 -0.166400 0.804600\nvn 0.537900 -0.165900 0.826500\nvn 0.660200 -0.154100 0.735100\nvn 0.972100 -0.155300 0.175500\nvn 0.981000 -0.122400 0.150700\nvn 0.991800 -0.123300 -0.033400\nvn 0.948300 -0.114600 0.295900\nvn 0.988400 -0.072700 0.133000\nvn 0.995800 -0.077800 -0.046500\nvn 0.901300 -0.104600 0.420300\nvn 0.892800 -0.097900 0.439700\nvn 0.948000 -0.071400 0.310200\nvn 0.098000 -0.008600 -0.995100\nvn 0.455100 -0.091300 -0.885700\nvn -0.116300 -0.048400 -0.992000\nvn 0.966900 -0.121900 -0.224200\nvn 0.961100 -0.085300 -0.262400\nvn 0.843500 -0.091600 -0.529200\nvn 0.919500 -0.094800 -0.381400\nvn 0.897100 -0.089700 -0.432600\nvn 0.695200 -0.097000 -0.712200\nvn 0.125900 -0.080200 -0.988800\nvn 0.159200 -0.092700 -0.982800\nvn -0.361900 -0.065800 -0.929900\nvn 0.970100 -0.096500 -0.222800\nvn 0.985300 -0.100400 -0.138500\nvn 0.982800 -0.085900 -0.163500\nvn -0.579100 -0.148300 -0.801600\nvn -0.459600 -0.143700 -0.876400\nvn -0.822100 -0.121600 -0.556200\nvn -0.982500 -0.060100 0.176000\nvn -0.992600 -0.044400 0.113100\nvn -0.988700 -0.045800 0.142700\nvn 0.981900 -0.100100 -0.160800\nvn 0.977200 -0.102500 -0.185600\nvn 0.989300 -0.084800 -0.118700\nvn 0.941900 -0.110700 -0.317200\nvn 0.991900 -0.085900 -0.093500\nvn 0.991200 -0.082700 -0.103200\nvn 0.932200 -0.112300 -0.344100\nvn 0.905900 -0.096600 -0.412200\nvn 0.766900 -0.110300 -0.632200\nvn -0.993300 -0.105400 -0.048000\nvn -0.962200 -0.101000 -0.252800\nvn -0.895000 -0.150200 -0.420000\nvn -0.585500 -0.144400 -0.797700\nvn -0.960400 -0.122100 0.250300\nvn -0.988100 -0.112200 0.104600\nvn -0.988600 -0.134000 -0.068100\nvn -0.858800 -0.149700 0.489900\nvn -0.930500 -0.088200 0.355400\nvn -0.722400 -0.095000 0.684900\nvn -0.087400 -0.045000 -0.995100\nvn 0.031300 -0.061900 -0.997600\nvn -0.212100 -0.032500 -0.976700\nvn 0.185700 0.869000 -0.458700\nvn 0.140300 0.856300 -0.497000\nvn 0.090600 0.862200 -0.498400\nvn -0.383100 0.091500 0.919200\nvn -0.187600 0.093700 0.977800\nvn -0.185500 0.082700 0.979100\nvn 0.914400 -0.042400 0.402500\nvn 0.924100 -0.084100 0.372700\nvn 0.917800 -0.078000 0.389400\nvn -0.666200 0.056400 -0.743600\nvn -0.723600 -0.051600 -0.688200\nvn -0.763500 -0.075700 -0.641300\nvn 0.927500 -0.079500 0.365200\nvn 0.940600 -0.067700 0.332500\nvn 0.996200 -0.066000 -0.057200\nvn 0.926600 -0.079600 0.367500\nvn 0.366300 0.157100 -0.917100\nvn 0.373100 0.036400 -0.927000\nvn -0.077600 0.053900 -0.995500\nvn 0.653600 0.011100 0.756700\nvn 0.717900 -0.026300 0.695600\nvn 0.331600 -0.020400 0.943200\nvn -0.781500 0.104200 -0.615100\nvn -0.538800 0.167000 -0.825700\nvn -0.594600 0.032800 -0.803300\nvn -0.046500 0.086900 0.995100\nvn 0.986100 -0.053500 0.157000\nvn 0.987200 -0.073800 0.141300\nvn 0.864000 -0.060200 0.499700\nvn -0.982000 -0.091700 0.165300\nvn -0.986500 -0.111600 0.119600\nvn -0.917300 -0.079000 0.390200\nvn -0.854200 -0.105000 0.509200\nvn -0.865600 -0.094600 0.491700\nvn -0.725500 -0.073400 0.684300\nvn -0.840500 -0.036700 0.540500\nvn -0.884600 -0.055200 0.462900\nvn -0.852300 -0.022500 0.522600\nvn -0.424300 -0.050900 0.904000\nvn -0.496700 -0.060100 0.865800\nvn -0.480100 -0.042100 0.876200\nvn -0.782700 -0.015700 -0.622100\nvn -0.813400 -0.110800 -0.571000\nvn -0.961700 -0.143200 -0.233600\nvn 0.973800 -0.053800 -0.221100\nvn 0.981100 -0.060900 -0.183800\nvn 0.932100 -0.054400 -0.358100\nvn -0.995300 -0.095800 0.012000\nvn -0.836900 -0.088900 0.540100\nvn -0.810100 -0.084400 0.580200\nvn 0.914800 -0.026500 -0.403100\nvn 0.896800 -0.063400 -0.437900\nvn 0.724100 -0.060100 -0.687000\nvn -0.290100 0.103800 -0.951300\nvn 0.183300 0.079300 -0.979800\nvn 0.143700 -0.020100 -0.989400\nvn 0.688300 0.014100 -0.725200\nvn 0.691300 -0.074300 -0.718700\nvn 0.980500 -0.061200 -0.186400\nvn 0.184700 0.072600 0.980100\nvn 0.244400 0.040700 0.968800\nvn 0.339700 0.027000 0.940100\nvn 0.722800 0.034100 0.690200\nvn 0.739800 -0.004700 0.672700\nvn 0.939100 -0.030500 0.342400\nvn 0.392600 0.056700 -0.917900\nvn 0.375600 -0.062600 -0.924600\nvn 0.158400 -0.067500 -0.985000\nvn 0.942300 -0.020500 -0.334100\nvn 0.920300 -0.057600 -0.387000\nvn 0.732500 -0.050000 -0.678900\nvn -0.379700 0.121800 -0.917000\nvn -0.632000 0.106900 -0.767600\nvn -0.705300 -0.024100 -0.708500\nvn -0.966900 -0.127600 0.220800\nvn 0.999000 -0.034500 0.027900\nvn 0.995500 -0.087600 0.036200\nvn 0.971200 -0.086500 -0.221800\nvn 0.471600 0.044900 -0.880600\nvn 0.395300 -0.044100 -0.917500\nvn 0.936600 -0.059800 -0.345300\nvn -0.523600 0.037800 0.851100\nvn -0.682900 0.014700 0.730400\nvn -0.750600 0.019900 0.660400\nvn 0.829300 0.016600 -0.558500\nvn 0.853100 -0.039100 -0.520200\nvn 0.691400 -0.010300 -0.722300\nvn 0.120500 0.077700 0.989700\nvn 0.046300 0.083500 0.995400\nvn 0.119900 0.073600 0.990100\nvn -0.859700 -0.264300 0.437100\nvn -0.881700 -0.328400 0.338700\nvn -0.968900 -0.094600 0.228400\nvn -0.989500 0.057800 0.132100\nvn -0.719200 -0.390100 0.574900\nvn -0.489100 -0.612500 0.620900\nvn -0.779500 -0.362300 0.511000\nvn -0.477600 -0.515200 0.711600\nvn -0.835800 -0.325100 0.442400\nvn -0.700200 -0.446700 0.556900\nvn -0.439900 0.805100 -0.397800\nvn -0.338100 0.741200 -0.579900\nvn -0.390800 0.848600 -0.356500\nvn 0.137900 0.899500 -0.414500\nvn 0.233600 0.880700 -0.412100\nvn 0.963200 0.139900 0.229600\nvn 0.315000 0.842000 -0.437900\nvn 0.983800 0.033500 0.176100\nvn 0.898500 -0.264700 0.350000\nvn -0.839200 0.521600 -0.154100\nvn -0.806500 0.555200 -0.203400\nvn -0.597400 0.621600 -0.506600\nvn -0.819800 -0.355500 0.448800\nvn -0.690000 -0.511500 0.512100\nvn -0.728100 -0.517300 0.449700\nvn 0.982700 0.051900 0.177600\nvn 0.673200 0.652200 -0.348500\nvn 0.963100 0.231400 -0.137200\nvn 0.965500 0.216300 -0.144700\nvn -0.916600 -0.114100 0.383100\nvn -0.987000 0.143200 0.073400\nvn -0.977100 -0.023200 0.211300\nvn 0.964200 0.255100 -0.071700\nvn 0.311000 0.850200 -0.424700\nvn 0.931500 0.343400 -0.119400\nvn 0.986900 0.158000 -0.032000\nvn -0.695500 0.419100 -0.583700\nvn -0.975000 0.161800 -0.151900\nvn -0.828200 0.449300 -0.335100\nvn -0.378700 -0.678900 0.629000\nvn -0.281800 -0.696400 0.660000\nvn -0.395200 -0.651300 0.647800\nvn -0.525900 -0.595300 0.607500\nvn 0.722700 0.599400 -0.343900\nvn 0.799200 0.512600 -0.313700\nvn -0.014100 0.864500 -0.502500\nvn 0.807900 -0.445200 0.386000\nvn 0.974900 -0.117700 0.189000\nvn 0.823700 -0.429800 0.369900\nvn 0.442900 -0.719900 0.534300\nvn 0.993600 0.082200 0.076800\nvn 0.667300 -0.597100 0.445100\nvn 0.993300 0.084200 0.079200\nvn -0.435700 0.598900 -0.671900\nvn -0.500100 0.753900 -0.426000\nvn -0.374100 0.716100 -0.589300\nvn -0.573700 0.669800 -0.471400\nvn 0.123800 0.777500 -0.616500\nvn 0.237100 0.878600 -0.414600\nvn -0.365300 0.872100 -0.325500\nvn -0.959700 0.218000 0.177500\nvn -0.973800 0.067400 0.217400\nvn -0.952200 0.305000 0.012700\nvn 0.896100 0.426300 -0.123800\nvn 0.945400 0.322200 -0.048100\nvn 0.977400 0.211100 0.014900\nvn 0.718300 -0.000100 0.695700\nvn 0.941900 0.310600 -0.127900\nvn 0.947100 0.294500 -0.127500\nvn 0.147600 0.854600 -0.497800\nvn -0.659900 -0.501900 0.559000\nvn -0.648000 -0.521500 0.555100\nvn -0.054500 0.822100 -0.566700\nvn 0.107300 0.873400 -0.475000\nvn 0.245300 0.856200 -0.454600\nvn 0.081000 0.725000 -0.684000\nvn 0.279600 0.829900 -0.482700\nvn 0.305900 -0.748900 0.587800\nvn 0.058400 -0.803600 0.592200\nvn -0.055300 -0.782800 0.619800\nvn 0.891900 -0.294500 0.343000\nvn 0.932800 -0.276000 0.231600\nvn 0.472400 -0.673500 0.568400\nvn 0.852100 -0.418000 0.315000\nvn 0.391400 -0.592800 0.703800\nvn 0.729800 0.022500 0.683200\nvn -0.653200 0.723100 -0.224300\nvn -0.633500 0.737400 -0.234300\nvn -0.297300 0.888900 -0.348400\nvn 0.630300 -0.288000 0.720900\nvn 0.794200 -0.421600 0.437600\nvn 0.961700 -0.111500 0.250300\nvn 0.060200 -0.810000 0.583300\nvn -0.135800 -0.748300 0.649300\nvn 0.346300 -0.359300 0.866500\nvn -0.004100 -0.081100 0.996700\nvn 0.059500 -0.723700 0.687600\nvn 0.608200 -0.169100 0.775500\nvn 0.099500 -0.463500 0.880500\nvn -0.893300 0.115500 0.434300\nvn -0.554300 -0.380500 0.740200\nvn -0.584700 0.429800 -0.688000\nvn -0.444000 0.340700 -0.828700\nvn -0.203800 -0.298900 0.932200\nvn 0.960600 0.199600 0.193300\nvn -0.804000 -0.163600 0.571600\nvn -0.692400 0.452200 -0.562200\nvn -0.480300 0.351200 -0.803700\nvn 0.942500 -0.108500 0.316100\nvn -0.869700 0.330200 -0.366700\nvn 0.972900 0.223600 -0.058500\nvn -0.298100 0.255100 -0.919800\nvn -0.260200 -0.477900 0.839000\nvn 0.820900 0.412600 -0.394800\nvn 0.493700 -0.348800 0.796600\nvn 0.953400 0.221900 -0.204400\nvn -0.029500 0.355300 -0.934300\nvn 0.134400 0.560000 -0.817500\nvn -0.339900 0.345100 -0.874800\nvn -0.931000 0.158400 0.328800\nvn 0.814900 0.484700 -0.317800\nvn 0.892100 0.406300 -0.197300\nvn -0.541600 -0.395300 0.741900\nvn 0.781600 0.024600 0.623300\nvn 0.512700 0.021500 0.858300\nvn 0.607600 0.613600 -0.504200\nvn 0.016600 0.372600 -0.927800\nvn 0.284200 -0.457500 0.842600\nvn -0.436600 0.075400 0.896500\nvn -0.928700 0.179800 -0.324200\nvn 0.888100 0.100200 0.448400\nvn 0.894900 0.004100 0.446200\nvn -0.825100 0.314100 -0.469600\nvn 0.282500 0.100600 0.953900\nvn 0.570100 -0.070900 0.818500\nvn -0.339800 0.089100 0.936200\nvn -0.819300 0.149800 0.553500\nvn -0.218300 -0.116600 0.968900\nvn -0.447400 0.397100 -0.801300\nvn -0.494500 0.391000 -0.776200\nvn -0.227700 -0.125300 0.965600\nvn 0.979400 0.181400 0.088100\nvn -0.746400 0.121800 0.654200\nvn -0.503600 0.418600 -0.755700\nvn -0.459700 0.385200 -0.800200\nvn 0.995700 0.092700 -0.003900\nvn -0.971300 0.202100 -0.125600\nvn 0.719900 0.306800 -0.622600\nvn -0.364900 0.177500 -0.913900\nvn 0.977800 0.153400 -0.142800\nvn -0.066800 0.070600 0.995200\nvn 0.966600 0.047000 0.251700\nvn 0.018600 0.287200 -0.957600\nvn 0.369400 0.329400 -0.868900\nvn -0.265800 0.382800 -0.884700\nvn -0.890800 0.227200 0.393400\nvn 0.866300 0.229100 -0.443900\nvn -0.487800 0.066300 0.870400\nvn 0.928200 0.255900 -0.270000\nvn 1.000000 0.001100 0.006900\nvn 0.773900 0.270900 -0.572300\nvn -0.411700 0.127600 0.902300\nvn -0.431200 0.139000 0.891500\nvn -0.399900 0.095600 0.911500\nvn -0.254500 0.083400 0.963400\nvn 0.878200 0.100500 0.467600\nvn 0.586000 0.097400 0.804400\nvn 0.592600 0.030700 0.804900\nvn -0.036700 0.308700 -0.950400\nvn -0.384600 0.044900 0.922000\nvn -0.528300 0.057800 0.847100\nvn -0.548300 -0.081700 0.832300\nvn 0.873600 -0.183800 0.450500\nvn -0.728400 0.242100 -0.640900\nvn 0.264900 0.018300 0.964100\nvn 0.817000 -0.067600 0.572600\nvn -0.111000 0.081800 0.990400\nvn -0.849700 0.010300 0.527100\nvn -0.473500 0.041500 0.879800\nvn -0.506300 0.346900 -0.789400\nvn -0.600600 0.233800 -0.764600\nvn -0.378900 -0.004300 0.925400\nvn -0.758100 0.044600 0.650500\nvn -0.936600 0.212000 -0.278800\nvn -0.638000 0.206500 -0.741800\nvn 0.874400 0.094400 -0.475900\nvn -0.997700 -0.029600 0.060900\nvn 0.664600 0.166700 -0.728300\nvn -0.321700 0.261900 -0.909800\nvn 0.220300 0.043000 0.974500\nvn 0.996100 -0.032000 -0.082100\nvn 0.887200 0.045500 0.459000\nvn 0.188100 0.261500 -0.946700\nvn 0.798300 0.122400 -0.589600\nvn -0.320900 0.287700 -0.902300\nvn -0.937500 0.087600 0.336900\nvn 0.964600 0.096000 -0.245400\nvn 0.972700 0.026800 -0.230400\nvn -0.485700 0.091600 0.869300\nvn 0.951600 -0.094100 0.292600\nvn 0.607500 0.212700 -0.765300\nvn 0.034500 0.072100 0.996800\nvn -0.774400 -0.153100 -0.613900\nvn -0.586200 -0.141100 -0.797800\nvn -0.626300 -0.232000 -0.744300\nvn 0.994400 -0.105000 0.013500\nvn 0.922500 -0.140600 0.359400\nvn 0.699000 -0.125900 0.704000\nvn 0.688400 -0.189900 0.700000\nvn -0.083500 -0.085300 -0.992800\nvn -0.486300 -0.135000 0.863300\nvn -0.481600 -0.197000 0.854000\nvn 0.411000 -0.111000 0.904800\nvn -0.914100 -0.133200 -0.382900\nvn -0.843700 -0.014400 -0.536600\nvn 0.109000 -0.206700 0.972300\nvn 0.008000 0.084600 0.996400\nvn 0.840200 -0.089300 0.534800\nvn -0.950000 -0.079100 0.301900\nvn -0.678900 -0.055900 0.732100\nvn -0.925200 -0.092300 0.368000\nvn -0.435500 -0.104700 0.894100\nvn -0.378000 -0.025400 0.925400\nvn -0.966000 -0.171000 -0.193900\nvn 0.962500 -0.076100 -0.260400\nvn -0.989600 -0.128400 -0.064900\nvn -0.992200 -0.122300 0.022600\nvn 0.782300 -0.104000 -0.614200\nvn -0.586100 0.048500 -0.808700\nvn -0.336200 0.001000 -0.941800\nvn 0.953400 -0.072400 -0.292800\nvn 0.462500 -0.075400 0.883400\nvn 0.957100 -0.089100 0.275700\nvn -0.009600 -0.114400 -0.993400\nvn 0.745700 -0.096000 -0.659300\nvn -0.515900 -0.230400 -0.825000\nvn -0.555200 -0.029800 -0.831200\nvn -0.457400 -0.016700 -0.889100\nvn -0.963200 -0.147400 0.224800\nvn 0.966700 -0.118900 -0.226300\nvn -0.973700 -0.138400 0.180800\nvn -0.940500 -0.152300 0.303800\nvn -0.962100 -0.142900 0.232300\nvn 0.930600 -0.087800 -0.355400\nvn -0.699000 -0.067500 0.711900\nvn -0.494800 0.072300 0.866000\nvn -0.603200 0.051100 0.795900\nvn 0.723000 -0.106200 -0.682600\nvn 0.407600 -0.212100 0.888100\nvn 0.207100 0.061600 0.976300\nvn -0.335200 -0.180000 0.924800\nvn -0.019500 -0.174000 0.984500\nvn -0.487100 -0.170400 0.856500\nvn -0.316700 -0.205500 0.926000\nvn -0.556000 -0.318200 -0.767800\nvn -0.584400 -0.299600 -0.754100\nvn -0.655800 -0.347800 -0.670000\nvn 0.997700 -0.049500 0.046500\nvn 0.919900 -0.103700 0.378100\nvn 0.857800 -0.128000 0.497700\nvn 0.814200 -0.084600 0.574300\nvn 0.131600 -0.132000 -0.982500\nvn -0.951800 -0.255500 -0.169300\nvn -0.872100 -0.167500 -0.459800\nvn 0.522700 -0.133700 0.842000\nvn 0.852400 -0.144300 0.502500\nvn 0.714900 -0.165400 0.679300\nvn -0.767600 -0.125600 -0.628500\nvn 0.965800 0.039400 -0.256400\nvn 0.935600 0.015000 0.352600\nvn 0.963200 -0.073600 0.258400\nvn -0.259900 -0.152000 0.953600\nvn -0.294000 -0.202400 0.934100\nvn -0.774000 -0.152700 -0.614500\nvn -0.958800 -0.177600 -0.221700\nvn -0.977900 -0.115900 0.174000\nvn -0.988600 -0.125400 0.083700\nvn -0.876400 -0.015500 0.481300\nvn -0.974300 -0.085700 0.208000\nvn -0.820200 -0.001600 0.572100\nvn -0.844000 -0.293000 -0.449200\nvn 0.784500 -0.127900 -0.606800\nvn 0.975000 -0.087400 -0.204100\nvn -0.999100 -0.039600 0.010800\nvn -0.968600 -0.039500 -0.245500\nvn 0.786600 -0.098800 -0.609500\nvn 0.370500 -0.079200 -0.925400\nvn 0.263300 -0.080500 -0.961300\nvn -0.063600 -0.074900 -0.995100\nvn -0.898800 0.024900 -0.437600\nvn -0.400800 -0.249100 0.881600\nvn -0.416700 -0.236100 0.877800\nvn 0.740900 -0.172400 0.649100\nvn 0.990500 -0.067600 0.119200\nvn 0.825300 -0.147800 0.544900\nvn -0.254200 -0.071200 -0.964500\nvn 0.276100 -0.099000 -0.956000\nvn -0.407100 -0.049800 -0.912000\nvn 0.954900 -0.069400 -0.288600\nvn -0.932200 -0.159500 -0.324800\nvn -0.225700 -0.133400 -0.965000\nvn -0.065900 -0.092000 -0.993600\nvn -0.982500 -0.179800 -0.048600\nvn -0.962700 -0.143000 -0.229500\nvn 0.993700 -0.107000 0.034100\nvn 0.922600 -0.056900 -0.381400\nvn 0.987100 -0.115000 -0.111500\nvn 0.559300 -0.117400 -0.820600\nvn 0.969900 -0.086600 -0.227400\nvn -0.610900 -0.140400 0.779100\nvn -0.475100 -0.205800 0.855500\nvn 0.801700 -0.122400 -0.585000\nvn 0.047100 -0.875900 0.480200\nvn 0.945100 -0.041900 0.324100\nvn 0.983400 -0.096100 0.153900\nvn -0.956300 -0.258300 0.137000\nvn -0.749000 -0.223900 -0.623500\nvn -0.569600 -0.217000 -0.792700\nvn -0.479200 -0.138700 -0.866600\nvn -0.979900 -0.137000 0.145200\nvn -0.954400 -0.151400 0.257100\nvn -0.687200 -0.195200 0.699700\nvn -0.840500 -0.164600 0.516200\nvn -0.285600 -0.122300 -0.950500\nvn -0.968200 -0.091500 0.232800\nvn -0.975400 -0.075700 0.206800\nvn 0.082900 -0.177700 0.980600\nvn -0.124000 -0.213400 0.969100\nvn 0.480700 -0.170200 0.860200\nvn 0.976200 -0.062500 0.207600\nvn 0.892600 -0.062000 0.446500\nvn 0.986800 -0.073900 0.143800\nvn 0.075500 -0.184600 -0.979900\nvn 0.884600 -0.156900 0.439100\nvn 0.933400 -0.135300 0.332200\nvn 0.780600 -0.166500 0.602400\nvn 0.980300 -0.139300 -0.139900\nvn 0.987400 -0.118900 -0.104400\nvn 0.970400 -0.139100 -0.197400\nvn 0.991300 -0.124700 0.041400\nvn -0.635400 0.086600 -0.767300\nvn -0.278800 0.013900 -0.960200\nvn -0.773100 0.108200 -0.624900\nvn 0.812300 -0.102400 -0.574100\nvn 0.760900 -0.097700 -0.641500\nvn -0.387600 -0.051100 -0.920400\nvn -0.463200 -0.062900 -0.884000\nvn -0.385700 -0.060800 -0.920600\nvn -0.893000 -0.114900 -0.435200\nvn -0.875100 -0.116400 -0.469700\nvn -0.985800 -0.065500 0.154600\nvn 0.945300 -0.110900 -0.306800\nvn 0.781500 -0.128300 -0.610500\nvn -0.756200 -0.092700 -0.647700\nvn -0.469500 -0.068900 -0.880200\nvn -0.707600 -0.164800 0.687100\nvn -0.586600 -0.151000 0.795700\nvn -0.653100 -0.166200 0.738800\nvn 0.005200 0.896000 -0.443900\nvn -0.330300 0.068400 0.941300\nvn -0.423000 0.053300 0.904500\nvn 0.911700 -0.051000 0.407600\nvn -0.713300 0.028400 -0.700200\nvn -0.488300 0.094800 -0.867500\nvn 0.998500 -0.049200 -0.021100\nvn 0.916800 -0.024400 0.398600\nvn 0.620900 -0.005000 0.783800\nvn 0.640800 -0.049400 0.766100\nvn -0.050200 0.192200 -0.980000\nvn 0.285000 0.008800 0.958500\nvn 0.841100 -0.086100 0.534000\nvn -0.880800 -0.065500 0.468900\nvn -0.719400 -0.085800 0.689300\nvn -0.797800 -0.012700 0.602700\nvn -0.966200 -0.089300 -0.241700\nvn 0.915000 -0.023800 -0.402600\nvn 0.735800 0.012100 -0.677000\nvn 0.977500 -0.052300 -0.204000\nvn 0.325200 0.058900 0.943800\nvn 0.904700 0.013200 0.425900\nvn 0.168100 0.078000 -0.982700\nvn 0.773200 0.012100 -0.634100\nvn -0.959300 -0.126400 0.252500\nvn 0.968500 -0.014300 -0.248400\nvn 0.963900 -0.040200 -0.263200\nvn 0.663100 0.079400 -0.744300\nvn -0.669400 -0.320200 0.670300\nvn -0.717500 -0.310600 0.623500\nvn -0.737800 -0.505000 0.447800\nvn -0.336300 0.823800 -0.456300\nvn -0.782600 0.548100 -0.295100\nvn -0.809100 0.562000 -0.171800\nvn 0.707100 -0.553200 0.440400\nvn 0.425400 -0.765900 0.482000\nvn 0.517800 -0.478000 0.709500\nvn -0.985600 -0.060900 0.157500\nvn -0.971600 -0.094500 -0.216600\nvn -0.952700 -0.107300 -0.284200\nvn 0.668900 -0.116300 -0.734200\nvn 0.764800 -0.102300 -0.636000\nvn 0.760400 -0.102200 -0.641300\nvn -0.740500 0.040900 0.670800\nvn -0.870200 0.019700 0.492200\nvn -0.896800 0.043700 0.440300\nvn 0.648600 0.070300 -0.757800\nvn 0.540100 0.034600 -0.840900\nvn -0.031200 0.022400 -0.999200\nvn 0.902000 -0.122800 0.413800\nvn 0.873000 -0.077700 0.481400\nvn 0.978600 -0.058100 0.197200\nvn 0.370800 0.676600 -0.636200\nvn 0.600200 0.691100 -0.402500\nvn 0.737000 0.452800 -0.501700\nvn 0.976300 0.014800 0.215900\nvn 0.976800 0.011600 0.213900\nvn 0.978100 0.045700 -0.203000\nvn 0.644300 0.025000 0.764300\nvn 0.867600 0.004500 0.497100\nvn 0.847300 0.011200 0.531000\nvn 0.431400 -0.085600 0.898100\nvn 0.242500 -0.049900 0.968900\nvn 0.845200 -0.052600 0.531800\nvn 0.213400 0.056500 0.975300\nvn -0.353000 0.077800 0.932300\nvn -0.319900 0.029500 0.947000\nvn 0.250700 0.797600 -0.548600\nvn 0.984000 0.171200 -0.047900\nvn 0.786100 -0.148000 0.600000\nvn 0.772400 0.025700 0.634600\nvn 0.924900 0.058300 0.375700\nvn 0.475500 -0.052900 0.878100\nvn 0.593600 -0.030400 0.804100\nvn 0.587400 -0.031600 0.808700\nvn -0.045400 0.910400 -0.411100\nvn 0.098100 0.831400 -0.546900\nvn 0.253600 0.035400 0.966600\nvn -0.404900 0.017000 0.914200\nvn 0.795400 -0.103600 0.597100\nvn 0.928000 -0.129900 0.349000\nvn -0.971800 -0.081100 0.221300\nvn -0.983600 -0.064100 0.168600\nvn -0.982700 -0.065800 0.172900\nvn 0.112200 0.036300 0.993000\nvn -0.422500 0.051600 0.904800\nvn -0.713400 -0.011600 -0.700600\nvn -0.145200 -0.030800 -0.988900\nvn -0.248900 -0.041000 -0.967600\nvn 0.795500 0.024000 0.605500\nvn 0.959000 0.040400 0.280400\nvn 0.587300 0.020800 0.809100\nvn 0.820700 0.020800 0.570900\nvn 0.099500 0.639900 -0.762000\nvn -0.496500 0.486700 -0.718700\nvn -0.182600 -0.039700 0.982400\nvn -0.408200 -0.056500 0.911100\nvn 0.854700 -0.273400 0.441300\nvn 0.807500 -0.369900 0.459400\nvn 0.977500 -0.045200 0.206100\nvn 0.266400 -0.034900 0.963200\nvn 0.543900 -0.016200 0.839000\nvn -0.229300 -0.448300 0.864000\nvn -0.580000 -0.065800 0.811900\nvn -0.656100 0.024400 0.754200\nvn -0.667700 -0.010200 0.744400\nvn -0.573600 -0.006200 -0.819100\nvn -0.644600 -0.030200 -0.763900\nvn -0.943200 -0.055900 -0.327500\nvn 0.785100 0.129500 -0.605600\nvn 0.827100 0.074200 -0.557000\nvn 0.796800 0.077200 -0.599300\nvn -0.588800 -0.121700 0.799000\nvn 0.769600 0.583200 -0.259700\nvn 0.662900 0.692900 -0.283500\nvn 0.890400 0.426000 -0.160100\nvn 0.757000 -0.049100 0.651600\nvn 0.904400 -0.057600 0.422700\nvn 0.877100 -0.010400 0.480200\nvn 0.971800 -0.008000 0.235500\nvn 0.976600 -0.059000 0.206900\nvn 0.984300 -0.018400 -0.175300\nvn -0.318100 -0.047600 0.946800\nvn 0.301100 0.271200 -0.914200\nvn 0.522400 0.213300 -0.825600\nvn 0.684400 0.230800 -0.691500\nvn -0.367500 0.024500 0.929700\nvn 0.813600 -0.391600 0.429700\nvn 0.969200 -0.035600 0.243800\nvn 0.980300 -0.034500 -0.194500\nvn 0.999700 -0.025600 0.002500\nvn 0.747900 -0.099600 -0.656300\nvn -0.632600 -0.195900 -0.749200\nvn -0.811900 -0.243300 -0.530500\nvn -0.860000 -0.159700 -0.484500\nvn 0.819900 0.094400 -0.564600\nvn 0.986400 0.043300 -0.158100\nvn -0.392300 0.349300 -0.850900\nvn 0.056400 0.324500 -0.944200\nvn 0.173600 0.352000 -0.919700\nvn 0.171100 0.039200 0.984500\nvn 0.757000 0.088800 -0.647300\nvn 0.789400 0.020400 -0.613500\nvn 0.816400 -0.094200 -0.569700\nvn 0.541400 -0.061400 -0.838500\nvn 0.922200 0.018100 0.386200\nvn -0.730800 0.005300 0.682500\nvn -0.913900 -0.028700 0.404800\nvn -0.932600 -0.009200 0.360700\nvn -0.713000 -0.108300 -0.692700\nvn -0.904400 -0.086000 -0.417800\nvn -0.740600 -0.056800 -0.669500\nvn -0.971500 -0.009500 -0.236600\nvn 0.676400 0.198400 -0.709300\nvn 0.685400 0.246800 -0.685000\nvn 0.733400 0.214500 -0.645100\nvn -0.205000 -0.143400 0.968200\nvn -0.192800 -0.158300 0.968400\nvn -0.293000 -0.114100 0.949200\nvn 0.257000 0.476700 -0.840700\nvn 0.944800 0.211500 -0.250100\nvn -0.315500 -0.617400 0.720500\nvn -0.772200 -0.340500 0.536400\nvn -0.745000 -0.435000 0.505600\nvn 0.680700 0.013700 0.732400\nvn -0.977900 0.019500 0.207900\nvn -0.917000 0.106900 -0.384200\nvn -0.933300 0.017900 -0.358600\nvn 0.940700 -0.069100 0.332000\nvn 0.918100 -0.070000 0.390000\nvn 0.911500 -0.077000 0.404100\nvn -0.825800 -0.076400 0.558800\nvn -0.565800 -0.060100 0.822400\nvn -0.416300 -0.098600 0.903900\nvn 0.787400 0.526700 -0.320300\nvn 0.944900 0.296700 -0.138100\nvn -0.178300 -0.116600 0.977000\nvn -0.093100 -0.119400 0.988500\nvn 0.970200 0.032500 0.240100\nvn 0.950500 0.108600 -0.290900\nvn 0.601500 0.729500 -0.325600\nvn -0.285900 -0.140400 0.947900\nvn -0.328300 -0.134900 0.934900\nvn -0.982800 -0.055500 0.176400\nvn -0.992500 -0.000600 0.122300\nvn -0.916400 -0.071900 0.393700\nvn -0.939600 -0.081900 0.332300\nvn 0.575500 0.027300 0.817300\nvn 0.273400 -0.017100 0.961700\nvn -0.321700 0.034100 0.946200\nvn -0.706900 0.007200 0.707200\nvn 0.962300 0.069300 -0.262800\nvn 0.912200 0.139800 -0.385100\nvn 0.963500 -0.042100 0.264100\nvn -0.098400 -0.133100 -0.986200\nvn 0.042900 -0.176600 -0.983300\nvn 0.316700 -0.171000 -0.933000\nvn -0.944900 -0.036600 -0.325400\nvn -0.990600 -0.034000 0.132700\nvn -0.987100 0.015900 0.159100\nvn -0.749400 -0.047700 0.660400\nvn -0.850000 0.245200 -0.466200\nvn -0.853200 0.283800 -0.437500\nvn -0.289400 -0.684700 0.668900\nvn 0.955500 -0.095000 -0.279100\nvn 0.783300 -0.106200 -0.612500\nvn 0.867200 0.165000 -0.469900\nvn 0.960200 -0.064400 0.271800\nvn 0.974600 -0.091000 0.204500\nvn 0.868300 0.224900 -0.442200\nvn -0.954300 -0.220800 -0.201500\nvn -0.982900 -0.178800 0.042800\nvn -0.979000 -0.178700 0.097500\nvn -0.511500 0.093500 -0.854200\nvn 0.174300 0.129600 -0.976100\nvn 0.120600 0.042800 -0.991800\nvn 0.716400 0.181700 -0.673600\nvn -0.018300 0.891700 -0.452200\nvn 0.566400 -0.509500 0.647800\nvn 0.999100 -0.028700 0.029900\nvn 0.998500 -0.045900 0.028600\nvn 0.776100 0.154100 -0.611400\nvn 0.688400 0.094000 -0.719200\nvn -0.809300 -0.020800 0.587000\nvn -0.794200 0.581300 -0.177200\nvn -0.373900 0.848700 -0.374100\nvn -0.339400 0.874000 -0.347600\nvn -0.927500 -0.051100 0.370100\nvn -0.986100 -0.064500 0.153200\nvn -0.965500 -0.111700 0.235000\nvn 0.912200 0.253200 -0.322200\nvn -0.938300 0.003600 0.345700\nvn -0.899600 0.161000 -0.405900\nvn -0.789100 -0.378300 0.484000\nvn -0.787200 -0.415600 0.455600\nvn 0.765600 -0.148800 -0.625800\nvn 0.438300 -0.150000 -0.886200\nvn -0.467500 0.237100 -0.851600\nvn 0.178300 0.272200 -0.945600\nvn 0.986300 -0.107000 -0.125300\nvn -0.784100 0.004600 0.620600\nvn 0.053500 0.269200 -0.961600\nvn 0.565800 -0.387300 0.727900\nvn 0.984400 -0.087700 -0.152500\nvn 0.852200 -0.136200 -0.505100\nvn -0.375500 -0.153900 -0.913900\nvn 0.446200 -0.189200 -0.874700\nvn 0.717700 -0.186800 -0.670800\nvn 0.594500 -0.184000 -0.782700\nvn -0.417600 0.334400 -0.844900\nvn 0.610800 -0.045000 0.790500\nvn 0.497700 -0.066600 0.864800\nvn 0.551600 -0.082900 0.830000\nvn 0.186600 0.029300 0.982000\nvn -0.887700 -0.223800 0.402400\nvn -0.919700 -0.204700 0.334900\nvn -0.941900 -0.112300 0.316400\nvn 0.928300 -0.141800 -0.343700\nvn -0.959200 -0.021500 -0.281900\nvn -0.994000 -0.048400 0.098100\nvn 0.885600 0.123300 -0.447800\nvn 0.696200 0.235500 -0.678100\nvn 0.485300 -0.613000 0.623500\nvn 0.231300 0.778800 -0.583100\nvn 0.496600 -0.060900 0.865800\nvn -0.265200 -0.802700 0.534100\nvn -0.729900 0.071500 0.679800\nvn 0.905600 -0.076800 -0.417000\nvn 0.233100 -0.185900 -0.954500\nvn 0.609500 -0.008000 0.792700\nvn 0.994800 -0.029300 -0.097100\nvn 0.322000 -0.187000 -0.928100\nvn -0.947400 -0.052200 0.315700\nvn 0.991800 -0.045700 0.119400\nvn 0.996600 -0.024500 0.078400\nvn -0.709200 -0.020100 0.704700\nvn -0.927900 -0.021100 0.372300\nvn 0.272700 -0.094100 -0.957500\nvn 0.544500 -0.214800 -0.810700\nvn 0.440800 -0.229900 -0.867600\nvn 0.725700 -0.442700 0.526600\nvn 0.915500 -0.123400 0.382900\nvn 0.972700 -0.144400 0.181300\nvn 0.642800 -0.442000 0.625600\nvn 0.984300 -0.143400 -0.102400\nvn -0.835300 0.303700 -0.458200\nvn -0.971600 -0.213000 0.102600\nvn -0.903100 -0.144600 0.404300\nvn -0.968900 -0.083200 0.232900\nvn 0.368600 -0.033500 -0.929000\nvn 0.595800 0.036700 0.802200\nvn 0.898000 -0.103700 0.427600\nvn 0.930400 -0.080900 0.357300\nvn -0.880200 -0.181200 0.438700\nvn -0.458500 -0.133900 0.878500\nvn -0.796700 -0.026500 0.603800\nvn 0.276800 -0.197600 -0.940300\nvn 0.177700 -0.171900 -0.968900\nvn 0.139300 -0.190000 -0.971800\nvn -0.849500 -0.149800 -0.505900\nvn -0.735600 -0.084200 -0.672100\nvn -0.016200 -0.187500 -0.982100\nvn -0.765100 -0.270100 -0.584500\nvn -0.894800 -0.132800 -0.426300\nvn -0.895900 -0.173300 0.409000\nvn 0.664800 0.032000 -0.746300\nvn 0.586600 -0.176400 -0.790400\nvn 0.727300 -0.106900 0.677900\nvn -0.501400 0.231200 -0.833800\nvn 0.948800 -0.089600 0.302900\nvn 0.949200 -0.065400 0.307600\nvn -0.283100 -0.157800 -0.946000\nvn 0.558200 -0.207600 -0.803300\nvn -0.885800 -0.139500 0.442500\nvn -0.268700 -0.156300 0.950400\nvn 0.750600 0.128100 0.648200\nvn 0.842400 0.093200 0.530700\nvn 0.832800 0.095100 0.545400\nvn -0.700500 -0.118600 0.703700\nvn -0.671200 -0.143300 0.727300\nvn -0.822700 -0.135500 0.552000\nvn 0.933100 -0.120700 0.338700\nvn 0.940200 -0.098700 0.326100\nvn 0.935600 -0.124000 0.330600\nvn -0.800100 0.254700 0.543100\nvn -0.809400 0.290000 0.510500\nvn -0.803800 -0.035600 0.593800\nvn 0.983200 0.117400 0.139700\nvn 0.973600 0.140900 0.179200\nvn 0.978400 0.131700 0.159100\nvn -0.284700 -0.036500 0.957900\nvn -0.276100 -0.046100 0.960000\nvn -0.403700 -0.417400 0.814100\nvn 0.940200 0.300900 0.159700\nvn 0.763300 0.605500 0.225300\nvn 0.631500 0.730800 0.259100\nvn -0.428600 0.683800 -0.590500\nvn -0.263100 0.591800 -0.761900\nvn -0.275900 0.630900 -0.725100\nvn 0.210100 0.871000 -0.444100\nvn 0.227300 0.864400 -0.448500\nvn 0.017500 0.803700 -0.594700\nvn -0.869500 0.464800 0.167000\nvn -0.889400 0.457000 0.004100\nvn -0.893300 0.448800 0.023300\nvn 0.843000 0.537100 -0.029300\nvn 0.857800 0.513600 -0.018900\nvn 0.860200 0.509600 -0.017900\nvn 0.123800 0.718400 -0.684500\nvn 0.143800 0.486200 -0.861900\nvn 0.142100 0.486600 -0.861900\nvn -0.058700 -0.057200 0.996600\nvn 0.042300 -0.548800 0.834900\nvn 0.005700 -0.575400 0.817800\nvn 0.100600 -0.446800 0.888900\nvn 0.116600 -0.601300 0.790500\nvn 0.021500 -0.056100 0.998200\nvn 0.849100 0.106800 0.517300\nvn 0.925000 0.185900 0.331200\nvn 0.910200 0.208400 0.357700\nvn -0.817300 -0.044400 0.574400\nvn -0.791200 0.107100 0.602100\nvn -0.788500 0.106200 0.605800\nvn 0.867000 -0.208800 0.452300\nvn 0.990900 0.051900 0.123700\nvn 0.988100 0.033200 0.149800\nvn -0.948300 -0.000800 0.317300\nvn -0.956400 -0.024400 0.290900\nvn -0.804700 0.399000 -0.439500\nvn 0.970400 0.125300 0.206500\nvn 0.965300 0.244000 -0.093100\nvn 0.968200 0.244000 -0.055100\nvn -0.399700 -0.413700 0.817900\nvn -0.514200 -0.032800 0.857000\nvn -0.505400 -0.055500 0.861100\nvn 0.660400 0.735600 -0.151000\nvn 0.138500 0.973100 -0.184200\nvn 0.914300 0.404500 -0.021300\nvn -0.199200 0.463500 -0.863400\nvn -0.202100 0.467800 -0.860400\nvn -0.106900 0.361200 -0.926300\nvn 0.054900 0.553300 -0.831100\nvn 0.070000 0.567400 -0.820400\nvn -0.415400 0.382200 -0.825400\nvn -0.931900 0.354100 0.078100\nvn -0.928700 0.364100 0.069600\nvn -0.935300 0.267600 0.231300\nvn 0.802000 0.537400 -0.260800\nvn 0.799400 0.361600 -0.479700\nvn 0.793600 0.415900 -0.444000\nvn 0.186500 0.384400 -0.904100\nvn 0.201500 0.342400 -0.917600\nvn 0.202700 0.342100 -0.917500\nvn -0.027900 -0.344800 0.938300\nvn -0.201900 0.033700 0.978800\nvn -0.208700 0.040100 0.977100\nvn -0.470000 0.068500 0.880000\nvn -0.417600 0.103200 0.902700\nvn -0.418300 0.101600 0.902600\nvn 0.256600 0.062200 0.964500\nvn 0.260400 0.063700 0.963400\nvn 0.361400 0.113600 0.925400\nvn 0.893700 0.077800 0.441800\nvn 0.894400 0.098100 0.436400\nvn 0.893200 0.096200 0.439300\nvn -0.838800 0.151400 0.522900\nvn -0.871400 0.137700 0.470800\nvn -0.869400 0.143200 0.472900\nvn 0.991100 0.125100 -0.045400\nvn 0.939700 0.235700 -0.247900\nvn 0.942700 0.233600 -0.238100\nvn -0.869800 0.344000 -0.353700\nvn -0.868600 0.344300 -0.356400\nvn -0.962100 0.212300 -0.170800\nvn 0.876900 0.294700 -0.379700\nvn 0.690200 0.362500 -0.626200\nvn 0.697700 0.360900 -0.618800\nvn 0.989900 0.034700 0.137600\nvn 0.990500 0.058800 0.124100\nvn 0.938500 0.031000 0.343700\nvn 0.091100 0.282700 -0.954800\nvn 0.128000 0.349900 -0.928000\nvn 0.132300 0.343100 -0.929900\nvn -0.271400 0.387500 -0.881000\nvn -0.269700 0.386100 -0.882200\nvn -0.417500 0.391600 -0.819900\nvn 0.918200 0.231800 -0.321100\nvn 0.967300 0.167400 -0.190300\nvn 0.966100 0.172500 -0.192000\nvn 0.936400 0.083800 0.340700\nvn 0.937400 0.085900 0.337500\nvn 0.940200 -0.037400 0.338500\nvn -0.391000 0.087500 0.916200\nvn -0.372900 0.086000 0.923800\nvn -0.496700 0.102500 0.861800\nvn -0.292000 0.080100 0.953100\nvn -0.134100 0.110500 0.984800\nvn -0.139000 0.110000 0.984200\nvn 0.157100 0.368500 -0.916200\nvn 0.150400 0.368600 -0.917300\nvn 0.309300 0.312500 -0.898100\nvn 0.021600 0.035000 0.999100\nvn -0.171900 -0.101600 0.979900\nvn -0.359700 0.163500 0.918600\nvn 0.317900 0.081400 0.944600\nvn 0.325200 0.092800 0.941000\nvn 0.136000 0.028300 0.990300\nvn -0.849300 0.087500 0.520600\nvn -0.853900 0.088100 0.512800\nvn -0.723800 0.006400 0.690000\nvn 0.979100 0.146000 -0.141800\nvn 0.978600 0.154900 -0.135600\nvn 0.898100 0.081000 -0.432200\nvn -0.995100 0.048700 -0.086200\nvn -0.994500 0.054100 -0.089300\nvn -0.999600 -0.024000 0.015900\nvn 0.729700 0.306300 -0.611300\nvn 0.726200 0.316500 -0.610300\nvn 0.771700 0.173600 -0.611800\nvn 0.894900 0.072500 0.440200\nvn 0.897600 0.071500 0.434900\nvn 0.794900 0.067500 0.602900\nvn -0.075900 0.361900 -0.929100\nvn -0.089700 0.358400 -0.929300\nvn 0.304500 0.250000 -0.919100\nvn -0.371100 0.394700 -0.840500\nvn -0.369000 0.396400 -0.840600\nvn -0.482300 0.301000 -0.822600\nvn 0.973200 0.134200 -0.186700\nvn 0.972500 0.134000 -0.190100\nvn 0.997900 0.054700 -0.035000\nvn -0.133900 0.089800 0.986900\nvn -0.140700 0.090700 0.985900\nvn 0.187100 0.080600 0.979000\nvn -0.804700 -0.189900 -0.562500\nvn -0.801400 -0.185800 -0.568500\nvn -0.823200 -0.169600 -0.541800\nvn 0.955700 -0.094300 0.278700\nvn 0.946200 -0.090700 0.310600\nvn 0.944300 -0.089900 0.316400\nvn 0.172200 -0.139500 -0.975100\nvn 0.173200 -0.152100 -0.973100\nvn 0.171200 -0.163900 -0.971500\nvn -0.529900 -0.200400 0.824100\nvn -0.495700 -0.168600 0.851900\nvn -0.492800 -0.215100 0.843100\nvn 0.478700 -0.033100 0.877300\nvn 0.614200 -0.101000 0.782700\nvn 0.610100 -0.092700 0.786900\nvn -0.945300 0.035900 0.324000\nvn -0.946600 0.032100 0.320700\nvn -0.922600 0.005600 0.385700\nvn 0.943400 -0.082600 -0.321100\nvn 0.951400 -0.103500 -0.290000\nvn 0.955200 -0.084000 -0.283800\nvn -0.994300 -0.073100 -0.077500\nvn -0.994200 -0.078200 -0.073700\nvn -0.995000 -0.046100 0.088000\nvn 0.900600 -0.119800 -0.417700\nvn 0.890900 -0.083800 -0.446400\nvn 0.893600 -0.084400 -0.440900\nvn 0.893800 -0.064400 0.443700\nvn 0.958300 -0.119800 0.259300\nvn 0.957200 -0.115300 0.265500\nvn -0.090100 -0.099900 -0.990900\nvn -0.238700 -0.010500 -0.971000\nvn -0.239800 -0.032100 -0.970300\nvn -0.414600 -0.137900 -0.899400\nvn -0.416300 -0.113300 -0.902100\nvn -0.587000 -0.216300 -0.780100\nvn 0.982600 -0.134800 -0.127500\nvn 0.947100 -0.141800 -0.287800\nvn 0.948600 -0.136500 -0.285300\nvn -0.991500 -0.087600 0.096300\nvn -0.920800 -0.136100 0.365500\nvn -0.912700 -0.156100 0.377600\nvn 0.349200 0.045900 0.935900\nvn 0.367600 0.086300 0.926000\nvn 0.435600 -0.062700 0.897900\nvn -0.515600 -0.204400 0.832100\nvn -0.354400 -0.224300 0.907700\nvn -0.355600 -0.224200 0.907300\nvn -0.693900 -0.269800 -0.667600\nvn -0.694600 -0.269700 -0.666900\nvn -0.647100 -0.293700 -0.703500\nvn 0.997900 -0.037000 0.052900\nvn 0.979700 -0.058000 -0.191700\nvn 0.981000 -0.057100 -0.185200\nvn 0.197500 -0.053100 -0.978900\nvn 0.197200 -0.056100 -0.978700\nvn 0.306600 -0.154700 -0.939100\nvn 0.901700 -0.070300 0.426500\nvn 0.889900 -0.085300 0.448100\nvn 0.795700 -0.096500 0.597900\nvn 0.991500 -0.125600 -0.034600\nvn 0.991300 -0.125500 -0.039200\nvn 0.972700 -0.172600 -0.154900\nvn -0.963300 -0.037600 0.265700\nvn -0.993300 -0.084500 0.078200\nvn -0.999600 -0.004900 0.025600\nvn 0.943400 -0.158800 -0.291100\nvn 0.895800 -0.182400 -0.405200\nvn 0.896800 -0.182000 -0.403200\nvn -0.372000 -0.175000 0.911600\nvn -0.388200 -0.182400 0.903300\nvn -0.096400 -0.193400 0.976300\nvn 0.519200 -0.164800 0.838600\nvn -0.213500 -0.213700 0.953300\nvn -0.208100 -0.213800 0.954400\nvn -0.513900 -0.185900 -0.837400\nvn 0.508700 -0.277900 -0.814800\nvn 0.503000 -0.278400 -0.818200\nvn -0.834400 -0.191700 -0.516800\nvn -0.727800 -0.291500 -0.620700\nvn -0.988300 0.050300 0.143900\nvn -0.889600 -0.227000 -0.396300\nvn -0.902900 -0.209100 -0.375500\nvn -0.959400 -0.195200 -0.203300\nvn 0.883200 -0.069800 -0.463800\nvn 0.659100 -0.129800 -0.740700\nvn -0.108200 0.111400 0.987900\nvn -0.195600 -0.218200 0.956100\nvn -0.217800 -0.226300 0.949400\nvn -0.056000 -0.535100 0.842900\nvn -0.830800 -0.097000 -0.548000\nvn -0.835900 -0.095000 -0.540600\nvn -0.694800 -0.113000 -0.710300\nvn -0.381900 -0.099000 -0.918900\nvn -0.380900 -0.118100 -0.917000\nvn -0.443800 -0.053000 -0.894500\nvn -0.992800 0.022600 -0.117700\nvn -0.927300 -0.000800 0.374300\nvn -0.929100 -0.000300 0.369700\nvn -0.989700 -0.074000 -0.122000\nvn -0.995400 -0.046800 -0.083700\nvn -0.772600 -0.016000 -0.634700\nvn -0.078600 -0.175800 0.981300\nvn -0.066700 -0.172300 0.982800\nvn -0.443600 -0.153700 0.882900\nvn 0.930000 -0.025800 0.366500\nvn 0.963800 -0.018200 0.265900\nvn 0.926300 0.003800 0.376700\nvn 0.469600 -0.350300 -0.810400\nvn 0.203800 -0.420400 -0.884100\nvn 0.206700 -0.420400 -0.883400\nvn 0.584400 -0.065200 0.808800\nvn 0.582000 -0.064100 0.810600\nvn 0.689500 -0.040700 0.723100\nvn 0.988600 -0.137800 -0.061000\nvn 0.987500 -0.108900 -0.113700\nvn 0.985400 -0.119300 -0.121600\nvn 0.996500 -0.077000 0.031200\nvn 0.991700 -0.072400 -0.106000\nvn 0.991300 -0.076100 -0.107600\nvn 0.795400 -0.097300 -0.598200\nvn 0.827600 -0.156600 -0.539000\nvn 0.826100 -0.152500 -0.542500\nvn -0.198400 -0.047700 -0.978900\nvn -0.068200 -0.128400 -0.989300\nvn -0.073000 -0.131500 -0.988600\nvn 0.962600 -0.132000 -0.236500\nvn 0.962400 -0.134600 -0.236000\nvn 0.969600 -0.148800 -0.194100\nvn -0.991100 -0.101200 0.085800\nvn -0.991100 -0.107200 0.079300\nvn -0.993900 -0.107900 -0.023900\nvn -0.769800 -0.195000 -0.607700\nvn -0.639000 -0.322700 -0.698200\nvn -0.864200 -0.129600 -0.486100\nvn 0.090900 -0.149800 -0.984500\nvn -0.013400 -0.083300 -0.996400\nvn -0.673300 -0.191000 -0.714300\nvn 0.119800 0.861400 -0.493600\nvn 0.112400 0.863500 -0.491600\nvn 0.148100 0.848600 -0.507800\nvn -0.275300 0.138400 0.951300\nvn -0.286500 0.145100 0.947000\nvn -0.084400 0.089800 0.992400\nvn -0.769700 -0.074900 -0.634000\nvn -0.779500 -0.080200 -0.621200\nvn -0.631100 0.071800 -0.772300\nvn 0.994800 -0.096600 0.032300\nvn 0.991200 -0.129500 -0.026900\nvn 0.990200 -0.134600 -0.036900\nvn 0.065600 0.178800 -0.981700\nvn 0.072400 0.183800 -0.980300\nvn 0.176600 0.040700 -0.983400\nvn 0.295000 0.024300 0.955200\nvn 0.245600 0.026200 0.969000\nvn 0.240600 0.027500 0.970200\nvn -0.849900 -0.043700 0.525000\nvn -0.838600 -0.045600 0.542700\nvn -0.942600 -0.006300 0.333800\nvn 0.959000 -0.099900 -0.265100\nvn 0.966100 -0.121700 -0.227500\nvn 0.966400 -0.124100 -0.225100\nvn -0.994900 -0.093300 -0.038000\nvn -0.994800 -0.091000 -0.044000\nvn -0.973800 -0.116900 0.195000\nvn 0.810200 -0.011400 -0.586000\nvn 0.814800 -0.003800 -0.579700\nvn 0.701800 -0.112800 -0.703400\nvn 0.901100 0.026600 0.432800\nvn 0.905100 0.010600 0.425100\nvn 0.905900 0.006800 0.423500\nvn 0.054300 0.073000 -0.995800\nvn 0.055000 0.077100 -0.995500\nvn 0.256500 -0.058300 -0.964800\nvn -0.529300 0.087300 -0.843900\nvn -0.530600 0.095800 -0.842200\nvn -0.432600 -0.028900 -0.901100\nvn 0.998900 -0.041000 -0.022400\nvn 0.980600 -0.083200 -0.177400\nvn 0.982000 -0.075000 -0.173200\nvn -0.028700 0.110500 0.993400\nvn -0.025800 0.107900 0.993800\nvn 0.043800 0.137600 0.989500\nvn -0.440300 0.068200 0.895200\nvn -0.458000 -0.344200 0.819600\nvn -0.446900 -0.204900 0.870800\nvn -0.429200 0.116400 0.895700\nvn -0.439000 0.096700 0.893200\nvn -0.182800 0.852000 -0.490400\nvn -0.118600 0.868800 -0.480600\nvn -0.514700 0.670100 -0.534800\nvn 0.026900 0.893900 -0.447500\nvn 0.061200 0.893100 -0.445600\nvn 0.698000 0.207900 0.685300\nvn 0.736900 0.139100 0.661500\nvn -0.570200 -0.235400 0.787000\nvn -0.546300 -0.263200 0.795100\nvn 0.971400 0.173900 0.161400\nvn 0.967700 0.229100 0.105000\nvn -0.829900 0.428900 0.356800\nvn -0.829800 0.450000 0.329800\nvn 0.958100 0.227700 0.173500\nvn 0.975800 0.159600 0.149200\nvn -0.949400 -0.041400 -0.311300\nvn -0.952300 -0.058900 -0.299400\nvn -0.678400 0.412300 -0.608100\nvn -0.973000 -0.124400 -0.194300\nvn -0.271500 -0.058400 0.960600\nvn -0.268600 -0.061300 0.961300\nvn 0.947000 0.256900 0.192800\nvn 0.946000 0.283100 0.158100\nvn -0.456900 0.685400 -0.567000\nvn -0.443200 0.680500 -0.583500\nvn -0.489500 0.415300 -0.766700\nvn -0.338500 0.565600 -0.752000\nvn -0.356300 0.540400 -0.762200\nvn -0.654400 0.331600 -0.679500\nvn -0.516400 0.406700 -0.753600\nvn 0.225500 0.860900 -0.456000\nvn 0.225100 0.861000 -0.456000\nvn -0.835300 0.426300 0.347200\nvn -0.865500 0.455800 0.207600\nvn 0.848300 0.513500 0.128800\nvn 0.832900 0.553300 0.011100\nvn 0.148300 0.851000 -0.503700\nvn -0.063200 -0.081200 0.994700\nvn -0.063600 -0.081100 0.994700\nvn -0.009000 -0.629900 0.776600\nvn -0.438600 -0.374600 0.816900\nvn -0.387600 -0.173200 0.905400\nvn -0.395300 -0.185300 0.899700\nvn -0.441800 -0.407500 0.799100\nvn -0.584600 0.438300 -0.682800\nvn -0.590400 0.477400 -0.650800\nvn -0.493100 0.377100 -0.784000\nvn -0.546200 0.618700 -0.564700\nvn 0.853900 0.088700 0.512800\nvn -0.827100 -0.090200 0.554700\nvn 0.859000 -0.215200 0.464500\nvn -0.853600 -0.108100 0.509600\nvn 0.966400 0.125800 0.224200\nvn -0.680000 0.312200 -0.663400\nvn -0.688000 0.301200 -0.660100\nvn -0.302900 0.289800 -0.907900\nvn -0.386700 -0.495700 0.777600\nvn -0.146800 0.519500 -0.841800\nvn 0.144900 0.357900 -0.922400\nvn 0.134100 0.364000 -0.921700\nvn -0.166900 0.546900 -0.820400\nvn 0.004200 0.778000 -0.628200\nvn 0.796100 0.565500 -0.215400\nvn 0.185200 0.384700 -0.904200\nvn 0.102200 -0.591000 0.800100\nvn -0.475000 0.069600 0.877200\nvn 0.806900 0.088100 0.584000\nvn 0.803400 0.065100 0.591800\nvn 0.906200 0.151900 0.394700\nvn 0.875900 0.092600 0.473600\nvn 0.883200 0.248800 0.397600\nvn -0.179900 -0.121100 0.976200\nvn -0.429100 0.025100 0.902900\nvn -0.426900 0.016200 0.904100\nvn -0.177700 -0.140900 0.973900\nvn -0.580900 0.391900 -0.713500\nvn -0.580800 0.390700 -0.714100\nvn -0.529000 0.398100 -0.749400\nvn -0.492400 0.382200 -0.781900\nvn 0.895000 0.080200 0.438800\nvn -0.837100 0.145100 0.527500\nvn 0.992100 0.120500 -0.033500\nvn -0.797000 0.381200 -0.468500\nvn 0.885300 0.291000 -0.362700\nvn -0.522900 0.107800 -0.845500\nvn -0.420200 0.183900 -0.888600\nvn -0.421600 0.171300 -0.890400\nvn -0.521600 0.111300 -0.845900\nvn 0.965800 0.247800 0.076300\nvn 0.085200 0.283600 -0.955100\nvn 0.200000 0.319000 -0.926400\nvn 0.290300 0.330200 -0.898100\nvn 0.285000 0.326100 -0.901300\nvn 0.197500 0.326800 -0.924200\nvn -0.422900 0.378900 -0.823200\nvn -0.927700 0.276000 0.251200\nvn -0.928100 0.274300 0.251700\nvn -0.941600 0.292600 0.166400\nvn -0.948100 0.220500 0.229100\nvn -0.950300 0.214700 0.225600\nvn 0.915600 0.235000 -0.326200\nvn -0.493500 0.104200 0.863400\nvn -0.313100 0.115900 0.942600\nvn -0.286900 0.057000 0.956200\nvn -0.374300 0.163500 0.912700\nvn 0.363400 0.116600 0.924300\nvn -0.326300 0.022900 0.945000\nvn -0.512100 -0.047900 0.857500\nvn -0.501400 -0.042100 0.864100\nvn -0.323300 0.026400 0.945900\nvn -0.635700 0.354800 -0.685500\nvn -0.653600 0.236300 -0.718900\nvn -0.654500 0.246800 -0.714600\nvn -0.531500 0.396900 -0.748300\nvn -0.966700 0.191300 -0.170000\nvn -0.429900 0.243800 -0.869300\nvn -0.389900 0.206700 -0.897300\nvn -0.386800 0.212100 -0.897400\nvn -0.430800 0.240700 -0.869700\nvn 0.935800 0.033700 0.350800\nvn 0.512500 0.315300 -0.798700\nvn 0.512100 0.314100 -0.799400\nvn 0.683900 0.167400 -0.710000\nvn -0.419600 0.392600 -0.818400\nvn -0.983800 0.112500 0.139500\nvn -0.985100 0.109300 0.132700\nvn -0.999700 0.012100 -0.021900\nvn -0.999900 0.004900 -0.013700\nvn -0.822800 -0.160900 -0.545000\nvn 0.959400 -0.098500 0.264100\nvn 0.172900 -0.130400 -0.976200\nvn -0.690900 -0.149100 0.707400\nvn -0.705300 -0.167500 0.688800\nvn 0.466800 -0.017500 0.884200\nvn -0.485300 0.095500 0.869100\nvn -0.754600 -0.056100 0.653700\nvn -0.742200 -0.041400 0.668900\nvn -0.699300 -0.032800 0.714000\nvn -0.483300 0.095800 0.870200\nvn -0.946400 -0.003600 0.322900\nvn 0.940400 -0.099900 -0.325000\nvn -0.973900 -0.115900 0.194800\nvn 0.893500 -0.120000 -0.432600\nvn -0.533500 -0.037400 -0.844900\nvn -0.526800 -0.053100 -0.848300\nvn -0.499600 0.074000 -0.863100\nvn -0.230000 -0.040200 -0.972400\nvn -0.223900 -0.026500 -0.974200\nvn 0.888100 -0.028500 0.458600\nvn -0.072800 -0.095800 -0.992700\nvn 0.454200 -0.096100 -0.885700\nvn 0.560000 -0.046300 -0.827200\nvn 0.552200 -0.053700 -0.831900\nvn 0.466000 -0.057100 -0.882900\nvn 0.452800 -0.094900 -0.886500\nvn -0.429200 -0.031600 -0.902600\nvn -0.987800 -0.153400 0.024900\nvn -0.989000 -0.144900 0.030900\nvn -0.983000 -0.151200 -0.103900\nvn -0.992400 -0.122000 -0.011900\nvn -0.992500 -0.120800 -0.015400\nvn 0.983800 -0.129600 -0.124000\nvn -0.993000 -0.068200 0.096700\nvn 0.057500 0.149300 0.987100\nvn -0.596600 -0.156200 0.787100\nvn -0.600400 -0.343500 -0.722100\nvn 0.997500 -0.061000 0.035300\nvn 0.682400 -0.071500 0.727400\nvn -0.977200 -0.183300 0.107200\nvn -0.980800 -0.135900 0.139700\nvn -0.933400 -0.209600 0.291300\nvn -0.951500 -0.110900 0.286900\nvn -0.948900 -0.100800 0.299000\nvn 0.970300 -0.149500 -0.190000\nvn -0.734500 -0.021600 -0.678200\nvn 0.942600 -0.157200 -0.294700\nvn 0.724800 -0.046800 -0.687400\nvn 0.640700 -0.027300 -0.767200\nvn 0.645700 -0.027900 -0.763000\nvn -0.287900 -0.075500 -0.954600\nvn 0.555700 -0.123800 -0.822100\nvn -0.081400 -0.180700 0.980100\nvn 0.276500 -0.125800 0.952700\nvn -0.208200 -0.124000 -0.970200\nvn 0.983900 -0.111700 -0.139000\nvn 0.910800 -0.115900 -0.396300\nvn 0.913900 -0.116000 -0.388900\nvn 0.741200 -0.111400 -0.661900\nvn 0.995600 -0.072600 -0.058500\nvn -0.336200 -0.367200 -0.867200\nvn -0.991500 -0.122700 -0.042900\nvn -0.273200 -0.252800 0.928100\nvn -0.290900 -0.250000 0.923500\nvn -0.988400 -0.141700 -0.054400\nvn -0.987200 -0.147000 -0.061800\nvn -0.964500 -0.110000 -0.239900\nvn -0.964300 -0.103600 -0.243600\nvn -0.693800 -0.116900 -0.710600\nvn -0.896300 -0.152800 0.416300\nvn -0.897000 -0.154900 0.414000\nvn -0.946100 -0.134900 0.294300\nvn -0.590700 -0.213800 -0.778000\nvn -0.996900 -0.078700 0.006200\nvn -0.994800 -0.046200 0.091000\nvn 0.319100 -0.160900 0.933900\nvn 0.952100 -0.094800 0.290700\nvn 0.311900 -0.185200 -0.931900\nvn 0.985300 -0.153600 -0.074700\nvn 0.996300 -0.071500 0.046300\nvn -0.715500 0.098500 -0.691600\nvn -0.194700 -0.020600 -0.980600\nvn -0.700800 0.132000 -0.701000\nvn 0.728200 -0.091600 -0.679200\nvn 0.723500 -0.120300 -0.679700\nvn 0.742900 -0.058700 -0.666800\nvn 0.800600 -0.084200 -0.593200\nvn -0.184500 -0.009600 -0.982800\nvn -0.980900 -0.130700 -0.144000\nvn -0.978400 -0.140600 -0.151400\nvn -0.871600 -0.105000 -0.478700\nvn -0.983000 -0.081900 0.164200\nvn -0.982600 -0.081500 0.166500\nvn -0.948800 -0.127400 0.289100\nvn -0.440900 -0.057500 -0.895700\nvn 0.044700 0.888700 -0.456300\nvn 0.033900 0.887400 -0.459700\nvn -0.091300 0.080100 0.992600\nvn -0.621000 0.068700 -0.780800\nvn 0.994200 -0.095200 0.050300\nvn 0.303800 0.308700 -0.901300\nvn 0.136200 0.024800 0.990400\nvn -0.642400 -0.096800 0.760200\nvn -0.705300 -0.037800 0.707900\nvn -0.635300 -0.095800 0.766300\nvn -0.725800 0.006000 0.687800\nvn 0.957600 -0.092400 -0.272700\nvn -0.999400 -0.031100 0.015100\nvn 0.776200 0.158100 -0.610300\nvn -0.230900 0.108800 -0.966900\nvn -0.235500 0.113300 -0.965200\nvn 0.898900 0.030500 0.437100\nvn 0.305400 0.244800 -0.920200\nvn 0.520800 0.015800 -0.853500\nvn 0.467800 -0.054600 -0.882100\nvn 0.682900 0.159100 -0.713000\nvn -0.487000 0.295200 -0.822000\nvn -0.969000 -0.148800 0.197300\nvn -0.969100 -0.154800 0.192100\nvn -0.984500 -0.148400 -0.093600\nvn 0.998200 0.050600 -0.031700\nvn 0.188400 0.081000 0.978700\nvn 0.282900 0.040500 0.958300\nvn 0.317100 -0.482200 0.816600\nvn 0.371200 -0.557700 0.742400\nvn 0.276400 -0.522400 0.806600\nvn -0.100200 0.047400 0.993800\nvn -0.054100 0.000600 0.998500\nvn -0.384400 0.070400 0.920500\nvn -0.212300 0.099000 0.972200\nvn -0.215500 0.097400 0.971600\nvn -0.090900 0.077500 0.992800\nvn -0.095900 0.078600 0.992200\nvn -0.008900 0.025700 0.999600\nvn 0.313400 0.028800 0.949200\nvn 0.563500 -0.087900 0.821400\nvn 0.555100 -0.071300 0.828700\nvn 0.148200 -0.188400 0.970800\nvn 0.150400 -0.177600 0.972500\nvn -0.072500 -0.223800 0.971900\nvn 0.539000 -0.077500 0.838700\nvn 0.243200 -0.122400 0.962200\nvn 0.242300 -0.108300 0.964100\nvn 0.209500 0.062500 0.975800\nvn 0.391000 0.114400 0.913200\nvn 0.388700 0.111100 0.914600\nvn 0.421900 0.005400 0.906600\nvn 0.325100 0.022000 0.945400\nvn -0.383700 0.073800 0.920500\nvn 0.301000 0.065000 0.951400\nvn 0.545500 -0.090500 0.833200\nvn 0.198000 0.059800 0.978400\nvn 0.113000 -0.501000 0.858000\nvn 0.132400 -0.667000 0.733100\nvn 0.047600 -0.111500 0.992600\nvn 0.028700 -0.711600 0.702000\nvn -0.026500 -0.618300 0.785500\nvn 0.283500 0.031300 0.958400\nvn 0.296000 0.032700 0.954600\nvn 0.189300 0.093600 0.977400\nvn 0.125900 0.081200 0.988700\nvn 0.119800 0.090900 0.988600\nvn 0.375800 0.028300 0.926300\nvn 0.183700 0.099300 0.977900\nvn 0.382300 -0.045000 0.922900\nvn 0.596200 -0.141800 0.790200\nvn 0.584500 -0.122100 0.802100\nvn 0.185100 0.010600 0.982600\nvn 0.369200 -0.030200 0.928800\nvn 0.836600 -0.103500 0.537900\nvn 0.840100 -0.100400 0.532900\nvn 0.842600 -0.103400 0.528500\nvn 0.924700 -0.070300 0.374000\nvn 0.926300 -0.057400 0.372400\nvn -0.173400 -0.334600 0.926200\nvn -0.204800 -0.338800 0.918300\nvn -0.260700 -0.352600 0.898700\nvn -0.284300 -0.349200 0.892800\nvn 0.783400 -0.099800 0.613400\nvn 0.784600 -0.092000 0.613100\nvn 0.372800 0.022000 0.927600\nvn 0.186600 0.012100 0.982400\nvn 0.382900 0.023800 0.923500\nvn 0.800200 0.097500 0.591700\nvn 0.853000 0.060300 0.518400\nvn 0.854600 0.050800 0.516700\nvn 0.853800 0.232100 0.466000\nvn 0.901700 0.065000 0.427400\nvn 0.902900 0.066800 0.424600\nvn 0.895100 0.109500 0.432200\nvn 0.891700 -0.136900 0.431300\nvn 0.889300 -0.143900 0.433900\nvn 0.936100 -0.129200 0.327100\nvn 0.993800 -0.063200 0.091700\nvn 0.994100 -0.063100 0.087500\nvn 0.968300 -0.072100 0.238900\nvn 0.950000 -0.077400 0.302400\nvn 0.950100 -0.079700 0.301500\nvn 0.942100 -0.108600 0.317100\nvn 0.872900 -0.049300 0.485400\nvn 0.872800 -0.057300 0.484600\nvn 0.920600 0.008300 0.390400\nvn 0.764200 0.059100 0.642200\nvn 0.793100 0.092000 0.602100\nvn 0.875300 0.074100 0.477900\nvn 0.894800 0.117500 0.430600\nvn 0.907900 0.152700 0.390400\nvn 0.935900 -0.124500 0.329500\nvn 0.965000 -0.082600 0.248800\nvn 0.937600 -0.125300 0.324200\nvn 0.922400 0.021400 0.385700\nvn 0.674300 -0.104900 0.730900\nvn 0.689300 -0.109700 0.716100\nvn 0.566400 -0.021300 0.823800\nvn 0.721700 0.024800 0.691700\nvn 0.723400 0.026200 0.689900\nvn 0.768000 0.085800 0.634600\nvn 0.785100 0.101500 0.611000\nvn 0.787800 0.103700 0.607100\nvn 0.736700 0.014500 0.676100\nvn 0.848600 -0.110000 0.517500\nvn 0.908000 -0.127700 0.399100\nvn 0.909000 -0.129900 0.395900\nvn 0.983800 -0.080400 0.160000\nvn 0.997000 -0.076900 0.003100\nvn 0.997000 -0.077000 0.006400\nvn 0.734600 0.057600 0.676000\nvn 0.766300 -0.071100 0.638500\nvn 0.757000 -0.054000 0.651100\nvn 0.730300 -0.090000 0.677100\nvn 0.943400 -0.075300 0.323000\nvn 0.938700 -0.065700 0.338300\nvn 0.838200 -0.063100 0.541600\nvn 0.780800 -0.072500 0.620500\nvn 0.781000 -0.073400 0.620100\nvn 0.843100 -0.104200 0.527500\nvn 0.983100 -0.081900 0.163900\nvn 0.769000 0.121400 0.627500\nvn 0.747200 0.077000 0.660100\nvn 0.732800 -0.098000 0.673300\nvn 0.740400 0.008200 0.672100\nvn -0.230800 -0.031700 0.972500\nvn -0.224800 -0.041800 0.973500\nvn -0.315300 -0.423900 0.849100\nvn -0.194100 -0.083900 0.977400\nvn -0.178300 -0.094600 0.979400\nvn -0.309900 -0.442100 0.841700\nvn -0.305900 -0.426300 0.851300\nvn -0.247700 0.000400 0.968800\nvn -0.394300 0.073500 0.916000\nvn -0.299700 0.116300 0.946900\nvn -0.392700 0.070300 0.917000\nvn -0.483400 -0.200000 0.852200\nvn -0.462200 -0.184800 0.867300\nvn -0.311600 -0.221300 0.924000\nvn -0.357400 0.153500 0.921200\nvn -0.355200 0.155300 0.921800\nvn -0.366600 0.109000 0.923900\nvn -0.375400 0.105400 0.920800\nvn -0.608400 0.179600 0.773000\nvn -0.634300 0.153600 0.757600\nvn -0.309500 0.125200 0.942600\nvn -0.466800 0.093900 0.879300\nvn -0.560300 0.012500 0.828200\nvn -0.296200 -0.086900 0.951100\nvn -0.445000 -0.183100 0.876600\nvn -0.521000 0.060400 0.851400\nvn -0.519000 0.060500 0.852600\nvn -0.321600 0.085300 0.943000\nvn -0.494400 0.003800 0.869200\nvn -0.445200 -0.030100 0.894900\nvn -0.738000 -0.116900 0.664600\nvn -0.322700 -0.120400 0.938800\nvn -0.290400 -0.160200 0.943400\nvn -0.752700 -0.202600 0.626400\nvn -0.750300 -0.157000 0.642200\nvn -0.542100 -0.039500 0.839400\nvn -0.706500 0.127200 0.696200\nvn -0.731200 0.140000 0.667600\nvn -0.731400 0.143200 0.666700\nvn -0.701000 0.117400 0.703400\nvn -0.773000 0.076600 0.629700\nvn -0.771700 0.080800 0.630800\nvn -0.775600 0.054100 0.628900\nvn -0.913800 0.094600 0.394900\nvn -0.917000 0.090200 0.388400\nvn -0.783500 0.041400 0.620000\nvn -0.887200 0.022300 0.460800\nvn -0.883500 0.017100 0.468000\nvn -0.968700 -0.102600 0.225900\nvn -0.987100 -0.106800 0.119000\nvn -0.983400 -0.125400 0.131000\nvn -0.970600 -0.069900 0.230000\nvn -0.891800 -0.086700 0.444000\nvn 0.185600 -0.178400 0.966200\nvn 0.178100 -0.178700 0.967700\nvn -0.854500 -0.139900 0.500100\nvn -0.845200 0.011100 0.534300\nvn -0.840100 0.011400 0.542300\nvn -0.779000 0.054400 0.624600\nvn -0.784800 0.011400 0.619600\nvn -0.790600 0.031000 0.611500\nvn -0.814700 -0.101900 0.570800\nvn -0.874800 -0.061200 0.480700\nvn -0.874800 -0.082500 0.477400\nvn -0.936100 0.220700 0.273700\nvn -0.868400 0.186500 0.459500\nvn -0.881300 0.150300 0.448100\nvn -0.880900 0.155400 0.446900\nvn -0.910600 0.061400 0.408600\nvn -0.910900 0.063400 0.407600\nvn -0.882700 -0.020100 0.469400\nvn -0.967900 -0.045000 0.247100\nvn -0.965700 -0.044700 0.255700\nvn -0.995500 -0.019400 0.092700\nvn -0.994400 -0.072400 0.076400\nvn -0.966700 -0.121800 0.225100\nvn -0.966900 -0.121300 0.224300\nvn -0.895400 -0.061500 0.441000\nvn -0.896600 -0.074500 0.436500\nvn -0.979500 0.011300 0.201100\nvn -0.882700 -0.052100 0.467100\nvn -0.947000 -0.079600 0.311300\nvn -0.945600 -0.078600 0.315700\nvn -0.818300 0.110600 0.564100\nvn -0.823300 0.126000 0.553400\nvn -0.844400 -0.142100 0.516400\nvn -0.936400 0.226900 0.267600\nvn -0.994800 -0.068500 0.075800\nvn -0.879400 -0.050900 0.473300\nvn -0.668600 0.231300 0.706700\nvn -0.637700 0.202500 0.743100\nvn -0.871500 0.262500 0.414200\nvn -0.557200 0.211500 0.802900\nvn -0.556000 0.202200 0.806200\nvn -0.909300 0.042600 0.413900\nvn -0.921500 0.039000 0.386300\nvn -0.781000 0.032800 0.623600\nvn -0.881400 0.270600 0.387200\nvn -0.972800 -0.206900 -0.103700\nvn -0.996000 -0.081200 0.037800\nvn -0.975400 -0.210200 0.066700\nvn -0.946400 -0.090000 -0.310200\nvn -0.936200 -0.113500 -0.332700\nvn -0.978700 -0.122000 0.164900\nvn -0.978100 -0.112700 0.174900\nvn -0.976200 -0.134500 0.170200\nvn -0.975200 -0.142000 0.169300\nvn -0.822300 0.122300 0.555800\nvn -0.821700 0.121700 0.556700\nvn -0.846000 0.166300 0.506500\nvn -0.802200 -0.056700 0.594300\nvn -0.801100 -0.063800 0.595100\nvn -0.846500 0.057400 0.529200\nvn -0.940100 -0.077900 0.331900\nvn -0.944100 -0.088700 0.317600\nvn -0.863700 -0.026400 0.503200\nvn -0.965400 -0.154900 0.209700\nvn -0.905100 -0.090900 0.415200\nvn -0.907500 -0.070800 0.414100\nvn -0.821800 -0.132100 0.554200\nvn -0.843100 0.169000 0.510500\nvn -0.766000 0.052100 0.640600\nvn -0.846200 0.069900 0.528200\nvn -0.861200 -0.023700 0.507600\nvn -0.964700 -0.152600 0.214600\nvn -0.815800 -0.124900 0.564700\nvn -0.782900 0.552900 0.285200\nvn -0.873700 0.486000 0.021800\nvn -0.878800 0.475500 0.040500\nvn -0.944800 0.324100 0.047300\nvn -0.942000 0.333000 0.040300\nvn -0.946600 0.284900 0.150900\nvn -0.888800 -0.220300 -0.401800\nvn -0.945900 -0.131200 -0.296700\nvn -0.966500 -0.205500 -0.153700\nvn -0.955600 -0.132200 -0.263200\nvn -0.962100 -0.107800 -0.250400\nvn -0.991600 -0.129200 -0.005300\nvn -0.746600 0.508100 0.429400\nvn -0.755200 0.477600 0.448800\nvn -0.996100 -0.078000 0.040800\nvn -0.928000 0.370700 -0.037500\nvn -0.927000 0.373300 -0.036700\nvn -0.936400 0.264200 0.231000\nvn -0.957900 0.242000 0.154700\nvn -0.958300 0.240000 0.154600\nvn -0.964500 0.091000 0.247900\nvn -0.962600 0.092000 0.254600\nvn -0.999700 0.007500 -0.022200\nvn -1.000000 0.002400 -0.002500\nvn -0.982500 -0.134400 0.128500\nvn -0.982900 -0.125400 0.134800\nvn -0.984500 -0.145100 -0.098000\nvn -0.991400 -0.130800 0.003200\nvn -0.989800 -0.141900 -0.011400\nvn -0.968000 -0.158500 -0.194600\nvn -0.967000 -0.158100 -0.199600\nvn -0.965800 -0.166600 0.198900\nvn -0.966000 -0.171100 0.193700\nvn -0.984600 -0.147700 -0.092800\nvn -0.853600 0.503500 -0.133500\nvn -0.850600 0.501900 -0.156700\nvn -0.849500 0.527200 0.018600\nvn -0.674500 0.427500 -0.601900\nvn -0.672300 0.424200 -0.606700\nvn -0.787300 0.459100 -0.411600\nvn -0.667300 0.397500 -0.629900\nvn -0.664200 0.392100 -0.636500\nvn -0.744500 0.422200 -0.517100\nvn -0.775200 0.286200 -0.563100\nvn -0.816400 0.111500 -0.566500\nvn -0.809100 0.139900 -0.570700\nvn -0.843300 -0.188800 -0.503200\nvn -0.878500 -0.175300 -0.444300\nvn -0.877400 -0.177900 -0.445500\nvn -0.911100 -0.066300 -0.406800\nvn -0.823900 -0.135300 -0.550300\nvn -0.826500 -0.133000 -0.547000\nvn -0.851300 0.523400 0.036900\nvn -0.841500 0.519500 0.148500\nvn -0.790500 0.490500 -0.366600\nvn -0.746100 0.418000 -0.518100\nvn -0.772200 0.291600 -0.564400\nvn -0.841400 -0.187600 -0.506700\nvn -0.910800 -0.044300 -0.410500\nvn -0.870100 -0.129000 -0.475600\nvn -0.918100 -0.113700 -0.379700\nvn -0.917500 -0.110800 -0.381800\nvn -0.869700 -0.129000 -0.476300\nvn -0.873400 -0.134500 -0.467900\nvn -0.879300 -0.115400 -0.462000\nvn -0.947700 -0.158100 -0.277300\nvn -0.754800 -0.266300 -0.599400\nvn -0.738600 -0.287000 -0.610000\nvn -0.919800 -0.206500 -0.333700\nvn -0.924400 -0.206300 -0.320900\nvn -0.878000 -0.138200 -0.458200\nvn -0.857200 -0.090800 -0.506900\nvn -0.857100 -0.090500 -0.507000\nvn -0.760100 -0.143200 -0.633700\nvn -0.771100 -0.116200 -0.626100\nvn -0.872800 -0.184100 -0.452000\nvn -0.848300 -0.227400 -0.478100\nvn -0.822900 -0.272100 -0.498700\nvn -0.722900 -0.249000 -0.644500\nvn -0.777400 -0.187700 -0.600300\nvn -0.771200 -0.188300 -0.608100\nvn -0.805000 -0.275500 -0.525400\nvn -0.672200 0.703000 -0.232200\nvn -0.676800 0.697300 -0.236000\nvn -0.718200 0.687000 -0.110500\nvn -0.619500 0.629500 -0.468900\nvn -0.622400 0.634300 -0.458500\nvn -0.577600 0.507200 -0.639600\nvn -0.567400 0.471100 -0.675300\nvn -0.388700 0.400600 -0.829600\nvn -0.380300 0.400300 -0.833700\nvn -0.312400 0.376000 -0.872300\nvn -0.311800 0.371700 -0.874400\nvn -0.327600 0.361000 -0.873100\nvn -0.326800 0.361000 -0.873400\nvn -0.382300 0.335300 -0.861000\nvn -0.374600 0.338300 -0.863200\nvn -0.599400 0.215200 -0.771000\nvn -0.581200 0.236300 -0.778700\nvn -0.835900 -0.110000 -0.537800\nvn -0.862300 -0.158000 -0.481000\nvn -0.863900 -0.157200 -0.478500\nvn -0.805200 0.008600 -0.592900\nvn -0.796400 0.034100 -0.603700\nvn -0.833300 -0.108000 -0.542100\nvn -0.621700 0.775900 -0.106800\nvn -0.623400 0.778500 -0.072400\nvn -0.695300 0.686100 -0.213800\nvn -0.844100 0.388200 -0.369800\nvn -0.838400 0.410200 -0.358800\nvn -0.914600 0.206700 -0.347300\nvn -0.851200 0.285200 -0.440600\nvn -0.852900 0.280800 -0.440000\nvn -0.842000 0.298900 -0.449100\nvn -0.644900 0.359200 -0.674500\nvn -0.779100 0.252100 -0.573900\nvn -0.776500 0.255700 -0.575900\nvn -0.922500 -0.102100 -0.372200\nvn -0.923800 -0.078600 -0.374800\nvn -0.954900 -0.093500 -0.281700\nvn -0.500500 -0.251800 -0.828300\nvn -0.595900 -0.316000 -0.738200\nvn 0.895400 -0.134700 -0.424400\nvn -0.730000 -0.029600 -0.682800\nvn -0.718600 -0.110000 -0.686600\nvn -0.718500 -0.088100 -0.689900\nvn -0.768500 0.102700 -0.631600\nvn -0.762400 0.110500 -0.637500\nvn -0.876400 -0.027000 -0.480800\nvn -0.693000 0.720900 0.002300\nvn -0.697000 0.717000 0.004500\nvn -0.701900 0.668000 -0.247000\nvn -0.915200 0.209400 -0.344400\nvn -0.837200 0.301700 -0.456100\nvn -0.882700 -0.030300 -0.468900\nvn -0.959000 -0.063500 -0.276300\nvn -0.034700 0.707100 -0.706200\nvn -0.059000 0.460200 -0.885800\nvn -0.061300 0.471100 -0.879900\nvn 0.199100 0.869300 -0.452400\nvn 0.191500 0.875500 -0.443600\nvn -0.223200 0.401000 -0.888400\nvn -0.224500 0.399500 -0.888800\nvn -0.093200 0.407600 -0.908400\nvn -0.036300 0.370400 -0.928100\nvn -0.240600 0.354600 -0.903500\nvn -0.231700 0.354400 -0.905900\nvn -0.088000 0.406400 -0.909400\nvn -0.340600 -0.117400 -0.932800\nvn -0.277700 -0.157900 -0.947600\nvn -0.280100 -0.164200 -0.945800\nvn -0.223500 0.008100 -0.974600\nvn -0.337800 -0.112000 -0.934500\nvn -0.296000 -0.055000 -0.953600\nvn -0.146100 -0.130100 -0.980700\nvn -0.148000 -0.131200 -0.980200\nvn -0.299000 -0.070100 -0.951700\nvn -0.156500 -0.354200 -0.922000\nvn -0.094700 -0.438100 -0.893900\nvn -0.095500 -0.438000 -0.893900\nvn -0.154700 -0.340700 -0.927300\nvn -0.021200 0.924600 -0.380300\nvn -0.044900 0.926700 -0.373200\nvn -0.093200 0.933800 -0.345400\nvn -0.099100 0.933400 -0.344800\nvn -0.308800 0.215100 -0.926500\nvn -0.223900 0.010900 -0.974500\nvn -0.309600 0.223700 -0.924100\nvn 0.207700 0.710000 -0.672800\nvn 0.425300 0.431300 -0.795700\nvn 0.408300 0.434500 -0.802800\nvn 0.040400 0.410900 -0.910800\nvn 0.040000 0.410900 -0.910800\nvn 0.294900 0.387300 -0.873500\nvn 0.315000 0.351700 -0.881500\nvn 0.321000 0.351600 -0.879400\nvn 0.120700 0.319000 -0.940000\nvn 0.142500 -0.130700 -0.981100\nvn 0.411800 -0.157400 -0.897500\nvn 0.401700 -0.175000 -0.898900\nvn 0.260500 -0.056000 -0.963800\nvn 0.258600 -0.059400 -0.964100\nvn 0.197100 -0.144900 -0.969600\nvn 0.405000 -0.355600 -0.842300\nvn 0.178100 -0.437100 -0.881600\nvn 0.180400 -0.437100 -0.881100\nvn 0.175700 0.870500 -0.459600\nvn 0.165100 0.878500 -0.448300\nvn 0.205200 0.848000 -0.488500\nvn 0.017300 0.192600 -0.981100\nvn 0.011900 0.195600 -0.980600\nvn 0.246100 0.018900 -0.969100\nvn 0.206200 0.849600 -0.485500\nvn 0.302000 0.386200 -0.871500\nvn 0.139200 -0.124100 -0.982500\nvn 0.200200 -0.169400 -0.965000\nvn 0.055500 0.911700 -0.407100\nvn 0.041400 0.911600 -0.408900\nvn 0.109900 0.318500 -0.941500\nvn 0.284200 0.898000 -0.335800\nvn 0.301500 0.894900 -0.328900\nvn -0.071000 0.823500 -0.562800\nvn 0.753500 0.492700 -0.435300\nvn 0.793500 0.293100 -0.533300\nvn 0.790200 0.294800 -0.537200\nvn 0.885200 0.208000 -0.416200\nvn 0.843900 0.249900 -0.474700\nvn 0.847500 0.246700 -0.470000\nvn 0.749900 0.280600 -0.599100\nvn 0.750400 0.279500 -0.599000\nvn 0.618600 0.226000 -0.752500\nvn 0.792500 -0.130600 -0.595700\nvn 0.656900 -0.107800 -0.746200\nvn 0.650200 -0.130200 -0.748500\nvn 0.769900 -0.285300 -0.570800\nvn 0.651700 -0.342000 -0.676900\nvn 0.654000 -0.341500 -0.675000\nvn 0.781900 -0.097400 -0.615700\nvn 0.782500 -0.098400 -0.614900\nvn 0.876200 -0.167500 -0.451900\nvn 0.743700 0.034300 -0.667600\nvn 0.773400 -0.075400 -0.629400\nvn 0.770600 -0.069800 -0.633400\nvn 0.414000 0.875600 -0.248600\nvn -0.055300 0.810700 -0.582800\nvn 0.884600 0.211000 -0.415700\nvn 0.803200 -0.110500 -0.585300\nvn 0.774300 -0.276300 -0.569200\nvn 0.738500 0.046800 -0.672500\nvn -0.544300 0.626600 -0.557800\nvn -0.549100 0.622800 -0.557300\nvn -0.475600 0.576800 -0.664100\nvn -0.526000 0.631300 -0.569800\nvn -0.231600 0.502400 -0.833000\nvn -0.246500 0.505900 -0.826600\nvn -0.022300 0.402400 -0.915200\nvn -0.456500 0.558800 -0.692300\nvn 0.134100 0.305200 -0.942800\nvn 0.004700 0.348900 -0.937100\nvn 0.005200 0.346100 -0.938200\nvn 0.134300 0.304400 -0.943000\nvn 0.135300 0.386400 -0.912400\nvn 0.135300 0.386300 -0.912400\nvn 0.257300 0.254300 -0.932200\nvn -0.086300 -0.108800 -0.990300\nvn 0.022500 -0.088300 -0.995800\nvn 0.028300 -0.104300 -0.994100\nvn 0.078900 -0.068700 -0.994500\nvn -0.084900 -0.110800 -0.990200\nvn -0.688800 -0.135500 -0.712100\nvn -0.697700 -0.143400 -0.701800\nvn -0.697800 -0.143400 -0.701700\nvn -0.387400 -0.112900 -0.914900\nvn -0.598600 -0.102100 -0.794500\nvn -0.697700 -0.014600 -0.716200\nvn -0.373600 -0.092500 -0.922900\nvn -0.686500 -0.001000 -0.727100\nvn 0.327600 0.025100 -0.944500\nvn 0.332600 0.027400 -0.942700\nvn 0.261900 0.247700 -0.932700\nvn 0.857800 0.447500 0.252700\nvn 0.929600 0.308000 0.202600\nvn 0.917600 0.321800 0.233200\nvn 0.820400 0.409700 0.398800\nvn 0.843400 0.461900 0.274300\nvn 0.940800 0.338800 -0.006100\nvn 0.927800 0.312400 -0.204000\nvn 0.928300 0.319500 -0.189900\nvn 0.936000 0.351200 0.021300\nvn 0.921200 0.297200 -0.251200\nvn 0.952500 0.243400 -0.182800\nvn 0.953500 0.243500 -0.177400\nvn 0.920300 0.299400 -0.251500\nvn 0.990300 0.132800 0.040100\nvn 0.989400 0.136800 0.047700\nvn 0.962500 0.072300 -0.261300\nvn 0.986900 -0.121300 -0.105700\nvn 0.971000 -0.101500 -0.216400\nvn 0.970500 -0.106400 -0.216000\nvn 0.961900 -0.080500 -0.261300\nvn 0.987400 -0.116200 -0.107400\nvn 0.978600 -0.069100 -0.193900\nvn 0.963500 -0.063000 -0.260000\nvn 0.964100 -0.062700 -0.258100\nvn 0.977000 -0.117800 -0.177900\nvn 0.971300 -0.101800 -0.215100\nvn 0.989800 -0.114800 -0.084300\nvn 0.977200 -0.119400 -0.175300\nvn 0.990400 -0.108800 -0.084700\nvn 0.975900 -0.035400 -0.215500\nvn 0.960700 -0.079900 -0.265800\nvn 0.961200 0.068200 -0.267300\nvn 0.881500 0.462800 0.093100\nvn 0.892900 0.449400 0.027200\nvn 0.889400 0.454400 0.049900\nvn 0.887800 0.390300 0.244000\nvn 0.878300 0.464200 0.114500\nvn 0.815400 0.495800 -0.298600\nvn 0.701600 0.371500 -0.608000\nvn 0.706100 0.425500 -0.565900\nvn 0.814700 0.527900 -0.239600\nvn 0.820900 0.275700 -0.500100\nvn 0.938700 0.196300 -0.283400\nvn 0.936200 0.200900 -0.288400\nvn 0.817600 0.280500 -0.502800\nvn 0.984600 0.155000 -0.080600\nvn 0.985000 0.154500 -0.076300\nvn 0.974900 0.112600 -0.191800\nvn 0.912000 -0.109400 -0.395200\nvn 0.968900 -0.170000 -0.179900\nvn 0.973200 -0.147500 -0.176500\nvn 0.987900 -0.107200 -0.111800\nvn 0.910900 -0.118100 -0.395200\nvn 0.985700 -0.107100 -0.129700\nvn 0.973100 -0.110600 -0.202000\nvn 0.973100 -0.110600 -0.201800\nvn 0.993000 -0.117000 0.014800\nvn 0.987000 -0.106200 -0.120400\nvn 0.974200 -0.158900 -0.160500\nvn 0.991900 -0.126500 0.003500\nvn 0.966600 -0.184000 -0.178400\nvn 0.961700 0.006200 -0.274000\nvn 0.989300 -0.097300 -0.108700\nvn 0.974800 0.106200 -0.196200\nvn 0.856500 -0.444600 -0.262200\nvn 0.821300 -0.418800 -0.387300\nvn 0.909800 -0.264000 -0.320200\nvn 0.972500 0.038100 0.229600\nvn 0.979000 0.015000 0.203300\nvn 0.971600 0.060500 0.228800\nvn 0.988800 0.001900 0.149100\nvn 0.960900 0.013600 0.276400\nvn 0.983100 0.013200 0.182700\nvn 0.485600 0.874100 -0.013100\nvn 0.501700 0.854200 0.136400\nvn 0.609900 0.785500 0.104200\nvn 0.942600 0.021900 0.333100\nvn 0.955300 0.024500 0.294500\nvn 0.927800 0.104900 0.358000\nvn 0.966500 -0.063800 0.248500\nvn 0.980700 0.015900 0.195000\nvn 0.986700 0.145900 -0.071500\nvn 0.990100 0.071800 -0.120100\nvn 0.973500 0.045300 -0.224200\nvn 0.924300 0.381500 -0.001200\nvn 0.794800 0.604700 0.051300\nvn 0.770300 0.622100 0.140400\nvn 0.757300 -0.207700 -0.619100\nvn 0.635300 -0.381900 -0.671200\nvn 0.446600 -0.164300 -0.879500\nvn 0.994100 0.043600 0.098800\nvn 0.995500 -0.014000 0.093900\nvn 0.887900 0.270700 0.371800\nvn 0.942700 0.314600 0.110700\nvn 0.486600 0.836600 0.251700\nvn 0.438900 0.739500 0.510300\nvn 0.563700 0.684700 0.461900\nvn 0.963800 0.069600 0.257400\nvn 0.488500 -0.111600 -0.865400\nvn 0.456600 -0.037900 -0.888900\nvn 0.995000 -0.029200 -0.095900\nvn 0.975200 0.022700 -0.219900\nvn 0.951700 -0.028500 0.305800\nvn 0.955100 -0.028200 0.294800\nvn 0.320400 0.858600 -0.400300\nvn 0.427800 0.886300 -0.177000\nvn 0.530200 0.834900 -0.147300\nvn 0.206600 0.765700 -0.609000\nvn 0.431500 0.807000 -0.403100\nvn 0.994400 0.081500 0.066600\nvn 0.865700 0.002200 -0.500600\nvn 0.824200 -0.065200 -0.562500\nvn 0.536500 -0.067600 -0.841200\nvn 0.999100 -0.022800 -0.036200\nvn 0.599800 0.774200 0.202200\nvn 0.772300 0.451600 -0.446700\nvn 0.566800 0.350700 -0.745500\nvn 0.474500 0.513700 -0.714800\nvn 0.581900 -0.022500 -0.812900\nvn 0.445400 -0.106500 -0.889000\nvn 0.614700 0.051400 -0.787000\nvn 0.471600 -0.102300 -0.875800\nvn 0.323900 0.553500 0.767300\nvn 0.483100 0.509100 0.712300\nvn 0.263100 0.517400 0.814200\nvn 0.235500 0.553100 0.799100\nvn 0.327100 0.519500 0.789300\nvn 0.895400 0.426400 -0.127600\nvn 0.625300 0.652800 -0.427600\nvn 0.972400 -0.082400 -0.218100\nvn 0.884400 -0.024400 -0.466000\nvn 0.873700 0.071200 -0.481200\nvn 0.676000 -0.564300 -0.473900\nvn 0.595000 -0.580600 -0.555800\nvn 0.392500 -0.616600 -0.682400\nvn 0.994600 0.041800 0.094500\nvn 0.916400 0.400100 0.009900\nvn 0.737900 0.660500 -0.138800\nvn 0.311800 0.719700 -0.620300\nvn 0.310800 0.699500 -0.643500\nvn 0.990000 -0.122600 -0.069200\nvn 0.981600 0.091300 -0.167900\nvn 0.735700 0.336200 0.587900\nvn 0.683600 0.591700 0.427300\nvn 0.494700 -0.533500 -0.686000\nvn 0.299400 -0.309600 -0.902500\nvn 0.782100 -0.536400 -0.317100\nvn 0.707900 -0.559700 -0.430700\nvn 0.924600 0.379100 -0.037200\nvn 0.780900 0.624100 -0.024600\nvn 0.467400 0.880600 -0.077500\nvn 0.588700 0.808300 -0.008500\nvn 0.997300 0.047000 -0.055100\nvn 0.594800 0.193600 -0.780200\nvn 0.554700 0.087200 -0.827400\nvn 0.611500 0.302000 -0.731300\nvn 0.561600 0.398700 -0.725000\nvn 0.384800 -0.227100 -0.894600\nvn 0.369100 -0.098700 -0.924100\nvn 0.990800 -0.094000 -0.097200\nvn 0.927500 -0.105300 0.358700\nvn 0.606000 0.378000 0.699900\nvn 0.580400 0.449500 0.679000\nvn 0.068400 0.801900 -0.593500\nvn 0.167000 0.897200 -0.408700\nvn 0.083300 0.826700 -0.556500\nvn 0.240400 0.951700 -0.191200\nvn 0.280100 0.943300 0.177900\nvn 0.260200 0.906600 0.332300\nvn 0.252700 0.963300 -0.090900\nvn 0.256300 0.966600 0.000400\nvn 0.195300 0.784200 0.588900\nvn 0.172300 0.568200 0.804700\nvn 0.153900 0.498800 0.852900\nvn 0.115300 0.512900 0.850700\nvn 0.379400 -0.606100 -0.699000\nvn 0.375700 -0.542300 -0.751400\nvn 0.175600 -0.438100 -0.881600\nvn 0.649600 -0.369700 -0.664400\nvn 0.533400 -0.246800 -0.809000\nvn 0.514100 -0.337800 -0.788400\nvn 0.201900 -0.387700 -0.899400\nvn 0.196300 -0.182900 -0.963300\nvn 0.573200 -0.476200 -0.666700\nvn 0.224500 -0.509700 -0.830500\nvn 0.080200 -0.431400 -0.898600\nvn 0.323100 -0.244100 -0.914300\nvn 0.299100 -0.267100 -0.916000\nvn 0.061900 -0.212400 -0.975200\nvn -0.046300 0.797200 -0.601900\nvn -0.051700 0.838500 -0.542400\nvn 0.002500 0.899500 -0.436900\nvn 0.012200 0.979200 0.202600\nvn 0.020500 0.977200 -0.211400\nvn 0.014000 0.997100 -0.074600\nvn 0.007400 0.999800 0.019000\nvn 0.010300 0.777200 0.629100\nvn 0.018800 0.922800 0.384800\nvn 0.024700 0.599200 0.800200\nvn 0.041400 0.495200 0.867800\nvn -0.019600 -0.498700 -0.866500\nvn -0.046800 -0.403900 -0.913600\nvn 0.377700 -0.276100 -0.883800\nvn -0.102400 -0.065800 -0.992600\nvn -0.007700 -0.107500 -0.994100\nvn -0.043600 -0.222100 -0.974000\nvn 0.014600 -0.256300 -0.966500\nvn -0.887800 -0.292400 -0.355400\nvn -0.791700 -0.431900 -0.432000\nvn -0.834300 -0.451800 -0.315900\nvn -0.956100 0.064800 0.285600\nvn -0.970100 0.058700 0.235400\nvn -0.962900 0.032200 0.267900\nvn -0.962700 -0.013900 0.270000\nvn -0.983900 -0.074600 0.162200\nvn -0.965400 -0.054400 0.254900\nvn -0.610500 0.788700 0.071700\nvn -0.542700 0.834400 0.095900\nvn -0.549600 0.835200 -0.015700\nvn -0.940400 0.091400 0.327500\nvn -0.970300 0.118900 0.210700\nvn -0.902900 0.152200 0.401900\nvn -0.995800 0.011200 0.090600\nvn -0.975000 -0.056300 0.214900\nvn -0.982100 0.169500 -0.081400\nvn -0.975500 0.133900 -0.174300\nvn -0.977300 0.054700 -0.204600\nvn -0.898500 0.377000 0.224800\nvn -0.790600 0.572200 0.218000\nvn -0.783600 0.616600 0.075700\nvn -0.728700 -0.229100 -0.645400\nvn -0.490900 -0.115900 -0.863500\nvn -0.450500 -0.159300 -0.878400\nvn -0.987000 0.018500 0.159300\nvn -0.993600 -0.043500 0.104100\nvn -0.856100 0.384300 0.345600\nvn -0.786000 0.492300 0.374000\nvn -0.641200 0.639100 0.424600\nvn -0.441400 0.743500 0.502400\nvn -0.504800 0.834300 0.221400\nvn -0.966200 0.017500 0.257200\nvn -0.499800 -0.063200 -0.863800\nvn -0.487900 -0.053400 -0.871200\nvn -0.994600 -0.042200 -0.095000\nvn -0.979800 -0.004700 -0.199700\nvn -0.985900 -0.026800 -0.164900\nvn -0.991100 0.131300 0.023000\nvn -0.997700 0.053600 0.042200\nvn -0.886000 -0.135900 0.443400\nvn -0.536100 0.830400 -0.151500\nvn -0.492400 0.849600 -0.188900\nvn -0.363400 0.834900 -0.413300\nvn -0.428300 0.799800 -0.420500\nvn -0.251300 0.747000 -0.615500\nvn -0.981200 0.097400 0.166600\nvn -0.978700 0.029400 0.203100\nvn -0.869800 0.034200 -0.492100\nvn -0.594800 -0.026200 -0.803400\nvn -0.543300 -0.076400 -0.836000\nvn -0.997300 -0.073000 0.005300\nvn -0.990000 -0.135500 -0.038500\nvn -0.963700 0.039400 0.264000\nvn -0.669400 0.723200 0.169700\nvn -0.742100 0.452400 -0.494500\nvn -0.588200 0.660700 -0.466200\nvn -0.464300 0.531300 -0.708500\nvn -0.485600 -0.148300 -0.861500\nvn -0.469300 -0.131200 -0.873200\nvn -0.642800 0.047200 -0.764600\nvn -0.575500 0.015500 -0.817600\nvn -0.888300 0.027900 -0.458400\nvn -0.486000 0.518700 0.703400\nvn -0.362000 0.561600 0.744000\nvn -0.322000 0.460500 0.827200\nvn -0.225000 0.447100 0.865700\nvn -0.302800 0.474100 0.826800\nvn -0.723300 0.672200 -0.157900\nvn -0.809100 -0.070700 -0.583300\nvn -0.969800 -0.118200 -0.213400\nvn -0.881600 0.059500 -0.468200\nvn -0.614900 0.177800 -0.768300\nvn -0.649800 0.079200 -0.755900\nvn -0.653900 -0.561600 -0.507000\nvn -0.488100 -0.504200 -0.712300\nvn -0.388500 -0.590800 -0.707100\nvn -0.989200 -0.137100 0.050700\nvn -0.759700 0.649800 -0.024900\nvn -0.887800 0.433900 -0.153300\nvn -0.341000 0.679200 -0.649900\nvn -0.365900 0.718500 -0.591400\nvn -0.984500 -0.174000 -0.023600\nvn -0.890800 -0.006000 -0.454400\nvn -0.763400 0.380700 0.521700\nvn -0.641600 0.465800 0.609400\nvn -0.395900 -0.213800 -0.893000\nvn -0.312400 -0.294100 -0.903300\nvn -0.758600 -0.543700 -0.359000\nvn -0.577700 -0.576300 -0.578100\nvn -0.790200 0.610600 -0.052200\nvn -0.914300 0.399500 -0.067000\nvn -0.606900 0.794000 -0.034600\nvn -0.537800 0.839500 -0.077400\nvn -0.615900 -0.371900 -0.694500\nvn -0.986400 0.163200 -0.016100\nvn -0.999100 0.041300 -0.000100\nvn -0.627500 0.194200 -0.754000\nvn -0.614300 0.150300 -0.774600\nvn -0.553300 0.372700 -0.744900\nvn -0.581000 0.429500 -0.691300\nvn -0.475100 -0.073600 -0.876900\nvn -0.399100 -0.116900 -0.909400\nvn -0.979600 -0.195200 -0.047800\nvn -0.963000 -0.145500 0.227000\nvn -0.621600 0.365500 0.692800\nvn -0.484800 0.438300 0.756800\nvn -0.963300 0.067600 0.259500\nvn -0.214700 0.872600 -0.438600\nvn -0.148100 0.781100 -0.606500\nvn -0.174400 0.820700 -0.544100\nvn -0.288700 0.933000 -0.215100\nvn -0.291500 0.896100 0.334800\nvn -0.320500 0.932700 0.165300\nvn -0.309600 0.950900 -0.000600\nvn -0.303000 0.949200 -0.085000\nvn -0.177700 0.588100 0.789000\nvn -0.226800 0.771400 0.594500\nvn -0.078400 0.447300 0.890900\nvn -0.107200 0.474000 0.873900\nvn -0.357600 -0.600000 -0.715600\nvn -0.213800 -0.370800 -0.903700\nvn -0.199600 -0.422400 -0.884200\nvn -0.619900 -0.354200 -0.700100\nvn -0.559100 -0.479900 -0.676100\nvn -0.501700 -0.340200 -0.795300\nvn -0.300000 -0.168800 -0.938900\nvn -0.247800 -0.189900 -0.950000\nvn -0.359200 -0.546600 -0.756400\nvn -0.151300 -0.423300 -0.893200\nvn -0.512600 -0.245300 -0.822800\nvn -0.321700 -0.245900 -0.914300\nvn -0.133400 -0.210400 -0.968400\nvn -0.245600 -0.504500 -0.827800\nvn -0.392200 -0.086900 -0.915700\nvn 0.936000 0.046700 0.348800\nvn 0.865600 0.088800 0.492700\nvn 0.967400 0.021700 0.252400\nvn 0.455200 0.465900 0.758700\nvn 0.982800 0.000600 0.184500\nvn 0.576300 0.431000 0.694300\nvn 0.549500 0.439100 0.710800\nvn -0.898200 0.108600 0.425900\nvn -0.917000 0.060000 0.394400\nvn -0.913800 0.059800 0.401600\nvn -0.535900 -0.330900 0.776700\nvn -0.384300 0.473200 0.792700\nvn -0.942700 -0.187400 0.275900\nvn -0.520200 0.346500 0.780500\nvn -0.388000 0.464600 0.796000\nvn 0.014500 0.511500 0.859200\nvn -0.828900 0.074100 -0.554400\nvn -0.993700 0.096100 -0.057800\nvn -0.997300 -0.018000 -0.071100\nvn 0.745900 0.465300 -0.476500\nvn 0.825900 0.275500 -0.491900\nvn 0.829900 0.507800 -0.231100\nvn 0.870000 -0.028300 -0.492300\nvn 0.724800 -0.240900 -0.645400\nvn 0.901200 -0.425600 0.081400\nvn -0.782400 0.505800 -0.363400\nvn -0.532200 0.745500 -0.401100\nvn -0.445300 0.826300 -0.344700\nvn -0.207000 0.889200 -0.407900\nvn -0.136800 0.903500 -0.406100\nvn -0.839200 0.173100 -0.515400\nvn -0.863600 0.153400 -0.480200\nvn -0.986700 -0.161700 -0.014700\nvn 0.897600 0.130500 -0.421000\nvn 0.959800 -0.242600 0.141100\nvn 0.500200 0.722900 -0.476600\nvn 0.511600 0.743000 -0.431500\nvn 0.173400 0.878400 -0.445400\nvn 0.010000 -0.823300 -0.567500\nvn 0.029800 -0.383200 0.923200\nvn 0.213000 -0.500400 0.839200\nvn -0.188700 -0.775000 -0.603100\nvn -0.117400 -0.506200 0.854400\nvn 0.620600 -0.330400 -0.711100\nvn 0.550300 -0.379300 -0.743800\nvn 0.914300 -0.393700 0.094600\nvn -0.651100 -0.332600 -0.682200\nvn -0.957500 -0.288100 0.010700\nvn -0.963800 -0.250700 0.090400\nvn -0.474700 -0.563100 -0.676400\nvn -0.492600 -0.511600 -0.704000\nvn -0.773300 -0.478700 0.415800\nvn 0.387100 -0.632400 -0.670900\nvn 0.475600 -0.513700 0.714000\nvn 0.638300 -0.514500 0.572500\nvn -0.393100 -0.661300 -0.638900\nvn -0.340100 -0.519700 0.783700\nvn -0.898300 0.159000 -0.409600\nvn -0.869100 0.307600 -0.387300\nvn -0.991100 0.122700 -0.052400\nvn 0.884100 0.150600 -0.442300\nvn 0.921700 0.387700 0.006700\nvn 0.871300 0.478100 -0.110500\nvn 0.190900 -0.740700 -0.644100\nvn 0.636600 -0.328700 -0.697600\nvn 0.923400 -0.383400 0.017700\nvn -0.702000 -0.245000 -0.668700\nvn -0.980700 -0.187200 -0.055500\nvn -0.035600 0.911100 -0.410700\nvn -0.006800 0.903900 -0.427700\nvn 0.499700 -0.495100 -0.710700\nvn 0.744700 -0.523000 0.414400\nvn 0.798000 -0.527200 0.292000\nvn 0.140500 0.890900 -0.431800\nvn -0.504100 -0.475300 -0.721000\nvn -0.552900 -0.404400 -0.728500\nvn -0.926100 -0.356800 0.122900\nvn -0.788300 -0.079000 -0.610200\nvn -0.518400 0.576500 -0.631600\nvn -0.628700 0.255100 -0.734600\nvn 0.587400 0.204100 -0.783100\nvn 0.473900 -0.035800 -0.879800\nvn -0.629700 -0.349000 -0.694000\nvn 0.258700 -0.157400 -0.953000\nvn -0.631400 0.322900 -0.705000\nvn 0.602600 0.231200 -0.763800\nvn 0.866100 0.158100 -0.474200\nvn 0.448000 -0.054300 -0.892400\nvn -0.448000 -0.180900 0.875500\nvn -0.575200 -0.199400 0.793400\nvn -0.676600 -0.255200 0.690700\nvn 0.143900 -0.068000 0.987200\nvn 0.145400 -0.175800 0.973600\nvn 0.468300 -0.124600 0.874700\nvn -0.993000 -0.045600 0.108600\nvn -0.959300 0.198000 -0.201100\nvn -0.844100 0.079700 -0.530300\nvn 0.531100 0.774100 -0.344400\nvn 0.436500 0.861000 -0.261000\nvn 0.432200 0.738900 -0.517000\nvn -0.979900 0.136100 0.145500\nvn -0.988900 0.118900 0.088700\nvn -0.994000 0.054500 -0.095200\nvn 0.991300 -0.111500 -0.069300\nvn 0.984600 -0.128600 0.118000\nvn 0.976300 -0.156700 -0.149200\nvn 0.562200 -0.249800 0.788400\nvn 0.654800 -0.308100 0.690100\nvn 0.777100 -0.287600 0.559800\nvn -0.905700 -0.043900 0.421700\nvn -0.951500 0.007300 0.307500\nvn -0.985800 -0.097800 0.136300\nvn -0.070200 -0.133600 0.988500\nvn -0.088700 -0.243100 0.965900\nvn -0.038400 -0.199000 0.979200\nvn 0.826800 -0.177800 0.533600\nvn 0.887600 -0.237400 0.394700\nvn 0.950400 -0.167700 0.261800\nvn -0.526000 0.727800 -0.440000\nvn -0.569100 0.605300 -0.556500\nvn -0.763300 0.241600 -0.599100\nvn -0.248000 -0.098000 0.963800\nvn -0.331600 -0.218300 0.917800\nvn 0.438900 0.793500 -0.421500\nvn 0.102000 0.808000 -0.580200\nvn -0.182400 0.905400 -0.383300\nvn -0.223200 0.796200 -0.562300\nvn 0.420200 -0.108000 0.901000\nvn 0.562500 -0.272300 0.780600\nvn -0.985400 -0.012700 0.170000\nvn -0.965800 -0.130900 0.223500\nvn -0.992900 -0.118500 0.010900\nvn 0.889800 0.347200 -0.296200\nvn 0.987200 0.035700 -0.155500\nvn 0.929300 0.048900 -0.366100\nvn 0.958600 -0.135300 0.250500\nvn 0.973100 -0.227700 -0.035600\nvn -0.685500 -0.196000 0.701100\nvn -0.810000 -0.125700 0.572800\nvn -0.877600 -0.208500 0.431600\nvn 0.907200 -0.098200 0.409000\nvn 0.962600 -0.200400 0.182100\nvn -0.891600 -0.039100 0.451100\nvn -0.959700 -0.132900 0.247700\nvn 0.127800 0.916200 -0.379700\nvn 0.649400 0.649600 -0.395300\nvn 0.691300 0.546000 -0.473200\nvn 0.784500 0.415200 -0.460500\nvn -0.045200 -0.108900 0.993000\nvn 0.971000 0.143100 0.191400\nvn 0.884100 0.191400 0.426300\nvn 0.971100 0.238500 -0.007900\nvn 0.951600 0.067000 0.300000\nvn 0.969200 0.242100 0.044800\nvn 0.582800 0.310200 -0.751000\nvn 0.963100 0.238900 -0.123600\nvn 0.981700 0.174400 -0.076800\nvn 0.964200 0.259700 -0.053800\nvn 0.762400 0.038200 0.645900\nvn 0.775400 0.222600 0.590900\nvn 0.989900 0.114800 0.082600\nvn 0.950000 -0.141500 -0.278100\nvn 0.837200 0.292500 -0.462000\nvn 0.638100 0.195700 0.744700\nvn 0.796800 0.293300 -0.528200\nvn 0.498200 0.472700 0.726900\nvn 0.487900 0.559600 -0.669800\nvn 0.567800 0.821600 -0.049900\nvn 0.730600 0.592900 -0.338600\nvn 0.573200 0.780000 -0.251000\nvn -0.588400 0.807100 -0.047700\nvn -0.807200 0.550900 -0.211600\nvn -0.745600 0.497500 -0.443200\nvn -0.928600 0.367600 0.051100\nvn -0.974700 0.195700 0.108100\nvn -0.932000 0.176000 0.316700\nvn -0.589500 0.292600 -0.752900\nvn -0.836000 0.268300 -0.478600\nvn -0.908400 0.417900 -0.015000\nvn -0.956100 0.263600 -0.128300\nvn -0.889700 0.192100 0.414000\nvn -0.958500 0.280200 -0.051800\nvn -0.800400 0.212900 0.560300\nvn -0.688600 0.224800 0.689400\nvn -0.977100 -0.206200 0.053000\nvn -0.979200 0.036900 -0.199300\nvn -0.952100 0.195500 0.234800\nvn -0.957000 0.287300 -0.038600\nvn -0.824600 0.126100 0.551400\nvn -0.998800 0.016900 -0.044900\nvn -0.996600 -0.080400 -0.018000\nvn -0.993600 0.052600 -0.099600\nvn -0.571600 -0.102600 0.814100\nvn -0.998000 0.049100 -0.039600\nvn -0.941700 -0.298300 -0.155700\nvn -0.949200 -0.120400 0.290700\nvn -0.835600 -0.455400 0.307000\nvn -0.773100 -0.254000 0.581200\nvn -0.697600 -0.544700 -0.465300\nvn -0.625500 -0.508000 0.592200\nvn -0.555900 -0.221600 0.801100\nvn 0.480100 -0.535700 -0.694700\nvn 0.485000 -0.233000 0.842900\nvn 0.506600 -0.459800 -0.729300\nvn 0.693200 -0.249400 0.676200\nvn 0.957000 -0.264500 -0.118800\nvn 0.958400 -0.285300 -0.004000\nvn 0.901100 -0.077600 0.426600\nvn 0.869400 -0.428100 -0.246600\nvn 0.772100 0.634800 -0.029600\nvn 0.771400 -0.535200 -0.344100\nvn 0.670800 -0.260600 -0.694300\nvn 0.562900 -0.253500 -0.786700\nvn -0.867600 -0.414500 -0.274800\nvn -0.990700 -0.118800 -0.066100\nvn -0.781900 -0.533800 -0.321800\nvn -0.619400 -0.222100 -0.753000\nvn -0.538400 -0.230000 -0.810700\nvn -0.964500 -0.261200 -0.037600\nvn -0.766400 -0.493500 -0.411000\nvn 0.806300 -0.529000 -0.264700\nvn 0.966700 -0.251100 -0.049000\nvn -0.377900 -0.092600 0.921200\nvn 0.052200 0.190000 0.980400\nvn 0.275700 0.036900 0.960500\nvn -0.946600 0.301100 0.115000\nvn 0.551300 0.747800 -0.369900\nvn 0.355800 0.878900 -0.317600\nvn -0.947500 0.161400 0.276100\nvn 0.934100 -0.162700 0.317600\nvn 0.972500 -0.127400 0.194600\nvn 0.386200 -0.149800 0.910200\nvn 0.532100 -0.168700 0.829700\nvn -0.882700 0.081100 0.462900\nvn -0.040400 0.082100 0.995800\nvn -0.050400 0.164900 0.985000\nvn 0.711300 -0.091900 0.696800\nvn 0.823500 0.007700 0.567200\nvn -0.418300 0.855800 -0.304300\nvn -0.708200 0.675400 -0.205700\nvn -0.097500 0.059400 0.993400\nvn 0.110300 0.947500 -0.300100\nvn -0.138200 0.942400 -0.304400\nvn 0.321000 -0.082800 0.943400\nvn -0.909200 -0.041900 0.414100\nvn 0.987200 0.111400 0.113600\nvn 0.901800 0.431400 -0.025300\nvn 0.881100 -0.091000 0.464100\nvn -0.680600 -0.021200 0.732300\nvn 0.833200 -0.024400 0.552400\nvn -0.816200 0.041000 0.576300\nvn 0.681200 0.681400 -0.267700\nvn 0.552500 0.739700 -0.384000\nvn -0.927000 -0.011100 0.374900\nvn -0.940100 0.080000 0.331400\nvn -0.932400 0.166600 0.320500\nvn -0.787800 0.057100 0.613200\nvn -0.520300 -0.093500 0.848800\nvn -0.228100 -0.067200 0.971300\nvn 0.748900 -0.171200 -0.640100\nvn 0.854900 -0.221800 -0.468900\nvn 0.779000 -0.363500 -0.510800\nvn 0.822500 -0.034400 -0.567700\nvn 0.985900 -0.164200 -0.032200\nvn 0.941100 -0.325400 -0.091100\nvn 0.947000 -0.276800 -0.162800\nvn 0.907900 -0.389600 -0.154800\nvn 0.871500 -0.436700 -0.223000\nvn 0.899400 -0.253400 -0.356000\nvn 0.957900 -0.073400 -0.277600\nvn 0.828800 -0.419100 -0.370600\nvn 0.866900 -0.228900 -0.442700\nvn 0.784400 -0.393100 -0.479700\nvn 0.922800 -0.066500 -0.379400\nvn 0.644400 -0.098200 -0.758300\nvn 0.642100 -0.298900 -0.705900\nvn 0.722400 0.027300 -0.690900\nvn 0.641700 -0.125600 -0.756500\nvn 0.541000 -0.216700 -0.812600\nvn 0.540300 -0.264900 -0.798600\nvn 0.730700 0.051600 -0.680700\nvn 0.635800 -0.058400 -0.769600\nvn 0.721200 0.121600 -0.682000\nvn 0.445500 -0.068000 -0.892700\nvn 0.492000 -0.246800 -0.834900\nvn 0.228000 -0.209900 -0.950700\nvn 0.562300 0.079600 -0.823100\nvn 0.329900 -0.018600 -0.943800\nvn 0.474500 0.148200 -0.867700\nvn 0.333100 -0.015700 -0.942700\nvn 0.169000 -0.175400 -0.969900\nvn 0.135400 -0.230200 -0.963700\nvn 0.480600 0.164900 -0.861300\nvn 0.176600 -0.016700 -0.984100\nvn 0.365300 0.206400 -0.907700\nvn 0.104000 0.234000 -0.966600\nvn -0.044300 -0.164000 -0.985400\nvn -0.378200 -0.318300 -0.869200\nvn 0.974800 -0.066600 0.212700\nvn 0.965300 0.019800 0.260100\nvn 0.956100 -0.016600 0.292500\nvn 0.955700 0.092700 0.279500\nvn 0.955000 0.042100 0.293400\nvn 0.985600 -0.051100 0.161300\nvn 0.981000 0.044500 0.189000\nvn 0.969300 0.133500 0.206400\nvn 0.988500 -0.062000 0.137700\nvn 0.984200 0.060800 0.166200\nvn 0.970400 0.161300 0.179900\nvn 0.988500 -0.151200 -0.000800\nvn 0.996600 0.041100 0.071200\nvn 0.977700 0.184700 0.100000\nvn 0.999700 -0.021800 0.009600\nvn 0.988900 0.144200 0.036500\nvn 0.977000 -0.210800 -0.033000\nvn 0.963400 -0.261200 -0.060400\nvn 0.998400 -0.044300 -0.035600\nvn 0.983900 0.177600 -0.015600\nvn 0.976100 -0.168600 -0.137100\nvn 0.992800 0.026200 -0.117000\nvn 0.976500 0.196600 -0.088400\nvn 0.949100 -0.129200 -0.287300\nvn 0.965600 0.059900 -0.252900\nvn 0.949200 0.241700 -0.201700\nvn 0.937700 0.120500 -0.326000\nvn 0.901600 0.337300 -0.270600\nvn 0.920700 -0.122100 -0.370600\nvn 0.916000 -0.146400 -0.373300\nvn 0.942200 0.083400 -0.324500\nvn 0.910000 0.318700 -0.265000\nvn 0.948100 0.071100 -0.310000\nvn 0.923600 0.307800 -0.228200\nvn 0.914700 -0.158600 -0.371700\nvn 0.872800 -0.115500 -0.474200\nvn 0.919500 0.115300 -0.375800\nvn 0.900600 0.327200 -0.286000\nvn 0.829500 0.054300 -0.555800\nvn 0.856000 0.284200 -0.431800\nvn 0.718400 -0.215900 -0.661200\nvn 0.635900 -0.258900 -0.727000\nvn 0.763800 0.030600 -0.644700\nvn 0.807100 0.321000 -0.495600\nvn 0.749600 0.053100 -0.659700\nvn 0.793500 0.340100 -0.504600\nvn 0.536400 -0.161000 -0.828500\nvn 0.670900 0.124100 -0.731000\nvn 0.727100 0.382400 -0.570100\nvn 0.490700 0.160400 -0.856400\nvn 0.592900 0.467400 -0.655700\nvn 0.298000 -0.188700 -0.935700\nvn 0.310600 -0.169900 -0.935200\nvn 0.466100 0.172900 -0.867600\nvn 0.554900 0.492200 -0.670600\nvn 0.353600 0.204800 -0.912700\nvn 0.432100 0.515500 -0.739900\nvn 0.000400 -0.399200 -0.916800\nvn 0.215900 0.171600 -0.961200\nvn 0.319600 0.639900 -0.698800\nvn 0.963000 -0.038000 0.266900\nvn 0.930900 0.085800 0.355000\nvn 0.900900 0.036200 0.432500\nvn 0.882000 0.205300 0.424100\nvn 0.842200 0.150400 0.517600\nvn 0.960700 -0.031300 0.275900\nvn 0.962300 -0.033900 0.269900\nvn 0.961600 0.086600 0.260400\nvn 0.948500 0.106700 0.298100\nvn 0.933800 0.206800 0.292000\nvn 0.972200 0.049800 0.228900\nvn 0.957300 0.172500 0.231700\nvn 0.973300 -0.060300 0.221500\nvn 0.978200 -0.106100 0.178200\nvn 0.978300 0.006900 0.207200\nvn 0.967600 0.158800 0.196100\nvn 0.981700 -0.130300 0.138400\nvn 0.994200 0.041000 0.099400\nvn 0.976000 0.217500 0.009800\nvn 0.998500 -0.048700 -0.023700\nvn 0.992500 0.103800 -0.064500\nvn 0.966800 0.241100 -0.084400\nvn 0.996600 0.002500 -0.082900\nvn 0.989100 0.124900 -0.078100\nvn 0.966800 0.247300 -0.064600\nvn 0.993600 -0.031700 -0.108700\nvn 0.991300 0.096600 -0.088900\nvn 0.969400 0.238400 -0.058200\nvn 0.981900 -0.046600 -0.183600\nvn 0.983500 0.102700 -0.149100\nvn 0.965600 0.232900 -0.115800\nvn 0.931400 -0.150200 -0.331400\nvn 0.961900 0.042100 -0.270100\nvn 0.952200 0.219500 -0.212500\nvn 0.950700 -0.043800 -0.307000\nvn 0.954300 0.155700 -0.255100\nvn 0.921700 -0.264900 -0.283300\nvn 0.966200 -0.060300 -0.250700\nvn 0.963600 0.160800 -0.213600\nvn 0.847500 -0.355500 -0.394200\nvn 0.904100 -0.089200 -0.417900\nvn 0.888100 0.200100 -0.413700\nvn 0.748100 -0.220900 -0.625700\nvn 0.753800 0.096700 -0.649900\nvn 0.695900 0.397700 -0.597900\nvn 0.720800 -0.124700 -0.681800\nvn 0.730200 0.162100 -0.663700\nvn 0.682300 0.451000 -0.575300\nvn 0.631100 -0.173500 -0.756000\nvn 0.591300 0.110900 -0.798800\nvn 0.626900 0.423800 -0.653700\nvn 0.259500 -0.257100 -0.930900\nvn 0.341800 0.042100 -0.938800\nvn 0.388200 0.405700 -0.827400\nvn 0.093900 -0.334400 -0.937700\nvn 0.240900 0.324800 -0.914600\nvn 0.271600 0.661900 -0.698600\nvn 0.973300 -0.021500 0.228300\nvn 0.943900 0.115100 0.309400\nvn 0.884200 0.255600 0.390900\nvn 0.899900 0.217200 0.378000\nvn 0.658700 0.405000 0.634100\nvn 0.714300 0.531700 0.455100\nvn 0.616600 0.597600 0.512600\nvn 0.612200 0.378600 0.694200\nvn 0.644100 0.368300 0.670400\nvn 0.778600 0.216900 0.588800\nvn 0.749400 0.294100 0.593200\nvn 0.809800 0.436900 0.391500\nvn 0.400300 0.487000 0.776200\nvn 0.521300 0.519500 0.677000\nvn 0.815700 0.532300 0.226300\nvn 0.710500 0.657600 0.250200\nvn 0.922200 0.360600 0.139800\nvn 0.844100 0.512800 0.156400\nvn 0.761400 0.634700 0.131900\nvn 0.889300 0.455900 0.034800\nvn 0.795100 0.605100 0.039000\nvn 0.954700 0.295900 -0.029500\nvn 0.895800 0.444000 -0.019200\nvn 0.819200 0.573400 -0.003000\nvn 0.961000 0.272300 -0.047800\nvn 0.903500 0.426900 -0.038600\nvn 0.819800 0.572100 -0.025400\nvn 0.963300 0.262900 -0.053900\nvn 0.913400 0.405600 -0.034600\nvn 0.836800 0.547200 -0.012700\nvn 0.954800 0.290700 -0.061500\nvn 0.899000 0.437000 -0.029100\nvn 0.812600 0.582700 -0.003300\nvn 0.953800 0.299700 -0.021000\nvn 0.892500 0.450600 0.017200\nvn 0.819300 0.572300 0.033400\nvn 0.952300 0.291500 -0.090500\nvn 0.866300 0.491400 -0.089200\nvn 0.774800 0.626000 -0.087600\nvn 0.913700 0.331400 -0.234900\nvn 0.812300 0.526200 -0.251500\nvn 0.686600 0.679000 -0.259800\nvn 0.921200 0.303600 -0.243100\nvn 0.806500 0.514500 -0.291100\nvn 0.628700 0.705000 -0.328000\nvn 0.836200 0.280000 -0.471600\nvn 0.704000 0.496400 -0.507800\nvn 0.503600 0.695700 -0.512300\nvn 0.773100 0.122400 -0.622300\nvn 0.660100 0.379700 -0.648200\nvn 0.478700 0.627700 -0.613800\nvn 0.784800 0.030700 -0.619000\nvn 0.684600 0.292100 -0.667800\nvn 0.514500 0.556100 -0.652700\nvn 0.631200 -0.017700 -0.775400\nvn 0.487100 0.281100 -0.826800\nvn 0.360000 0.582700 -0.728600\nvn 0.477400 -0.791600 -0.381400\nvn 0.103100 0.671900 -0.733400\nvn -0.163300 0.913000 -0.373800\nvn 0.612100 0.409900 0.676200\nvn 0.764000 0.267200 0.587300\nvn 0.436100 0.477700 0.762600\nvn 0.743900 0.284500 0.604600\nvn 0.536200 0.497000 0.682300\nvn 0.086400 0.703400 0.705600\nvn 0.080200 0.848100 0.523700\nvn -0.034700 0.819500 0.572000\nvn 0.343800 0.557200 0.755800\nvn 0.155000 0.482600 0.862000\nvn 0.434000 0.554500 0.710000\nvn 0.198800 0.716800 0.668200\nvn 0.205600 0.859100 0.468700\nvn -0.004000 0.401600 0.915800\nvn 0.179400 0.475800 0.861100\nvn 0.084400 0.925700 0.368600\nvn -0.057800 0.906900 0.417200\nvn 0.248500 0.932100 0.263300\nvn 0.089400 0.951700 0.293700\nvn -0.084700 0.947500 0.308200\nvn 0.241500 0.956600 0.162900\nvn 0.057100 0.983000 0.174500\nvn -0.132300 0.976600 0.169300\nvn 0.250800 0.965800 0.066300\nvn 0.055600 0.995200 0.080500\nvn -0.142900 0.986500 0.079400\nvn 0.054400 0.998500 0.007400\nvn -0.141900 0.989700 -0.014700\nvn 0.255400 0.966600 -0.022300\nvn 0.260000 0.962500 -0.077600\nvn 0.066100 0.995300 -0.071100\nvn -0.131100 0.989000 -0.068600\nvn 0.064600 0.994900 -0.077200\nvn -0.150900 0.985400 -0.078200\nvn 0.294000 0.931700 -0.213300\nvn 0.073100 0.974100 -0.213800\nvn -0.152500 0.966200 -0.207800\nvn 0.056400 0.934100 -0.352500\nvn -0.186000 0.922100 -0.339400\nvn 0.328200 0.886900 -0.325100\nvn 0.043300 0.930100 -0.364600\nvn -0.226500 0.900500 -0.371100\nvn 0.257700 0.868400 -0.423500\nvn -0.004800 0.880700 -0.473600\nvn -0.245700 0.839200 -0.485100\nvn 0.291000 0.826400 -0.482000\nvn 0.045000 0.849100 -0.526300\nvn -0.217100 0.815200 -0.536900\nvn 0.274800 0.811600 -0.515500\nvn 0.041400 0.830500 -0.555400\nvn -0.192800 0.804600 -0.561600\nvn 0.349400 0.754000 -0.556200\nvn 0.056500 0.778600 -0.624900\nvn -0.255200 0.754300 -0.604900\nvn 0.361700 0.619300 -0.696800\nvn 0.021500 0.667500 -0.744200\nvn -0.319200 0.646300 -0.693100\nvn 0.942700 0.193000 -0.272200\nvn -0.205300 0.622200 -0.755400\nvn -0.892900 0.293500 -0.341400\nvn 0.138500 0.580900 0.802100\nvn -0.017300 0.500000 0.865800\nvn 0.327200 0.604700 0.726000\nvn -0.058500 0.683800 0.727300\nvn -0.376700 0.618400 0.689700\nvn -0.414500 0.792700 0.447000\nvn -0.516800 0.667600 0.535900\nvn 0.189600 0.600100 0.777200\nvn 0.059300 0.517300 0.853800\nvn 0.183100 0.550000 0.814800\nvn -0.288300 0.701200 0.652100\nvn -0.281600 0.885100 0.370500\nvn -0.095200 0.396000 0.913300\nvn -0.021500 0.401000 0.915800\nvn -0.491100 0.832600 0.255800\nvn -0.600500 0.749700 0.277800\nvn -0.412600 0.891200 0.188400\nvn -0.506700 0.842600 0.182100\nvn -0.604300 0.778700 0.168600\nvn -0.547200 0.830400 0.104600\nvn -0.662500 0.746100 0.066700\nvn -0.437700 0.890600 0.123400\nvn -0.461100 0.883800 0.079100\nvn -0.560900 0.825200 0.066000\nvn -0.661500 0.748500 0.047200\nvn -0.568900 0.822000 0.026500\nvn -0.671000 0.741400 0.011200\nvn -0.448200 0.893600 0.025500\nvn -0.418300 0.906900 -0.048900\nvn -0.545600 0.837100 -0.039100\nvn -0.657200 0.752900 -0.036400\nvn -0.545400 0.834600 -0.077100\nvn -0.656400 0.750000 -0.081500\nvn -0.422600 0.903500 -0.070700\nvn -0.404400 0.904500 -0.135000\nvn -0.527700 0.840700 -0.121300\nvn -0.647400 0.754700 -0.106300\nvn -0.484800 0.841900 -0.237000\nvn -0.604600 0.768000 -0.211100\nvn -0.355800 0.902400 -0.242800\nvn -0.340000 0.895700 -0.286400\nvn -0.451600 0.843200 -0.291600\nvn -0.565400 0.771100 -0.292800\nvn -0.287500 0.885500 -0.365000\nvn -0.399300 0.823600 -0.402700\nvn -0.524000 0.747200 -0.408700\nvn -0.226400 0.840800 -0.491800\nvn -0.370500 0.762000 -0.531100\nvn -0.500300 0.661000 -0.559300\nvn -0.343900 0.760200 -0.551100\nvn -0.474500 0.679300 -0.559700\nvn -0.177100 0.828800 -0.530800\nvn -0.045700 0.766000 -0.641100\nvn -0.252500 0.713600 -0.653500\nvn -0.423800 0.602800 -0.676000\nvn -0.185700 0.539500 -0.821300\nvn -0.405400 0.387600 -0.827900\nvn 0.034000 0.643100 -0.765000\nvn -0.104500 0.574500 -0.811800\nvn -0.225500 0.478300 -0.848800\nvn -0.429800 0.301600 -0.851000\nvn -0.301200 0.533200 0.790500\nvn -0.095800 0.519700 0.848900\nvn -0.015300 0.612800 0.790100\nvn -0.399200 0.409200 0.820500\nvn -0.213100 0.413800 0.885100\nvn -0.182000 0.624800 0.759200\nvn -0.463300 0.525400 0.713600\nvn -0.676500 0.477100 0.561000\nvn -0.754800 0.517500 0.403000\nvn -0.804900 0.389600 0.447600\nvn -0.272300 0.572200 0.773600\nvn -0.402500 0.454200 0.794700\nvn -0.199700 0.563900 0.801300\nvn -0.602600 0.580800 0.547300\nvn -0.710200 0.592800 0.379600\nvn -0.505900 0.352400 0.787300\nvn -0.436100 0.331100 0.836700\nvn -0.754300 0.611000 0.240400\nvn -0.786600 0.559800 0.260500\nvn -0.842800 0.451000 0.293600\nvn -0.750500 0.621200 0.225300\nvn -0.844400 0.475500 0.246700\nvn -0.924000 0.281900 0.258200\nvn -0.798200 0.578200 0.168900\nvn -0.892500 0.402800 0.203000\nvn -0.961000 0.192800 0.198100\nvn -0.809700 0.586400 0.022200\nvn -0.932500 0.360300 0.024900\nvn -0.994100 0.107300 -0.011200\nvn -0.855200 0.506000 -0.112300\nvn -0.948900 0.301700 -0.091700\nvn -0.986300 0.159100 -0.044100\nvn -0.838800 0.538000 -0.083600\nvn -0.926300 0.372800 -0.053300\nvn -0.973200 0.230000 -0.003800\nvn -0.868300 0.493800 -0.046400\nvn -0.930900 0.364200 -0.025800\nvn -0.965100 0.262000 0.001300\nvn -0.877300 0.479600 -0.017600\nvn -0.928500 0.370400 -0.026100\nvn -0.961400 0.273800 -0.026500\nvn -0.877600 0.447800 -0.170800\nvn -0.919200 0.353000 -0.174700\nvn -0.958200 0.243600 -0.149800\nvn -0.839400 0.461800 -0.286600\nvn -0.903000 0.353400 -0.244100\nvn -0.960300 0.173600 -0.218400\nvn -0.828900 0.486500 -0.276100\nvn -0.920700 0.274900 -0.277000\nvn -0.965100 0.052000 -0.256400\nvn -0.746800 0.429400 -0.507700\nvn -0.820300 0.237700 -0.520200\nvn -0.861800 0.052700 -0.504400\nvn -0.606500 0.358100 -0.709800\nvn -0.690700 0.176800 -0.701200\nvn -0.741100 -0.002800 -0.671300\nvn -0.642400 0.315500 -0.698300\nvn -0.704600 0.122500 -0.699000\nvn -0.740400 -0.063800 -0.669000\nvn -0.580900 0.081500 -0.809900\nvn -0.654400 -0.104800 -0.748800\nvn -0.148700 0.247400 -0.957400\nvn -0.243000 -0.184200 -0.952400\nvn -0.361300 -0.025100 -0.932100\nvn -0.268800 -0.423900 -0.864800\nvn -0.422100 -0.286300 -0.860100\nvn -0.524900 0.569900 0.632200\nvn -0.594500 0.457900 0.661000\nvn -0.491300 0.461600 0.738600\nvn -0.677400 0.347200 0.648400\nvn -0.575300 0.359600 0.734600\nvn -0.737700 0.362300 0.569600\nvn -0.413000 0.561100 0.717300\nvn -0.596200 -0.321300 -0.735700\nvn -0.730600 -0.404000 -0.550400\nvn -0.845200 -0.197000 -0.496800\nvn -0.500700 -0.512300 -0.697700\nvn -0.762600 -0.570700 -0.304400\nvn -0.894300 -0.381800 -0.233200\nvn -0.835500 -0.453000 -0.310800\nvn -0.971200 -0.217600 -0.096500\nvn -0.905400 -0.328400 -0.269100\nvn -0.774000 -0.558500 -0.298200\nvn -0.813700 -0.415200 -0.406800\nvn -0.871900 -0.294700 -0.391000\nvn -0.694300 -0.573000 -0.435400\nvn -0.762800 -0.404200 -0.504700\nvn -0.864800 -0.202200 -0.459500\nvn -0.578500 -0.587300 -0.566000\nvn -0.344800 -0.384200 -0.856400\nvn -0.513700 -0.221400 -0.828900\nvn -0.706600 -0.146500 -0.692200\nvn -0.510600 -0.267600 -0.817100\nvn -0.348300 -0.436100 -0.829700\nvn -0.633500 -0.043500 -0.772500\nvn -0.667000 -0.056500 -0.742900\nvn -0.270100 -0.352700 -0.895900\nvn -0.566000 -0.001600 -0.824400\nvn -0.409700 -0.142400 -0.901000\nvn -0.334500 -0.092500 -0.937800\nvn -0.107400 -0.336000 -0.935700\nvn -0.550400 0.212900 -0.807300\nvn -0.077100 -0.355500 -0.931500\nvn -0.393500 -0.025800 -0.918900\nvn -0.365200 0.024800 -0.930600\nvn -0.620700 0.306700 -0.721600\nvn -0.604000 0.357500 -0.712300\nvn -0.058600 -0.269400 -0.961200\nvn 0.203400 -0.165900 -0.964900\nvn -0.310300 0.238600 -0.920200\nvn -0.950300 0.115900 -0.288900\nvn -0.953300 -0.025300 -0.300900\nvn -0.982300 0.078000 -0.170200\nvn -0.941800 -0.157600 -0.296700\nvn -0.979300 -0.096600 -0.177800\nvn -0.957600 0.229100 0.174400\nvn -0.897200 0.206200 0.390500\nvn -0.954600 0.129200 0.268500\nvn -0.880000 0.181400 0.438900\nvn -0.918300 0.143100 0.369000\nvn -0.967700 -0.072900 0.241300\nvn -0.968900 0.030300 0.245400\nvn -0.979600 0.075600 0.185800\nvn -0.960900 0.113900 0.252300\nvn -0.970300 0.164800 0.177000\nvn -0.980500 -0.040700 0.192400\nvn -0.990000 0.084200 0.112800\nvn -0.974800 0.204000 0.090000\nvn -0.998200 -0.060100 0.001700\nvn -0.994600 0.103200 0.013400\nvn -0.970500 0.240700 0.012700\nvn -0.958500 0.243700 -0.148100\nvn -0.910600 -0.175300 -0.374200\nvn -0.908200 0.226300 -0.352100\nvn -0.924100 0.040500 -0.379900\nvn -0.857900 0.005400 -0.513700\nvn -0.845200 0.209000 -0.491800\nvn -0.836600 -0.194200 -0.512200\nvn -0.754000 -0.052200 -0.654800\nvn -0.778200 0.246300 -0.577700\nvn -0.659900 -0.358100 -0.660500\nvn -0.617700 0.072700 -0.783000\nvn -0.655000 0.448600 -0.608000\nvn -0.452000 -0.303500 -0.838800\nvn -0.458900 0.114300 -0.881100\nvn -0.495600 0.528000 -0.689600\nvn -0.324400 -0.341000 -0.882300\nvn -0.235500 -0.020100 -0.971600\nvn -0.374200 0.343900 -0.861200\nvn -0.092400 -0.390800 -0.915800\nvn 0.045000 -0.185900 -0.981500\nvn -0.282600 0.547300 -0.787800\nvn -0.987800 0.022900 0.154200\nvn -0.963200 0.030300 0.266900\nvn -0.949900 0.109700 0.292500\nvn -0.969500 -0.054200 0.239100\nvn -0.992700 -0.051900 0.108300\nvn 0.476000 -0.754800 0.451200\nvn -0.490000 -0.165000 0.856000\nvn 0.989000 0.083300 -0.122000\nvn -0.810400 -0.166000 0.561800\nvn 0.818200 -0.096700 0.566700\nvn -0.926700 -0.108100 -0.359800\nvn -0.267500 -0.147400 0.952200\nvn -0.939900 -0.078800 0.332100\nvn -0.141000 0.768500 -0.624100\nvn -0.338800 -0.127200 -0.932200\nvn -0.829200 -0.115200 0.546900\nvn -0.811600 -0.300400 0.501000\nvn -0.829900 -0.117300 0.545400\nvn 0.941300 -0.122300 0.314400\nvn -0.407900 -0.342400 0.846300\nvn 0.121900 0.721900 -0.681100\nvn -0.062300 -0.059400 0.996300\nvn 0.013300 -0.058500 0.998200\nvn -0.109500 0.364800 -0.924600\nvn 0.935100 -0.044000 0.351500\nvn 0.891000 0.079000 -0.446900\nvn 0.789700 0.066300 0.609900\nvn -0.492200 -0.215200 0.843500\nvn -0.919900 -0.002400 0.392200\nvn 0.794000 -0.096800 0.600100\nvn 0.972100 -0.173600 -0.157800\nvn -0.999700 -0.004500 0.022200\nvn -0.986800 0.053300 0.152600\nvn -0.960300 -0.194500 -0.199900\nvn -0.157400 0.115000 0.980800\nvn -0.445900 -0.152000 0.882000\nvn 0.473800 -0.340200 -0.812300\nvn 0.181800 0.039600 -0.982500\nvn 0.302500 0.026500 0.952800\nvn 0.681500 -0.112500 -0.723100\nvn 0.273300 -0.057500 -0.960200\nvn 0.999000 -0.040500 -0.017400\nvn -0.428700 0.116000 0.896000\nvn 0.699400 0.220000 0.680000\nvn 0.934800 0.308600 0.175900\nvn -0.663300 0.427100 -0.614500\nvn -0.973500 -0.129200 -0.188500\nvn 0.946400 0.255300 0.197600\nvn -0.458300 0.684600 -0.566800\nvn -0.673600 0.317000 -0.667600\nvn -0.833100 0.404400 0.377200\nvn 0.850100 0.508100 0.138000\nvn -0.288800 0.293300 -0.911300\nvn -0.638900 0.353500 -0.683200\nvn -0.493900 0.083500 -0.865400\nvn -0.927400 -0.208600 0.310500\nvn 0.517700 0.014400 -0.855400\nvn 0.285100 -0.505200 0.814500\nvn -0.013300 0.024300 0.999600\nvn -0.074100 -0.223800 0.971800\nvn 0.435700 0.013900 0.900000\nvn 0.037300 -0.109000 0.993300\nvn 0.842700 -0.103400 0.528300\nvn 0.378900 0.023600 0.925100\nvn 0.758800 0.049300 0.649400\nvn 0.557000 -0.025100 0.830100\nvn 0.768900 0.085200 0.633600\nvn 0.845500 -0.063500 0.530200\nvn 0.774000 0.142600 0.616900\nvn -0.332300 -0.467400 0.819200\nvn -0.234600 -0.001600 0.972100\nvn -0.309100 -0.221500 0.924800\nvn -0.754400 -0.094100 0.649500\nvn -0.523500 -0.044500 0.850900\nvn -0.773000 0.028800 0.633700\nvn -0.866900 0.184600 0.463000\nvn -0.882000 -0.020200 0.470800\nvn -0.996000 -0.019100 0.087100\nvn -0.980300 0.011700 0.197200\nvn -0.975200 -0.209300 0.071600\nvn -0.779100 0.554500 0.292300\nvn -0.967500 -0.204600 -0.148200\nvn -0.846700 0.509500 0.153000\nvn -0.921400 -0.205600 -0.329700\nvn -0.880400 -0.138600 -0.453600\nvn -0.720700 -0.249500 -0.646800\nvn -0.728800 0.676700 -0.104300\nvn -0.634800 0.361400 -0.682900\nvn 0.937800 -0.093400 -0.334200\nvn -0.724600 -0.029900 -0.688500\nvn -0.041000 0.715800 -0.697000\nvn -0.028000 0.369300 -0.928900\nvn 0.199300 0.711500 -0.673800\nvn 0.411000 -0.339200 -0.846200\nvn 0.261200 0.016700 -0.965100\nvn 0.765700 0.468500 -0.440700\nvn 0.608200 0.228600 -0.760100\nvn 0.877900 -0.171600 -0.447000\nvn 0.423700 0.872000 -0.245200\nvn -0.522800 0.633000 -0.570900\nvn -0.018100 0.395600 -0.918200\nvn 0.076000 -0.067900 -0.994800\nvn 0.822200 0.391400 0.413100\nvn 0.977200 -0.035500 -0.209300\nvn 0.888100 0.381800 0.255700\nvn 0.959600 0.007000 -0.281200\nvn -0.469100 -0.081500 -0.879400\nvn 0.911800 -0.072600 -0.404100\nvn 0.992000 -0.081300 -0.096600\nvn 0.375400 0.564900 -0.734800\nvn 0.954900 -0.111900 0.274900\nvn 0.629000 -0.238500 -0.739800\nvn 0.161300 -0.083600 -0.983300\nvn 0.935900 -0.070800 0.345200\nvn 0.911100 -0.217600 -0.350000\nvn 0.892500 0.402700 0.203100\nvn 0.957800 0.286100 0.027300\nvn 0.527300 0.566000 0.633700\nvn 0.221800 0.912300 0.344200\nvn 0.277200 0.957500 -0.080000\nvn 0.325400 0.879900 -0.346200\nvn 0.233200 0.584300 0.777300\nvn -0.376400 0.884000 0.277200\nvn -0.100300 0.620800 0.777500\nvn -0.516100 0.319300 -0.794700\nvn -0.621100 -0.558900 -0.549300\nvn 0.779900 -0.543200 -0.310800\nvn -0.591500 0.403900 -0.697800\nvn 0.235100 -0.561500 -0.793300\nusemtl ponytail01\ns off\nf 1337/1/1 1186/2/1 1187/3/1\nf 1336/4/2 1337/1/2 1187/3/2\ns 1\nf 859/5/3 375/6/4 62/7/5\nf 367/8/6 52/9/7 352/10/8\nf 861/11/9 366/12/10 61/13/11\nf 862/14/12 370/15/13 49/16/14\nf 372/17/15 37/18/16 337/19/17\nf 360/20/18 50/21/19 383/22/20\nf 371/23/21 54/24/22 354/25/23\nf 866/26/24 374/27/25 32/28/26\nf 867/29/27 368/30/28 53/31/29\nf 380/32/30 34/33/31 346/34/32\nf 869/35/33 378/36/34 35/37/35\nf 390/38/36 56/39/37 356/40/38\nf 381/41/39 47/42/40 334/43/41\nf 391/44/42 44/45/43 342/46/44\nf 382/47/45 42/48/46 341/49/47\nf 874/50/48 384/51/49 33/52/50\nf 386/53/51 36/54/52 347/55/53\nf 876/56/54 385/57/55 60/58/56\nf 383/22/20 50/21/19 351/59/57\nf 389/60/58 40/61/59 339/62/60\nf 879/63/61 427/64/62 76/65/63\nf 377/66/64 39/67/65 335/68/66\nf 387/69/67 55/70/68 355/71/69\nf 882/72/70 373/73/71 48/74/72\nf 432/75/73 77/76/74 420/77/75\nf 392/78/76 57/79/77 343/80/78\nf 344/81/79 45/82/80 395/83/81\nf 493/84/82 107/85/83 474/86/84\nf 379/87/85 59/88/86 362/89/87\nf 888/90/88 388/91/89 38/92/90\nf 889/93/91 394/94/92 58/95/93\nf 890/96/94 442/97/95 74/98/96\nf 429/99/97 69/100/98 398/101/99\nf 431/102/100 89/103/101 419/104/102\nf 893/105/103 441/106/104 93/107/105\nf 434/108/106 83/109/107 414/110/108\nf 895/111/109 437/112/110 80/113/111\nf 896/114/112 433/115/113 92/116/114\nf 428/117/115 68/118/116 399/119/117\nf 438/120/118 85/121/119 416/122/120\nf 422/123/121 81/124/122 449/125/123\nf 440/126/124 63/127/125 407/128/126\nf 901/129/127 436/130/128 84/131/129\nf 446/132/130 65/133/131 408/134/132\nf 903/135/133 444/136/134 66/137/135\nf 455/138/136 87/139/137 418/140/138\nf 447/141/139 78/142/140 396/143/141\nf 456/144/142 75/145/143 404/146/144\nf 907/147/145 448/148/146 73/149/147\nf 908/150/148 450/151/149 64/152/150\nf 452/153/151 67/154/152 409/155/153\nf 910/156/154 451/157/155 91/158/156\nf 911/159/157 449/125/123 81/124/122\nf 454/160/158 71/161/159 401/162/160\nf 443/163/161 70/164/162 397/165/163\nf 453/166/164 86/167/165 417/168/166\nf 406/169/167 76/65/63 427/64/62\nf 439/170/168 79/171/169 411/172/170\nf 917/173/171 498/174/172 108/175/173\nf 430/176/174 88/177/175 405/178/176\nf 517/179/177 118/180/178 480/181/179\nf 920/182/180 445/183/181 90/184/182\nf 921/185/183 490/186/184 103/187/185\nf 922/188/186 553/189/187 138/190/188\nf 923/191/189 492/192/190 121/193/191\nf 924/194/192 506/195/193 105/196/194\nf 495/197/195 100/198/196 460/199/197\nf 497/200/198 120/201/199 481/202/200\nf 505/203/201 124/204/202 488/205/203\nf 489/206/204 114/207/205 476/208/206\nf 929/209/207 501/210/208 111/211/209\nf 499/212/210 123/213/211 487/214/212\nf 494/215/213 99/216/214 461/217/215\nf 502/218/216 116/219/217 478/220/218\nf 484/221/219 112/222/220 512/223/221\nf 504/224/222 94/225/223 469/226/224\nf 935/227/225 500/228/226 115/229/227\nf 509/230/228 96/231/229 470/232/230\nf 508/233/231 97/234/232 462/235/233\nf 510/236/234 109/237/235 458/238/236\nf 518/239/237 106/240/238 466/241/239\nf 940/242/240 511/243/241 104/244/242\nf 513/245/243 95/246/244 472/247/245\nf 514/248/246 98/249/247 471/250/248\nf 943/251/249 491/252/250 122/253/251\nf 475/254/252 114/207/205 489/206/204\nf 516/255/253 102/256/254 463/257/255\nf 515/258/256 117/259/257 479/260/258\nf 507/261/259 101/262/260 459/263/261\nf 948/264/262 558/265/263 130/266/264\nf 503/267/265 110/268/266 473/269/267\nf 542/270/268 151/271/269 552/272/270\nf 496/273/271 119/274/272 467/275/273\nf 530/276/274 138/190/188 553/189/187\nf 953/277/275 561/278/276 139/279/277\nf 604/280/278 182/281/279 799/282/280\nf 955/283/281 800/284/282 169/285/283\nf 956/286/284 557/287/285 152/288/286\nf 957/289/287 569/290/288 136/291/289\nf 958/292/290 559/293/291 131/294/292\nf 959/295/293 552/272/270 151/271/269\nf 960/296/294 568/297/295 155/298/296\nf 554/299/297 145/300/298 538/301/299\nf 962/302/300 564/303/301 142/304/302\nf 963/305/303 562/306/304 154/307/305\nf 964/308/306 565/309/307 147/310/308\nf 965/311/309 546/312/310 143/313/311\nf 966/314/312 567/315/313 125/316/314\nf 967/317/315 563/318/316 146/319/317\nf 968/320/318 572/321/319 127/322/320\nf 571/323/321 128/324/322 524/325/323\nf 970/326/324 580/327/325 137/328/326\nf 971/329/327 573/330/328 140/331/329\nf 972/332/330 574/333/331 135/334/332\nf 973/335/333 576/336/334 126/337/335\nf 974/338/336 551/339/337 129/340/338\nf 975/341/339 556/342/340 153/343/341\nf 537/344/342 145/300/298 554/299/297\nf 578/345/343 133/346/344 525/347/345\nf 978/348/346 570/349/347 132/350/348\nf 979/351/349 577/352/350 148/353/351\nf 748/354/352 200/355/353 660/356/354\nf 981/357/355 566/358/356 141/359/357\nf 982/360/358 560/361/359 150/362/360\nf 609/363/361 175/364/362 797/365/363\nf 806/366/364 161/367/365 585/368/366\nf 592/369/367 169/285/283 800/284/282\nf 624/370/368 170/371/369 606/372/370\nf 987/373/371 737/374/372 211/375/373\nf 632/376/374 167/377/375 588/378/376\nf 989/379/377 620/380/378 183/381/379\nf 990/382/380 799/282/280 182/281/279\nf 623/383/381 162/384/382 584/385/383\nf 815/386/384 186/387/385 612/388/386\nf 801/389/387 176/390/388 600/391/389\nf 994/392/390 812/393/391 178/394/392\nf 995/395/393 809/396/394 185/397/395\nf 996/398/396 608/399/397 174/400/398\nf 630/401/399 156/402/400 593/403/401\nf 998/404/402 810/405/403 177/406/404\nf 635/407/405 158/408/406 594/409/407\nf 1000/410/408 634/411/409 159/412/410\nf 636/413/411 171/414/412 582/415/413\nf 643/416/414 168/417/415 590/418/416\nf 637/419/417 166/420/418 589/421/419\nf 639/422/420 157/423/421 596/424/422\nf 798/425/423 160/426/424 595/427/425\nf 1006/428/426 803/429/427 184/430/428\nf 599/431/429 176/390/388 801/389/387\nf 641/432/430 164/433/431 587/434/432\nf 691/435/433 233/436/434 733/437/435\nf 817/438/436 163/439/437 583/440/438\nf 1011/441/439 824/442/440 179/443/441\nf 813/444/442 172/445/443 597/446/444\nf 1013/447/445 805/448/446 181/449/447\nf 676/450/448 212/451/449 653/452/450\nf 671/453/451 206/454/452 677/455/453\nf 758/456/454 192/457/455 647/458/456\nf 654/459/457 200/355/353 748/354/352\nf 1018/460/458 775/461/459 261/462/460\nf 1019/463/461 714/464/462 226/465/463\nf 1020/466/464 695/467/465 198/468/466\nf 1021/469/467 684/470/468 214/471/469\nf 1022/472/470 686/473/471 193/474/472\nf 1023/475/473 736/476/474 213/477/475\nf 1024/478/476 784/479/477 265/480/478\nf 1025/481/479 715/482/480 207/483/481\nf 716/484/482 216/485/483 673/486/484\nf 1027/487/485 677/455/453 206/454/452\nf 1028/488/486 693/489/487 187/490/488\nf 1029/491/489 730/492/490 208/493/491\nf 698/494/492 189/495/493 656/496/494\nf 697/497/495 190/498/496 648/499/497\nf 1032/500/498 699/501/499 202/502/500\nf 742/503/501 239/504/502 679/505/503\nf 700/506/504 197/507/505 651/508/506\nf 702/509/507 188/510/508 658/511/509\nf 757/512/510 191/513/511 657/514/512\nf 1037/515/513 720/516/514 215/517/515\nf 1038/518/516 701/519/517 205/520/518\nf 704/521/519 195/522/520 649/523/521\nf 1040/524/522 768/525/523 194/526/524\nf 1041/527/525 738/528/526 225/529/527\nf 776/530/528 203/531/529 659/532/530\nf 1043/533/531 376/534/532 43/535/533\nf 395/83/81 45/82/80 350/536/534\nf 725/537/535 227/538/536 681/539/537\nf 721/540/538 226/465/463 714/464/462\nf 694/541/539 234/542/540 732/543/541\nf 1048/544/542 681/539/537 227/538/536\nf 1049/545/543 688/546/544 228/547/545\nf 1050/548/546 707/549/547 232/550/548\nf 727/551/549 209/552/550 664/553/551\nf 1052/554/552 709/555/553 236/556/554\nf 1053/557/555 744/558/556 199/559/557\nf 1054/560/558 735/561/559 238/562/560\nf 706/563/561 243/564/562 747/565/563\nf 1056/566/564 679/505/503 239/504/502\nf 1057/567/565 713/568/566 241/569/567\nf 743/570/568 242/571/569 746/572/570\nf 687/573/571 201/574/572 668/575/573\nf 680/576/574 245/577/575 753/578/576\nf 754/579/577 245/577/575 680/576/574\nf 1062/580/578 750/581/579 247/582/580\nf 751/583/581 248/584/582 756/585/583\nf 685/586/584 251/587/585 762/588/586\nf 1065/589/587 759/590/588 252/591/589\nf 761/592/590 254/593/591 764/594/592\nf 678/595/593 250/596/594 765/597/595\nf 766/598/596 255/599/597 770/600/598\nf 767/601/599 256/602/600 771/603/601\nf 1070/604/602 711/605/603 257/606/604\nf 774/607/605 260/608/606 779/609/607\nf 728/610/608 217/611/609 674/612/610\nf 1073/613/611 777/614/612 263/615/613\nf 778/616/614 264/617/615 782/618/616\nf 692/619/617 262/620/618 783/621/619\nf 1076/622/620 786/623/621 267/624/622\nf 791/625/623 265/480/478 784/479/477\nf 1078/626/624 787/627/625 268/628/626\nf 788/629/627 269/630/628 793/631/629\nf 1080/632/630 790/633/631 271/634/632\nf 1081/635/633 365/636/634 46/637/635\nf 828/638/636 274/639/637 615/640/638\nf 616/641/639 275/642/640 829/643/641\nf 1084/644/642 830/645/643 272/646/644\nf 622/647/645 281/648/646 831/649/647\nf 832/650/648 275/642/640 616/641/639\nf 808/651/649 283/652/650 833/653/651\nf 816/654/652 291/655/653 834/656/654\nf 1089/657/655 804/658/656 279/659/657\nf 1090/660/658 615/640/638 274/639/637\nf 807/661/659 282/662/660 837/663/661\nf 631/664/662 290/665/663 838/666/664\nf 617/667/665 276/668/666 839/669/667\nf 628/670/668 287/671/669 840/672/670\nf 1095/673/671 625/674/672 284/675/673\nf 1096/676/674 842/677/675 297/678/676\nf 814/679/677 289/680/678 843/681/679\nf 1098/682/680 626/683/681 285/684/682\nf 819/685/683 294/686/684 845/687/685\nf 1100/688/686 818/689/687 293/690/688\nf 820/691/689 295/692/690 847/693/691\nf 827/694/692 302/695/693 848/696/694\nf 821/697/695 296/698/696 849/699/697\nf 823/700/698 298/701/699 850/702/700\nf 614/703/701 273/704/702 851/705/703\nf 1106/706/704 619/707/705 278/708/706\nf 853/709/707 276/668/666 617/667/665\nf 825/710/708 300/711/709 854/712/710\nf 633/713/711 292/714/712 855/715/713\nf 1110/716/714 640/717/715 299/718/716\nf 629/719/717 288/720/718 857/721/719\nf 1112/722/720 621/723/721 280/724/722\nf 371/23/21 859/5/3 364/725/723\nf 23/726/724 333/727/725 859/5/3\nf 333/727/725 31/728/726 375/6/4\nf 860/729/727 352/10/8 61/13/11\nf 321/730/728 860/729/727 366/12/10\nf 21/731/729 367/8/6 860/729/727\nf 861/11/9 363/732/730 53/733/29\nf 332/734/731 861/11/9 368/735/28\nf 332/734/731 30/736/732 366/12/10\nf 393/737/733 862/14/12 361/738/734\nf 20/739/735 330/740/736 862/14/12\nf 330/740/736 18/741/737 370/15/13\nf 863/742/738 337/19/17 36/54/52\nf 5/743/739 306/744/740 863/742/738\nf 306/744/740 6/745/741 372/17/15\nf 329/746/742 864/747/743 383/22/20\nf 20/739/735 393/737/733 864/747/743\nf 393/737/733 51/748/744 360/20/18\nf 865/749/745 354/25/23 55/70/68\nf 24/750/746 323/751/747 865/749/745\nf 323/751/747 23/726/724 371/23/21\nf 373/73/71 866/26/24 345/752/748\nf 17/753/749 314/754/750 866/26/24\nf 314/754/750 1/755/751 374/27/25\nf 867/29/27 353/756/752 62/7/5\nf 322/757/753 867/29/27 375/6/4\nf 322/757/753 22/758/754 368/30/28\nf 868/759/755 346/34/32 33/52/50\nf 2/760/756 315/761/757 868/759/755\nf 3/762/758 380/32/30 868/759/755\nf 377/763/64 869/35/33 338/764/759\nf 307/765/760 869/35/33 377/763/64\nf 307/765/760 4/766/761 378/36/34\nf 394/94/92 870/767/762 356/40/38\nf 27/768/763 325/769/764 870/767/762\nf 25/770/765 390/38/36 870/767/762\nf 871/771/766 334/43/41 32/28/26\nf 303/772/767 871/771/766 374/27/25\nf 16/773/768 381/41/39 871/771/766\nf 382/47/45 872/774/769 342/46/44\nf 11/775/770 311/776/771 872/774/769\nf 13/777/772 391/44/42 872/774/769\nf 376/778/532 873/779/773 341/49/47\nf 12/780/774 310/781/775 873/779/773\nf 310/781/775 11/775/770 382/47/45\nf 381/782/39 874/50/48 348/783/776\nf 16/784/768 317/785/777 874/50/48\nf 2/760/756 384/51/49 874/50/48\nf 378/36/34 875/786/778 347/55/53\nf 316/787/779 875/786/778 378/36/34\nf 5/743/739 386/53/51 875/786/778\nf 370/15/13 876/56/54 359/788/780\nf 18/741/737 328/789/781 876/56/54\nf 328/789/781 29/790/782 385/57/55\nf 877/791/783 351/59/57 52/9/7\nf 320/792/784 877/791/783 367/8/6\nf 19/793/785 383/22/20 877/791/783\nf 878/794/786 339/62/60 38/795/90\nf 308/796/787 878/794/786 388/797/89\nf 9/798/788 389/60/58 878/794/786\nf 454/160/158 879/63/61 412/799/789\nf 40/61/59 350/536/534 879/63/61\nf 350/536/534 45/82/80 427/64/62\nf 880/800/790 335/68/66 34/33/31\nf 3/762/758 304/801/791 880/800/790\nf 8/802/792 377/66/64 880/800/790\nf 881/803/793 355/71/69 56/39/37\nf 324/804/794 881/803/793 390/38/36\nf 24/750/746 387/69/67 881/803/793\nf 365/636/634 882/72/70 349/805/795\nf 15/806/796 318/807/797 882/72/70\nf 17/753/749 373/73/71 882/72/70\nf 883/808/798 420/77/75 90/184/182\nf 358/809/799 883/808/798 445/183/181\nf 46/637/635 432/75/73 883/808/798\nf 391/44/42 884/810/800 343/80/78\nf 312/811/801 884/810/800 391/44/42\nf 26/812/802 392/78/76 884/810/800\nf 885/813/803 395/83/81 14/814/804\nf 369/815/805 885/813/803 313/816/806\nf 369/815/805 41/817/807 344/81/79\nf 516/255/253 886/818/808 474/86/84\nf 412/799/789 886/818/808 516/255/253\nf 76/65/63 493/84/82 886/818/808\nf 385/819/55 887/820/809 362/89/87\nf 29/821/782 331/822/810 887/820/809\nf 331/822/810 28/823/811 379/87/85\nf 372/17/15 888/90/88 336/824/812\nf 6/745/741 305/825/813 888/90/88\nf 305/825/813 7/826/814 388/91/89\nf 392/78/76 889/93/91 357/827/815\nf 326/828/816 889/93/91 392/78/76\nf 326/828/816 27/768/763 394/94/92\nf 435/829/817 890/96/94 402/830/818\nf 41/817/807 340/831/819 890/96/94\nf 340/831/819 43/535/533 442/97/95\nf 891/832/820 398/101/99 68/118/116\nf 37/18/16 336/824/812 891/832/820\nf 336/824/812 38/92/90 429/99/97\nf 892/833/821 419/104/102 88/177/175\nf 57/79/77 357/827/815 892/833/821\nf 58/95/93 431/102/100 892/833/821\nf 438/120/118 893/105/103 426/834/822\nf 54/24/22 364/725/723 893/105/103\nf 364/725/723 62/7/5 441/106/104\nf 894/835/823 414/110/108 92/116/114\nf 352/10/8 894/835/823 433/115/113\nf 52/9/7 434/108/106 894/835/823\nf 457/836/824 895/111/109 423/837/825\nf 51/748/744 361/738/734 895/111/109\nf 361/738/734 49/16/14 437/112/110\nf 436/838/128 896/114/112 425/839/826\nf 53/733/29 363/732/730 896/114/112\nf 363/732/730 61/13/11 433/115/113\nf 897/840/827 399/119/117 67/154/152\nf 337/19/17 897/840/827 452/153/151\nf 37/18/16 428/117/115 897/840/827\nf 898/841/828 416/122/120 86/167/165\nf 354/25/23 898/841/828 453/166/164\nf 54/24/22 438/120/118 898/841/828\nf 899/842/829 449/125/123 50/21/19\nf 457/836/824 899/842/829 360/20/18\nf 82/843/830 422/123/121 899/842/829\nf 900/844/831 407/128/126 79/171/169\nf 345/752/748 900/844/831 439/170/168\nf 32/28/26 440/126/124 900/844/831\nf 441/106/104 901/129/127 415/845/832\nf 62/7/5 353/756/752 901/129/127\nf 353/756/752 53/31/29 436/130/128\nf 902/846/833 408/134/132 64/152/150\nf 346/34/32 902/846/833 450/151/149\nf 34/33/31 446/132/130 902/846/833\nf 443/847/161 903/135/133 400/848/834\nf 338/764/759 903/135/133 443/847/161\nf 35/37/35 444/136/134 903/135/133\nf 904/849/835 418/140/138 89/103/101\nf 356/40/38 904/849/835 431/102/100\nf 56/39/37 455/138/136 904/849/835\nf 905/850/836 396/143/141 63/127/125\nf 334/43/41 905/850/836 440/126/124\nf 47/42/40 447/141/139 905/850/836\nf 906/851/837 404/146/144 73/149/147\nf 42/48/46 342/46/44 906/851/837\nf 342/46/44 44/45/43 456/144/142\nf 442/852/95 907/147/145 403/853/838\nf 43/854/533 341/49/47 907/147/145\nf 341/49/47 42/48/46 448/148/146\nf 447/855/139 908/150/148 410/856/839\nf 47/857/40 348/783/776 908/150/148\nf 348/783/776 33/52/50 450/151/149\nf 909/858/840 409/155/153 66/137/135\nf 347/55/53 909/858/840 444/136/134\nf 36/54/52 452/153/151 909/858/840\nf 437/112/110 910/156/154 421/859/841\nf 49/16/14 359/788/780 910/156/154\nf 359/788/780 60/58/56 451/157/155\nf 434/108/106 911/159/157 413/860/842\nf 52/9/7 351/59/57 911/159/157\nf 351/59/57 50/21/19 449/125/123\nf 912/861/843 401/162/160 69/862/98\nf 339/62/60 912/861/843 429/863/97\nf 40/61/59 454/160/158 912/861/843\nf 913/864/844 397/165/163 65/133/131\nf 335/68/66 913/864/844 446/132/130\nf 39/67/65 443/163/161 913/864/844\nf 914/865/845 417/168/166 87/139/137\nf 355/71/69 914/865/845 455/138/136\nf 55/70/68 453/166/164 914/865/845\nf 915/866/846 427/64/62 45/82/80\nf 435/829/817 915/866/846 344/81/79\nf 72/867/847 406/169/167 915/866/846\nf 916/868/848 411/172/170 77/76/74\nf 46/637/635 349/805/795 916/868/848\nf 349/805/795 48/74/72 439/170/168\nf 492/192/190 917/173/171 482/869/849\nf 420/77/75 917/173/171 492/192/190\nf 420/77/75 77/76/74 498/174/172\nf 918/870/850 405/178/176 75/145/143\nf 44/45/43 343/80/78 918/870/850\nf 57/79/77 430/176/174 918/870/850\nf 919/871/851 480/181/179 120/201/199\nf 418/140/138 919/871/851 497/200/198\nf 87/139/137 517/179/177 919/871/851\nf 451/872/155 920/182/180 424/873/852\nf 60/874/56 362/89/87 920/182/180\nf 362/89/87 59/88/86 445/183/181\nf 493/84/82 921/185/183 468/875/853\nf 76/65/63 406/169/167 921/185/183\nf 406/169/167 72/867/847 490/186/184\nf 578/345/343 922/188/186 536/876/854\nf 474/86/84 922/188/186 578/345/343\nf 107/85/83 553/189/187 922/188/186\nf 491/877/250 923/191/189 486/878/855\nf 91/879/156 424/873/852 923/191/189\nf 424/873/852 90/184/182 492/192/190\nf 490/186/184 924/194/192 464/880/856\nf 402/830/818 924/194/192 490/186/184\nf 74/98/96 506/195/193 924/194/192\nf 494/215/213 925/881/857 460/199/197\nf 398/101/99 925/881/857 494/215/213\nf 69/100/98 495/197/195 925/881/857\nf 926/882/858 481/202/200 119/274/272\nf 419/104/102 926/882/858 496/273/271\nf 89/103/101 497/200/198 926/882/858\nf 927/883/859 488/205/203 116/219/217\nf 85/121/119 426/834/822 927/883/859\nf 426/834/822 93/107/105 505/203/201\nf 928/884/860 476/208/206 123/213/211\nf 414/110/108 928/884/860 499/212/210\nf 83/109/107 489/206/204 928/884/860\nf 519/885/861 929/209/207 485/886/862\nf 82/843/830 423/837/825 929/209/207\nf 423/837/825 80/113/111 501/210/208\nf 930/887/863 487/214/212 115/888/227\nf 84/889/129 425/839/826 930/887/863\nf 92/116/114 499/212/210 930/887/863\nf 931/890/864 461/217/215 98/249/247\nf 399/119/117 931/890/864 514/248/246\nf 68/118/116 494/215/213 931/890/864\nf 932/891/865 478/220/218 117/259/257\nf 416/122/120 932/891/865 515/258/256\nf 85/121/119 502/218/216 932/891/865\nf 933/892/866 512/223/221 81/124/122\nf 519/885/861 933/892/866 422/123/121\nf 113/893/867 484/221/219 933/892/866\nf 934/894/868 469/226/224 110/268/266\nf 407/128/126 934/894/868 503/267/265\nf 63/127/125 504/224/222 934/894/868\nf 505/203/201 935/227/225 477/895/869\nf 93/107/105 415/845/832 935/227/225\nf 415/845/832 84/131/129 500/228/226\nf 936/896/870 470/232/230 95/246/244\nf 408/134/132 936/896/870 513/245/243\nf 65/133/131 509/230/228 936/896/870\nf 937/897/871 462/235/233 101/898/260\nf 400/848/834 937/897/871 507/899/259\nf 66/137/135 508/233/231 937/897/871\nf 938/900/872 458/238/236 94/225/223\nf 396/143/141 938/900/872 504/224/222\nf 78/142/140 510/236/234 938/900/872\nf 939/901/873 466/241/239 104/244/242\nf 404/146/144 939/901/873 511/243/241\nf 75/145/143 518/239/237 939/901/873\nf 506/902/193 940/242/240 465/903/874\nf 74/904/96 403/853/838 940/242/240\nf 403/853/838 73/149/147 511/243/241\nf 941/905/875 472/247/245 109/906/235\nf 410/856/839 941/905/875 510/907/234\nf 64/152/150 513/245/243 941/905/875\nf 942/908/876 471/250/248 97/234/232\nf 409/155/153 942/908/876 508/233/231\nf 67/154/152 514/248/246 942/908/876\nf 501/210/208 943/251/249 483/909/877\nf 80/113/111 421/859/841 943/251/249\nf 421/859/841 91/158/156 491/252/250\nf 944/910/878 489/206/204 83/109/107\nf 512/223/221 944/910/878 413/860/842\nf 112/222/220 475/254/252 944/910/878\nf 945/911/879 463/257/255 100/912/196\nf 401/162/160 945/911/879 495/913/195\nf 71/161/159 516/255/253 945/911/879\nf 946/914/880 479/260/258 118/180/178\nf 417/168/166 946/914/880 517/179/177\nf 86/167/165 515/258/256 946/914/880\nf 947/915/881 459/263/261 96/231/229\nf 397/165/163 947/915/881 509/230/228\nf 70/164/162 507/261/259 947/915/881\nf 551/339/337 948/264/262 523/916/882\nf 461/217/215 948/264/262 551/339/337\nf 99/216/214 558/265/263 948/264/262\nf 949/917/883 473/269/267 108/175/173\nf 411/172/170 949/917/883 498/174/172\nf 79/171/169 503/267/265 949/917/883\nf 950/918/884 552/272/270 120/201/199\nf 579/919/885 950/918/884 480/181/179\nf 149/920/886 542/270/268 950/918/884\nf 951/921/887 467/275/273 106/240/238\nf 405/178/176 951/921/887 518/239/237\nf 88/177/175 496/273/271 951/921/887\nf 952/922/888 553/189/187 107/85/83\nf 555/923/889 952/922/888 468/875/853\nf 134/924/890 530/276/274 952/922/888\nf 557/287/285 953/277/275 544/925/891\nf 121/193/191 482/869/849 953/277/275\nf 482/869/849 108/175/173 561/278/276\nf 954/926/892 799/282/280 274/639/637\nf 826/927/893 954/926/892 828/638/636\nf 180/928/894 604/280/278 954/926/892\nf 955/283/281 598/929/895 164/433/431\nf 829/643/641 955/283/281 641/432/430\nf 275/642/640 800/284/282 955/283/281\nf 556/930/340 956/286/284 548/931/896\nf 122/932/251 486/878/855 956/286/284\nf 486/878/855 121/193/191 557/287/285\nf 555/923/889 957/289/287 526/933/897\nf 103/187/185 464/880/856 957/289/287\nf 464/880/856 105/196/194 569/290/288\nf 558/265/263 958/292/290 522/934/898\nf 460/199/197 958/292/290 558/265/263\nf 100/198/196 559/293/291 958/292/290\nf 560/361/359 959/295/293 543/935/899\nf 119/274/272 481/202/200 959/295/293\nf 481/202/200 120/201/199 552/272/270\nf 565/309/307 960/296/294 550/936/900\nf 116/219/217 488/205/203 960/296/294\nf 488/205/203 124/204/202 568/297/295\nf 961/937/901 538/301/299 154/307/305\nf 476/208/206 961/937/901 562/306/304\nf 114/207/205 554/299/297 961/937/901\nf 581/938/902 962/302/300 547/939/903\nf 113/893/867 485/886/862 962/302/300\nf 485/886/862 111/211/209 564/303/301\nf 563/940/316 963/305/303 549/941/904\nf 115/888/227 487/214/212 963/305/303\nf 487/214/212 123/213/211 562/306/304\nf 577/352/350 964/308/306 540/942/905\nf 117/259/257 478/220/218 964/308/306\nf 478/220/218 116/219/217 565/309/307\nf 965/311/309 575/943/906 112/222/220\nf 113/893/867 581/938/902 965/311/309\nf 581/938/902 144/944/907 546/312/310\nf 566/358/356 966/314/312 531/945/908\nf 110/268/266 469/226/224 966/314/312\nf 469/226/224 94/225/223 567/315/313\nf 568/297/295 967/317/315 539/946/909\nf 124/204/202 477/895/869 967/317/315\nf 477/895/869 115/229/227 563/318/316\nf 576/336/334 968/320/318 532/947/910\nf 95/246/244 470/232/230 968/320/318\nf 470/232/230 96/231/229 572/321/319\nf 969/948/911 524/325/323 132/949/348\nf 462/235/233 969/948/911 570/950/347\nf 97/234/232 571/323/321 969/948/911\nf 574/333/331 970/326/324 528/951/912\nf 466/241/239 970/326/324 574/333/331\nf 106/240/238 580/327/325 970/326/324\nf 567/315/313 971/329/327 520/952/913\nf 94/225/223 458/238/236 971/329/327\nf 458/238/236 109/237/235 573/330/328\nf 569/953/288 972/332/330 527/954/914\nf 105/955/194 465/903/874 972/332/330\nf 465/903/874 104/244/242 574/333/331\nf 573/956/328 973/335/333 534/957/915\nf 109/906/235 472/247/245 973/335/333\nf 472/247/245 95/246/244 576/336/334\nf 571/323/321 974/338/336 533/958/916\nf 471/250/248 974/338/336 571/323/321\nf 98/249/247 551/339/337 974/338/336\nf 564/303/301 975/341/339 545/959/917\nf 111/211/209 483/909/877 975/341/339\nf 483/909/877 122/253/251 556/342/340\nf 976/960/918 554/299/297 114/207/205\nf 575/943/906 976/960/918 475/254/252\nf 143/313/311 537/344/342 976/960/918\nf 559/961/291 977/962/919 525/347/345\nf 463/257/255 977/962/919 559/961/291\nf 102/256/254 578/345/343 977/962/919\nf 572/321/319 978/348/346 521/963/920\nf 96/231/229 459/263/261 978/348/346\nf 459/263/261 101/262/260 570/349/347\nf 579/919/885 979/351/349 541/964/921\nf 118/180/178 479/260/258 979/351/349\nf 479/260/258 117/259/257 577/352/350\nf 980/965/922 660/356/354 195/522/520\nf 753/578/576 980/965/922 704/521/519\nf 245/577/575 748/354/352 980/965/922\nf 561/278/276 981/357/355 535/966/923\nf 473/269/267 981/357/355 561/278/276\nf 473/269/267 110/268/266 566/358/356\nf 580/327/325 982/360/358 529/967/924\nf 106/240/238 467/275/273 982/360/358\nf 467/275/273 119/274/272 560/361/359\nf 983/968/925 797/365/363 272/646/644\nf 627/969/926 983/968/925 830/645/643\nf 173/970/927 609/363/361 983/968/925\nf 984/971/928 585/368/366 160/426/424\nf 831/649/647 984/971/928 798/425/423\nf 281/648/646 806/366/364 984/971/928\nf 985/972/929 800/284/282 275/642/640\nf 618/973/930 985/972/929 832/650/648\nf 165/974/931 592/369/367 985/972/929\nf 986/975/932 606/372/370 183/381/379\nf 833/653/651 986/975/932 620/380/378\nf 283/652/650 624/370/368 986/975/932\nf 736/476/474 987/373/371 666/976/933\nf 239/504/502 742/503/501 987/373/371\nf 742/503/501 240/977/934 737/374/372\nf 988/978/935 588/378/376 165/974/931\nf 834/656/654 988/978/935 618/973/930\nf 291/655/653 632/376/374 988/978/935\nf 803/979/427 989/379/377 610/980/936\nf 278/981/706 835/982/937 989/379/377\nf 835/982/937 279/659/657 620/380/378\nf 805/448/446 990/382/380 605/983/938\nf 280/724/722 836/984/939 990/382/380\nf 836/984/939 274/639/637 799/282/280\nf 991/985/940 584/385/383 161/367/365\nf 837/663/661 991/985/940 806/366/364\nf 282/662/660 623/383/381 991/985/940\nf 992/986/941 612/388/386 178/394/392\nf 838/666/664 992/986/941 812/393/391\nf 290/665/663 815/386/384 992/986/941\nf 993/987/942 600/391/389 185/397/395\nf 839/669/667 993/987/942 809/396/394\nf 276/668/666 801/389/387 993/987/942\nf 824/442/440 994/392/390 602/988/943\nf 299/718/716 840/672/670 994/392/390\nf 840/672/670 287/671/669 812/393/391\nf 810/989/403 995/395/393 611/990/944\nf 285/991/682 841/992/945 995/395/393\nf 841/992/945 284/675/673 809/396/394\nf 842/677/675 996/398/396 638/993/946\nf 272/646/644 797/365/363 996/398/396\nf 797/365/363 175/364/362 608/399/397\nf 997/994/947 593/403/401 172/445/443\nf 843/681/679 997/994/947 813/444/442\nf 289/680/678 630/401/399 997/994/947\nf 815/386/384 998/404/402 601/995/948\nf 290/665/663 844/996/949 998/404/402\nf 844/996/949 285/684/682 810/405/403\nf 999/997/950 594/409/407 157/423/421\nf 845/687/685 999/997/950 639/422/420\nf 294/686/684 635/407/405 999/997/950\nf 817/998/436 1000/410/408 586/999/951\nf 292/1000/712 846/1001/952 1000/410/408\nf 846/1001/952 293/690/688 634/411/409\nf 1001/1002/953 582/415/413 156/402/400\nf 847/693/691 1001/1002/953 630/401/399\nf 295/692/690 636/413/411 1001/1002/953\nf 1002/1003/954 590/418/416 166/420/418\nf 848/696/694 1002/1003/954 637/419/417\nf 302/695/693 643/416/414 1002/1003/954\nf 1003/1004/955 589/421/419 167/1005/375\nf 849/699/697 1003/1004/955 632/1006/374\nf 296/698/696 637/419/417 1003/1004/955\nf 1004/1007/956 596/424/422 171/1008/412\nf 850/702/700 1004/1007/956 636/1009/411\nf 298/701/699 639/422/420 1004/1007/956\nf 1005/1010/957 595/427/425 159/412/410\nf 851/705/703 1005/1010/957 634/411/409\nf 273/704/702 798/425/423 1005/1010/957\nf 627/969/926 1006/428/426 607/1011/958\nf 286/1012/959 852/1013/960 1006/428/426\nf 852/1013/960 278/708/706 803/429/427\nf 1007/1014/961 801/389/387 276/668/666\nf 638/993/946 1007/1014/961 853/709/707\nf 174/400/398 599/431/429 1007/1014/961\nf 1008/1015/962 587/434/432 162/1016/382\nf 854/712/710 1008/1015/962 623/1017/381\nf 300/711/709 641/432/430 1008/1015/962\nf 1009/1018/963 733/437/435 235/1019/964\nf 602/988/943 1009/1018/963 703/1020/965\nf 178/394/392 691/435/433 1009/1018/963\nf 1010/1021/966 583/440/438 158/408/406\nf 855/715/713 1010/1021/966 635/407/405\nf 292/714/712 817/438/436 1010/1021/966\nf 826/927/893 1011/441/439 603/1022/967\nf 301/1023/968 856/1024/969 1011/441/439\nf 856/1024/969 299/718/716 824/442/440\nf 1012/1025/970 597/446/444 170/371/369\nf 857/721/719 1012/1025/970 624/370/368\nf 288/720/718 813/444/442 1012/1025/970\nf 643/416/414 1013/447/445 591/1026/971\nf 302/695/693 858/1027/972 1013/447/445\nf 858/1027/972 280/724/722 805/448/446\nf 1014/1028/973 653/452/450 218/1029/974\nf 739/1030/975 1014/1028/973 734/1031/976\nf 238/562/560 676/450/448 1014/1028/973\nf 1015/1032/977 677/455/453 265/480/478\nf 690/1033/978 1015/1032/977 791/625/623\nf 204/1034/979 671/453/451 1015/1032/977\nf 1016/1035/980 647/458/456 191/513/511\nf 762/588/586 1016/1035/980 757/512/510\nf 251/587/585 758/456/454 1016/1035/980\nf 1017/1036/981 748/354/352 245/577/575\nf 682/1037/982 1017/1036/981 754/579/577\nf 196/1038/983 654/459/457 1017/1036/981\nf 1018/460/458 781/1039/984 260/608/606\nf 606/372/370 1018/460/458 774/607/605\nf 170/371/369 775/461/459 1018/460/458\nf 719/1040/985 1019/463/461 724/1041/986\nf 608/399/397 1019/463/461 719/1040/985\nf 608/399/397 175/364/362 714/464/462\nf 682/1037/982 1020/466/464 650/1042/987\nf 246/1043/988 755/1044/989 1020/466/464\nf 755/1044/989 247/582/580 695/467/465\nf 773/1045/990 1021/469/467 672/1046/991\nf 779/609/607 1021/469/467 773/1045/990\nf 260/608/606 684/470/468 1021/469/467\nf 758/456/454 1022/472/470 646/1047/992\nf 251/587/585 763/1048/993 1022/472/470\nf 763/1048/993 252/591/589 686/473/471\nf 676/450/448 1023/475/473 667/1049/994\nf 238/562/560 740/1050/995 1023/475/473\nf 740/1050/995 239/504/502 736/476/474\nf 786/623/621 1024/478/476 794/1051/996\nf 231/1052/997 724/1041/986 1024/478/476\nf 724/1041/986 226/465/463 784/479/477\nf 716/484/482 1025/481/479 662/1053/998\nf 269/630/628 792/1054/999 1025/481/479\nf 792/1054/999 268/628/626 715/482/480\nf 1026/1055/1000 673/486/484 221/1056/1001\nf 793/631/629 1026/1055/1000 717/1057/1002\nf 269/630/628 716/484/482 1026/1055/1000\nf 701/519/517 1027/487/485 670/1058/1003\nf 267/624/622 794/1051/996 1027/487/485\nf 794/1051/996 265/480/478 677/455/453\nf 776/530/528 1028/488/486 655/1059/1004\nf 262/620/618 780/1060/1005 1028/488/486\nf 780/1060/1005 263/615/613 693/489/487\nf 728/610/608 1029/491/489 663/1061/1006\nf 234/542/540 731/1062/1007 1029/491/489\nf 731/1062/1007 236/556/554 730/492/490\nf 1030/1063/1008 656/496/494 188/510/508\nf 770/600/598 1030/1063/1008 702/509/507\nf 255/599/597 698/494/492 1030/1063/1008\nf 1031/1064/1009 648/499/497 223/1065/1010\nf 764/594/592 1031/1064/1009 760/1066/1011\nf 254/593/591 697/497/495 1031/1064/1009\nf 693/489/487 1032/500/498 644/1067/1012\nf 263/615/613 782/618/616 1032/500/498\nf 782/618/616 264/617/615 699/501/499\nf 1033/1068/1013 679/505/503 182/281/279\nf 705/1069/1014 1033/1068/1013 604/280/278\nf 240/977/934 742/503/501 1033/1068/1013\nf 1034/1070/1015 651/508/506 222/1071/1016\nf 746/572/570 1034/1070/1015 710/1072/1017\nf 242/571/569 700/506/504 1034/1070/1015\nf 1035/1073/1018 658/511/509 224/1074/1019\nf 771/603/601 1035/1073/1018 712/1075/1020\nf 256/602/600 702/509/507 1035/1073/1018\nf 1036/1076/1021 657/514/512 190/498/496\nf 765/597/595 1036/1076/1021 697/497/495\nf 250/596/594 757/512/510 1036/1076/1021\nf 690/1033/978 1037/515/513 669/1077/1022\nf 266/1078/1023 796/1079/1024 1037/515/513\nf 796/1079/1024 271/634/632 720/516/514\nf 715/482/480 1038/518/516 661/1080/1025\nf 268/628/626 795/1081/1026 1038/518/516\nf 795/1081/1026 267/624/622 701/519/517\nf 1039/1082/1027 649/523/521 220/1083/1028\nf 756/585/583 1039/1082/1027 708/1084/1029\nf 248/584/582 704/521/519 1039/1082/1027\nf 698/494/492 1040/524/522 645/1085/1030\nf 255/599/597 772/1086/1031 1040/524/522\nf 772/1086/1031 257/606/604 768/525/523\nf 737/374/372 1041/527/525 665/1087/1032\nf 240/977/934 741/1088/1033 1041/527/525\nf 741/1088/1033 241/569/567 738/528/526\nf 1042/1089/1034 659/532/530 201/574/572\nf 261/462/460 783/621/619 1042/1089/1034\nf 783/621/619 262/620/618 776/530/528\nf 1043/533/531 340/831/819 41/817/807\nf 309/1090/1035 1043/533/531 369/815/805\nf 309/1090/1035 12/1091/774 376/534/532\nf 1044/1092/1036 350/536/534 40/61/59\nf 9/798/788 319/1093/1037 1044/1092/1036\nf 319/1093/1037 14/814/804 395/83/81\nf 1045/1094/1038 681/539/537 176/390/388\nf 719/1040/985 1045/1094/1038 599/431/429\nf 231/1052/997 725/537/535 1045/1094/1038\nf 1046/1095/1039 714/464/462 175/364/362\nf 718/1096/1040 1046/1095/1039 609/363/361\nf 230/1097/1041 721/540/538 1046/1095/1039\nf 1047/1098/1042 732/543/541 233/436/434\nf 612/388/386 1047/1098/1042 691/435/433\nf 186/387/385 694/541/539 1047/1098/1042\nf 688/546/544 1048/544/542 722/1099/1043\nf 600/391/389 1048/544/542 688/546/544\nf 176/390/388 681/539/537 1048/544/542\nf 689/1100/1044 1049/545/543 723/1101/1045\nf 177/1102/404 611/990/944 1049/545/543\nf 611/990/944 185/397/395 688/546/544\nf 718/1096/1040 1050/548/546 726/1103/1046\nf 173/970/927 607/1011/958 1050/548/546\nf 607/1011/958 184/430/428 707/549/547\nf 729/1104/1047 1051/1105/1048 664/553/551\nf 733/437/435 1051/1105/1048 729/1104/1047\nf 233/436/434 727/551/549 1051/1105/1048\nf 694/541/539 1052/554/552 731/1062/1007\nf 186/387/385 601/995/948 1052/554/552\nf 601/995/948 177/406/404 709/555/553\nf 700/506/504 1053/557/555 652/1106/1049\nf 747/565/563 1053/557/555 700/506/504\nf 243/564/562 744/558/556 1053/557/555\nf 675/1107/1050 1054/560/558 739/1030/975\nf 168/417/415 591/1026/971 1054/560/558\nf 591/1026/971 181/449/447 735/561/559\nf 1055/1108/1051 747/565/563 242/571/569\nf 590/418/416 1055/1108/1051 743/570/568\nf 168/417/415 706/563/561 1055/1108/1051\nf 735/561/559 1056/566/564 740/1050/995\nf 181/449/447 605/983/938 1056/566/564\nf 605/983/938 182/281/279 679/505/503\nf 705/1069/1014 1057/567/565 741/1088/1033\nf 180/928/894 603/1022/967 1057/567/565\nf 603/1022/967 179/443/441 713/568/566\nf 1058/1109/1052 746/572/570 244/1110/1053\nf 589/421/419 1058/1109/1052 745/1111/1054\nf 166/420/418 743/570/568 1058/1109/1052\nf 1059/1112/1055 668/575/573 214/471/469\nf 781/1039/984 1059/1112/1055 684/470/468\nf 261/462/460 687/573/571 1059/1112/1055\nf 1060/1113/1056 753/578/576 248/584/582\nf 598/929/895 1060/1113/1056 751/583/581\nf 169/285/283 680/576/574 1060/1113/1056\nf 1061/1114/1057 680/576/574 169/285/283\nf 749/1115/1058 1061/1114/1057 592/369/367\nf 246/1043/988 754/579/577 1061/1114/1057\nf 749/1115/1058 1062/580/578 755/1044/989\nf 588/378/376 1062/580/578 749/1115/1058\nf 167/377/375 750/581/579 1062/580/578\nf 1063/1116/1059 756/585/583 249/1117/1060\nf 587/434/432 1063/1116/1059 752/1118/1061\nf 164/433/431 751/583/581 1063/1116/1059\nf 1064/1119/1062 762/588/586 250/596/594\nf 585/368/366 1064/1119/1062 678/595/593\nf 161/367/365 685/586/584 1064/1119/1062\nf 685/586/584 1065/589/587 763/1048/993\nf 584/385/383 1065/589/587 685/586/584\nf 162/384/382 759/590/588 1065/589/587\nf 1066/1120/1063 764/594/592 253/1121/1064\nf 586/999/951 1066/1120/1063 696/1122/1065\nf 159/412/410 761/592/590 1066/1120/1063\nf 1067/1123/1066 765/597/595 254/593/591\nf 595/427/425 1067/1123/1066 761/592/590\nf 160/426/424 678/595/593 1067/1123/1066\nf 1068/1124/1067 770/600/598 256/602/600\nf 594/409/407 1068/1124/1067 767/601/599\nf 158/408/406 766/598/596 1068/1124/1067\nf 1069/1125/1068 771/603/601 258/1126/1069\nf 596/424/422 1069/1125/1068 769/1127/1070\nf 157/423/421 767/601/599 1069/1125/1068\nf 766/598/596 1070/604/602 772/1086/1031\nf 583/440/438 1070/604/602 766/598/596\nf 163/439/437 711/605/603 1070/604/602\nf 1071/1128/1071 779/609/607 259/1129/1072\nf 184/1130/428 610/980/936 1071/1128/1071\nf 610/980/936 183/381/379 774/607/605\nf 1072/1131/1073 674/612/610 209/552/550\nf 732/543/541 1072/1131/1073 727/551/549\nf 234/542/540 728/610/608 1072/1131/1073\nf 692/619/617 1073/613/611 780/1060/1005\nf 593/403/401 1073/613/611 692/619/617\nf 156/402/400 777/614/612 1073/613/611\nf 1074/1132/1074 782/618/616 263/615/613\nf 582/415/413 1074/1132/1074 777/614/612\nf 171/414/412 778/616/614 1074/1132/1074\nf 1075/1133/1075 783/621/619 261/462/460\nf 597/446/444 1075/1133/1075 775/461/459\nf 172/445/443 692/619/617 1075/1133/1075\nf 787/627/625 1076/622/620 795/1081/1026\nf 227/538/536 725/537/535 1076/622/620\nf 725/537/535 231/1052/997 786/623/621\nf 1077/1134/1076 784/479/477 226/465/463\nf 785/1135/1077 1077/1134/1076 721/540/538\nf 266/1078/1023 791/625/623 1077/1134/1076\nf 788/629/627 1078/626/624 792/1054/999\nf 228/547/545 722/1099/1043 1078/626/624\nf 722/1099/1043 227/538/536 787/627/625\nf 1079/1136/1078 793/631/629 270/1137/1079\nf 723/1101/1045 1079/1136/1078 789/1138/1080\nf 228/547/545 788/629/627 1079/1136/1078\nf 785/1135/1077 1080/632/630 796/1079/1024\nf 230/1097/1041 726/1103/1046 1080/632/630\nf 726/1103/1046 232/550/548 790/633/631\nf 1081/635/633 358/809/799 59/88/86\nf 327/1139/1081 1081/635/633 379/87/85\nf 327/1139/1081 15/806/796 365/636/634\nf 1082/1140/1082 615/640/638 151/271/269\nf 642/1141/1083 1082/1140/1082 542/270/268\nf 301/1023/968 828/638/636 1082/1140/1082\nf 1083/1142/1084 829/643/641 300/711/709\nf 133/346/344 536/876/854 1083/1142/1084\nf 536/876/854 138/190/188 616/641/639\nf 547/939/903 1084/644/642 613/1143/1085\nf 142/304/302 811/1144/1086 1084/644/642\nf 811/1144/1086 286/1012/959 830/645/643\nf 1085/1145/1087 831/649/647 273/704/702\nf 523/916/882 1085/1145/1087 614/703/701\nf 130/266/264 622/647/645 1085/1145/1087\nf 1086/1146/1088 616/641/639 138/190/188\nf 802/1147/1089 1086/1146/1088 530/276/274\nf 277/1148/1090 832/650/648 1086/1146/1088\nf 1087/1149/1091 833/653/651 279/659/657\nf 544/925/891 1087/1149/1091 804/658/656\nf 544/925/891 139/279/277 808/651/649\nf 1088/1150/1092 834/656/654 277/1148/1090\nf 134/924/890 526/933/897 1088/1150/1092\nf 526/933/897 136/291/289 816/654/652\nf 619/1151/705 1089/657/655 835/982/937\nf 548/931/896 1089/657/655 619/1151/705\nf 152/288/286 804/658/656 1089/657/655\nf 621/723/721 1090/660/658 836/984/939\nf 150/362/360 543/935/899 1090/660/658\nf 543/935/899 151/271/269 615/640/638\nf 1091/1152/1093 837/663/661 281/648/646\nf 522/934/898 1091/1152/1093 622/647/645\nf 131/294/292 807/661/659 1091/1152/1093\nf 1092/1153/1094 838/666/664 287/671/669\nf 147/310/308 550/936/900 1092/1153/1094\nf 155/298/296 631/664/662 1092/1153/1094\nf 1093/1154/1095 839/669/667 284/675/673\nf 538/301/299 1093/1154/1095 625/674/672\nf 145/300/298 617/667/665 1093/1154/1095\nf 640/717/715 1094/1155/1096 840/672/670\nf 148/353/351 540/942/905 1094/1155/1096\nf 540/942/905 147/310/308 628/670/668\nf 626/1156/681 1095/673/671 841/992/945\nf 146/1157/317 549/941/904 1095/673/671\nf 549/941/904 154/307/305 625/674/672\nf 546/312/310 1096/676/674 822/1158/1097\nf 144/944/907 613/1143/1085 1096/676/674\nf 613/1143/1085 272/646/644 842/677/675\nf 1097/1159/1098 843/681/679 288/720/718\nf 531/945/908 1097/1159/1098 629/719/717\nf 125/316/314 814/679/677 1097/1159/1098\nf 631/664/662 1098/682/680 844/996/949\nf 155/298/296 539/946/909 1098/682/680\nf 539/946/909 146/319/317 626/683/681\nf 823/700/698 1099/1160/1099 845/687/685\nf 126/337/335 532/947/910 1099/1160/1099\nf 532/947/910 127/322/320 819/685/683\nf 633/1161/711 1100/688/686 846/1001/952\nf 132/949/348 524/325/323 1100/688/686\nf 524/325/323 128/324/322 818/689/687\nf 1101/1162/1100 847/693/691 289/680/678\nf 520/952/913 1101/1162/1100 814/679/677\nf 140/331/329 820/691/689 1101/1162/1100\nf 1102/1163/1101 848/696/694 296/698/696\nf 135/334/332 528/951/912 1102/1163/1101\nf 137/328/326 827/694/692 1102/1163/1101\nf 1103/1164/1102 849/699/697 291/1165/653\nf 527/954/914 1103/1164/1102 816/1166/652\nf 135/334/332 821/697/695 1103/1164/1102\nf 1104/1167/1103 850/702/700 295/1168/690\nf 534/957/915 1104/1167/1103 820/1169/689\nf 534/957/915 126/337/335 823/700/698\nf 1105/1170/1104 851/705/703 293/690/688\nf 128/324/322 533/958/916 1105/1170/1104\nf 129/340/338 614/703/701 1105/1170/1104\nf 811/1144/1086 1106/706/704 852/1013/960\nf 142/304/302 545/959/917 1106/706/704\nf 545/959/917 153/343/341 619/707/705\nf 1107/1171/1105 617/667/665 145/300/298\nf 822/1158/1097 1107/1171/1105 537/344/342\nf 297/678/676 853/709/707 1107/1171/1105\nf 1108/1172/1106 854/712/710 282/1173/660\nf 131/1174/292 525/347/345 1108/1172/1106\nf 525/347/345 133/346/344 825/710/708\nf 1109/1175/1107 855/715/713 294/686/684\nf 521/963/920 1109/1175/1107 819/685/683\nf 132/350/348 633/713/711 1109/1175/1107\nf 642/1141/1083 1110/716/714 856/1024/969\nf 149/920/886 541/964/921 1110/716/714\nf 541/964/921 148/353/351 640/717/715\nf 1111/1176/1108 857/721/719 283/652/650\nf 535/966/923 1111/1176/1108 808/651/649\nf 141/359/357 629/719/717 1111/1176/1108\nf 827/694/692 1112/722/720 858/1027/972\nf 137/328/326 529/967/924 1112/722/720\nf 529/967/924 150/362/360 621/723/721\nf 1256/1177/1109 1262/1178/1110 1132/1179/1111\nf 1134/1180/1112 1237/1181/1113 1375/1182/1114\nf 1127/1183/1115 1128/1184/1116 1263/1185/1117\nf 1399/1186/1118 1394/1187/1119 1335/1188/1120\nf 1349/1189/1121 1181/1190/1122 1196/1191/1123\nf 1292/1192/1124 1288/1193/1125 1164/1194/1126\nf 1407/1195/1127 1373/1196/1128 1370/1197/1129\nf 1343/1198/1130 1184/1199/1131 1192/1200/1132\nf 1126/1201/1133 1124/1202/1134 1261/1203/1135\nf 1287/1204/1136 1158/1205/1137 1157/1206/1138\nf 1160/1207/1139 1162/1208/1140 1285/1209/1141\nf 1308/1210/1142 1172/1211/1143 1171/1212/1144\nf 1161/1213/1145 1166/1214/1146 1299/1215/1147\nf 1240/1216/1148 1126/1217/1133 1130/1218/1149\nf 1253/1219/1150 1140/1220/1151 1136/1221/1152\nf 1341/1222/1153 1183/1223/1154 1194/1224/1155\nf 1403/1225/1156 1236/1226/1157 1134/1227/1112\nf 1369/1228/1158 1299/1215/1147 1220/1229/1159\nf 1304/1230/1160 1171/1231/1144 1173/1232/1161\nf 1201/1233/1162 1337/1/1163 1336/4/1164\nf 1293/1234/1165 1284/1235/1166 1166/1214/1146\nf 1362/1236/1167 1389/1237/1168 1296/1238/1169\nf 1140/1220/1151 1269/1239/1170 1270/1240/1171\nf 1289/1241/1172 1285/1209/1141 1151/1242/1173\nf 1236/1226/1157 1377/1243/1174 1260/1244/1175\nf 1308/1210/1142 1360/1245/1176 1177/1246/1177\nf 1118/1247/1178 1248/1248/1179 1245/1249/1180\nf 1263/1185/1117 1139/1250/1181 1138/1251/1182\nf 1132/1179/1111 1262/1178/1110 1255/1252/1183\nf 1272/1253/1184 1277/1254/1185 1143/1255/1186\nf 1301/1256/1187 1222/1257/1188 1372/1258/1189\nf 1290/1259/1190 1159/1260/1191 1163/1261/1192\nf 1262/1178/1110 1256/1177/1109 1142/1262/1193\nf 1376/1263/1194 1230/1264/1195 1119/1265/1196\nf 1225/1266/1197 1221/1267/1198 1300/1268/1199\nf 1363/1269/1200 1223/1270/1201 1219/1271/1202\nf 1143/1255/1186 1144/1272/1203 1255/1252/1183\nf 1137/1273/1204 1274/1274/1205 1275/1275/1206\nf 1155/1276/1207 1284/1235/1166 1293/1234/1165\nf 1248/1248/1179 1129/1277/1208 1125/1278/1209\nf 1308/1210/1142 1304/1279/1160 1225/1280/1197\nf 1346/1281/1210 1179/1282/1211 1195/1283/1212\nf 1292/1192/1124 1284/1235/1166 1155/1276/1207\nf 1333/1284/1213 1397/1285/1214 1358/1286/1215\nf 1305/1287/1216 1298/1288/1217 1219/1271/1202\nf 1268/1289/1218 1381/1290/1219 1266/1291/1220\nf 1150/1292/1221 1293/1234/1165 1289/1293/1172\nf 1159/1260/1191 1305/1294/1216 1367/1295/1222\nf 1226/1296/1223 1366/1297/1224 1306/1298/1225\nf 1125/1299/1209 1254/1300/1226 1261/1203/1135\nf 1307/1301/1227 1303/1302/1228 1224/1303/1229\nf 1218/1304/1230 1358/1286/1215 1395/1305/1231\nf 1362/1306/1167 1178/1307/1232 1297/1308/1233\nf 1388/1309/1234 1264/1310/1235 1152/1311/1236\nf 1285/1209/1141 1162/1208/1140 1158/1312/1137\nf 1363/1313/1200 1300/1268/1199 1221/1267/1198\nf 1339/1314/1237 1340/1315/1238 1197/1316/1239\nf 1126/1217/1133 1258/1317/1240 1259/1318/1241\nf 1122/1319/1242 1121/1320/1243 1244/1321/1244\nf 1365/1322/1245 1300/1268/1199 1162/1208/1140\nf 1386/1323/1246 1387/1324/1247 1282/1325/1248\nf 1316/1326/1249 1344/1327/1250 1208/1328/1251\nf 1176/1329/1252 1331/1330/1253 1315/1331/1254\nf 1394/1187/1119 1297/1308/1233 1178/1307/1232\nf 1234/1332/1255 1376/1263/1194 1241/1333/1256\nf 1339/1314/1237 1188/1334/1257 1190/1335/1258\nf 1270/1336/1171 1147/1337/1259 1146/1338/1260\nf 1243/1339/1261 1245/1340/1180 1125/1299/1209\nf 1313/1341/1262 1315/1331/1254 1203/1342/1263\nf 1297/1308/1233 1295/1343/1264 1390/1344/1265\nf 1176/1329/1252 1175/1345/1266 1327/1346/1267\nf 1140/1220/1151 1138/1347/1182 1273/1348/1268\nf 1365/1349/1245 1369/1228/1158 1229/1350/1269\nf 1271/1351/1270 1277/1254/1185 1154/1352/1271\nf 1293/1234/1165 1161/1213/1145 1160/1353/1139\nf 1283/1354/1272 1157/1206/1138 1159/1355/1191\nf 1136/1356/1152 1270/1336/1171 1276/1357/1273\nf 1114/1358/1274 1245/1340/1180 1243/1339/1261\nf 1178/1359/1232 1296/1238/1169 1393/1360/1275\nf 1354/1361/1276 1393/1360/1275 1401/1362/1277\nf 1406/1363/1278 1405/1364/1279 1280/1365/1280\nf 1250/1366/1281 1252/1367/1282 1383/1368/1283\nf 1247/1369/1284 1244/1321/1244 1132/1179/1111\nf 1365/1349/1245 1160/1353/1139 1161/1213/1145\nf 1210/1370/1285 1346/1281/1210 1348/1371/1286\nf 1258/1317/1240 1137/1273/1204 1141/1372/1287\nf 1316/1326/1249 1345/1373/1288 1169/1374/1289\nf 1254/1300/1226 1136/1356/1152 1135/1375/1290\nf 1312/1376/1291 1310/1377/1292 1396/1378/1293\nf 1167/1379/1294 1281/1380/1295 1404/1381/1296\nf 1290/1382/1190 1148/1383/1297 1146/1338/1260\nf 1232/1384/1298 1230/1264/1195 1376/1263/1194\nf 1117/1385/1299 1122/1319/1242 1247/1369/1284\nf 1276/1357/1273 1146/1338/1260 1148/1383/1297\nf 1347/1386/1300 1211/1387/1301 1210/1370/1285\nf 1291/1388/1302 1163/1389/1192 1279/1390/1303\nf 1154/1352/1271 1153/1391/1304 1288/1193/1125\nf 1233/1392/1305 1123/1393/1306 1242/1394/1307\nf 1198/1395/1308 1334/1396/1309 1402/1397/1310\nf 1380/1398/1311 1234/1332/1255 1130/1399/1149\nf 1265/1400/1312 1267/1401/1313 1387/1324/1247\nf 1261/1203/1135 1135/1375/1290 1137/1402/1204\nf 1244/1321/1244 1238/1403/1314 1131/1404/1315\nf 1366/1297/1224 1170/1405/1316 1174/1406/1317\nf 1286/1407/1318 1385/1408/1319 1281/1380/1295\nf 1404/1381/1296 1370/1197/1129 1222/1409/1188\nf 1359/1410/1320 1219/1271/1202 1223/1270/1201\nf 1228/1411/1321 1220/1229/1159 1299/1215/1147\nf 1251/1412/1322 1377/1243/1174 1380/1398/1311\nf 1253/1219/1150 1257/1413/1323 1138/1347/1182\nf 1316/1326/1249 1173/1232/1161 1171/1231/1144\nf 1314/1414/1324 1210/1370/1285 1212/1415/1325\nf 1393/1360/1275 1354/1361/1276 1215/1416/1326\nf 1352/1417/1327 1216/1418/1328 1353/1419/1329\nf 1383/1368/1283 1268/1420/1218 1156/1421/1330\nf 1324/1422/1331 1205/1423/1332 1206/1424/1333\nf 1278/1425/1334 1139/1250/1181 1144/1272/1203\nf 1374/1426/1335 1235/1427/1336 1131/1428/1315\nf 1396/1378/1293 1310/1377/1292 1193/1429/1337\nf 1314/1414/1324 1321/1430/1338 1170/1431/1316\nf 1391/1432/1339 1390/1344/1265 1371/1433/1340\nf 1268/1420/1218 1383/1368/1283 1252/1367/1282\nf 1274/1274/1205 1148/1434/1297 1152/1435/1236\nf 1157/1206/1138 1298/1288/1217 1305/1287/1216\nf 1249/1436/1341 1384/1437/1342 1381/1290/1219\nf 1246/1438/1343 1128/1184/1116 1127/1183/1115\nf 1243/1339/1261 1240/1439/1148 1115/1440/1344\nf 1328/1441/1345 1206/1424/1333 1205/1423/1332\nf 1115/1442/1344 1240/1216/1148 1241/1443/1256\nf 1271/1351/1270 1155/1276/1207 1150/1292/1221\nf 1257/1413/1323 1253/1219/1150 1129/1277/1208\nf 1247/1369/1284 1133/1444/1346 1128/1184/1116\nf 1284/1235/1166 1292/1192/1124 1165/1445/1347\nf 1222/1409/1188 1370/1197/1129 1389/1237/1168\nf 1398/1446/1348 1400/1447/1349 1354/1361/1276\nf 1172/1211/1143 1324/1422/1331 1342/1448/1350\nf 1353/1419/1329 1216/1418/1328 1322/1449/1351\nf 1407/1195/1127 1279/1390/1303 1163/1389/1192\nf 1350/1450/1352 1174/1406/1317 1170/1405/1316\nf 1222/1257/1188 1362/1306/1167 1391/1432/1339\nf 1371/1433/1340 1224/1451/1229 1303/1452/1228\nf 1319/1453/1353 1399/1186/1118 1334/1396/1309\nf 1346/1281/1210 1318/1454/1354 1180/1455/1355\nf 1368/1456/1356 1364/1457/1357 1175/1345/1266\nf 1405/1364/1279 1406/1363/1278 1372/1258/1189\nf 1306/1458/1225 1174/1459/1317 1294/1460/1358\nf 1303/1302/1228 1307/1301/1227 1165/1445/1347\nf 1346/1281/1210 1210/1370/1285 1211/1387/1301\nf 1400/1447/1349 1311/1461/1359 1191/1462/1360\nf 1139/1250/1181 1278/1425/1334 1273/1463/1268\nf 1148/1434/1297 1290/1259/1190 1291/1464/1302\nf 1169/1465/1289 1347/1386/1300 1314/1414/1324\nf 1117/1385/1299 1246/1438/1343 1239/1466/1361\nf 1384/1437/1342 1249/1436/1341 1141/1467/1287\nf 1360/1245/1176 1220/1229/1159 1228/1411/1321\nf 1255/1252/1183 1144/1272/1203 1139/1250/1181\nf 1361/1468/1362 1302/1469/1363 1223/1470/1201\nf 1403/1225/1156 1242/1471/1307 1123/1472/1306\nf 1385/1408/1319 1266/1291/1220 1264/1310/1235\nf 1248/1248/1179 1118/1247/1178 1116/1473/1364\nf 1302/1474/1363 1169/1465/1289 1168/1475/1365\nf 1260/1476/1175 1379/1477/1366 1237/1181/1113\nf 1387/1324/1247 1286/1478/1318 1167/1479/1294\nf 1357/1480/1367 1358/1286/1215 1397/1285/1214\nf 1231/1481/1368 1374/1426/1335 1238/1482/1314\nf 1405/1364/1279 1303/1452/1228 1164/1483/1126\nf 1327/1346/1267 1201/1233/1162 1200/1484/1369\nf 1235/1427/1336 1237/1181/1113 1379/1477/1366\nf 1373/1196/1128 1392/1485/1370 1389/1237/1168\nf 1269/1239/1170 1273/1348/1268 1149/1486/1371\nf 1388/1309/1234 1279/1390/1303 1281/1380/1295\nf 1320/1487/1372 1343/1198/1130 1207/1488/1373\nf 1266/1291/1220 1381/1290/1219 1384/1437/1342\nf 1392/1485/1370 1294/1460/1358 1296/1238/1169\nf 1368/1456/1356 1176/1329/1252 1177/1246/1177\nf 1238/1403/1314 1244/1321/1244 1121/1320/1243\nf 1402/1397/1310 1357/1480/1367 1217/1489/1374\nf 1175/1490/1266 1295/1343/1264 1399/1186/1118\nf 1298/1288/1217 1157/1206/1138 1158/1205/1137\nf 1156/1491/1330 1266/1291/1220 1385/1408/1319\nf 1302/1469/1363 1361/1468/1362 1173/1232/1161\nf 1229/1350/1269 1220/1229/1159 1360/1245/1176\nf 1204/1492/1375 1203/1342/1263 1315/1331/1254\nf 1307/1301/1227 1299/1215/1147 1166/1214/1146\nf 1235/1427/1336 1374/1426/1335 1375/1182/1114\nf 1267/1401/1313 1265/1400/1312 1382/1493/1376\nf 1373/1196/1128 1407/1195/1127 1367/1494/1222\nf 1329/1495/1377 1213/1496/1378 1214/1497/1379\nf 1335/1188/1120 1199/1498/1380 1356/1499/1381\nf 1267/1401/1313 1156/1421/1330 1286/1478/1318\nf 1236/1226/1157 1234/1332/1255 1380/1398/1311\nf 1398/1446/1348 1322/1449/1351 1185/1500/1382\nf 1172/1211/1143 1177/1246/1177 1315/1331/1254\nf 1334/1396/1309 1335/1188/1120 1395/1305/1231\nf 1397/1285/1214 1333/1284/1213 1189/1501/1383\nf 1364/1502/1357 1390/1344/1265 1295/1343/1264\nf 1265/1400/1312 1153/1503/1304 1272/1504/1184\nf 1325/1505/1384 1199/1498/1380 1335/1188/1120\nf 1259/1506/1241 1141/1467/1287 1249/1436/1341\nf 1277/1254/1185 1272/1253/1184 1153/1391/1304\nf 1403/1225/1156 1376/1263/1194 1234/1332/1255\nf 1357/1480/1367 1396/1378/1293 1332/1507/1385\nf 1254/1508/1226 1125/1278/1209 1129/1277/1208\nf 1305/1294/1216 1226/1296/1223 1227/1509/1386\nf 1213/1496/1378 1349/1189/1121 1330/1510/1387\nf 1343/1198/1130 1320/1487/1372 1182/1511/1388\nf 1158/1312/1137 1162/1208/1140 1300/1268/1199\nf 1145/1512/1389 1252/1367/1282 1379/1477/1366\nf 1231/1481/1368 1233/1392/1305 1375/1182/1114\nf 1250/1366/1281 1142/1513/1193 1256/1514/1109\nf 1382/1493/1376 1272/1504/1184 1142/1513/1193\nf 1340/1315/1238 1339/1314/1237 1203/1342/1263\nf 1225/1266/1197 1304/1230/1160 1361/1468/1362\nf 1345/1373/1288 1316/1326/1249 1207/1488/1373\nf 1326/1515/1390 1209/1516/1391 1207/1488/1373\nf 1287/1517/1136 1147/1518/1259 1151/1242/1173\nf 1240/1439/1148 1243/1339/1261 1124/1202/1134\nf 1294/1460/1358 1401/1362/1277 1393/1360/1275\nf 1354/1361/1276 1400/1447/1349 1351/1519/1392\nf 1400/1447/1349 1398/1446/1348 1309/1520/1393\nf 1402/1397/1310 1395/1305/1231 1358/1286/1215\nf 1282/1325/1248 1167/1479/1294 1301/1256/1187\nf 1153/1503/1304 1265/1400/1312 1386/1323/1246\nf 1280/1365/1280 1164/1483/1126 1288/1521/1125\nf 1278/1425/1334 1150/1292/1221 1149/1522/1371\nf 1168/1475/1365 1170/1431/1316 1366/1523/1224\nf 1239/1524/1361 1127/1525/1115 1129/1277/1208\nf 1135/1375/1290 1276/1357/1273 1274/1526/1205\nf 1279/1390/1303 1407/1195/1127 1404/1381/1296\nf 1401/1362/1277 1294/1460/1358 1174/1459/1317\nf 1251/1412/1322 1145/1527/1389 1260/1244/1175\nf 1277/1254/1185 1271/1351/1270 1144/1272/1203\nf 1295/1343/1264 1297/1308/1233 1394/1187/1119\nf 1378/1528/1394 1379/1477/1366 1252/1367/1282\nf 1235/1427/1336 1378/1528/1394 1256/1514/1109\nf 1224/1451/1229 1371/1433/1340 1390/1344/1265\nf 1228/1411/1321 1224/1303/1229 1364/1457/1357\nf 1145/1527/1389 1251/1412/1322 1381/1290/1219\nf 1264/1310/1235 1384/1437/1342 1275/1529/1206\nf 1269/1239/1170 1151/1242/1173 1147/1518/1259\nf 1392/1485/1370 1373/1196/1128 1227/1530/1386\nf 1147/1337/1259 1287/1204/1136 1283/1354/1272\nf 1202/1531/1395 1203/1342/1263 1339/1314/1237\nf 1133/1444/1346 1255/1252/1183 1263/1185/1117\nf 1658/17/1396 1435/18/1397 2614/1532/1398\nf 2266/1533/1399 1657/23/1400 1447/24/1401\nf 1967/26/1402 1659/27/1403 1431/28/1404\nf 1968/29/1405 1655/30/1406 1446/31/1407\nf 1662/32/1408 1433/33/1409 1641/34/1410\nf 2232/1534/1411 1672/38/1412 1449/39/1413\nf 1664/47/1414 1440/48/1415 2122/1535/1416\nf 1666/51/1417 1432/52/1418 2563/1536/1419\nf 1973/56/1420 1667/57/1421 1452/58/1422\nf 1665/22/1423 1444/21/1424 2349/1537/1425\nf 1671/60/1426 1438/61/1427 2648/1538/1428\nf 1697/75/1429 1465/76/1430 2513/1539/1431\nf 1673/78/1432 1450/79/1433 1638/80/1434\nf 2147/1540/1435 1703/97/1436 1464/98/1437\nf 1693/117/1438 1458/118/1439 2615/1541/1440\nf 1701/120/1441 1470/121/1442 2259/1542/1443\nf 1702/126/1444 1454/127/1445 1680/128/1446\nf 1986/129/1447 1700/130/1448 1469/131/1449\nf 1705/132/1450 1456/133/1451 1681/134/1452\nf 1714/138/1453 1472/139/1454 2225/1543/1455\nf 2131/1544/1456 1707/148/1457 1463/149/1458\nf 2572/1545/1459 1709/151/1460 1455/152/1461\nf 1991/156/1462 1710/157/1463 1475/158/1464\nf 2359/1546/1465 1708/125/1466 1467/124/1467\nf 1713/160/1468 1461/161/1469 2649/1547/1470\nf 1739/174/1471 1488/175/1472 2514/1548/1473\nf 1695/176/1474 1473/177/1475 1678/178/1476\nf 1754/179/1477 1495/180/1478 2226/1549/1479\nf 2148/1550/1480 1744/195/1481 1487/196/1482\nf 1735/215/1483 1481/216/1484 2616/1551/1485\nf 1742/218/1486 1493/219/1487 2260/1552/1488\nf 1743/224/1489 1477/225/1490 1720/226/1491\nf 2005/227/1492 1741/228/1493 1492/229/1494\nf 1746/230/1495 1479/231/1496 1721/232/1497\nf 2132/1553/1498 1748/243/1499 1486/244/1500\nf 1750/245/1501 1478/246/1502 2565/1554/1503\nf 2010/251/1504 1734/252/1505 1498/253/1506\nf 1753/255/1507 1484/256/1508 2650/1555/1509\nf 2625/1556/1510 1777/265/1511 1504/266/1512\nf 2212/1557/1513 1520/271/1514 1774/272/1515\nf 1737/273/1516 1496/274/1517 1718/275/1518\nf 2522/1558/1519 1780/278/1520 1511/279/1521\nf 2213/1559/1522 1543/281/1523 1926/282/1524\nf 2149/1560/1525 1785/290/1526 1510/291/1527\nf 2269/1561/1528 1783/309/1529 1516/310/1530\nf 2021/314/1531 1784/315/1532 1500/316/1533\nf 2022/317/1534 1782/318/1535 1515/319/1536\nf 2023/320/1537 1787/321/1538 1502/322/1539\nf 2133/1562/1540 1789/333/1541 1509/334/1542\nf 2574/1563/1543 1791/336/1544 1501/337/1545\nf 2027/341/1546 1776/342/1547 1521/343/1548\nf 2659/1564/1549 1793/345/1550 1507/346/1551\nf 2031/360/1552 1779/361/1553 1519/362/1554\nf 1810/363/1555 1537/364/1556 1924/365/1557\nf 1930/366/1558 1527/367/1559 2618/1565/1560\nf 1821/370/1561 1534/371/1562 2516/1566/1563\nf 2237/1567/1564 1891/374/1565 1561/375/1566\nf 1826/376/1567 1533/377/1568 2143/1568/1569\nf 2270/1569/1570 1935/393/1571 1539/394/1572\nf 1825/401/1573 1523/402/1574 1800/403/1575\nf 2039/404/1576 1934/405/1577 1538/406/1578\nf 1828/407/1579 1525/408/1580 1801/409/1581\nf 1830/419/1582 1532/420/1583 2126/1570/1584\nf 1832/422/1585 1524/423/1586 2567/1571/1587\nf 2044/428/1588 1928/429/1589 1544/430/1590\nf 1834/432/1591 1530/433/1592 2652/1572/1593\nf 1861/435/1594 1573/436/1595 2264/1573/1596\nf 2047/447/1597 1929/448/1598 1542/449/1599\nf 1853/450/1600 1562/451/1601 1838/452/1602\nf 1850/453/1603 1557/454/1604 1854/455/1605\nf 1902/456/1606 1550/457/1607 2619/1574/1608\nf 2524/1575/1609 1910/461/1610 1590/462/1611\nf 2151/1576/1612 1863/467/1613 1554/468/1614\nf 2054/488/1615 1862/489/1616 1546/490/1617\nf 2055/491/1618 1886/492/1619 1558/493/1620\nf 1865/494/1621 1548/495/1622 1841/496/1623\nf 2206/1577/1624 1577/504/1625 1856/505/1626\nf 1866/506/1627 1553/507/1628 2127/1578/1629\nf 1868/509/1630 1547/510/1631 2568/1579/1632\nf 2059/515/1633 1879/516/1634 1564/517/1635\nf 2363/1580/1636 1867/519/1637 1556/520/1638\nf 2661/1581/1639 1870/521/1640 1551/522/1641\nf 2152/1582/1642 1660/534/1643 1441/535/1644\nf 1880/540/1645 1569/465/1646 1876/464/1647\nf 2067/548/1648 1872/549/1649 1572/550/1650\nf 1884/551/1651 1559/552/1652 2263/1583/1653\nf 2068/554/1654 1874/555/1655 1575/556/1656\nf 2070/560/1657 1889/561/1658 1576/562/1659\nf 1893/570/1660 1579/571/1661 2128/1584/1662\nf 1859/573/1663 1555/574/1664 2517/1585/1665\nf 2153/1586/1666 1896/581/1667 1581/582/1668\nf 1897/583/1669 1582/584/1670 2654/1587/1671\nf 1858/586/1672 1585/587/1673 2620/1588/1674\nf 1906/598/1675 1587/599/1676 1909/600/1677\nf 1907/601/1678 1588/602/1679 2569/1589/1680\nf 2080/613/1681 1911/614/1682 1591/615/1683\nf 2365/1590/1684 1917/623/1685 1593/624/1686\nf 1920/625/1687 1592/480/1688 1916/479/1689\nf 2085/632/1690 1919/633/1691 1595/634/1692\nf 2526/1591/1693 1653/636/1694 1442/637/1695\nf 2207/1592/1696 1598/639/1697 1815/640/1698\nf 1948/645/1699 1596/646/1700 1813/1143/1701\nf 1819/647/1702 1602/648/1703 2621/1593/1704\nf 2527/1594/1705 1932/651/1706 1604/652/1707\nf 1937/654/1708 1609/655/1709 2146/1595/1710\nf 2273/1596/1711 1824/670/1712 1607/671/1713\nf 1936/679/1714 1608/680/1715 1954/681/1716\nf 2095/682/1717 1823/683/1718 1606/684/1719\nf 2096/1160/1720 1939/685/1721 1611/686/1722\nf 1941/697/1723 1613/698/1724 2129/1597/1725\nf 2578/1598/1726 1943/700/1727 1615/701/1728\nf 2100/706/1729 1817/707/1730 1600/708/1731\nf 1945/710/1732 1617/711/1733 2655/1599/1734\nf 2103/722/1735 1818/723/1736 1601/724/1737\nf 1965/729/1738 1646/10/1739 1453/13/1740\nf 1629/730/1741 1965/729/1738 1654/12/1742\nf 1674/737/1743 1966/14/1744 1650/738/1745\nf 1422/739/1746 1633/740/1747 1966/14/1744\nf 1412/745/1748 1658/17/1396 2622/1600/1749\nf 2257/1601/1750 1424/726/1751 1657/23/1400\nf 1623/754/1752 1408/755/1753 1659/27/1403\nf 1630/757/1754 1423/758/1755 1655/30/1406\nf 1410/762/1756 1662/32/1408 1969/759/1757\nf 1661/763/1758 1970/35/1759 1636/764/1760\nf 1619/765/1761 1970/35/1759 1661/763/1758\nf 2223/1602/1762 1426/770/1763 1672/38/1412\nf 1417/775/1764 1664/47/1414 2130/1603/1765\nf 1409/760/1766 1666/51/1417 2571/1604/1767\nf 1972/786/1768 1642/55/1769 2582/1605/1770\nf 1625/787/1771 1972/786/1768 2588/1606/1772\nf 1632/789/1773 1429/790/1774 1667/57/1421\nf 1421/793/1775 1665/22/1423 2358/1607/1776\nf 1415/798/1777 1671/60/1426 2656/1608/1778\nf 2512/1609/1779 1442/637/1695 1697/75/1429\nf 1621/811/1780 1427/812/1781 1673/78/1432\nf 2139/1610/1782 1441/535/1644 1703/97/1436\nf 1983/835/1783 1686/110/1784 1476/116/1785\nf 1646/10/1739 1983/835/1783 1698/115/1786\nf 1715/836/1787 1984/111/1788 1690/837/1789\nf 1445/748/1790 1650/738/1745 1984/111/1788\nf 1435/18/1397 1693/117/1438 2623/1611/1791\nf 1447/24/1401 1701/120/1441 2267/1612/1792\nf 1431/28/1404 1702/126/1444 1985/844/1793\nf 1647/756/1794 1446/31/1407 1700/130/1448\nf 1433/33/1409 1705/132/1450 1987/846/1795\nf 1704/847/1796 1988/135/1797 1676/848/1798\nf 1636/764/1760 1988/135/1797 1704/847/1796\nf 1449/39/1413 1714/138/1453 2233/1613/1799\nf 2122/1535/1416 1440/48/1415 1707/148/1457\nf 1432/52/1418 1709/151/1460 2572/1545/1459\nf 1990/858/1800 1682/155/1801 2583/1614/1802\nf 1642/55/1769 1990/858/1800 2589/1615/1803\nf 1649/788/1804 1452/58/1422 1710/157/1463\nf 2349/1537/1425 1444/21/1424 1708/125/1466\nf 1438/61/1427 1713/160/1468 2657/1616/1805\nf 1465/76/1430 1739/174/1471 2521/1617/1806\nf 1450/79/1433 1695/176/1474 1996/870/1807\nf 1472/139/1454 1754/179/1477 2234/1618/1808\nf 2183/1619/1809 1998/185/1810 1719/875/1811\nf 2176/1620/1812 1679/169/1813 1998/185/1810\nf 1464/98/1437 1744/195/1481 2148/1550/1480\nf 2002/884/1814 1726/208/1815 1499/213/1816\nf 1686/110/1784 2002/884/1814 1740/212/1817\nf 1755/885/1818 2003/209/1819 1730/886/1820\nf 1468/843/1821 1690/837/1789 2003/209/1819\nf 1458/118/1439 1735/215/1483 2624/1621/1822\nf 1470/121/1442 1742/218/1486 2268/1622/1823\nf 1454/127/1445 1743/224/1489 2004/894/1824\nf 1687/845/1825 1469/131/1449 1741/228/1493\nf 1456/133/1451 1746/230/1495 2006/896/1826\nf 2007/897/1827 1716/235/1828 1483/898/1829\nf 1676/848/1798 2007/897/1827 1745/899/1830\nf 2123/1623/1831 1463/149/1458 1748/243/1499\nf 1455/152/1461 1750/245/1501 2573/1624/1832\nf 2009/908/1833 1722/250/1834 2584/1625/1835\nf 1682/155/1801 2009/908/1833 2590/1626/1836\nf 1689/859/1837 1475/158/1464 1734/252/1505\nf 2334/1627/1838 2011/910/1839 1685/860/1840\nf 2344/1628/1841 1725/254/1842 2011/910/1839\nf 1461/161/1469 1753/255/1507 2658/1629/1843\nf 1481/216/1484 1777/265/1511 2625/1556/1510\nf 2218/1630/1844 1774/272/1515 1497/201/1845\nf 1473/177/1475 1737/273/1516 2013/921/1846\nf 1488/175/1472 1780/278/1520 2522/1558/1519\nf 2219/1631/1847 1926/282/1524 1598/639/1697\nf 2141/1632/1848 1487/196/1482 1785/290/1526\nf 2019/937/1849 1766/301/1850 1522/307/1851\nf 1726/208/1815 2019/937/1849 1781/306/1852\nf 2020/302/1853 1770/939/1854 1514/944/1855\nf 1491/893/1856 1730/886/1820 2020/302/1853\nf 2260/1552/1488 1493/219/1487 1783/309/1529\nf 1720/226/1491 1477/225/1490 1784/315/1532\nf 1727/895/1857 1492/229/1494 1782/318/1535\nf 1721/232/1497 1479/231/1496 1787/321/1538\nf 2024/948/1858 1756/325/1859 1506/949/1860\nf 1716/235/1828 2024/948/1858 1786/950/1861\nf 2124/1633/1862 1486/244/1500 1789/333/1541\nf 1478/246/1502 1791/336/1544 2574/1563/1543\nf 2591/1634/1863 2026/338/1864 1762/958/1865\nf 1722/250/1834 2026/338/1864 2591/1634/1863\nf 1729/909/1866 1498/253/1506 1776/342/1547\nf 2335/1635/1867 2028/960/1868 1725/254/1842\nf 2345/1636/1869 1765/344/1870 2028/960/1868\nf 1484/256/1508 1793/345/1550 2659/1564/1549\nf 1718/275/1518 1496/274/1517 1779/361/1553\nf 2032/968/1871 1924/365/1557 1596/646/1700\nf 1602/648/1703 1930/366/1558 2626/1637/1872\nf 1604/652/1707 1821/370/1561 2523/1638/1873\nf 2230/1639/1874 1578/977/1875 1891/374/1565\nf 1609/655/1709 1826/376/1567 2150/1640/1876\nf 2037/987/1877 1806/391/1878 1545/397/1879\nf 1953/669/1880 2037/987/1877 1933/396/1881\nf 2265/1641/1882 1607/671/1713 1935/393/1571\nf 1608/680/1715 1825/401/1573 2038/994/1883\nf 1955/996/1884 1606/684/1719 1934/405/1577\nf 1611/686/1722 1828/407/1579 2040/997/1885\nf 1938/998/1886 2041/410/1887 1796/999/1888\nf 1610/1000/1889 1957/1001/1890 2041/410/1887\nf 1613/698/1724 1830/419/1582 2134/1642/1891\nf 1615/701/1728 1832/422/1585 2575/1643/1892\nf 2043/1010/1893 1802/427/1894 2586/1644/1895\nf 1959/705/1896 2043/1010/1893 2592/1645/1897\nf 1960/1013/1898 1600/708/1731 1928/429/1589\nf 2336/1646/1899 2045/1014/1900 1961/709/1901\nf 2346/1647/1902 1805/431/1903 2045/1014/1900\nf 1617/711/1733 1834/432/1591 2660/1648/1904\nf 1539/394/1572 1861/435/1594 2271/1649/1905\nf 1963/1027/1906 1601/724/1737 1929/448/1598\nf 1576/562/1659 1853/450/1600 2048/1028/1907\nf 2049/1032/1908 1854/455/1605 1592/480/1688\nf 1585/587/1673 1902/456/1606 2627/1650/1909\nf 1534/371/1562 1910/461/1610 2524/1575/1609\nf 2145/1651/1910 1581/582/1668 1863/467/1613\nf 1877/484/1911 2053/481/1912 1846/1053/1913\nf 1594/630/1914 1921/1054/1915 2053/481/1912\nf 1913/1060/1916 1591/615/1683 1862/489/1616\nf 1887/1062/1917 1575/556/1656 1886/492/1619\nf 1587/599/1676 1865/494/1621 2056/1063/1918\nf 2057/1064/1919 1836/499/1920 1567/1065/1921\nf 1904/594/1922 2057/1064/1919 1903/1066/1923\nf 2221/1652/1924 1856/505/1626 1543/281/1523\nf 1579/571/1661 1866/506/1627 2135/1653/1925\nf 1588/602/1679 1868/509/1630 2576/1654/1926\nf 2058/1076/1927 1842/514/1928 2587/1655/1929\nf 1905/597/1930 2058/1076/1927 2593/1656/1931\nf 1923/1079/1932 1595/634/1692 1879/516/1634\nf 2356/1657/1933 1593/624/1686 1867/519/1637\nf 1582/584/1670 1870/521/1640 2661/1581/1639\nf 2138/1658/1934 1418/1091/1935 1660/534/1643\nf 2338/1659/1936 2063/1094/1937 1805/431/1903\nf 2329/1660/1938 1882/537/1939 2063/1094/1937\nf 2064/1095/1940 1876/464/1647 1537/364/1556\nf 1860/546/1941 2066/544/1942 1881/1099/1943\nf 1806/391/1878 2066/544/1942 1860/546/1941\nf 1809/1011/1944 1544/430/1590 1872/549/1649\nf 1573/436/1595 1884/551/1651 2272/1661/1945\nf 1807/995/1946 1538/406/1578 1874/555/1655\nf 1798/1026/1947 1542/449/1599 1889/561/1658\nf 1532/420/1583 1893/570/1660 2136/1662/1948\nf 2518/1663/1949 1590/462/1611 1859/573/1663\nf 1533/377/1568 1896/581/1667 2153/1586/1666\nf 1530/433/1592 1897/583/1669 2662/1664/1950\nf 1527/367/1559 1858/586/1672 2628/1665/1951\nf 2075/1120/1952 1904/594/1922 1586/1121/1953\nf 1796/999/1888 2075/1120/1952 1864/1122/1954\nf 2076/1123/1955 1905/597/1930 2579/1666/1956\nf 1802/427/1894 2076/1123/1955 2594/1667/1957\nf 1525/408/1580 1906/598/1675 2077/1124/1958\nf 1524/423/1586 1907/601/1678 2577/1668/1959\nf 1523/402/1574 1911/614/1682 2080/613/1681\nf 2355/1669/1960 1571/1052/1961 1917/623/1685\nf 2083/1134/1962 1916/479/1689 1569/465/1646\nf 1918/629/1963 2084/626/1964 1921/1054/1915\nf 1570/547/1965 1881/1099/1943 2084/626/1964\nf 1883/1103/1966 1572/550/1650 1919/633/1691\nf 2511/1670/1967 1419/806/1968 1653/636/1694\nf 2222/1671/1969 1815/640/1698 1520/271/1514\nf 1770/939/1854 2088/644/1970 1813/1143/1701\nf 1504/266/1512 1819/647/1702 2629/1672/1971\nf 2515/1673/1972 1511/279/1521 1932/651/1706\nf 2142/1674/1973 1510/291/1527 1937/654/1708\nf 2093/1154/1974 1953/669/1880 1605/675/1975\nf 1766/301/1850 2093/1154/1974 1822/674/1976\nf 2261/1675/1977 1516/310/1530 1824/670/1712\nf 1500/316/1533 1936/679/1714 2094/1159/1978\nf 1767/946/1979 1515/319/1536 1823/683/1718\nf 1761/947/1980 1502/322/1539 1939/685/1721\nf 1827/1161/1981 2097/688/1982 1957/1001/1890\nf 1506/949/1860 1756/325/1859 2097/688/1982\nf 1509/334/1542 1941/697/1723 2137/1676/1983\nf 2566/1677/1984 1501/337/1545 1943/700/1727\nf 2099/1170/1985 1959/705/1896 2580/1678/1986\nf 2585/1679/1987 1762/958/1865 2099/1170/1985\nf 1769/959/1988 1521/343/1548 1817/707/1730\nf 2340/1680/1989 2101/1171/1990 1765/344/1870\nf 2331/1681/1991 1961/709/1901 2101/1171/1990\nf 2651/1682/1992 1507/346/1551 1945/710/1732\nf 1758/967/1993 1519/362/1554 1818/723/1736\nf 2113/1683/1994 2105/1684/1995 1637/46/1996\nf 2114/1685/1997 2106/1686/1998 1677/146/1999\nf 2115/1687/2000 2107/1688/2001 1717/241/2002\nf 2025/326/2003 2116/1689/2004 2108/1690/2005\nf 2117/1691/2006 2109/1692/2007 1797/418/2008\nf 2069/557/2009 2118/1693/2010 2110/1694/2011\nf 2119/1695/2012 2111/1696/2013 1894/565/2014\nf 2120/1697/2015 2112/1698/2016 1958/696/2017\nf 2104/1699/2018 2113/1683/1994 1971/774/2019\nf 1637/46/1996 2105/1684/1995 2114/1685/1997\nf 2106/1686/1998 2115/1687/2000 2008/901/2020\nf 1717/241/2002 2107/1688/2001 2116/1689/2004\nf 2112/1698/2016 2117/1691/2006 2042/1003/2021\nf 2111/1696/2013 2118/1693/2010 2069/557/2009\nf 2109/1692/2007 2119/1695/2012 2071/1108/2022\nf 2108/1690/2005 2120/1697/2015 2098/1163/2023\nf 1699/829/2024 2164/1700/2025 2157/1701/2026\nf 1439/817/2027 2156/1702/2028 2164/1700/2025\nf 1733/186/2029 2165/1703/2030 2158/1704/2031\nf 2157/1701/2026 2165/1703/2030 1733/186/2029\nf 1775/923/2032 2166/1705/2033 2159/1706/2034\nf 1485/187/2035 2158/1704/2031 2166/1705/2033\nf 2167/1707/2036 2160/1708/2037 1531/974/2038\nf 2163/1709/2039 2167/1707/2036 1816/973/2040\nf 1857/1037/2041 2168/1710/2042 2161/1711/2043\nf 1580/1043/2044 2162/1712/2045 2168/1710/2042\nf 1656/815/2046 2169/1713/2047 2156/1702/2028\nf 1416/1714/2048 2155/1715/2049 2169/1713/2047\nf 1895/1115/2050 2170/1716/2051 2162/1712/2045\nf 2160/1708/2037 2170/1716/2051 1895/1115/2050\nf 2171/1717/2052 2163/1709/2039 1599/1148/2053\nf 1508/924/2054 2159/1706/2034 2171/1717/2052\nf 1979/813/2055 1639/81/2056 2175/1718/2057\nf 1679/169/1813 2176/1620/1812 2182/1719/2058\nf 1759/276/2059 2178/1720/2060 2184/1721/2061\nf 1799/369/2062 2179/1722/2063 2185/1723/2064\nf 1839/459/2065 2180/1724/2066 2186/1725/2067\nf 1900/579/2068 2172/1726/2069 2187/1727/2070\nf 1949/650/2071 2173/1728/2072 2188/1729/2073\nf 1622/816/2074 1979/813/2055 2181/1730/2075\nf 1993/866/2076 2182/1719/2058 2175/1718/2057\nf 2014/922/2077 2184/1721/2061 2177/1731/2078\nf 2033/972/2079 2185/1723/2064 2173/1728/2072\nf 2050/1036/2080 2186/1725/2067 2172/1726/2069\nf 2074/1114/2081 2187/1727/2070 2179/1722/2063\nf 2089/1146/2082 2188/1729/2073 2178/1720/2060\nf 1975/63/2083 2198/1732/2084 2191/1733/2085\nf 1980/818/2086 2199/1734/2087 2192/1735/2088\nf 1999/188/2089 2200/1736/2090 2193/1737/2091\nf 2201/1738/2092 2194/1739/2093 1804/929/2094\nf 2202/1740/2095 2195/1741/2096 1844/356/2097\nf 2203/1742/2098 2190/1743/2099 1644/536/2100\nf 2204/1744/2101 2196/1745/2102 1899/578/2103\nf 2205/1746/2104 2197/1747/2105 1947/643/2106\nf 1644/536/2100 2190/1743/2099 2198/1732/2084\nf 2191/1733/2085 2199/1734/2087 1980/818/2086\nf 2192/1735/2088 2200/1736/2090 1999/188/2089\nf 2197/1747/2105 2201/1738/2092 2016/283/2107\nf 2196/1745/2102 2202/1740/2095 2029/965/2108\nf 2189/1748/2109 2203/1742/2098 2062/1092/2110\nf 2194/1739/2093 2204/1744/2101 2073/1113/2111\nf 1764/876/2112 2193/1737/2091 2205/1746/2104\nf 1675/94/2113 2215/1749/2114 2209/1750/2115\nf 1428/768/2116 2208/1751/2117 2215/1749/2114\nf 1696/102/2118 2216/1752/2119 2210/1753/2120\nf 2209/1750/2115 2216/1752/2119 1696/102/2118\nf 2217/1754/2121 2211/1755/2122 1497/201/1845\nf 2210/1753/2120 2217/1754/2121 1738/200/2123\nf 1890/476/2124 2220/1756/2125 2214/1757/2126\nf 1577/504/1625 2206/1577/1624 2220/1756/2125\nf 1794/919/2127 2235/1758/2128 2226/1549/1479\nf 1518/920/2129 2227/1759/2130 2235/1758/2128\nf 1946/927/2131 2236/1760/2132 2231/1761/2133\nf 1541/928/2134 2228/1762/2135 2236/1760/2132\nf 1871/1069/2136 2238/1763/2137 2228/1762/2135\nf 1578/977/1875 2230/1639/1874 2238/1763/2137\nf 1835/1141/2138 2239/1764/2139 2227/1759/2130\nf 1618/1023/2140 2231/1761/2133 2239/1764/2139\nf 1669/69/2141 2249/1765/2142 2243/1766/2143\nf 1425/750/2144 2242/1767/2145 2249/1765/2142\nf 1712/166/2146 2250/1768/2147 2244/1769/2148\nf 2243/1766/2143 2250/1768/2147 1712/166/2146\nf 2251/1770/2149 2245/1771/2150 1494/259/2151\nf 2244/1769/2148 2251/1770/2149 1752/258/2152\nf 1792/352/2153 2252/1772/2154 2246/1773/2155\nf 1494/259/2151 2245/1771/2150 2252/1772/2154\nf 1944/442/2156 2253/1774/2157 2247/1775/2158\nf 1616/718/2159 2241/1776/2160 2253/1774/2157\nf 2254/1777/2161 2240/1778/2162 1574/1019/2163\nf 2247/1775/2158 2254/1777/2161 1869/1020/2164\nf 2255/1779/2165 2248/1780/2166 1560/1781/2167\nf 2240/1778/2162 2255/1779/2165 1885/1104/2168\nf 1833/717/2169 2256/1782/2170 2241/1776/2160\nf 1517/353/2171 2246/1773/2155 2256/1782/2170\nf 1964/5/2172 2283/1783/2173 2275/1784/2174\nf 1982/105/2175 2284/1785/2176 2276/1786/2177\nf 2285/1787/2178 2277/1788/2179 1732/205/2180\nf 2018/296/2181 2286/1789/2182 2278/1790/2183\nf 2036/986/2184 2287/1791/2185 2279/1792/2186\nf 2288/1793/2187 2281/1794/2188 1888/543/2189\nf 2079/1131/2190 2289/1795/2191 2280/1796/2192\nf 2290/1797/2193 2282/1798/2194 1952/666/2195\nf 1635/727/2196 2274/1799/2197 2283/1783/2173\nf 1652/725/2198 2275/1784/2174 2284/1785/2176\nf 1692/834/2199 2276/1786/2177 2285/1787/2178\nf 1732/205/2180 2277/1788/2179 2286/1789/2182\nf 1952/666/2195 2282/1798/2194 2287/1791/2185\nf 2279/1792/2186 2288/1793/2187 2065/1098/2200\nf 1888/543/2189 2281/1794/2188 2289/1795/2191\nf 2278/1790/2183 2290/1797/2193 2092/1153/2201\nf 2313/1800/2202 2301/1801/2203 2295/1802/2204\nf 2322/1803/2205 2294/1804/2206 2301/1801/2203\nf 2314/1805/2207 2302/1806/2208 2296/1807/2209\nf 2323/1808/2210 2295/1802/2204 2302/1806/2208\nf 2318/1809/2211 2306/1810/2212 2300/1811/2213\nf 2311/1812/2214 2292/1813/2215 2306/1810/2212\nf 2320/1814/2216 2308/1815/2217 2292/1813/2215\nf 2310/1816/2218 2291/1817/2219 2308/1815/2217\nf 2297/1818/2220 2325/1819/2221 2315/1820/2222\nf 2298/1821/2223 2326/1822/2224 2316/1823/2225\nf 2299/1824/2226 2327/1825/2227 2317/1826/2228\nf 2291/1817/2219 2310/1816/2218 2319/1827/2229\nf 2293/1828/2230 2312/1829/2231 2321/1830/2232\nf 2303/1831/2233 2315/1820/2222 2324/1832/2234\nf 2304/1833/2235 2316/1823/2225 2325/1819/2221\nf 2305/1834/2236 2317/1826/2228 2312/1829/2231\nf 2307/1835/2237 2319/1827/2229 2327/1825/2227\nf 2309/1836/2238 2321/1830/2232 2326/1822/2224\nf 2332/1837/2239 2342/1838/2240 1645/59/2241\nf 1992/159/2242 2333/1839/2243 2343/1840/2244\nf 2060/518/2245 2337/1841/2246 2347/1842/2247\nf 2082/622/2248 2339/1843/2249 2330/1844/2250\nf 1628/792/2251 2341/1845/2252 2332/1837/2239\nf 1645/59/2241 2342/1838/2240 2333/1839/2243\nf 1922/1081/2253 2330/1844/2250 2337/1841/2246\nf 1882/537/1939 2329/1660/1938 2339/1843/2249\nf 1749/223/2254 2360/1846/2255 2350/1847/2256\nf 1490/222/2257 2351/1848/2258 2360/1846/2255\nf 1490/222/2257 1790/943/2259 2361/1849/2260\nf 1790/943/2259 1513/313/2261 2352/1850/2262\nf 1831/993/2263 2362/1851/2264 2357/1852/2265\nf 1536/400/2266 2353/1853/2267 2362/1851/2264\nf 1878/1040/2268 2364/1854/2269 2353/1853/2267\nf 1571/1052/1961 2355/1669/1960 2364/1854/2269\nf 1942/1158/2270 2366/1855/2271 2352/1850/2262\nf 1614/678/2272 2357/1852/2265 2366/1855/2271\nf 2387/1856/2273 2368/1857/2274 2377/1858/2275\nf 2388/1859/2276 2369/1860/2277 2378/1861/2278\nf 2389/1862/2279 2370/1863/2280 2379/1864/2281\nf 2399/1865/2282 2390/1866/2283 2371/1867/2284\nf 2400/1868/2285 2391/1869/2286 2372/1870/2287\nf 2404/1871/2288 2395/1872/2289 2376/1873/2290\nf 2396/1874/2291 2377/1858/2275 2367/1875/2292\nf 2397/1876/2293 2378/1861/2278 2368/1857/2274\nf 2398/1877/2294 2379/1864/2281 2369/1860/2277\nf 2389/1862/2279 2399/1865/2282 2380/1878/2295\nf 2395/1872/2289 2400/1868/2285 2381/1879/2296\nf 2390/1866/2283 2404/1871/2288 2385/1880/2297\nf 2401/1881/2298 2393/1882/2299 2374/1883/2300\nf 2391/1869/2286 2401/1881/2298 2382/1884/2301\nf 2383/1885/2302 2402/1886/2303 2394/1887/2304\nf 2374/1883/2300 2393/1882/2299 2402/1886/2303\nf 2384/1888/2305 2403/1889/2306 2392/1890/2307\nf 2375/1891/2308 2394/1887/2304 2403/1889/2306\nf 2420/1892/2309 2412/1893/2310 2431/1894/2311\nf 2440/1895/2312 2421/1896/2313 2413/1897/2314\nf 2441/1898/2315 2422/1899/2316 2411/1900/2317\nf 2429/1901/2318 2410/1902/2319 2420/1892/2309\nf 2431/1894/2311 2412/1893/2310 2421/1896/2313\nf 2432/1903/2320 2413/1897/2314 2422/1899/2316\nf 2415/1904/2321 2434/1905/2322 2424/1906/2323\nf 2415/1904/2321 2406/1907/2324 2425/1908/2325\nf 2416/1909/2326 2435/1910/2327 2425/1908/2325\nf 2407/1911/2328 2426/1912/2329 2435/1910/2327\nf 2417/1913/2330 2436/1914/2331 2426/1912/2329\nf 2408/1915/2332 2427/1916/2333 2436/1914/2331\nf 2408/1915/2332 2418/1917/2334 2437/1918/2335\nf 2418/1917/2334 2409/1919/2336 2428/1920/2337\nf 2414/1921/2338 2419/1922/2339 2438/1923/2340\nf 2419/1922/2339 2410/1902/2319 2429/1901/2318\nf 2409/1919/2336 2423/1924/2341 2442/1925/2342\nf 2423/1924/2341 2414/1921/2338 2433/1926/2343\nf 1981/820/2344 2452/1927/2345 2444/1928/2346\nf 1997/182/2347 2453/1929/2348 2445/1930/2349\nf 2000/191/2350 2454/1931/2351 2446/1932/2352\nf 2455/1933/2353 2447/1934/2354 1771/931/2355\nf 2035/379/2356 2456/1935/2357 2448/1936/2358\nf 2052/469/2359 2457/1937/2360 2449/1938/2361\nf 2458/1939/2362 2450/1940/2363 1912/609/2364\nf 2091/657/2365 2459/1941/2366 2451/1942/2367\nf 1634/822/2368 2443/1943/2369 2452/1927/2345\nf 1651/89/2370 2444/1928/2346 2453/1929/2348\nf 1691/873/2371 2445/1930/2349 2454/1931/2351\nf 1731/878/2372 2446/1932/2352 2455/1933/2353\nf 1951/982/2373 2451/1942/2367 2456/1935/2357\nf 2450/1940/2363 2457/1937/2360 2052/469/2359\nf 1811/980/2374 2448/1936/2358 2458/1939/2362\nf 2447/1934/2354 2459/1941/2366 2091/657/2365\nf 2469/1944/2375 2464/1945/2376 2489/1946/2377\nf 2488/1947/2378 2463/1948/2379 2469/1944/2375\nf 2480/1949/2380 2470/1950/2381 2465/1951/2382\nf 2489/1946/2377 2464/1945/2376 2470/1950/2381\nf 2471/1952/2383 2466/1953/2384 2491/1954/2385\nf 2490/1955/2386 2465/1951/2382 2471/1952/2383\nf 2472/1956/2387 2467/1957/2388 2492/1958/2389\nf 2461/1959/2390 2472/1956/2387 2482/1960/2391\nf 2473/1961/2392 2460/1962/2393 2477/1963/2394\nf 2467/1957/2388 2473/1961/2392 2483/1964/2395\nf 2474/1965/2396 2468/1966/2397 2493/1967/2398\nf 2460/1962/2393 2474/1965/2396 2484/1968/2399\nf 2485/1969/2400 2475/1970/2401 2463/1948/2379\nf 2487/1971/2402 2462/1972/2403 2475/1970/2401\nf 2476/1973/2404 2461/1959/2390 2478/1974/2405\nf 2466/1953/2384 2476/1973/2404 2486/1975/2406\nf 2496/1976/2407 2506/1977/2408 1688/77/2409\nf 1995/173/2410 2497/1978/2411 2507/1979/2412\nf 2015/277/2413 2498/1980/2414 2508/1981/2415\nf 2499/1982/2416 2509/1983/2417 1808/372/2418\nf 2051/460/2419 2500/1984/2420 2494/1985/2421\nf 2501/1986/2422 2510/1987/2423 1848/575/2424\nf 2086/635/2425 2502/1988/2426 2505/1989/2427\nf 2090/1149/2428 2503/1990/2429 2495/1991/2430\nf 1648/809/2431 2505/1989/2427 2496/1976/2407\nf 1688/77/2409 2506/1977/2408 2497/1978/2411\nf 1728/869/2432 2507/1979/2412 2498/1980/2414\nf 2495/1991/2430 2499/1982/2416 2034/975/2433\nf 2509/1983/2417 2500/1984/2420 2051/460/2419\nf 1914/1039/2434 2494/1985/2421 2501/1986/2422\nf 1631/1139/2435 2504/1992/2436 2502/1988/2426\nf 1768/925/2437 2508/1981/2415 2503/1990/2429\nf 1976/72/2438 2537/1993/2439 2529/1994/2440\nf 2538/1995/2441 2530/1996/2442 1683/172/2443\nf 2539/1997/2444 2531/1998/2445 1723/269/2446\nf 2030/357/2447 2540/1999/2448 2532/2000/2449\nf 2541/2001/2450 2533/2002/2451 1803/446/2452\nf 2542/2003/2453 2534/2004/2454 1843/532/2455\nf 2081/1133/2456 2543/2005/2457 2535/2006/2458\nf 2544/2007/2459 2536/2008/2460 1962/721/2461\nf 2528/2009/2462 2537/1993/2439 1976/72/2438\nf 1643/805/2463 2529/1994/2440 2538/1995/2441\nf 2530/1996/2442 2539/1997/2444 2012/917/2464\nf 2531/1998/2445 2540/1999/2448 2030/357/2447\nf 2536/2008/2460 2541/2001/2450 2046/1025/2465\nf 2535/2006/2458 2542/2003/2453 2061/1089/2466\nf 2533/2002/2451 2543/2005/2457 2081/1133/2456\nf 2532/2000/2449 2544/2007/2459 2102/1176/2467\nf 1663/782/2468 2554/2010/2469 2548/2011/2470\nf 2547/2012/2471 2554/2010/2469 1663/782/2468\nf 1706/855/2472 2555/2013/2473 2549/2014/2474\nf 1443/857/2475 2548/2011/2470 2555/2013/2473\nf 2556/2015/2476 2550/2016/2477 1489/906/2478\nf 2549/2014/2474 2556/2015/2476 1747/907/2479\nf 1788/956/2480 2557/2017/2481 2551/2018/2482\nf 2550/2016/2477 2557/2017/2481 1788/956/2480\nf 2558/2019/2483 2552/2020/2484 1535/1008/2485\nf 2546/2021/2486 2558/2019/2483 1829/1009/2487\nf 2559/2022/2488 2553/2023/2489 1568/1074/2490\nf 2545/2024/2491 2559/2022/2488 1875/1075/2492\nf 2560/2025/2493 2545/2024/2491 1589/1126/2494\nf 2552/2020/2484 2560/2025/2493 1908/1127/2495\nf 1940/1169/2496 2561/2026/2497 2546/2021/2486\nf 1512/2027/2498 2551/2018/2482 2561/2026/2497\nf 2605/2028/2499 2599/2029/2500 1434/54/2501\nf 2598/2030/2502 2605/2028/2499 1668/53/2503\nf 2606/2031/2504 2600/2032/2505 1457/154/2506\nf 2599/2029/2500 2606/2031/2504 1711/153/2507\nf 2607/2033/2508 2601/2034/2509 1480/249/2510\nf 2600/2032/2505 2607/2033/2508 1751/248/2511\nf 1773/339/2512 2608/2035/2513 2602/2036/2514\nf 1480/249/2510 2601/2034/2509 2608/2035/2513\nf 2609/2037/2515 2603/2038/2516 1526/426/2517\nf 2597/2039/2518 2609/2037/2515 1925/425/2519\nf 2610/2040/2520 2604/2041/2521 1549/513/2522\nf 2596/2042/2523 2610/2040/2520 1901/512/2524\nf 2611/2043/2525 2596/2042/2523 1584/596/2526\nf 2603/2038/2516 2611/2043/2525 1855/595/2527\nf 2612/2044/2528 2597/2039/2518 1597/704/2529\nf 1503/340/2530 2602/2036/2514 2612/2044/2528\nf 2639/2045/2531 2631/2046/2532 1436/795/2533\nf 2630/2047/2534 2639/2045/2531 1670/797/2535\nf 2640/2048/2536 2632/2049/2537 1459/862/2538\nf 2631/2046/2532 2640/2048/2536 1694/863/2539\nf 2641/2050/2540 2633/2051/2541 1482/912/2542\nf 2632/2049/2537 2641/2050/2540 1736/913/2543\nf 1778/961/2544 2642/2052/2545 2634/2053/2546\nf 2633/2051/2541 2642/2052/2545 1778/961/2544\nf 2643/2054/2547 2635/2055/2548 1528/1016/2549\nf 2638/2056/2550 2643/2054/2547 1820/1017/2551\nf 2644/2057/2552 2636/2058/2553 1566/1083/2554\nf 2637/2059/2555 2644/2057/2552 1873/1084/2556\nf 2645/2060/2557 2637/2059/2555 1583/1117/2558\nf 2635/2055/2548 2645/2060/2557 1898/1118/2559\nf 2646/2061/2560 2638/2056/2550 1603/1173/2561\nf 1505/1174/2562 2634/2053/2546 2646/2061/2560\nf 3093/2062/2563 2682/2063/2564 3084/2064/2565\nf 2706/2065/2566 2707/2066/2567 2953/2067/2568\nf 2686/2068/2569 2687/2069/2570 2700/2070/2571\nf 2669/2071/2572 2668/2072/2573 2978/2073/2574\nf 2862/2074/2575 2705/2075/2576 2951/2076/2577\nf 2685/2077/2578 2686/2068/2569 2701/2078/2579\nf 3116/2079/2580 3097/2080/2581 2710/2081/2582\nf 2965/2082/2583 2725/2083/2584 2726/2084/2585\nf 3087/2085/2586 2681/2086/2587 2680/2087/2588\nf 2700/2070/2571 2699/2088/2589 2708/2089/2590\nf 2968/2090/2591 2966/2091/2592 2726/2084/2585\nf 2667/2092/2593 2666/2093/2594 2983/2094/2595\nf 2705/2075/2576 2706/2065/2566 2950/2095/2596\nf 3086/2096/2597 2680/2087/2588 2679/2097/2598\nf 3097/2080/2581 3096/2098/2599 2697/2099/2600\nf 2861/2100/2601 2702/2101/2602 2705/2075/2576\nf 2671/2102/2603 2670/2103/2604 2976/2104/2605\nf 2672/2105/2606 2671/2102/2603 2975/2106/2607\nf 2707/2066/2567 2708/2089/2590 2954/2107/2608\nf 2696/2108/2609 2691/2109/2610 2692/2110/2611\nf 2708/2089/2590 2699/2088/2589 2698/2111/2612\nf 2701/2078/2579 2700/2070/2571 2707/2066/2567\nf 2668/2072/2573 2667/2092/2593 2979/2112/2613\nf 2962/2113/2614 2961/2114/2615 2717/2115/2616\nf 2695/2116/2617 2692/2110/2611 2693/2117/2618\nf 2712/2118/2619 2695/2116/2617 2694/2119/2620\nf 2710/2081/2582 2697/2099/2600 2696/2108/2609\nf 2666/2093/2594 2665/2120/2621 2981/2121/2622\nf 2859/2122/2623 2664/2123/2624 2980/2124/2625\nf 2963/2125/2626 2962/2113/2614 2718/2126/2627\nf 2690/2127/2628 2691/2109/2610 2696/2108/2609\nf 2711/2128/2629 2696/2108/2609 2695/2116/2617\nf 2947/2129/2630 2711/2128/2629 2712/2118/2619\nf 3076/2130/2631 2675/2131/2632 2676/2132/2633\nf 2700/2070/2571 2687/2069/2570 2688/2133/2634\nf 3117/2134/2635 2963/2125/2626 2721/2135/2636\nf 2673/2136/2637 2672/2105/2606 2974/2137/2638\nf 3096/2098/2599 3095/2138/2639 2690/2127/2628\nf 2948/2139/2640 2710/2081/2582 2711/2128/2629\nf 2967/2140/2641 2968/2090/2591 2729/2141/2642\nf 3080/2142/2643 2676/2132/2633 2677/2143/2644\nf 3127/2144/2645 3094/2145/2646 2675/2131/2632\nf 2964/2146/2647 2722/2147/2648 2725/2083/2584\nf 3092/2148/2649 2669/2071/2572 2982/2149/2650\nf 2682/2063/2564 2681/2086/2587 3087/2085/2586\nf 2954/2107/2608 2708/2089/2590 2709/2150/2651\nf 2946/2151/2652 2712/2118/2619 2713/2152/2653\nf 2961/2114/2615 2960/2153/2654 2714/2154/2655\nf 3077/2155/2656 2677/2143/2644 2678/2156/2657\nf 2688/2133/2634 2689/2157/2658 2698/2111/2612\nf 2860/2158/2659 2685/2077/2578 2702/2101/2602\nf 2970/2159/2660 2967/2140/2641 2730/2160/2661\nf 2702/2101/2602 2701/2078/2579 2706/2065/2566\nf 2742/2161/2662 2741/2162/2663 2671/2102/2603\nf 2743/2163/2664 2742/2161/2662 2672/2105/2606\nf 2741/2162/2663 2740/2164/2665 2670/2103/2604\nf 2738/2165/2666 2737/2166/2667 2667/2092/2593\nf 3100/2167/2668 2739/2168/2669 2669/2071/2572\nf 2739/2168/2669 2738/2165/2666 2668/2072/2573\nf 2736/2169/2670 2735/2170/2671 2665/2120/2621\nf 2737/2166/2667 2736/2169/2670 2666/2093/2594\nf 2865/2171/2672 2734/2172/2673 2664/2123/2624\nf 3068/2173/2674 2746/2174/2675 2747/2175/2676\nf 3126/2176/2677 3101/2177/2678 2745/2178/2679\nf 3069/2179/2680 2747/2175/2676 2748/2180/2681\nf 3071/2181/2682 2745/2178/2679 2746/2174/2675\nf 2746/2174/2675 2751/2182/2683 2752/2183/2684\nf 3101/2177/2678 3102/2184/2685 2750/2185/2686\nf 2747/2175/2676 2752/2183/2684 2753/2186/2687\nf 2745/2178/2679 2750/2185/2686 2751/2182/2683\nf 2741/2162/2663 2742/2161/2662 2852/2187/2688\nf 2742/2161/2662 2743/2163/2664 2853/2188/2689\nf 2740/2164/2665 2741/2162/2663 2851/2189/2690\nf 2737/2166/2667 2738/2165/2666 2848/2190/2691\nf 2740/2164/2665 2850/2191/2692 3103/2192/2693\nf 2738/2165/2666 2739/2168/2669 2849/2193/2694\nf 2735/2170/2671 2736/2169/2670 2846/2194/2695\nf 2736/2169/2670 2737/2166/2667 2847/2195/2696\nf 2735/2170/2671 2845/2196/2697 2866/2197/2698\nf 2751/2182/2683 2856/2198/2699 2857/2199/2700\nf 2749/2200/2701 2854/2201/2702 3104/2202/2703\nf 2752/2183/2684 2857/2199/2700 2858/2203/2704\nf 2750/2185/2686 2855/2204/2705 2856/2198/2699\nf 3044/2205/2706 2772/2206/2707 3106/2207/2708\nf 3020/2208/2709 3023/2209/2710 2797/2210/2711\nf 2790/2211/2712 2777/2212/2713 2776/2213/2714\nf 2992/2214/2715 2758/2215/2716 2759/2216/2717\nf 3021/2217/2718 2795/2218/2719 2870/2219/2720\nf 2791/2220/2721 2776/2213/2714 2775/2221/2722\nf 3121/2222/2723 3018/2223/2724 2800/2224/2725\nf 3008/2225/2726 2816/2226/2727 2815/2227/2728\nf 3047/2228/2729 3046/2229/2730 2770/2230/2731\nf 3034/2231/2732 2789/2232/2733 2790/2211/2712\nf 3010/2233/2734 2819/2234/2735 2816/2226/2727\nf 2997/2235/2736 2756/2236/2737 2757/2237/2738\nf 3020/2208/2709 2796/2238/2739 2795/2218/2719\nf 3046/2229/2730 3045/2239/2740 2769/2240/2741\nf 3122/2241/2742 3039/2242/2743 2787/2243/2744\nf 3031/2244/2745 2792/2245/2746 2869/2246/2747\nf 2990/2247/2748 2760/2248/2749 2761/2249/2750\nf 2989/2250/2751 2761/2249/2750 2762/2251/2752\nf 3024/2252/2753 2798/2253/2754 2797/2210/2711\nf 2786/2254/2755 2785/2255/2756 2782/2256/2757\nf 3034/2231/2732 3035/2257/2758 2788/2258/2759\nf 3032/2259/2760 2790/2211/2712 2791/2220/2721\nf 2993/2260/2761 2757/2237/2738 2758/2215/2716\nf 3004/2261/2762 2808/2262/2763 2807/2263/2764\nf 2785/2255/2756 2784/2264/2765 2783/2265/2766\nf 3037/2266/2767 3036/2267/2768 2784/2264/2765\nf 3038/2268/2769 2786/2254/2755 2787/2243/2744\nf 2995/2269/2770 2755/2270/2771 2756/2236/2737\nf 2994/2271/2772 2754/2272/2773 2867/2273/2774\nf 2811/2274/2775 2808/2262/2763 3004/2261/2762\nf 2786/2254/2755 2781/2275/2776 2780/2276/2777\nf 3037/2266/2767 2785/2255/2756 2786/2254/2755\nf 3017/2277/2778 3016/2278/2779 2802/2279/2780\nf 3052/2280/2781 3056/2281/2782 2766/2282/2783\nf 2790/2211/2712 2789/2232/2733 2778/2283/2784\nf 3111/2284/2785 2811/2274/2775 3005/2285/2786\nf 2988/2286/2787 2762/2251/2752 2763/2287/2788\nf 2787/2243/2744 2780/2276/2777 3108/2288/2789\nf 3018/2223/2724 3017/2277/2778 2801/2289/2790\nf 3009/2290/2791 2820/2291/2792 2819/2234/2735\nf 3056/2281/2782 3053/2292/2793 2767/2293/2794\nf 3124/2294/2795 3052/2280/2781 2765/2295/2796\nf 2815/2227/2728 2812/2296/2797 3006/2297/2798\nf 2996/2298/2799 2759/2216/2717 3105/2299/2800\nf 3047/2228/2729 2771/2300/2801 2772/2206/2707\nf 3024/2252/2753 3019/2301/2802 2799/2302/2803\nf 3016/2278/2779 3022/2303/2804 2803/2304/2805\nf 3003/2305/2806 2807/2263/2764 2804/2306/2807\nf 3053/2292/2793 3054/2307/2808 2768/2308/2809\nf 2788/2258/2759 2779/2309/2810 2778/2283/2784\nf 2792/2245/2746 2775/2221/2722 2868/2310/2811\nf 3012/2311/2812 2871/2312/2813 2820/2291/2792\nf 3033/2313/2814 2791/2220/2721 2792/2245/2746\nf 2761/2249/2750 2831/2314/2815 2832/2315/2816\nf 2762/2251/2752 2832/2315/2816 2833/2316/2817\nf 2760/2248/2749 2830/2317/2818 2831/2314/2815\nf 2757/2237/2738 2827/2318/2819 2828/2319/2820\nf 2759/2216/2717 2829/2320/2821 3113/2321/2822\nf 2758/2215/2716 2828/2319/2820 2829/2320/2821\nf 2755/2270/2771 2825/2322/2823 2826/2323/2824\nf 2756/2236/2737 2826/2323/2824 2827/2318/2819\nf 2754/2272/2773 2824/2324/2825 2873/2325/2826\nf 3060/2326/2827 3061/2327/2828 2837/2328/2829\nf 3125/2329/2830 3063/2330/2831 2835/2331/2832\nf 3061/2327/2828 3064/2332/2833 2838/2333/2834\nf 3063/2330/2831 3060/2326/2827 2836/2334/2835\nf 2836/2334/2835 2837/2328/2829 2842/2335/2836\nf 3114/2336/2837 2835/2331/2832 2840/2337/2838\nf 2837/2328/2829 2838/2333/2834 2843/2338/2839\nf 2835/2331/2832 2836/2334/2835 2841/2339/2840\nf 2851/2340/2690 2852/2341/2688 2832/2315/2816\nf 2832/2315/2816 2852/2341/2688 2853/2342/2689\nf 2830/2317/2818 2850/2343/2692 2851/2340/2690\nf 2847/2344/2696 2848/2345/2691 2828/2319/2820\nf 3113/2321/2822 3103/2346/2693 2850/2343/2692\nf 2828/2319/2820 2848/2345/2691 2849/2347/2694\nf 2825/2322/2823 2845/2348/2697 2846/2349/2695\nf 2826/2323/2824 2846/2349/2695 2847/2344/2696\nf 2873/2325/2826 2866/2350/2698 2845/2348/2697\nf 2857/2351/2700 2856/2352/2699 2841/2339/2840\nf 3115/2353/2841 3104/2354/2703 2854/2355/2702\nf 2843/2338/2839 2858/2356/2704 2857/2351/2700\nf 2856/2352/2699 2855/2357/2705 2840/2337/2838\nf 2704/2358/2842 2862/2074/2575 2956/2359/2843\nf 2703/2360/2844 2861/2100/2601 2862/2074/2575\nf 2665/2120/2621 2859/2122/2623 2984/2361/2845\nf 2684/2362/2846 2860/2158/2659 2861/2100/2601\nf 2969/2363/2847 2970/2159/2660 2863/2364/2848\nf 2735/2170/2671 2865/2171/2672 2859/2122/2623\nf 2734/2172/2673 2865/2171/2672 2866/2197/2698\nf 3026/2365/2849 2870/2219/2720 2794/2366/2850\nf 3040/2367/2851 2869/2246/2747 2793/2368/2852\nf 2998/2369/2853 2867/2273/2774 2755/2270/2771\nf 2869/2246/2747 2868/2310/2811 2774/2370/2854\nf 3011/2371/2855 2823/2372/2856 2871/2312/2813\nf 2867/2273/2774 2873/2325/2826 2825/2322/2823\nf 2824/2324/2825 2844/2373/2857 2866/2350/2698\nf 2899/2374/2858 2890/2375/2859 3041/2376/2860\nf 2986/2377/2861 2901/2378/2862 2880/2379/2863\nf 2902/2380/2864 2903/2381/2865 2878/2382/2866\nf 3000/2383/2867 2905/2384/2868 2885/2385/2869\nf 2905/2384/2868 2906/2386/2870 2893/2387/2871\nf 3028/2388/2872 2907/2389/2873 2892/2390/2874\nf 2958/2391/2875 2902/2380/2864 2879/2392/2876\nf 2900/2393/2877 2874/2394/2878 2882/2395/2879\nf 2911/2396/2880 2897/2397/2881 2884/2398/2882\nf 2911/2399/2880 2912/2400/2883 2895/2401/2884\nf 3090/2402/2885 2914/2403/2886 2876/2404/2887\nf 2916/2405/2888 2888/2406/2889 3049/2407/2890\nf 3066/2408/2891 2918/2409/2892 2886/2410/2893\nf 2920/2411/2894 2883/2412/2895 3073/2413/2896\nf 2912/2400/2883 2917/2414/2897 2894/2415/2898\nf 3014/2416/2899 2904/2417/2900 2891/2418/2901\nf 2908/2419/2902 2881/2420/2903 2971/2421/2904\nf 2910/2422/2905 2884/2398/2882 2883/2412/2895\nf 2903/2381/2865 2913/2423/2906 2877/2424/2907\nf 2898/2425/2908 2889/2426/2909 2888/2406/2889\nf 2921/2427/2910 2896/2428/2911 2893/2387/2871\nf 2919/2429/2912 2875/2430/2913 3081/2431/2914\nf 2909/2432/2915 2882/2395/2879 2896/2433/2911\nf 3058/2434/2916 2915/2435/2917 2887/2436/2918\nf 2803/2304/2805 2899/2374/2858 3042/2437/2919\nf 2714/2154/2655 2901/2378/2862 2986/2377/2861\nf 2713/2152/2653 2694/2119/2620 2903/2381/2865\nf 2991/2438/2920 2763/2287/2788 2905/2384/2868\nf 2763/2287/2788 2833/2316/2817 2906/2386/2870\nf 2805/2439/2921 2907/2389/2873 3028/2388/2872\nf 2952/2440/2922 2713/2152/2653 2902/2380/2864\nf 2673/2136/2637 2900/2393/2877 2909/2432/2915\nf 2753/2186/2687 2858/2203/2704 2911/2396/2880\nf 2858/2356/2704 2843/2338/2839 2912/2400/2883\nf 3085/2441/2923 2679/2097/2598 2914/2403/2886\nf 2783/2265/2766 2916/2405/2888 3050/2442/2924\nf 2768/2308/2809 2918/2409/2892 3066/2408/2891\nf 3072/2443/2925 2748/2180/2681 2920/2411/2894\nf 2838/2333/2834 2917/2414/2897 2912/2400/2883\nf 3002/2444/2926 2804/2306/2807 2904/2417/2900\nf 2715/2445/2927 2908/2419/2902 2972/2446/2928\nf 2748/2180/2681 2753/2186/2687 2910/2422/2905\nf 2694/2119/2620 2693/2117/2618 2913/2423/2906\nf 2784/2264/2765 2898/2425/2908 2916/2405/2888\nf 2853/2342/2689 2921/2427/2910 2906/2386/2870\nf 3078/2447/2929 2678/2156/2657 2919/2429/2912\nf 2853/2188/2689 2743/2163/2664 2909/2432/2915\nf 2769/2240/2741 2915/2435/2917 3058/2434/2916\nf 3187/2448/2930 3166/2449/2931 2934/2450/2932\nf 3167/2451/2933 2932/2452/2934 2931/2453/2935\nf 3182/2454/2936 3168/2455/2937 2939/2456/2938\nf 3169/2457/2939 2922/2458/2940 2930/2459/2941\nf 3184/2460/2942 3170/2461/2943 2938/2462/2944\nf 3178/2463/2945 3171/2464/2946 2927/2465/2947\nf 3172/2466/2948 2923/2467/2949 3083/2468/2950\nf 3198/2469/2951 3195/2470/2952 2937/2471/2953\nf 3173/2472/2954 2943/2473/2955 2945/2474/2956\nf 3197/2475/2957 2924/2476/2958 3091/2477/2959\nf 3174/2478/2960 2933/2479/2961 3001/2480/2962\nf 3191/2481/2963 2942/2482/2964 2943/2473/2955\nf 3194/2483/2965 2930/2459/2941 2944/2484/2966\nf 3175/2485/2967 2941/2486/2968 2933/2479/2961\nf 3192/2487/2969 2931/2453/2935 3075/2488/2970\nf 3183/2489/2971 3193/2490/2972 2940/2491/2973\nf 3179/2492/2974 3196/2493/2975 2929/2494/2976\nf 3171/2464/2946 3176/2495/2977 2926/2496/2978\nf 3186/2497/2979 3177/2498/2980 2935/2499/2981\nf 3176/2495/2977 3200/2500/2982 2925/2501/2983\nf 3185/2502/2984 3198/2469/2951 2936/2503/2985\nf 3201/2504/2986 2944/2505/2966 2941/2486/2968\nf 3180/2506/2987 3202/2507/2988 2928/2508/2989\nf 3199/2509/2990 2945/2510/2956 2932/2452/2934\nf 2950/2095/2596 2953/2067/2568 2727/2511/2991\nf 2956/2359/2843 2951/2076/2577 2731/2512/2992\nf 3099/2513/2993 3116/2079/2580 2948/2139/2640\nf 2951/2076/2577 2950/2095/2596 2728/2514/2994\nf 2953/2067/2568 2954/2107/2608 2724/2515/2995\nf 2947/2129/2630 2946/2151/2652 2716/2516/2996\nf 2720/2517/2997 2948/2139/2640 2947/2129/2630\nf 2954/2107/2608 2949/2518/2998 2723/2519/2999\nf 2716/2516/2996 2946/2151/2652 2952/2440/2922\nf 2955/2520/3000 2956/2359/2843 2864/2521/3001\nf 2958/2391/2875 2957/2522/3002 2881/2420/2903\nf 2715/2445/2927 2952/2440/2922 2958/2391/2875\nf 3196/2493/2975 3178/2463/2945 2959/2523/3003\nf 2727/2511/2991 2724/2515/2995 2965/2082/2583\nf 2728/2514/2994 2727/2511/2991 2966/2091/2592\nf 2719/2524/3004 2716/2516/2996 2961/2114/2615\nf 2720/2517/2997 2719/2524/3004 2962/2113/2614\nf 2720/2517/2997 2963/2125/2626 3117/2134/2635\nf 2731/2512/2992 2728/2514/2994 2968/2090/2591\nf 2723/2519/2999 2964/2146/2647 2965/2082/2583\nf 2716/2516/2996 2715/2445/2927 2960/2153/2654\nf 2864/2521/3001 2731/2512/2992 2967/2140/2641\nf 2732/2525/3005 2864/2521/3001 2970/2159/2660\nf 2972/2446/2928 2971/2421/2904 2880/2379/2863\nf 2960/2153/2654 2972/2446/2928 2901/2378/2862\nf 3202/2507/2988 3179/2492/2974 2973/2526/3006\nf 2982/2149/2650 2978/2073/2574 2725/2083/2584\nf 2979/2112/2613 2983/2094/2595 2729/2141/2642\nf 2975/2106/2607 2976/2104/2605 2721/2135/2636\nf 2974/2137/2638 2975/2106/2607 2718/2126/2627\nf 2978/2073/2574 2979/2112/2613 2726/2084/2585\nf 2983/2094/2595 2981/2121/2622 2730/2160/2661\nf 2984/2361/2845 2980/2124/2625 2733/2527/3007\nf 2977/2528/3008 2974/2137/2638 2717/2115/2616\nf 3118/2529/3009 2982/2149/2650 2722/2147/2648\nf 2981/2121/2622 2984/2361/2845 2863/2364/2848\nf 2986/2377/2861 2985/2530/3010 2874/2394/2878\nf 2977/2528/3008 2986/2377/2861 2900/2393/2877\nf 3169/2457/2939 3180/2506/2987 2987/2531/3011\nf 2815/2227/2728 2992/2214/2715 2996/2298/2799\nf 2819/2234/2735 2997/2235/2736 2993/2260/2761\nf 2808/2262/2763 2811/2274/2775 2990/2247/2748\nf 2807/2263/2764 2808/2262/2763 2989/2250/2751\nf 2816/2226/2727 2993/2260/2761 2992/2214/2715\nf 2820/2291/2792 2995/2269/2770 2997/2235/2736\nf 2823/2372/2856 2994/2271/2772 2998/2369/2853\nf 2807/2263/2764 2988/2286/2787 2991/2438/2920\nf 2812/2296/2797 2996/2298/2799 3119/2532/3012\nf 2871/2312/2813 2998/2369/2853 2995/2269/2770\nf 2904/2417/2900 3000/2383/2867 2999/2533/3013\nf 2804/2306/2807 2991/2438/2920 3000/2383/2867\nf 3181/2534/3014 3001/2480/2962 2939/2456/2938\nf 3008/2225/2726 3007/2535/3015 2814/2536/3016\nf 2818/2537/3017 3010/2233/2734 3008/2225/2726\nf 3004/2261/2762 3003/2305/2806 2806/2538/3018\nf 3005/2285/2786 3004/2261/2762 2809/2539/3019\nf 3120/2540/3020 3005/2285/2786 2810/2541/3021\nf 2821/2542/3022 3009/2290/2791 3010/2233/2734\nf 3007/2535/3015 3006/2297/2798 2813/2543/3023\nf 2806/2538/3018 3003/2305/2806 3002/2444/2926\nf 2872/2544/3024 3012/2311/2812 3009/2290/2791\nf 2822/2545/3025 3011/2371/2855 3012/2311/2812\nf 2907/2389/2873 3014/2416/2899 3013/2546/3026\nf 2805/2439/2921 3002/2444/2926 3014/2416/2899\nf 3193/2490/2972 3182/2454/2936 3015/2547/3027\nf 2817/2548/3028 3023/2209/2710 3020/2208/2709\nf 2821/2542/3022 3021/2217/2718 3026/2365/2849\nf 3112/2549/3029 2810/2541/3021 3018/2223/2724\nf 2818/2537/3017 3020/2208/2709 3021/2217/2718\nf 2814/2536/3016 3024/2252/2753 3023/2209/2710\nf 2809/2539/3019 2806/2538/3018 3016/2278/2779\nf 2810/2541/3021 2809/2539/3019 3017/2277/2778\nf 2814/2536/3016 2813/2543/3023 3019/2301/2802\nf 2806/2538/3018 2805/2439/2921 3022/2303/2804\nf 2872/2544/3024 3026/2365/2849 3025/2550/3030\nf 3028/2388/2872 3027/2551/3031 2890/2375/2859\nf 3022/2303/2804 3028/2388/2872 2899/2374/2858\nf 3170/2461/2943 3183/2489/2971 3029/2552/3032\nf 2798/2253/2754 3034/2231/2732 3032/2259/2760\nf 3110/2553/3033 2800/2224/2725 3039/2242/2743\nf 2795/2218/2719 3031/2244/2745 3040/2367/2851\nf 2798/2253/2754 2799/2302/2803 3035/2257/2758\nf 2796/2238/2739 2797/2210/2711 3032/2259/2760\nf 2802/2279/2780 2803/2304/2805 3036/2267/2768\nf 2800/2224/2725 2801/2289/2790 3038/2268/2769\nf 2801/2289/2790 2802/2279/2780 3037/2266/2767\nf 2796/2238/2739 3033/2313/2814 3031/2244/2745\nf 2870/2219/2720 3040/2367/2851 3030/2554/3034\nf 3042/2437/2919 3041/2376/2860 2889/2426/2909\nf 3036/2267/2768 3042/2437/2919 2898/2425/2908\nf 3195/2470/2952 3184/2460/2942 3043/2555/3035\nf 2780/2276/2777 3044/2205/2706 3123/2556/3036\nf 2781/2275/2776 2782/2256/2757 3046/2229/2730\nf 2782/2256/2757 2783/2265/2766 3045/2239/2740\nf 2781/2275/2776 3047/2228/2729 3044/2205/2706\nf 3050/2442/2924 3049/2407/2890 2887/2436/2918\nf 3045/2239/2740 3050/2442/2924 2915/2435/2917\nf 3177/2498/2980 3185/2502/2984 3051/2557/3037\nf 2771/2300/2801 3056/2281/2782 3052/2280/2781\nf 2771/2300/2801 2770/2230/2731 3053/2292/2793\nf 2772/2206/2707 3052/2280/2781 3124/2294/2795\nf 2770/2230/2731 2769/2240/2741 3054/2307/2808\nf 2918/2409/2892 3058/2434/2916 3057/2558/3038\nf 3054/2307/2808 3058/2434/2916 2918/2409/2892\nf 3166/2449/2931 3186/2497/2979 3059/2559/3039\nf 2766/2282/2783 2767/2293/2794 3061/2327/2828\nf 3107/2560/3040 2765/2295/2796 3063/2330/2831\nf 2767/2293/2794 2768/2308/2809 3064/2332/2833\nf 2765/2295/2796 2766/2282/2783 3060/2326/2827\nf 2917/2414/2897 3066/2408/2891 3065/2561/3041\nf 3064/2332/2833 3066/2408/2891 2917/2414/2897\nf 3191/2481/2963 3187/2448/2930 3067/2562/3042\nf 2676/2132/2633 3068/2173/2674 3069/2179/2680\nf 3094/2145/2646 3126/2176/2677 3071/2181/2682\nf 2677/2143/2644 3069/2179/2680 3072/2443/2925\nf 2675/2131/2632 3071/2181/2682 3068/2173/2674\nf 3074/2563/3043 3073/2413/2896 2875/2430/2913\nf 2678/2156/2657 3072/2443/2925 3074/2563/3043\nf 3188/2564/3044 3075/2488/2970 2923/2467/2949\nf 3076/2130/2631 3080/2142/2643 2681/2086/2587\nf 2681/2086/2587 3080/2142/2643 3077/2155/2656\nf 3127/2144/2645 3076/2130/2631 2682/2063/2564\nf 2680/2087/2588 3077/2155/2656 3078/2447/2929\nf 3082/2565/3045 3081/2431/2914 2876/2404/2887\nf 2679/2097/2598 3078/2447/2929 3082/2565/3045\nf 3189/2566/3046 3083/2468/2950 2924/2476/2958\nf 3128/2567/3047 3084/2064/2565 2690/2127/2628\nf 2691/2109/2610 3087/2085/2586 3086/2096/2597\nf 2692/2110/2611 3086/2096/2597 3085/2441/2923\nf 3084/2064/2565 3087/2085/2586 2691/2109/2610\nf 2913/2423/2906 3090/2402/2885 3089/2568/3048\nf 2693/2117/2618 3085/2441/2923 3090/2402/2885\nf 3200/2500/2982 3190/2569/3049 3091/2477/2959\nf 2683/2570/3050 3093/2062/2563 3128/2567/3047\nf 2949/2518/2998 2709/2150/2651 3097/2080/2581\nf 2709/2150/2651 2698/2111/2612 3096/2098/2599\nf 2964/2146/2647 3117/2134/2635 3098/2571/3051\nf 2698/2111/2612 2689/2157/2658 3095/2138/2639\nf 2674/2572/3052 3094/2145/2646 3127/2144/2645\nf 2670/2103/2604 3092/2148/2649 3118/2529/3009\nf 2740/2164/2665 3100/2167/2668 3092/2148/2649\nf 3070/2573/3053 2744/2574/3054 3101/2177/2678\nf 2744/2574/3054 2749/2200/2701 3102/2184/2685\nf 2739/2168/2669 3100/2167/2668 3103/2192/2693\nf 3102/2184/2685 3104/2202/2703 2855/2204/2705\nf 3123/2556/3036 3106/2207/2708 2773/2575/3055\nf 3019/2301/2802 3121/2222/2723 3110/2553/3033\nf 3035/2257/2758 3122/2241/2742 3109/2576/3056\nf 2812/2296/2797 3111/2284/2785 3120/2540/3020\nf 3109/2576/3056 3108/2288/2789 2779/2309/2810\nf 3055/2577/3057 3124/2294/2795 3107/2560/3040\nf 3119/2532/3012 3105/2299/2800 2760/2248/2749\nf 3105/2299/2800 3113/2321/2822 2830/2317/2818\nf 3062/2578/3058 3125/2329/2830 3114/2336/2837\nf 2834/2579/3059 3114/2336/2837 3115/2353/2841\nf 2829/2320/2821 2849/2347/2694 3103/2346/2693\nf 2840/2337/2838 2855/2357/2705 3104/2354/2703\nf 2723/2519/2999 2949/2518/2998 3116/2079/2580\nf 3099/2513/2993 3117/2134/2635 2964/2146/2647\nf 2976/2104/2605 3118/2529/3009 3098/2571/3051\nf 3111/2284/2785 3119/2532/3012 2990/2247/2748\nf 3006/2297/2798 3120/2540/3020 3112/2549/3029\nf 2813/2543/3023 3112/2549/3029 3121/2222/2723\nf 2799/2302/2803 3110/2553/3033 3122/2241/2742\nf 3108/2288/2789 3123/2556/3036 3048/2580/3060\nf 3106/2207/2708 3124/2294/2795 3055/2577/3057\nf 2764/2581/3061 3107/2560/3040 3125/2329/2830\nf 2674/2572/3052 3070/2573/3053 3126/2176/2677\nf 3079/2582/3062 3127/2144/2645 3093/2062/2563\nf 3088/2583/3063 3128/2567/3047 3095/2138/2639\nf 3065/2561/3041 2886/2410/2893 3130/2584/3064\nf 2884/2398/2882 3132/2585/3065 3131/2586/3066\nf 3013/2546/3026 2891/2418/2901 3134/2587/3067\nf 2874/2394/2878 3136/2588/3068 3135/2589/3069\nf 3041/2376/2860 2890/2375/2859 3138/2590/3070\nf 2879/2392/2876 3140/2591/3071 3153/2592/3072\nf 2875/2430/2913 3142/2593/3073 3164/2594/3074\nf 2888/2406/2889 2889/2426/2909 3137/2595/3075\nf 2895/2401/2884 3145/2596/3076 3144/2597/3077\nf 2876/2404/2887 3141/2598/3078 3165/2599/3079\nf 2885/2385/2869 3147/2600/3080 3156/2601/3081\nf 2895/2401/2884 2894/2415/2898 3129/2602/3082\nf 2882/2395/2879 3135/2589/3069 3148/2603/3083\nf 2885/2385/2869 2893/2387/2871 3149/2604/3084\nf 2883/2412/2895 3131/2586/3066 3163/2605/3085\nf 3027/2551/3031 2892/2390/2874 3133/2606/3086\nf 2881/2420/2903 3139/2607/3087 3154/2608/3088\nf 2878/2382/2866 3151/2609/3089 3140/2591/3071\nf 3057/2558/3038 2887/2436/2918 3152/2610/3090\nf 2877/2424/2907 3146/2611/3091 3151/2609/3089\nf 3049/2407/2890 2888/2406/2889 3143/2612/3092\nf 2896/2428/2911 3148/2613/3083 3149/2604/3084\nf 2985/2530/3010 2880/2379/2863 3150/2614/3093\nf 2897/2397/2881 3144/2615/3077 3132/2585/3065\nf 2957/2522/3002 3153/2592/3072 3139/2607/3087\nf 2971/2421/2904 3154/2608/3088 3150/2614/3093\nf 2985/2530/3010 3155/2616/3094 3136/2588/3068\nf 2891/2418/2901 2999/2533/3013 3156/2601/3081\nf 2892/2390/2874 3013/2546/3026 3157/2617/3095\nf 2890/2375/2859 3027/2551/3031 3158/2618/3096\nf 2889/2426/2909 3041/2376/2860 3159/2619/3097\nf 2887/2436/2918 3049/2407/2890 3160/2620/3098\nf 2886/2410/2893 3057/2558/3038 3161/2621/3099\nf 2894/2415/2898 3065/2561/3041 3162/2622/3100\nf 3073/2413/2896 3163/2605/3085 3142/2593/3073\nf 3081/2431/2914 3164/2594/3074 3141/2598/3078\nf 3089/2568/3048 3165/2599/3079 3146/2611/3091\nf 3162/2622/3100 3130/2584/3064 3166/2449/2931\nf 3132/2585/3065 3167/2451/2933 3192/2487/2969\nf 3157/2617/3095 3134/2587/3067 3168/2455/2937\nf 3136/2588/3068 3169/2457/2939 3194/2483/2965\nf 3159/2619/3097 3138/2590/3070 3170/2461/2943\nf 3140/2591/3071 3171/2464/2946 3178/2463/2945\nf 3142/2593/3073 3172/2466/2948 3189/2566/3046\nf 3143/2612/3092 3137/2595/3075 3195/2470/2952\nf 3145/2596/3076 3173/2472/2954 3199/2623/2990\nf 3141/2598/3078 3197/2475/2957 3190/2569/3049\nf 3147/2600/3080 3174/2478/2960 3181/2534/3014\nf 3129/2602/3082 3191/2481/2963 3173/2472/2954\nf 3135/2589/3069 3194/2483/2965 3201/2624/2986\nf 3149/2604/3084 3175/2485/2967 3174/2478/2960\nf 3131/2586/3066 3192/2487/2969 3188/2564/3044\nf 3158/2618/3096 3133/2606/3086 3193/2490/2972\nf 3154/2608/3088 3139/2607/3087 3196/2493/2975\nf 3151/2609/3089 3176/2495/2977 3171/2464/2946\nf 3161/2621/3099 3152/2610/3090 3177/2498/2980\nf 3151/2609/3089 3146/2611/3091 3200/2500/2982\nf 3160/2620/3098 3143/2612/3092 3198/2469/2951\nf 3148/2613/3083 3201/2504/2986 3175/2485/2967\nf 3155/2616/3094 3150/2614/3093 3202/2507/2988\nf 3144/2615/3077 3199/2509/2990 3167/2451/2933\nf 3139/2607/3087 3153/2592/3072 3178/2463/2945\nf 3150/2614/3093 3154/2608/3088 3179/2492/2974\nf 3136/2588/3068 3155/2616/3094 3180/2506/2987\nf 3156/2601/3081 3181/2534/3014 3168/2455/2937\nf 3133/2606/3086 3157/2617/3095 3182/2454/2936\nf 3138/2590/3070 3158/2618/3096 3183/2489/2971\nf 3137/2595/3075 3159/2619/3097 3184/2460/2942\nf 3152/2610/3090 3160/2620/3098 3185/2502/2984\nf 3130/2584/3064 3161/2621/3099 3186/2497/2979\nf 3129/2602/3082 3162/2622/3100 3187/2448/2930\nf 3163/2605/3085 3188/2564/3044 3172/2466/2948\nf 3164/2594/3074 3189/2566/3046 3197/2475/2957\nf 3165/2599/3079 3190/2569/3049 3200/2500/2982\nf 1226/2625/1223 1219/1271/1202 1359/1410/1320\nf 3236/2626/3101 3234/2627/3102 3233/2628/3103\nf 3234/2627/3102 3236/2626/3101 3212/2629/3104\nf 3209/2630/3105 3230/2631/3106 3217/2632/3107\nf 3230/2631/3106 3229/2633/3108 3218/2634/3109\nf 3217/2632/3107 3232/2635/3110 3210/2636/3111\nf 3217/2632/3107 3218/2634/3109 3231/2637/3112\nf 3210/2636/3111 3232/2635/3110 3219/2638/3113\nf 3232/2635/3110 3231/2637/3112 3220/2639/3114\nf 3204/2640/3115 3219/2638/3113 3234/2627/3102\nf 3220/2639/3114 3233/2628/3103 3234/2627/3102\nf 3212/2629/3104 3236/2626/3101 3221/2641/3116\nf 3221/2641/3116 3236/2626/3101 3235/2642/3117\nf 3205/2643/3118 3221/2641/3116 3238/2644/3119\nf 3221/2641/3116 3222/2645/3120 3237/2646/3121\nf 3213/2647/3122 3238/2644/3119 3223/2648/3123\nf 3223/2648/3123 3238/2644/3119 3237/2646/3121\nf 3206/2649/3124 3223/2648/3123 3240/2650/3125\nf 3224/2651/3126 3239/2652/3127 3240/2650/3125\nf 3214/2653/3128 3240/2650/3125 3225/2654/3129\nf 3225/2654/3129 3240/2650/3125 3239/2652/3127\nf 3207/2655/3130 3225/2654/3129 3242/2656/3131\nf 3226/2657/3132 3241/2658/3133 3242/2656/3131\nf 3215/2659/3134 3242/2656/3131 3227/2660/3135\nf 3227/2660/3135 3242/2656/3131 3241/2658/3133\nf 3208/2661/3136 3227/2660/3135 3244/2662/3137\nf 3227/2660/3135 3228/2663/3138 3243/2664/3139\nf 3245/2665/3140 3246/2666/3141 3297/2667/3142\nf 3247/2668/3143 3298/2669/3144 3297/2667/3142\nf 3290/2670/3145 3291/2671/3146 3246/2666/3141\nf 3291/2671/3146 3292/2672/3147 3247/2668/3143\nf 3248/2673/3148 3249/2674/3149 3291/2671/3146\nf 3250/2675/3150 3292/2672/3147 3291/2671/3146\nf 3248/2673/3148 3299/2676/3151 3300/2677/3152\nf 3300/2677/3152 3301/2678/3153 3250/2675/3150\nf 3252/2679/3154 3300/2677/3152 3299/2676/3151\nf 3252/2679/3154 3253/2680/3155 3301/2678/3153\nf 3251/2681/3156 3287/2682/3157 3288/2683/3158\nf 3288/2683/3158 3289/2684/3159 3253/2680/3155\nf 3254/2685/3160 3255/2686/3161 3288/2683/3158\nf 3255/2686/3161 3256/2687/3162 3289/2684/3159\nf 3254/2685/3160 3293/2688/3163 3294/2689/3164\nf 3255/2686/3161 3294/2689/3164 3295/2690/3165\nf 3258/2691/3166 3294/2689/3164 3293/2688/3163\nf 3259/2692/3167 3295/2690/3165 3294/2689/3164\nf 3257/2693/3168 3284/2694/3169 3285/2695/3170\nf 3258/2691/3166 3285/2695/3170 3286/2696/3171\nf 3261/2697/3172 3285/2695/3170 3284/2694/3169\nf 3262/2698/3173 3286/2696/3171 3285/2695/3170\nf 3260/2699/3174 3281/2700/3175 3282/2701/3176\nf 3261/2697/3172 3282/2701/3176 3283/2702/3177\nf 3264/2703/3178 3282/2701/3176 3281/2700/3175\nf 3264/2703/3178 3265/2704/3179 3283/2702/3177\nf 3263/2705/3180 3302/2706/3181 3303/2707/3182\nf 3264/2703/3178 3303/2707/3182 3304/2708/3183\nf 3267/2709/3184 3303/2707/3182 3302/2706/3181\nf 3267/2709/3184 3268/2710/3185 3304/2708/3183\nf 3305/2711/3186 3306/2712/3187 3267/2709/3184\nf 3306/2712/3187 3307/2713/3188 3268/2710/3185\nf 3270/2714/3189 3306/2712/3187 3305/2711/3186\nf 3271/2715/3190 3307/2713/3188 3306/2712/3187\nf 3269/2716/3191 3278/2717/3192 3279/2718/3193\nf 3279/2718/3193 3280/2719/3194 3271/2715/3190\nf 3273/2720/3195 3279/2718/3193 3278/2717/3192\nf 3273/2720/3195 3274/2721/3196 3280/2719/3194\nf 3275/2722/3197 3276/2723/3198 3273/2720/3195\nf 3276/2723/3198 3277/2724/3199 3274/2721/3196\nf 3366/2725/3200 3365/2726/3201 3354/2727/3202\nf 3365/2726/3201 3367/2728/3203 3355/2729/3204\nf 3370/2730/3205 3347/2731/3206 3348/2732/3207\nf 3369/2733/3208 3348/2732/3207 3349/2734/3209\nf 3312/2735/3210 3348/2732/3207 3347/2731/3206\nf 3313/2736/3211 3349/2734/3209 3348/2732/3207\nf 3311/2737/3212 3356/2738/3213 3357/2739/3214\nf 3312/2735/3210 3357/2739/3214 3358/2740/3215\nf 3314/2741/3216 3315/2742/3217 3357/2739/3214\nf 3315/2742/3217 3316/2743/3218 3358/2740/3215\nf 3344/2744/3219 3345/2745/3220 3315/2742/3217\nf 3345/2745/3220 3346/2746/3221 3316/2743/3218\nf 3317/2747/3222 3318/2748/3223 3345/2745/3220\nf 3318/2748/3223 3319/2749/3224 3346/2746/3221\nf 3350/2750/3225 3351/2751/3226 3318/2748/3223\nf 3351/2751/3226 3352/2752/3227 3319/2749/3224\nf 3320/2753/3228 3321/2754/3229 3351/2751/3226\nf 3322/2755/3230 3352/2752/3227 3351/2751/3226\nf 3320/2753/3228 3341/2756/3231 3342/2757/3232\nf 3321/2754/3229 3342/2757/3232 3343/2758/3233\nf 3324/2759/3234 3342/2757/3232 3341/2756/3231\nf 3325/2760/3235 3343/2758/3233 3342/2757/3232\nf 3338/2761/3236 3339/2762/3237 3324/2759/3234\nf 3339/2762/3237 3340/2763/3238 3325/2760/3235\nf 3326/2764/3239 3327/2765/3240 3339/2762/3237\nf 3327/2765/3240 3328/2766/3241 3340/2763/3238\nf 3359/2767/3242 3360/2768/3243 3327/2765/3240\nf 3360/2768/3243 3361/2769/3244 3328/2766/3241\nf 3329/2770/3245 3330/2771/3246 3360/2768/3243\nf 3330/2771/3246 3331/2772/3247 3361/2769/3244\nf 3362/2773/3248 3363/2774/3249 3330/2771/3246\nf 3330/2771/3246 3363/2774/3249 3364/2775/3250\nf 3332/2776/3251 3333/2777/3252 3363/2774/3249\nf 3334/2778/3253 3364/2775/3250 3363/2774/3249\nf 3335/2779/3254 3336/2780/3255 3333/2777/3252\nf 3336/2780/3255 3337/2781/3256 3334/2778/3253\nf 3308/2782/3257 3309/2783/3258 3365/2726/3201\nf 3309/2783/3258 3310/2784/3259 3367/2728/3203\nf 3370/2730/3205 3369/2733/3208 3309/2783/3258\nf 3309/2783/3258 3369/2733/3208 3368/2785/3260\nf 3375/2786/3261 3411/2787/3262 3412/2788/3263\nf 3430/2789/3264 3417/2790/3265 3416/2791/3266\nf 3376/2792/3267 3410/2793/3268 3411/2787/3262\nf 3428/2794/3269 3418/2795/3270 3417/2790/3265\nf 3372/2796/3271 3411/2787/3262 3410/2793/3268\nf 3371/2797/3272 3412/2788/3263 3411/2787/3262\nf 3419/2798/3273 3420/2799/3274 3372/2796/3271\nf 3372/2796/3271 3420/2799/3274 3421/2800/3275\nf 3378/2801/3276 3420/2799/3274 3419/2798/3273\nf 3378/2801/3276 3379/2802/3277 3421/2800/3275\nf 3407/2803/3278 3408/2804/3279 3378/2801/3276\nf 3408/2804/3279 3409/2805/3280 3379/2802/3277\nf 3380/2806/3281 3381/2807/3282 3408/2804/3279\nf 3381/2807/3282 3382/2808/3283 3409/2805/3280\nf 3413/2809/3284 3414/2810/3285 3381/2807/3282\nf 3414/2810/3285 3415/2811/3286 3382/2808/3283\nf 3383/2812/3287 3384/2813/3288 3414/2810/3285\nf 3384/2813/3288 3385/2814/3289 3415/2811/3286\nf 3404/2815/3290 3405/2816/3291 3384/2813/3288\nf 3405/2816/3291 3406/2817/3292 3385/2814/3289\nf 3386/2818/3293 3387/2819/3294 3405/2816/3291\nf 3388/2820/3295 3406/2817/3292 3405/2816/3291\nf 3401/2821/3296 3402/2822/3297 3387/2819/3294\nf 3387/2819/3294 3402/2822/3297 3403/2823/3298\nf 3389/2824/3299 3390/2825/3300 3402/2822/3297\nf 3390/2825/3300 3391/2826/3301 3403/2823/3298\nf 3422/2827/3302 3423/2828/3303 3390/2825/3300\nf 3423/2828/3303 3424/2829/3304 3391/2826/3301\nf 3392/2830/3305 3393/2831/3306 3423/2828/3303\nf 3393/2831/3306 3394/2832/3307 3424/2829/3304\nf 3425/2833/3308 3426/2834/3309 3393/2831/3306\nf 3393/2831/3306 3426/2834/3309 3427/2835/3310\nf 3395/2836/3311 3396/2837/3312 3426/2834/3309\nf 3397/2838/3313 3427/2835/3310 3426/2834/3309\nf 3398/2839/3314 3399/2840/3315 3396/2837/3312\nf 3396/2837/3312 3399/2840/3315 3400/2841/3316\nf 3433/2842/3317 3430/2789/3264 3429/2843/3318\nf 3431/2844/3319 3428/2794/3269 3430/2789/3264\nf 3375/2786/3261 3433/2842/3317 3432/2845/3320\nf 3374/2846/3321 3431/2844/3319 3433/2842/3317\nf 3438/2847/3322 3474/2848/3323 3475/2849/3324\nf 3492/2850/3325 3493/2851/3326 3480/2852/3327\nf 3439/2853/3328 3473/2854/3329 3474/2848/3323\nf 3493/2851/3326 3491/2855/3330 3481/2856/3331\nf 3435/2857/3332 3474/2848/3323 3473/2854/3329\nf 3434/2858/3333 3475/2849/3324 3474/2848/3323\nf 3482/2859/3334 3483/2860/3335 3435/2857/3332\nf 3435/2857/3332 3483/2860/3335 3484/2861/3336\nf 3440/2862/3337 3441/2863/3338 3483/2860/3335\nf 3441/2863/3338 3442/2864/3339 3484/2861/3336\nf 3470/2865/3340 3471/2866/3341 3441/2863/3338\nf 3471/2866/3341 3472/2867/3342 3442/2864/3339\nf 3444/2868/3343 3471/2866/3341 3470/2865/3340\nf 3444/2868/3343 3445/2869/3344 3472/2867/3342\nf 3443/2870/3345 3476/2871/3346 3477/2872/3347\nf 3477/2872/3347 3478/2873/3348 3445/2869/3344\nf 3447/2874/3349 3477/2872/3347 3476/2871/3346\nf 3447/2874/3349 3448/2875/3350 3478/2873/3348\nf 3467/2876/3351 3468/2877/3352 3447/2874/3349\nf 3447/2874/3349 3468/2877/3352 3469/2878/3353\nf 3450/2879/3354 3468/2877/3352 3467/2876/3351\nf 3451/2880/3355 3469/2878/3353 3468/2877/3352\nf 3464/2881/3356 3465/2882/3357 3450/2879/3354\nf 3450/2879/3354 3465/2882/3357 3466/2883/3358\nf 3452/2884/3359 3453/2885/3360 3465/2882/3357\nf 3453/2885/3360 3454/2886/3361 3466/2883/3358\nf 3485/2887/3362 3486/2888/3363 3453/2885/3360\nf 3486/2888/3363 3487/2889/3364 3454/2886/3361\nf 3455/2890/3365 3456/2891/3366 3486/2888/3363\nf 3457/2892/3367 3487/2889/3364 3486/2888/3363\nf 3488/2893/3368 3489/2894/3369 3456/2891/3366\nf 3456/2891/3366 3489/2894/3369 3490/2895/3370\nf 3458/2896/3371 3459/2897/3372 3489/2894/3369\nf 3460/2898/3373 3490/2895/3370 3489/2894/3369\nf 3461/2899/3374 3462/2900/3375 3459/2897/3372\nf 3459/2897/3372 3462/2900/3375 3463/2901/3376\nf 3496/2902/3377 3493/2851/3326 3492/2850/3325\nf 3494/2903/3378 3491/2855/3330 3493/2851/3326\nf 3438/2847/3322 3496/2902/3377 3495/2904/3379\nf 3437/2905/3380 3494/2903/3378 3496/2902/3377\nf 3501/2906/3381 3537/2907/3382 3538/2908/3383\nf 3561/2909/3384 3562/2910/3385 3543/2911/3386\nf 3502/2912/3387 3536/2913/3388 3537/2907/3382\nf 3562/2910/3385 3560/2914/3389 3544/2915/3390\nf 3498/2916/3391 3537/2907/3382 3536/2913/3388\nf 3497/2917/3392 3538/2908/3383 3537/2907/3382\nf 3545/2918/3393 3546/2919/3394 3498/2916/3391\nf 3498/2916/3391 3546/2919/3394 3547/2920/3395\nf 3504/2921/3396 3546/2919/3394 3545/2918/3393\nf 3504/2921/3396 3505/2922/3397 3547/2920/3395\nf 3503/2923/3398 3533/2924/3399 3534/2925/3400\nf 3534/2925/3400 3535/2926/3401 3505/2922/3397\nf 3507/2927/3402 3534/2925/3400 3533/2924/3399\nf 3507/2927/3402 3508/2928/3403 3535/2926/3401\nf 3506/2929/3404 3539/2930/3405 3540/2931/3406\nf 3540/2931/3406 3541/2932/3407 3508/2928/3403\nf 3510/2933/3408 3540/2931/3406 3539/2930/3405\nf 3510/2933/3408 3511/2934/3409 3541/2932/3407\nf 3509/2935/3410 3530/2936/3411 3531/2937/3412\nf 3510/2933/3408 3531/2937/3412 3532/2938/3413\nf 3513/2939/3414 3531/2937/3412 3530/2936/3411\nf 3514/2940/3415 3532/2938/3413 3531/2937/3412\nf 3512/2941/3416 3527/2942/3417 3528/2943/3418\nf 3513/2939/3414 3528/2943/3418 3529/2944/3419\nf 3515/2945/3420 3516/2946/3421 3528/2943/3418\nf 3517/2947/3422 3529/2944/3419 3528/2943/3418\nf 3548/2948/3423 3549/2949/3424 3516/2946/3421\nf 3549/2949/3424 3550/2950/3425 3517/2947/3422\nf 3519/2951/3426 3549/2949/3424 3548/2948/3423\nf 3519/2951/3426 3520/2952/3427 3550/2950/3425\nf 3518/2953/3428 3551/2954/3429 3552/2955/3430\nf 3519/2951/3426 3552/2955/3430 3553/2956/3431\nf 3522/2957/3432 3552/2955/3430 3551/2954/3429\nf 3522/2957/3432 3523/2958/3433 3553/2956/3431\nf 3521/2959/3434 3524/2960/3435 3525/2961/3436\nf 3522/2957/3432 3525/2961/3436 3526/2962/3437\nf 3559/2963/3438 3556/2964/3439 3555/2965/3440\nf 3559/2963/3438 3557/2966/3441 3554/2967/3442\nf 3501/2906/3381 3559/2963/3438 3558/2968/3443\nf 3500/2969/3444 3557/2966/3441 3559/2963/3438\nf 3555/2965/3440 3556/2964/3439 3562/2910/3385\nf 3556/2964/3439 3554/2967/3442 3560/2914/3389\nf 3567/2970/3445 3603/2971/3446 3604/2972/3447\nf 3627/2973/3448 3628/2974/3449 3609/2975/3450\nf 3568/2976/3451 3602/2977/3452 3603/2971/3446\nf 3628/2974/3449 3626/2978/3453 3610/2979/3454\nf 3565/2980/3455 3564/2981/3456 3603/2971/3446\nf 3563/2982/3457 3604/2972/3447 3603/2971/3446\nf 3611/2983/3458 3612/2984/3459 3564/2981/3456\nf 3612/2984/3459 3613/2985/3460 3563/2982/3457\nf 3569/2986/3461 3570/2987/3462 3612/2984/3459\nf 3570/2987/3462 3571/2988/3463 3613/2985/3460\nf 3599/2989/3464 3600/2990/3465 3570/2987/3462\nf 3600/2990/3465 3601/2991/3466 3571/2988/3463\nf 3572/2992/3467 3573/2993/3468 3600/2990/3465\nf 3573/2993/3468 3574/2994/3469 3601/2991/3466\nf 3572/2992/3467 3605/2995/3470 3606/2996/3471\nf 3606/2996/3471 3607/2997/3472 3574/2994/3469\nf 3575/2998/3473 3576/2999/3474 3606/2996/3471\nf 3576/2999/3474 3577/3000/3475 3607/2997/3472\nf 3596/3001/3476 3597/3002/3477 3576/2999/3474\nf 3597/3002/3477 3598/3003/3478 3577/3000/3475\nf 3578/3004/3479 3579/3005/3480 3597/3002/3477\nf 3580/3006/3481 3598/3003/3478 3597/3002/3477\nf 3593/3007/3482 3594/3008/3483 3579/3005/3480\nf 3594/3008/3483 3595/3009/3484 3580/3006/3481\nf 3581/3010/3485 3582/3011/3486 3594/3008/3483\nf 3582/3011/3486 3583/3012/3487 3595/3009/3484\nf 3614/3013/3488 3615/3014/3489 3582/3011/3486\nf 3615/3014/3489 3616/3015/3490 3583/3012/3487\nf 3584/3016/3491 3585/3017/3492 3615/3014/3489\nf 3585/3017/3492 3586/3018/3493 3616/3015/3490\nf 3584/3016/3491 3617/3019/3494 3618/3020/3495\nf 3585/3017/3492 3618/3020/3495 3619/3021/3496\nf 3588/3022/3497 3618/3020/3495 3617/3019/3494\nf 3589/3023/3498 3619/3021/3496 3618/3020/3495\nf 3590/3024/3499 3591/3025/3500 3669/3026/3501\nf 3591/3025/3500 3592/3027/3502 3642/3028/3503\nf 3624/3029/3504 3625/3030/3505 3622/3031/3506\nf 3625/3030/3505 3623/3032/3507 3620/3033/3508\nf 3567/2970/3445 3625/3030/3505 3624/3029/3504\nf 3566/3034/3509 3623/3032/3507 3625/3030/3505\nf 3621/3035/3510 3622/3031/3506 3628/2974/3449\nf 3622/3031/3506 3620/3033/3508 3626/2978/3453\nf 3662/3036/3511 3660/3037/3512 3659/3038/3513\nf 3660/3037/3512 3662/3036/3511 3638/3039/3514\nf 3635/3040/3515 3656/3041/3516 3643/3042/3517\nf 3656/3041/3516 3655/3043/3518 3644/3044/3519\nf 3629/3045/3520 3643/3042/3517 3658/3046/3521\nf 3643/3042/3517 3644/3044/3519 3657/3047/3522\nf 3636/3048/3523 3658/3046/3521 3645/3049/3524\nf 3658/3046/3521 3657/3047/3522 3646/3050/3525\nf 3645/3049/3524 3660/3037/3512 3637/3051/3526\nf 3645/3049/3524 3646/3050/3525 3659/3038/3513\nf 3631/3052/3527 3638/3039/3514 3662/3036/3511\nf 3647/3053/3528 3662/3036/3511 3661/3054/3529\nf 3647/3053/3528 3664/3055/3530 3639/3056/3531\nf 3647/3053/3528 3648/3057/3532 3663/3058/3533\nf 3632/3059/3534 3639/3056/3531 3664/3055/3530\nf 3664/3055/3530 3663/3058/3533 3650/3060/3535\nf 3649/3061/3536 3666/3062/3537 3640/3063/3538\nf 3649/3061/3536 3650/3060/3535 3665/3064/3539\nf 3633/3065/3540 3640/3063/3538 3666/3062/3537\nf 3651/3066/3541 3666/3062/3537 3665/3064/3539\nf 3633/3065/3540 3651/3066/3541 3668/3067/3542\nf 3652/3068/3543 3667/3069/3544 3668/3067/3542\nf 3641/3070/3545 3668/3067/3542 3653/3071/3546\nf 3653/3071/3546 3668/3067/3542 3667/3069/3544\nf 3588/3022/3497 3669/3026/3501 3642/3028/3503\nf 3670/3072/3547 3669/3026/3501 3588/3022/3497\nf 3702/3073/3548 3703/3074/3549 3701/3075/3550\nf 3703/3074/3549 3680/3076/3551 3679/3077/3552\nf 3677/3078/3553 3697/3079/3554 3712/3080/3555\nf 3697/3079/3554 3696/3081/3556 3711/3082/3557\nf 3715/3083/3558 3713/3084/3559 3699/3085/3560\nf 3713/3084/3559 3714/3086/3561 3698/3087/3562\nf 3678/3088/3563 3699/3085/3560 3717/3089/3564\nf 3699/3085/3560 3698/3087/3562 3718/3090/3565\nf 3672/3091/3566 3686/3092/3567 3701/3075/3550\nf 3686/3092/3567 3687/3093/3568 3700/3094/3569\nf 3673/3095/3570 3680/3076/3551 3703/3074/3549\nf 3703/3074/3549 3702/3073/3548 3689/3096/3571\nf 3673/3095/3570 3688/3097/3572 3705/3098/3573\nf 3688/3097/3572 3689/3096/3571 3704/3099/3574\nf 3681/3100/3575 3705/3098/3573 3690/3101/3576\nf 3705/3098/3573 3704/3099/3574 3691/3102/3577\nf 3674/3103/3578 3690/3101/3576 3707/3104/3579\nf 3690/3101/3576 3691/3102/3577 3706/3105/3580\nf 3682/3106/3581 3707/3104/3579 3692/3107/3582\nf 3707/3104/3579 3706/3105/3580 3693/3108/3583\nf 3675/3109/3584 3692/3107/3582 3709/3110/3585\nf 3692/3107/3582 3693/3108/3583 3708/3111/3586\nf 3683/3112/3587 3709/3110/3585 3694/3113/3588\nf 3709/3110/3585 3708/3111/3586 3695/3114/3589\nf 3710/3115/3590 3712/3080/3555 3684/3116/3591\nf 3712/3080/3555 3711/3082/3557 3685/3117/3592\nf 3671/3118/3593 3684/3116/3591 3713/3084/3559\nf 3684/3116/3591 3685/3117/3592 3714/3086/3561\nf 3716/3119/3594 3717/3089/3564 3686/3092/3567\nf 3717/3089/3564 3718/3090/3565 3687/3093/3568\nf 364/725/723 859/5/3 62/7/5\nf 860/729/727 367/8/6 352/10/8\nf 363/732/730 861/11/9 61/13/11\nf 361/738/734 862/14/12 49/16/14\nf 863/742/738 372/17/15 337/19/17\nf 864/747/743 360/20/18 383/22/20\nf 865/749/745 371/23/21 354/25/23\nf 345/752/748 866/26/24 32/28/26\nf 353/756/752 867/29/27 53/31/29\nf 868/759/755 380/32/30 346/34/32\nf 338/764/759 869/35/33 35/37/35\nf 870/767/762 390/38/36 356/40/38\nf 871/771/766 381/41/39 334/43/41\nf 872/774/769 391/44/42 342/46/44\nf 873/779/773 382/47/45 341/49/47\nf 348/783/776 874/50/48 33/52/50\nf 875/786/778 386/53/51 347/55/53\nf 359/788/780 876/56/54 60/58/56\nf 877/791/783 383/22/20 351/59/57\nf 878/794/786 389/60/58 339/62/60\nf 412/799/789 879/63/61 76/65/63\nf 880/800/790 377/66/64 335/68/66\nf 881/803/793 387/69/67 355/71/69\nf 349/805/795 882/72/70 48/74/72\nf 883/808/798 432/75/73 420/77/75\nf 884/810/800 392/78/76 343/80/78\nf 885/813/803 344/81/79 395/83/81\nf 886/818/808 493/84/82 474/86/84\nf 887/820/809 379/87/85 362/89/87\nf 336/824/812 888/90/88 38/92/90\nf 357/827/815 889/93/91 58/95/93\nf 402/830/818 890/96/94 74/98/96\nf 891/832/820 429/99/97 398/101/99\nf 892/833/821 431/102/100 419/104/102\nf 426/834/822 893/105/103 93/107/105\nf 894/835/823 434/108/106 414/110/108\nf 423/837/825 895/111/109 80/113/111\nf 425/839/826 896/114/112 92/116/114\nf 897/840/827 428/117/115 399/119/117\nf 898/841/828 438/120/118 416/122/120\nf 899/842/829 422/123/121 449/125/123\nf 900/844/831 440/126/124 407/128/126\nf 415/845/832 901/129/127 84/131/129\nf 902/846/833 446/132/130 408/134/132\nf 400/848/834 903/135/133 66/137/135\nf 904/849/835 455/138/136 418/140/138\nf 905/850/836 447/141/139 396/143/141\nf 906/851/837 456/144/142 404/146/144\nf 403/853/838 907/147/145 73/149/147\nf 410/856/839 908/150/148 64/152/150\nf 909/858/840 452/153/151 409/155/153\nf 421/859/841 910/156/154 91/158/156\nf 413/860/842 911/159/157 81/124/122\nf 912/861/843 454/160/158 401/162/160\nf 913/864/844 443/163/161 397/165/163\nf 914/865/845 453/166/164 417/168/166\nf 915/866/846 406/169/167 427/64/62\nf 916/868/848 439/170/168 411/172/170\nf 482/869/849 917/173/171 108/175/173\nf 918/870/850 430/176/174 405/178/176\nf 919/871/851 517/179/177 480/181/179\nf 424/873/852 920/182/180 90/184/182\nf 468/875/853 921/185/183 103/187/185\nf 536/876/854 922/188/186 138/190/188\nf 486/878/855 923/191/189 121/193/191\nf 464/880/856 924/194/192 105/196/194\nf 925/881/857 495/197/195 460/199/197\nf 926/882/858 497/200/198 481/202/200\nf 927/883/859 505/203/201 488/205/203\nf 928/884/860 489/206/204 476/208/206\nf 485/886/862 929/209/207 111/211/209\nf 930/887/863 499/212/210 487/214/212\nf 931/890/864 494/215/213 461/217/215\nf 932/891/865 502/218/216 478/220/218\nf 933/892/866 484/221/219 512/223/221\nf 934/894/868 504/224/222 469/226/224\nf 477/895/869 935/227/225 115/229/227\nf 936/896/870 509/230/228 470/232/230\nf 937/897/871 508/233/231 462/235/233\nf 938/900/872 510/236/234 458/238/236\nf 939/901/873 518/239/237 466/241/239\nf 465/903/874 940/242/240 104/244/242\nf 941/905/875 513/245/243 472/247/245\nf 942/908/876 514/248/246 471/250/248\nf 483/909/877 943/251/249 122/253/251\nf 944/910/878 475/254/252 489/206/204\nf 945/911/879 516/255/253 463/257/255\nf 946/914/880 515/258/256 479/260/258\nf 947/915/881 507/261/259 459/263/261\nf 523/916/882 948/264/262 130/266/264\nf 949/917/883 503/267/265 473/269/267\nf 950/918/884 542/270/268 552/272/270\nf 951/921/887 496/273/271 467/275/273\nf 952/922/888 530/276/274 553/189/187\nf 544/925/891 953/277/275 139/279/277\nf 954/926/892 604/280/278 799/282/280\nf 598/929/895 955/283/281 169/285/283\nf 548/931/896 956/286/284 152/288/286\nf 526/933/897 957/289/287 136/291/289\nf 522/934/898 958/292/290 131/294/292\nf 543/935/899 959/295/293 151/271/269\nf 550/936/900 960/296/294 155/298/296\nf 961/937/901 554/299/297 538/301/299\nf 547/939/903 962/302/300 142/304/302\nf 549/941/904 963/305/303 154/307/305\nf 540/942/905 964/308/306 147/310/308\nf 575/943/906 965/311/309 143/313/311\nf 531/945/908 966/314/312 125/316/314\nf 539/946/909 967/317/315 146/319/317\nf 532/947/910 968/320/318 127/322/320\nf 969/948/911 571/323/321 524/325/323\nf 528/951/912 970/326/324 137/328/326\nf 520/952/913 971/329/327 140/331/329\nf 527/954/914 972/332/330 135/334/332\nf 534/957/915 973/335/333 126/337/335\nf 533/958/916 974/338/336 129/340/338\nf 545/959/917 975/341/339 153/343/341\nf 976/960/918 537/344/342 554/299/297\nf 977/962/919 578/345/343 525/347/345\nf 521/963/920 978/348/346 132/350/348\nf 541/964/921 979/351/349 148/353/351\nf 980/965/922 748/354/352 660/356/354\nf 535/966/923 981/357/355 141/359/357\nf 529/967/924 982/360/358 150/362/360\nf 983/968/925 609/363/361 797/365/363\nf 984/971/928 806/366/364 585/368/366\nf 985/972/929 592/369/367 800/284/282\nf 986/975/932 624/370/368 606/372/370\nf 666/976/933 987/373/371 211/375/373\nf 988/978/935 632/376/374 588/378/376\nf 610/980/936 989/379/377 183/381/379\nf 605/983/938 990/382/380 182/281/279\nf 991/985/940 623/383/381 584/385/383\nf 992/986/941 815/386/384 612/388/386\nf 993/987/942 801/389/387 600/391/389\nf 602/988/943 994/392/390 178/394/392\nf 611/990/944 995/395/393 185/397/395\nf 638/993/946 996/398/396 174/400/398\nf 997/994/947 630/401/399 593/403/401\nf 601/995/948 998/404/402 177/406/404\nf 999/997/950 635/407/405 594/409/407\nf 586/999/951 1000/410/408 159/412/410\nf 1001/1002/953 636/413/411 582/415/413\nf 1002/1003/954 643/416/414 590/418/416\nf 1003/1004/955 637/419/417 589/421/419\nf 1004/1007/956 639/422/420 596/424/422\nf 1005/1010/957 798/425/423 595/427/425\nf 607/1011/958 1006/428/426 184/430/428\nf 1007/1014/961 599/431/429 801/389/387\nf 1008/1015/962 641/432/430 587/434/432\nf 1009/1018/963 691/435/433 733/437/435\nf 1010/1021/966 817/438/436 583/440/438\nf 603/1022/967 1011/441/439 179/443/441\nf 1012/1025/970 813/444/442 597/446/444\nf 591/1026/971 1013/447/445 181/449/447\nf 1014/1028/973 676/450/448 653/452/450\nf 1015/1032/977 671/453/451 677/455/453\nf 1016/1035/980 758/456/454 647/458/456\nf 1017/1036/981 654/459/457 748/354/352\nf 781/1039/984 1018/460/458 261/462/460\nf 724/1041/986 1019/463/461 226/465/463\nf 650/1042/987 1020/466/464 198/468/466\nf 672/1046/991 1021/469/467 214/471/469\nf 646/1047/992 1022/472/470 193/474/472\nf 667/1049/994 1023/475/473 213/477/475\nf 794/1051/996 1024/478/476 265/480/478\nf 662/1053/998 1025/481/479 207/483/481\nf 1026/1055/1000 716/484/482 673/486/484\nf 670/1058/1003 1027/487/485 206/454/452\nf 655/1059/1004 1028/488/486 187/490/488\nf 663/1061/1006 1029/491/489 208/493/491\nf 1030/1063/1008 698/494/492 656/496/494\nf 1031/1064/1009 697/497/495 648/499/497\nf 644/1067/1012 1032/500/498 202/502/500\nf 1033/1068/1013 742/503/501 679/505/503\nf 1034/1070/1015 700/506/504 651/508/506\nf 1035/1073/1018 702/509/507 658/511/509\nf 1036/1076/1021 757/512/510 657/514/512\nf 669/1077/1022 1037/515/513 215/517/515\nf 661/1080/1025 1038/518/516 205/520/518\nf 1039/1082/1027 704/521/519 649/523/521\nf 645/1085/1030 1040/524/522 194/526/524\nf 665/1087/1032 1041/527/525 225/529/527\nf 1042/1089/1034 776/530/528 659/532/530\nf 340/831/819 1043/533/531 43/535/533\nf 1044/1092/1036 395/83/81 350/536/534\nf 1045/1094/1038 725/537/535 681/539/537\nf 1046/1095/1039 721/540/538 714/464/462\nf 1047/1098/1042 694/541/539 732/543/541\nf 722/1099/1043 1048/544/542 227/538/536\nf 723/1101/1045 1049/545/543 228/547/545\nf 726/1103/1046 1050/548/546 232/550/548\nf 1051/1105/1048 727/551/549 664/553/551\nf 731/1062/1007 1052/554/552 236/556/554\nf 652/1106/1049 1053/557/555 199/559/557\nf 739/1030/975 1054/560/558 238/562/560\nf 1055/1108/1051 706/563/561 747/565/563\nf 740/1050/995 1056/566/564 239/504/502\nf 741/1088/1033 1057/567/565 241/569/567\nf 1058/1109/1052 743/570/568 746/572/570\nf 1059/1112/1055 687/573/571 668/575/573\nf 1060/1113/1056 680/576/574 753/578/576\nf 1061/1114/1057 754/579/577 680/576/574\nf 755/1044/989 1062/580/578 247/582/580\nf 1063/1116/1059 751/583/581 756/585/583\nf 1064/1119/1062 685/586/584 762/588/586\nf 763/1048/993 1065/589/587 252/591/589\nf 1066/1120/1063 761/592/590 764/594/592\nf 1067/1123/1066 678/595/593 765/597/595\nf 1068/1124/1067 766/598/596 770/600/598\nf 1069/1125/1068 767/601/599 771/603/601\nf 772/1086/1031 1070/604/602 257/606/604\nf 1071/1128/1071 774/607/605 779/609/607\nf 1072/1131/1073 728/610/608 674/612/610\nf 780/1060/1005 1073/613/611 263/615/613\nf 1074/1132/1074 778/616/614 782/618/616\nf 1075/1133/1075 692/619/617 783/621/619\nf 795/1081/1026 1076/622/620 267/624/622\nf 1077/1134/1076 791/625/623 784/479/477\nf 792/1054/999 1078/626/624 268/628/626\nf 1079/1136/1078 788/629/627 793/631/629\nf 796/1079/1024 1080/632/630 271/634/632\nf 358/809/799 1081/635/633 46/637/635\nf 1082/1140/1082 828/638/636 615/640/638\nf 1083/1142/1084 616/641/639 829/643/641\nf 613/1143/1085 1084/644/642 272/646/644\nf 1085/1145/1087 622/647/645 831/649/647\nf 1086/1146/1088 832/650/648 616/641/639\nf 1087/1149/1091 808/651/649 833/653/651\nf 1088/1150/1092 816/654/652 834/656/654\nf 835/982/937 1089/657/655 279/659/657\nf 836/984/939 1090/660/658 274/639/637\nf 1091/1152/1093 807/661/659 837/663/661\nf 1092/1153/1094 631/664/662 838/666/664\nf 1093/1154/1095 617/667/665 839/669/667\nf 1094/1155/1096 628/670/668 840/672/670\nf 841/992/945 1095/673/671 284/675/673\nf 822/1158/1097 1096/676/674 297/678/676\nf 1097/1159/1098 814/679/677 843/681/679\nf 844/996/949 1098/682/680 285/684/682\nf 1099/1160/1099 819/685/683 845/687/685\nf 846/1001/952 1100/688/686 293/690/688\nf 1101/1162/1100 820/691/689 847/693/691\nf 1102/1163/1101 827/694/692 848/696/694\nf 1103/1164/1102 821/697/695 849/699/697\nf 1104/1167/1103 823/700/698 850/702/700\nf 1105/1170/1104 614/703/701 851/705/703\nf 852/1013/960 1106/706/704 278/708/706\nf 1107/1171/1105 853/709/707 617/667/665\nf 1108/1172/1106 825/710/708 854/712/710\nf 1109/1175/1107 633/713/711 855/715/713\nf 856/1024/969 1110/716/714 299/718/716\nf 1111/1176/1108 629/719/717 857/721/719\nf 858/1027/972 1112/722/720 280/724/722\nf 54/24/22 371/23/21 364/725/723\nf 371/23/21 23/726/724 859/5/3\nf 859/5/3 333/727/725 375/6/4\nf 366/12/10 860/729/727 61/13/11\nf 30/736/732 321/730/728 366/12/10\nf 321/730/728 21/731/729 860/729/727\nf 368/735/28 861/11/9 53/733/29\nf 22/3120/754 332/734/731 368/735/28\nf 861/11/9 332/734/731 366/12/10\nf 51/748/744 393/737/733 361/738/734\nf 393/737/733 20/739/735 862/14/12\nf 862/14/12 330/740/736 370/15/13\nf 386/53/51 863/742/738 36/54/52\nf 386/53/51 5/743/739 863/742/738\nf 863/742/738 306/744/740 372/17/15\nf 19/793/785 329/746/742 383/22/20\nf 329/746/742 20/739/735 864/747/743\nf 864/747/743 393/737/733 360/20/18\nf 387/69/67 865/749/745 55/70/68\nf 387/69/67 24/750/746 865/749/745\nf 865/749/745 323/751/747 371/23/21\nf 48/74/72 373/73/71 345/752/748\nf 373/73/71 17/753/749 866/26/24\nf 866/26/24 314/754/750 374/27/25\nf 375/6/4 867/29/27 62/7/5\nf 31/728/726 322/757/753 375/6/4\nf 867/29/27 322/757/753 368/30/28\nf 384/51/49 868/759/755 33/52/50\nf 384/51/49 2/760/756 868/759/755\nf 315/761/757 3/762/758 868/759/755\nf 39/3121/65 377/763/64 338/764/759\nf 8/3122/792 307/765/760 377/763/64\nf 869/35/33 307/765/760 378/36/34\nf 58/95/93 394/94/92 356/40/38\nf 394/94/92 27/768/763 870/767/762\nf 325/769/764 25/770/765 870/767/762\nf 374/27/25 871/771/766 32/28/26\nf 1/755/751 303/772/767 374/27/25\nf 303/772/767 16/773/768 871/771/766\nf 42/48/46 382/47/45 342/46/44\nf 382/47/45 11/775/770 872/774/769\nf 311/776/771 13/777/772 872/774/769\nf 43/854/533 376/778/532 341/49/47\nf 376/778/532 12/780/774 873/779/773\nf 873/779/773 310/781/775 382/47/45\nf 47/857/40 381/782/39 348/783/776\nf 381/782/39 16/784/768 874/50/48\nf 317/785/777 2/760/756 874/50/48\nf 35/37/35 378/36/34 347/55/53\nf 4/766/761 316/787/779 378/36/34\nf 316/787/779 5/743/739 875/786/778\nf 49/16/14 370/15/13 359/788/780\nf 370/15/13 18/741/737 876/56/54\nf 876/56/54 328/789/781 385/57/55\nf 367/8/6 877/791/783 52/9/7\nf 21/731/729 320/792/784 367/8/6\nf 320/792/784 19/793/785 877/791/783\nf 388/797/89 878/794/786 38/795/90\nf 7/3123/814 308/796/787 388/797/89\nf 308/796/787 9/798/788 878/794/786\nf 71/161/159 454/160/158 412/799/789\nf 454/160/158 40/61/59 879/63/61\nf 879/63/61 350/536/534 427/64/62\nf 380/32/30 880/800/790 34/33/31\nf 380/32/30 3/762/758 880/800/790\nf 304/801/791 8/802/792 880/800/790\nf 390/38/36 881/803/793 56/39/37\nf 25/770/765 324/804/794 390/38/36\nf 324/804/794 24/750/746 881/803/793\nf 46/637/635 365/636/634 349/805/795\nf 365/636/634 15/806/796 882/72/70\nf 318/807/797 17/753/749 882/72/70\nf 445/183/181 883/808/798 90/184/182\nf 59/88/86 358/809/799 445/183/181\nf 358/809/799 46/637/635 883/808/798\nf 44/45/43 391/44/42 343/80/78\nf 13/777/772 312/811/801 391/44/42\nf 312/811/801 26/812/802 884/810/800\nf 313/816/806 885/813/803 14/814/804\nf 10/1714/3595 369/815/805 313/816/806\nf 885/813/803 369/815/805 344/81/79\nf 102/256/254 516/255/253 474/86/84\nf 71/161/159 412/799/789 516/255/253\nf 412/799/789 76/65/63 886/818/808\nf 60/874/56 385/819/55 362/89/87\nf 385/819/55 29/821/782 887/820/809\nf 887/820/809 331/822/810 379/87/85\nf 37/18/16 372/17/15 336/824/812\nf 372/17/15 6/745/741 888/90/88\nf 888/90/88 305/825/813 388/91/89\nf 57/79/77 392/78/76 357/827/815\nf 26/812/802 326/828/816 392/78/76\nf 889/93/91 326/828/816 394/94/92\nf 72/867/847 435/829/817 402/830/818\nf 435/829/817 41/817/807 890/96/94\nf 890/96/94 340/831/819 442/97/95\nf 428/117/115 891/832/820 68/118/116\nf 428/117/115 37/18/16 891/832/820\nf 891/832/820 336/824/812 429/99/97\nf 430/176/174 892/833/821 88/177/175\nf 430/176/174 57/79/77 892/833/821\nf 357/827/815 58/95/93 892/833/821\nf 85/121/119 438/120/118 426/834/822\nf 438/120/118 54/24/22 893/105/103\nf 893/105/103 364/725/723 441/106/104\nf 433/115/113 894/835/823 92/116/114\nf 61/13/11 352/10/8 433/115/113\nf 352/10/8 52/9/7 894/835/823\nf 82/843/830 457/836/824 423/837/825\nf 457/836/824 51/748/744 895/111/109\nf 895/111/109 361/738/734 437/112/110\nf 84/889/129 436/838/128 425/839/826\nf 436/838/128 53/733/29 896/114/112\nf 896/114/112 363/732/730 433/115/113\nf 452/153/151 897/840/827 67/154/152\nf 36/54/52 337/19/17 452/153/151\nf 337/19/17 37/18/16 897/840/827\nf 453/166/164 898/841/828 86/167/165\nf 55/70/68 354/25/23 453/166/164\nf 354/25/23 54/24/22 898/841/828\nf 360/20/18 899/842/829 50/21/19\nf 51/748/744 457/836/824 360/20/18\nf 457/836/824 82/843/830 899/842/829\nf 439/170/168 900/844/831 79/171/169\nf 48/74/72 345/752/748 439/170/168\nf 345/752/748 32/28/26 900/844/831\nf 93/107/105 441/106/104 415/845/832\nf 441/106/104 62/7/5 901/129/127\nf 901/129/127 353/756/752 436/130/128\nf 450/151/149 902/846/833 64/152/150\nf 33/52/50 346/34/32 450/151/149\nf 346/34/32 34/33/31 902/846/833\nf 70/3124/162 443/847/161 400/848/834\nf 39/3121/65 338/764/759 443/847/161\nf 338/764/759 35/37/35 903/135/133\nf 431/102/100 904/849/835 89/103/101\nf 58/95/93 356/40/38 431/102/100\nf 356/40/38 56/39/37 904/849/835\nf 440/126/124 905/850/836 63/127/125\nf 32/28/26 334/43/41 440/126/124\nf 334/43/41 47/42/40 905/850/836\nf 448/148/146 906/851/837 73/149/147\nf 448/148/146 42/48/46 906/851/837\nf 906/851/837 342/46/44 456/144/142\nf 74/904/96 442/852/95 403/853/838\nf 442/852/95 43/854/533 907/147/145\nf 907/147/145 341/49/47 448/148/146\nf 78/3125/140 447/855/139 410/856/839\nf 447/855/139 47/857/40 908/150/148\nf 908/150/148 348/783/776 450/151/149\nf 444/136/134 909/858/840 66/137/135\nf 35/37/35 347/55/53 444/136/134\nf 347/55/53 36/54/52 909/858/840\nf 80/113/111 437/112/110 421/859/841\nf 437/112/110 49/16/14 910/156/154\nf 910/156/154 359/788/780 451/157/155\nf 83/109/107 434/108/106 413/860/842\nf 434/108/106 52/9/7 911/159/157\nf 911/159/157 351/59/57 449/125/123\nf 429/863/97 912/861/843 69/862/98\nf 38/795/90 339/62/60 429/863/97\nf 339/62/60 40/61/59 912/861/843\nf 446/132/130 913/864/844 65/133/131\nf 34/33/31 335/68/66 446/132/130\nf 335/68/66 39/67/65 913/864/844\nf 455/138/136 914/865/845 87/139/137\nf 56/39/37 355/71/69 455/138/136\nf 355/71/69 55/70/68 914/865/845\nf 344/81/79 915/866/846 45/82/80\nf 41/817/807 435/829/817 344/81/79\nf 435/829/817 72/867/847 915/866/846\nf 432/75/73 916/868/848 77/76/74\nf 432/75/73 46/637/635 916/868/848\nf 916/868/848 349/805/795 439/170/168\nf 121/193/191 492/192/190 482/869/849\nf 90/184/182 420/77/75 492/192/190\nf 917/173/171 420/77/75 498/174/172\nf 456/144/142 918/870/850 75/145/143\nf 456/144/142 44/45/43 918/870/850\nf 343/80/78 57/79/77 918/870/850\nf 497/200/198 919/871/851 120/201/199\nf 89/103/101 418/140/138 497/200/198\nf 418/140/138 87/139/137 919/871/851\nf 91/879/156 451/872/155 424/873/852\nf 451/872/155 60/874/56 920/182/180\nf 920/182/180 362/89/87 445/183/181\nf 107/85/83 493/84/82 468/875/853\nf 493/84/82 76/65/63 921/185/183\nf 921/185/183 406/169/167 490/186/184\nf 133/346/344 578/345/343 536/876/854\nf 102/256/254 474/86/84 578/345/343\nf 474/86/84 107/85/83 922/188/186\nf 122/932/251 491/877/250 486/878/855\nf 491/877/250 91/879/156 923/191/189\nf 923/191/189 424/873/852 492/192/190\nf 103/187/185 490/186/184 464/880/856\nf 72/867/847 402/830/818 490/186/184\nf 402/830/818 74/98/96 924/194/192\nf 99/216/214 494/215/213 460/199/197\nf 68/118/116 398/101/99 494/215/213\nf 398/101/99 69/100/98 925/881/857\nf 496/273/271 926/882/858 119/274/272\nf 88/177/175 419/104/102 496/273/271\nf 419/104/102 89/103/101 926/882/858\nf 502/218/216 927/883/859 116/219/217\nf 502/218/216 85/121/119 927/883/859\nf 927/883/859 426/834/822 505/203/201\nf 499/212/210 928/884/860 123/213/211\nf 92/116/114 414/110/108 499/212/210\nf 414/110/108 83/109/107 928/884/860\nf 113/893/867 519/885/861 485/886/862\nf 519/885/861 82/843/830 929/209/207\nf 929/209/207 423/837/825 501/210/208\nf 500/3126/226 930/887/863 115/888/227\nf 500/3126/226 84/889/129 930/887/863\nf 425/839/826 92/116/114 930/887/863\nf 514/248/246 931/890/864 98/249/247\nf 67/154/152 399/119/117 514/248/246\nf 399/119/117 68/118/116 931/890/864\nf 515/258/256 932/891/865 117/259/257\nf 86/167/165 416/122/120 515/258/256\nf 416/122/120 85/121/119 932/891/865\nf 422/123/121 933/892/866 81/124/122\nf 82/843/830 519/885/861 422/123/121\nf 519/885/861 113/893/867 933/892/866\nf 503/267/265 934/894/868 110/268/266\nf 79/171/169 407/128/126 503/267/265\nf 407/128/126 63/127/125 934/894/868\nf 124/204/202 505/203/201 477/895/869\nf 505/203/201 93/107/105 935/227/225\nf 935/227/225 415/845/832 500/228/226\nf 513/245/243 936/896/870 95/246/244\nf 64/152/150 408/134/132 513/245/243\nf 408/134/132 65/133/131 936/896/870\nf 507/899/259 937/897/871 101/898/260\nf 70/3124/162 400/848/834 507/899/259\nf 400/848/834 66/137/135 937/897/871\nf 504/224/222 938/900/872 94/225/223\nf 63/127/125 396/143/141 504/224/222\nf 396/143/141 78/142/140 938/900/872\nf 511/243/241 939/901/873 104/244/242\nf 73/149/147 404/146/144 511/243/241\nf 404/146/144 75/145/143 939/901/873\nf 105/955/194 506/902/193 465/903/874\nf 506/902/193 74/904/96 940/242/240\nf 940/242/240 403/853/838 511/243/241\nf 510/907/234 941/905/875 109/906/235\nf 78/3125/140 410/856/839 510/907/234\nf 410/856/839 64/152/150 941/905/875\nf 508/233/231 942/908/876 97/234/232\nf 66/137/135 409/155/153 508/233/231\nf 409/155/153 67/154/152 942/908/876\nf 111/211/209 501/210/208 483/909/877\nf 501/210/208 80/113/111 943/251/249\nf 943/251/249 421/859/841 491/252/250\nf 413/860/842 944/910/878 83/109/107\nf 81/124/122 512/223/221 413/860/842\nf 512/223/221 112/222/220 944/910/878\nf 495/913/195 945/911/879 100/912/196\nf 69/862/98 401/162/160 495/913/195\nf 401/162/160 71/161/159 945/911/879\nf 517/179/177 946/914/880 118/180/178\nf 87/139/137 417/168/166 517/179/177\nf 417/168/166 86/167/165 946/914/880\nf 509/230/228 947/915/881 96/231/229\nf 65/133/131 397/165/163 509/230/228\nf 397/165/163 70/164/162 947/915/881\nf 129/340/338 551/339/337 523/916/882\nf 98/249/247 461/217/215 551/339/337\nf 461/217/215 99/216/214 948/264/262\nf 498/174/172 949/917/883 108/175/173\nf 77/76/74 411/172/170 498/174/172\nf 411/172/170 79/171/169 949/917/883\nf 480/181/179 950/918/884 120/201/199\nf 118/180/178 579/919/885 480/181/179\nf 579/919/885 149/920/886 950/918/884\nf 518/239/237 951/921/887 106/240/238\nf 75/145/143 405/178/176 518/239/237\nf 405/178/176 88/177/175 951/921/887\nf 468/875/853 952/922/888 107/85/83\nf 103/187/185 555/923/889 468/875/853\nf 555/923/889 134/924/890 952/922/888\nf 152/288/286 557/287/285 544/925/891\nf 557/287/285 121/193/191 953/277/275\nf 953/277/275 482/869/849 561/278/276\nf 828/638/636 954/926/892 274/639/637\nf 301/1023/968 826/927/893 828/638/636\nf 826/927/893 180/928/894 954/926/892\nf 641/432/430 955/283/281 164/433/431\nf 300/711/709 829/643/641 641/432/430\nf 829/643/641 275/642/640 955/283/281\nf 153/3127/341 556/930/340 548/931/896\nf 556/930/340 122/932/251 956/286/284\nf 956/286/284 486/878/855 557/287/285\nf 134/924/890 555/923/889 526/933/897\nf 555/923/889 103/187/185 957/289/287\nf 957/289/287 464/880/856 569/290/288\nf 130/266/264 558/265/263 522/934/898\nf 99/216/214 460/199/197 558/265/263\nf 460/199/197 100/198/196 958/292/290\nf 150/362/360 560/361/359 543/935/899\nf 560/361/359 119/274/272 959/295/293\nf 959/295/293 481/202/200 552/272/270\nf 147/310/308 565/309/307 550/936/900\nf 565/309/307 116/219/217 960/296/294\nf 960/296/294 488/205/203 568/297/295\nf 562/306/304 961/937/901 154/307/305\nf 123/213/211 476/208/206 562/306/304\nf 476/208/206 114/207/205 961/937/901\nf 144/944/907 581/938/902 547/939/903\nf 581/938/902 113/893/867 962/302/300\nf 962/302/300 485/886/862 564/303/301\nf 146/1157/317 563/940/316 549/941/904\nf 563/940/316 115/888/227 963/305/303\nf 963/305/303 487/214/212 562/306/304\nf 148/353/351 577/352/350 540/942/905\nf 577/352/350 117/259/257 964/308/306\nf 964/308/306 478/220/218 565/309/307\nf 484/221/219 965/311/309 112/222/220\nf 484/221/219 113/893/867 965/311/309\nf 965/311/309 581/938/902 546/312/310\nf 141/359/357 566/358/356 531/945/908\nf 566/358/356 110/268/266 966/314/312\nf 966/314/312 469/226/224 567/315/313\nf 155/298/296 568/297/295 539/946/909\nf 568/297/295 124/204/202 967/317/315\nf 967/317/315 477/895/869 563/318/316\nf 126/337/335 576/336/334 532/947/910\nf 576/336/334 95/246/244 968/320/318\nf 968/320/318 470/232/230 572/321/319\nf 570/950/347 969/948/911 132/949/348\nf 101/898/260 462/235/233 570/950/347\nf 462/235/233 97/234/232 969/948/911\nf 135/334/332 574/333/331 528/951/912\nf 104/244/242 466/241/239 574/333/331\nf 466/241/239 106/240/238 970/326/324\nf 125/316/314 567/315/313 520/952/913\nf 567/315/313 94/225/223 971/329/327\nf 971/329/327 458/238/236 573/330/328\nf 136/3128/289 569/953/288 527/954/914\nf 569/953/288 105/955/194 972/332/330\nf 972/332/330 465/903/874 574/333/331\nf 140/2027/329 573/956/328 534/957/915\nf 573/956/328 109/906/235 973/335/333\nf 973/335/333 472/247/245 576/336/334\nf 128/324/322 571/323/321 533/958/916\nf 97/234/232 471/250/248 571/323/321\nf 471/250/248 98/249/247 974/338/336\nf 142/304/302 564/303/301 545/959/917\nf 564/303/301 111/211/209 975/341/339\nf 975/341/339 483/909/877 556/342/340\nf 475/254/252 976/960/918 114/207/205\nf 112/222/220 575/943/906 475/254/252\nf 575/943/906 143/313/311 976/960/918\nf 131/1174/292 559/961/291 525/347/345\nf 100/912/196 463/257/255 559/961/291\nf 463/257/255 102/256/254 977/962/919\nf 127/322/320 572/321/319 521/963/920\nf 572/321/319 96/231/229 978/348/346\nf 978/348/346 459/263/261 570/349/347\nf 149/920/886 579/919/885 541/964/921\nf 579/919/885 118/180/178 979/351/349\nf 979/351/349 479/260/258 577/352/350\nf 704/521/519 980/965/922 195/522/520\nf 248/584/582 753/578/576 704/521/519\nf 753/578/576 245/577/575 980/965/922\nf 139/279/277 561/278/276 535/966/923\nf 108/175/173 473/269/267 561/278/276\nf 981/357/355 473/269/267 566/358/356\nf 137/328/326 580/327/325 529/967/924\nf 580/327/325 106/240/238 982/360/358\nf 982/360/358 467/275/273 560/361/359\nf 830/645/643 983/968/925 272/646/644\nf 286/1012/959 627/969/926 830/645/643\nf 627/969/926 173/970/927 983/968/925\nf 798/425/423 984/971/928 160/426/424\nf 273/704/702 831/649/647 798/425/423\nf 831/649/647 281/648/646 984/971/928\nf 832/650/648 985/972/929 275/642/640\nf 277/1148/1090 618/973/930 832/650/648\nf 618/973/930 165/974/931 985/972/929\nf 620/380/378 986/975/932 183/381/379\nf 279/659/657 833/653/651 620/380/378\nf 833/653/651 283/652/650 986/975/932\nf 213/477/475 736/476/474 666/976/933\nf 736/476/474 239/504/502 987/373/371\nf 987/373/371 742/503/501 737/374/372\nf 618/973/930 988/978/935 165/974/931\nf 277/1148/1090 834/656/654 618/973/930\nf 834/656/654 291/655/653 988/978/935\nf 184/1130/428 803/979/427 610/980/936\nf 803/979/427 278/981/706 989/379/377\nf 989/379/377 835/982/937 620/380/378\nf 181/449/447 805/448/446 605/983/938\nf 805/448/446 280/724/722 990/382/380\nf 990/382/380 836/984/939 799/282/280\nf 806/366/364 991/985/940 161/367/365\nf 281/648/646 837/663/661 806/366/364\nf 837/663/661 282/662/660 991/985/940\nf 812/393/391 992/986/941 178/394/392\nf 287/671/669 838/666/664 812/393/391\nf 838/666/664 290/665/663 992/986/941\nf 809/396/394 993/987/942 185/397/395\nf 284/675/673 839/669/667 809/396/394\nf 839/669/667 276/668/666 993/987/942\nf 179/443/441 824/442/440 602/988/943\nf 824/442/440 299/718/716 994/392/390\nf 994/392/390 840/672/670 812/393/391\nf 177/1102/404 810/989/403 611/990/944\nf 810/989/403 285/991/682 995/395/393\nf 995/395/393 841/992/945 809/396/394\nf 297/678/676 842/677/675 638/993/946\nf 842/677/675 272/646/644 996/398/396\nf 996/398/396 797/365/363 608/399/397\nf 813/444/442 997/994/947 172/445/443\nf 288/720/718 843/681/679 813/444/442\nf 843/681/679 289/680/678 997/994/947\nf 186/387/385 815/386/384 601/995/948\nf 815/386/384 290/665/663 998/404/402\nf 998/404/402 844/996/949 810/405/403\nf 639/422/420 999/997/950 157/423/421\nf 298/701/699 845/687/685 639/422/420\nf 845/687/685 294/686/684 999/997/950\nf 163/3129/437 817/998/436 586/999/951\nf 817/998/436 292/1000/712 1000/410/408\nf 1000/410/408 846/1001/952 634/411/409\nf 630/401/399 1001/1002/953 156/402/400\nf 289/680/678 847/693/691 630/401/399\nf 847/693/691 295/692/690 1001/1002/953\nf 637/419/417 1002/1003/954 166/420/418\nf 296/698/696 848/696/694 637/419/417\nf 848/696/694 302/695/693 1002/1003/954\nf 632/1006/374 1003/1004/955 167/1005/375\nf 291/1165/653 849/699/697 632/1006/374\nf 849/699/697 296/698/696 1003/1004/955\nf 636/1009/411 1004/1007/956 171/1008/412\nf 295/1168/690 850/702/700 636/1009/411\nf 850/702/700 298/701/699 1004/1007/956\nf 634/411/409 1005/1010/957 159/412/410\nf 293/690/688 851/705/703 634/411/409\nf 851/705/703 273/704/702 1005/1010/957\nf 173/970/927 627/969/926 607/1011/958\nf 627/969/926 286/1012/959 1006/428/426\nf 1006/428/426 852/1013/960 803/429/427\nf 853/709/707 1007/1014/961 276/668/666\nf 297/678/676 638/993/946 853/709/707\nf 638/993/946 174/400/398 1007/1014/961\nf 623/1017/381 1008/1015/962 162/1016/382\nf 282/1173/660 854/712/710 623/1017/381\nf 854/712/710 300/711/709 1008/1015/962\nf 703/1020/965 1009/1018/963 235/1019/964\nf 179/443/441 602/988/943 703/1020/965\nf 602/988/943 178/394/392 1009/1018/963\nf 635/407/405 1010/1021/966 158/408/406\nf 294/686/684 855/715/713 635/407/405\nf 855/715/713 292/714/712 1010/1021/966\nf 180/928/894 826/927/893 603/1022/967\nf 826/927/893 301/1023/968 1011/441/439\nf 1011/441/439 856/1024/969 824/442/440\nf 624/370/368 1012/1025/970 170/371/369\nf 283/652/650 857/721/719 624/370/368\nf 857/721/719 288/720/718 1012/1025/970\nf 168/417/415 643/416/414 591/1026/971\nf 643/416/414 302/695/693 1013/447/445\nf 1013/447/445 858/1027/972 805/448/446\nf 734/1031/976 1014/1028/973 218/1029/974\nf 237/3130/3596 739/1030/975 734/1031/976\nf 739/1030/975 238/562/560 1014/1028/973\nf 791/625/623 1015/1032/977 265/480/478\nf 266/1078/1023 690/1033/978 791/625/623\nf 690/1033/978 204/1034/979 1015/1032/977\nf 757/512/510 1016/1035/980 191/513/511\nf 250/596/594 762/588/586 757/512/510\nf 762/588/586 251/587/585 1016/1035/980\nf 754/579/577 1017/1036/981 245/577/575\nf 246/1043/988 682/1037/982 754/579/577\nf 682/1037/982 196/1038/983 1017/1036/981\nf 774/607/605 1018/460/458 260/608/606\nf 183/381/379 606/372/370 774/607/605\nf 606/372/370 170/371/369 1018/460/458\nf 231/1052/997 719/1040/985 724/1041/986\nf 174/400/398 608/399/397 719/1040/985\nf 1019/463/461 608/399/397 714/464/462\nf 196/1038/983 682/1037/982 650/1042/987\nf 682/1037/982 246/1043/988 1020/466/464\nf 1020/466/464 755/1044/989 695/467/465\nf 219/3131/3597 773/1045/990 672/1046/991\nf 259/1129/1072 779/609/607 773/1045/990\nf 779/609/607 260/608/606 1021/469/467\nf 192/457/455 758/456/454 646/1047/992\nf 758/456/454 251/587/585 1022/472/470\nf 1022/472/470 763/1048/993 686/473/471\nf 212/451/449 676/450/448 667/1049/994\nf 676/450/448 238/562/560 1023/475/473\nf 1023/475/473 740/1050/995 736/476/474\nf 267/624/622 786/623/621 794/1051/996\nf 786/623/621 231/1052/997 1024/478/476\nf 1024/478/476 724/1041/986 784/479/477\nf 216/485/483 716/484/482 662/1053/998\nf 716/484/482 269/630/628 1025/481/479\nf 1025/481/479 792/1054/999 715/482/480\nf 717/1057/1002 1026/1055/1000 221/1056/1001\nf 270/1137/1079 793/631/629 717/1057/1002\nf 793/631/629 269/630/628 1026/1055/1000\nf 205/520/518 701/519/517 670/1058/1003\nf 701/519/517 267/624/622 1027/487/485\nf 1027/487/485 794/1051/996 677/455/453\nf 203/531/529 776/530/528 655/1059/1004\nf 776/530/528 262/620/618 1028/488/486\nf 1028/488/486 780/1060/1005 693/489/487\nf 217/611/609 728/610/608 663/1061/1006\nf 728/610/608 234/542/540 1029/491/489\nf 1029/491/489 731/1062/1007 730/492/490\nf 702/509/507 1030/1063/1008 188/510/508\nf 256/602/600 770/600/598 702/509/507\nf 770/600/598 255/599/597 1030/1063/1008\nf 760/1066/1011 1031/1064/1009 223/1065/1010\nf 253/1121/1064 764/594/592 760/1066/1011\nf 764/594/592 254/593/591 1031/1064/1009\nf 187/490/488 693/489/487 644/1067/1012\nf 693/489/487 263/615/613 1032/500/498\nf 1032/500/498 782/618/616 699/501/499\nf 604/280/278 1033/1068/1013 182/281/279\nf 180/928/894 705/1069/1014 604/280/278\nf 705/1069/1014 240/977/934 1033/1068/1013\nf 710/1072/1017 1034/1070/1015 222/1071/1016\nf 244/1110/1053 746/572/570 710/1072/1017\nf 746/572/570 242/571/569 1034/1070/1015\nf 712/1075/1020 1035/1073/1018 224/1074/1019\nf 258/1126/1069 771/603/601 712/1075/1020\nf 771/603/601 256/602/600 1035/1073/1018\nf 697/497/495 1036/1076/1021 190/498/496\nf 254/593/591 765/597/595 697/497/495\nf 765/597/595 250/596/594 1036/1076/1021\nf 204/1034/979 690/1033/978 669/1077/1022\nf 690/1033/978 266/1078/1023 1037/515/513\nf 1037/515/513 796/1079/1024 720/516/514\nf 207/483/481 715/482/480 661/1080/1025\nf 715/482/480 268/628/626 1038/518/516\nf 1038/518/516 795/1081/1026 701/519/517\nf 708/1084/1029 1039/1082/1027 220/1083/1028\nf 249/1117/1060 756/585/583 708/1084/1029\nf 756/585/583 248/584/582 1039/1082/1027\nf 189/495/493 698/494/492 645/1085/1030\nf 698/494/492 255/599/597 1040/524/522\nf 1040/524/522 772/1086/1031 768/525/523\nf 211/375/373 737/374/372 665/1087/1032\nf 737/374/372 240/977/934 1041/527/525\nf 1041/527/525 741/1088/1033 738/528/526\nf 687/573/571 1042/1089/1034 201/574/572\nf 687/573/571 261/462/460 1042/1089/1034\nf 1042/1089/1034 783/621/619 776/530/528\nf 369/815/805 1043/533/531 41/817/807\nf 10/1714/3595 309/1090/1035 369/815/805\nf 1043/533/531 309/1090/1035 376/534/532\nf 389/60/58 1044/1092/1036 40/61/59\nf 389/60/58 9/798/788 1044/1092/1036\nf 1044/1092/1036 319/1093/1037 395/83/81\nf 599/431/429 1045/1094/1038 176/390/388\nf 174/400/398 719/1040/985 599/431/429\nf 719/1040/985 231/1052/997 1045/1094/1038\nf 609/363/361 1046/1095/1039 175/364/362\nf 173/970/927 718/1096/1040 609/363/361\nf 718/1096/1040 230/1097/1041 1046/1095/1039\nf 691/435/433 1047/1098/1042 233/436/434\nf 178/394/392 612/388/386 691/435/433\nf 612/388/386 186/387/385 1047/1098/1042\nf 228/547/545 688/546/544 722/1099/1043\nf 185/397/395 600/391/389 688/546/544\nf 600/391/389 176/390/388 1048/544/542\nf 229/3132/3598 689/1100/1044 723/1101/1045\nf 689/1100/1044 177/1102/404 1049/545/543\nf 1049/545/543 611/990/944 688/546/544\nf 230/1097/1041 718/1096/1040 726/1103/1046\nf 718/1096/1040 173/970/927 1050/548/546\nf 1050/548/546 607/1011/958 707/549/547\nf 210/1781/3599 729/1104/1047 664/553/551\nf 235/1019/964 733/437/435 729/1104/1047\nf 733/437/435 233/436/434 1051/1105/1048\nf 234/542/540 694/541/539 731/1062/1007\nf 694/541/539 186/387/385 1052/554/552\nf 1052/554/552 601/995/948 709/555/553\nf 197/507/505 700/506/504 652/1106/1049\nf 242/571/569 747/565/563 700/506/504\nf 747/565/563 243/564/562 1053/557/555\nf 237/3130/3596 675/1107/1050 739/1030/975\nf 675/1107/1050 168/417/415 1054/560/558\nf 1054/560/558 591/1026/971 735/561/559\nf 743/570/568 1055/1108/1051 242/571/569\nf 166/420/418 590/418/416 743/570/568\nf 590/418/416 168/417/415 1055/1108/1051\nf 238/562/560 735/561/559 740/1050/995\nf 735/561/559 181/449/447 1056/566/564\nf 1056/566/564 605/983/938 679/505/503\nf 240/977/934 705/1069/1014 741/1088/1033\nf 705/1069/1014 180/928/894 1057/567/565\nf 1057/567/565 603/1022/967 713/568/566\nf 745/1111/1054 1058/1109/1052 244/1110/1053\nf 167/1005/375 589/421/419 745/1111/1054\nf 589/421/419 166/420/418 1058/1109/1052\nf 684/470/468 1059/1112/1055 214/471/469\nf 260/608/606 781/1039/984 684/470/468\nf 781/1039/984 261/462/460 1059/1112/1055\nf 751/583/581 1060/1113/1056 248/584/582\nf 164/433/431 598/929/895 751/583/581\nf 598/929/895 169/285/283 1060/1113/1056\nf 592/369/367 1061/1114/1057 169/285/283\nf 165/974/931 749/1115/1058 592/369/367\nf 749/1115/1058 246/1043/988 1061/1114/1057\nf 246/1043/988 749/1115/1058 755/1044/989\nf 165/974/931 588/378/376 749/1115/1058\nf 588/378/376 167/377/375 1062/580/578\nf 752/1118/1061 1063/1116/1059 249/1117/1060\nf 162/1016/382 587/434/432 752/1118/1061\nf 587/434/432 164/433/431 1063/1116/1059\nf 678/595/593 1064/1119/1062 250/596/594\nf 160/426/424 585/368/366 678/595/593\nf 585/368/366 161/367/365 1064/1119/1062\nf 251/587/585 685/586/584 763/1048/993\nf 161/367/365 584/385/383 685/586/584\nf 584/385/383 162/384/382 1065/589/587\nf 696/1122/1065 1066/1120/1063 253/1121/1064\nf 163/3129/437 586/999/951 696/1122/1065\nf 586/999/951 159/412/410 1066/1120/1063\nf 761/592/590 1067/1123/1066 254/593/591\nf 159/412/410 595/427/425 761/592/590\nf 595/427/425 160/426/424 1067/1123/1066\nf 767/601/599 1068/1124/1067 256/602/600\nf 157/423/421 594/409/407 767/601/599\nf 594/409/407 158/408/406 1068/1124/1067\nf 769/1127/1070 1069/1125/1068 258/1126/1069\nf 171/1008/412 596/424/422 769/1127/1070\nf 596/424/422 157/423/421 1069/1125/1068\nf 255/599/597 766/598/596 772/1086/1031\nf 158/408/406 583/440/438 766/598/596\nf 583/440/438 163/439/437 1070/604/602\nf 683/3133/3600 1071/1128/1071 259/1129/1072\nf 683/3133/3600 184/1130/428 1071/1128/1071\nf 1071/1128/1071 610/980/936 774/607/605\nf 727/551/549 1072/1131/1073 209/552/550\nf 233/436/434 732/543/541 727/551/549\nf 732/543/541 234/542/540 1072/1131/1073\nf 262/620/618 692/619/617 780/1060/1005\nf 172/445/443 593/403/401 692/619/617\nf 593/403/401 156/402/400 1073/613/611\nf 777/614/612 1074/1132/1074 263/615/613\nf 156/402/400 582/415/413 777/614/612\nf 582/415/413 171/414/412 1074/1132/1074\nf 775/461/459 1075/1133/1075 261/462/460\nf 170/371/369 597/446/444 775/461/459\nf 597/446/444 172/445/443 1075/1133/1075\nf 268/628/626 787/627/625 795/1081/1026\nf 787/627/625 227/538/536 1076/622/620\nf 1076/622/620 725/537/535 786/623/621\nf 721/540/538 1077/1134/1076 226/465/463\nf 230/1097/1041 785/1135/1077 721/540/538\nf 785/1135/1077 266/1078/1023 1077/1134/1076\nf 269/630/628 788/629/627 792/1054/999\nf 788/629/627 228/547/545 1078/626/624\nf 1078/626/624 722/1099/1043 787/627/625\nf 789/1138/1080 1079/1136/1078 270/1137/1079\nf 229/3132/3598 723/1101/1045 789/1138/1080\nf 723/1101/1045 228/547/545 1079/1136/1078\nf 266/1078/1023 785/1135/1077 796/1079/1024\nf 785/1135/1077 230/1097/1041 1080/632/630\nf 1080/632/630 726/1103/1046 790/633/631\nf 379/87/85 1081/635/633 59/88/86\nf 28/823/811 327/1139/1081 379/87/85\nf 1081/635/633 327/1139/1081 365/636/634\nf 542/270/268 1082/1140/1082 151/271/269\nf 149/920/886 642/1141/1083 542/270/268\nf 642/1141/1083 301/1023/968 1082/1140/1082\nf 825/710/708 1083/1142/1084 300/711/709\nf 825/710/708 133/346/344 1083/1142/1084\nf 1083/1142/1084 536/876/854 616/641/639\nf 144/944/907 547/939/903 613/1143/1085\nf 547/939/903 142/304/302 1084/644/642\nf 1084/644/642 811/1144/1086 830/645/643\nf 614/703/701 1085/1145/1087 273/704/702\nf 129/340/338 523/916/882 614/703/701\nf 523/916/882 130/266/264 1085/1145/1087\nf 530/276/274 1086/1146/1088 138/190/188\nf 134/924/890 802/1147/1089 530/276/274\nf 802/1147/1089 277/1148/1090 1086/1146/1088\nf 804/658/656 1087/1149/1091 279/659/657\nf 152/288/286 544/925/891 804/658/656\nf 1087/1149/1091 544/925/891 808/651/649\nf 802/1147/1089 1088/1150/1092 277/1148/1090\nf 802/1147/1089 134/924/890 1088/1150/1092\nf 1088/1150/1092 526/933/897 816/654/652\nf 278/981/706 619/1151/705 835/982/937\nf 153/3127/341 548/931/896 619/1151/705\nf 548/931/896 152/288/286 1089/657/655\nf 280/724/722 621/723/721 836/984/939\nf 621/723/721 150/362/360 1090/660/658\nf 1090/660/658 543/935/899 615/640/638\nf 622/647/645 1091/1152/1093 281/648/646\nf 130/266/264 522/934/898 622/647/645\nf 522/934/898 131/294/292 1091/1152/1093\nf 628/670/668 1092/1153/1094 287/671/669\nf 628/670/668 147/310/308 1092/1153/1094\nf 550/936/900 155/298/296 1092/1153/1094\nf 625/674/672 1093/1154/1095 284/675/673\nf 154/307/305 538/301/299 625/674/672\nf 538/301/299 145/300/298 1093/1154/1095\nf 299/718/716 640/717/715 840/672/670\nf 640/717/715 148/353/351 1094/1155/1096\nf 1094/1155/1096 540/942/905 628/670/668\nf 285/991/682 626/1156/681 841/992/945\nf 626/1156/681 146/1157/317 1095/673/671\nf 1095/673/671 549/941/904 625/674/672\nf 143/313/311 546/312/310 822/1158/1097\nf 546/312/310 144/944/907 1096/676/674\nf 1096/676/674 613/1143/1085 842/677/675\nf 629/719/717 1097/1159/1098 288/720/718\nf 141/359/357 531/945/908 629/719/717\nf 531/945/908 125/316/314 1097/1159/1098\nf 290/665/663 631/664/662 844/996/949\nf 631/664/662 155/298/296 1098/682/680\nf 1098/682/680 539/946/909 626/683/681\nf 298/701/699 823/700/698 845/687/685\nf 823/700/698 126/337/335 1099/1160/1099\nf 1099/1160/1099 532/947/910 819/685/683\nf 292/1000/712 633/1161/711 846/1001/952\nf 633/1161/711 132/949/348 1100/688/686\nf 1100/688/686 524/325/323 818/689/687\nf 814/679/677 1101/1162/1100 289/680/678\nf 125/316/314 520/952/913 814/679/677\nf 520/952/913 140/331/329 1101/1162/1100\nf 821/697/695 1102/1163/1101 296/698/696\nf 821/697/695 135/334/332 1102/1163/1101\nf 528/951/912 137/328/326 1102/1163/1101\nf 816/1166/652 1103/1164/1102 291/1165/653\nf 136/3128/289 527/954/914 816/1166/652\nf 527/954/914 135/334/332 1103/1164/1102\nf 820/1169/689 1104/1167/1103 295/1168/690\nf 140/2027/329 534/957/915 820/1169/689\nf 1104/1167/1103 534/957/915 823/700/698\nf 818/689/687 1105/1170/1104 293/690/688\nf 818/689/687 128/324/322 1105/1170/1104\nf 533/958/916 129/340/338 1105/1170/1104\nf 286/1012/959 811/1144/1086 852/1013/960\nf 811/1144/1086 142/304/302 1106/706/704\nf 1106/706/704 545/959/917 619/707/705\nf 537/344/342 1107/1171/1105 145/300/298\nf 143/313/311 822/1158/1097 537/344/342\nf 822/1158/1097 297/678/676 1107/1171/1105\nf 807/3134/659 1108/1172/1106 282/1173/660\nf 807/3134/659 131/1174/292 1108/1172/1106\nf 1108/1172/1106 525/347/345 825/710/708\nf 819/685/683 1109/1175/1107 294/686/684\nf 127/322/320 521/963/920 819/685/683\nf 521/963/920 132/350/348 1109/1175/1107\nf 301/1023/968 642/1141/1083 856/1024/969\nf 642/1141/1083 149/920/886 1110/716/714\nf 1110/716/714 541/964/921 640/717/715\nf 808/651/649 1111/1176/1108 283/652/650\nf 139/279/277 535/966/923 808/651/649\nf 535/966/923 141/359/357 1111/1176/1108\nf 302/695/693 827/694/692 858/1027/972\nf 827/694/692 137/328/326 1112/722/720\nf 1112/722/720 529/967/924 621/723/721\nf 1131/1404/1315 1256/1177/1109 1132/1179/1111\nf 1242/1394/1307 1134/1180/1112 1375/1182/1114\nf 1257/3135/1323 1127/1183/1115 1263/1185/1117\nf 1334/1396/1309 1399/1186/1118 1335/1188/1120\nf 1330/1510/1387 1349/1189/1121 1196/1191/1123\nf 1165/1445/1347 1292/1192/1124 1164/1194/1126\nf 1404/1381/1296 1407/1195/1127 1370/1197/1129\nf 1326/1515/1390 1343/1198/1130 1192/1200/1132\nf 1258/3136/1240 1126/1201/1133 1261/1203/1135\nf 1283/1354/1272 1287/1204/1136 1157/1206/1138\nf 1289/1241/1172 1160/1207/1139 1285/1209/1141\nf 1304/1279/1160 1308/1210/1142 1171/1212/1144\nf 1369/1228/1158 1161/1213/1145 1299/1215/1147\nf 1241/1443/1256 1240/1216/1148 1130/1218/1149\nf 1254/1508/1226 1253/1219/1150 1136/1221/1152\nf 1328/1441/1345 1341/1222/1153 1194/1224/1155\nf 1242/1471/1307 1403/1225/1156 1134/1227/1112\nf 1229/1350/1269 1369/1228/1158 1220/1229/1159\nf 1361/1468/1362 1304/1230/1160 1173/1232/1161\nf 1200/1484/1369 1201/1233/1162 1336/4/1164\nf 1161/1213/1145 1293/1234/1165 1166/1214/1146\nf 1178/1359/1232 1362/1236/1167 1296/1238/1169\nf 1136/1221/1152 1140/1220/1151 1270/1240/1171\nf 1149/1486/1371 1289/1241/1172 1151/1242/1173\nf 1134/1227/1112 1236/1226/1157 1260/1244/1175\nf 1172/1211/1143 1308/1210/1142 1177/1246/1177\nf 1114/3137/1274 1118/1247/1178 1245/1249/1180\nf 1257/3135/1323 1263/1185/1117 1138/1251/1182\nf 1133/1444/1346 1132/1179/1111 1255/1252/1183\nf 1142/1262/1193 1272/1253/1184 1143/1255/1186\nf 1406/1363/1278 1301/1256/1187 1372/1258/1189\nf 1291/1464/1302 1290/1259/1190 1163/1261/1192\nf 1143/1255/1186 1262/1178/1110 1142/1262/1193\nf 1241/1333/1256 1376/1263/1194 1119/1265/1196\nf 1365/1322/1245 1225/1266/1197 1300/1268/1199\nf 1298/1288/1217 1363/1269/1200 1219/1271/1202\nf 1262/1178/1110 1143/1255/1186 1255/1252/1183\nf 1141/1372/1287 1137/1273/1204 1275/1275/1206\nf 1150/1292/1221 1155/1276/1207 1293/1234/1165\nf 1245/1249/1180 1248/1248/1179 1125/1278/1209\nf 1229/1350/1269 1308/1210/1142 1225/1280/1197\nf 1348/1371/1286 1346/1281/1210 1195/1283/1212\nf 1154/1352/1271 1292/1192/1124 1155/1276/1207\nf 1218/1304/1230 1333/1284/1213 1358/1286/1215\nf 1226/2625/1223 1305/1287/1216 1219/1271/1202\nf 1156/1491/1330 1268/1289/1218 1266/1291/1220\nf 1149/1522/1371 1150/1292/1221 1289/1293/1172\nf 1163/1261/1192 1159/1260/1191 1367/1295/1222\nf 1227/1509/1386 1226/1296/1223 1306/1298/1225\nf 1124/1202/1134 1125/1299/1209 1261/1203/1135\nf 1228/1411/1321 1307/1301/1227 1224/1303/1229\nf 1356/1499/1381 1218/1304/1230 1395/1305/1231\nf 1391/1432/1339 1362/1306/1167 1297/1308/1233\nf 1291/1388/1302 1388/1309/1234 1152/1311/1236\nf 1287/1517/1136 1285/1209/1141 1158/1312/1137\nf 1223/1470/1201 1363/1313/1200 1221/1267/1198\nf 1188/1334/1257 1339/1314/1237 1197/1316/1239\nf 1130/1218/1149 1126/1217/1133 1259/1318/1241\nf 1247/1369/1284 1122/1319/1242 1244/1321/1244\nf 1160/1207/1139 1365/1322/1245 1162/1208/1140\nf 1280/1365/1280 1386/1323/1246 1282/1325/1248\nf 1207/1488/1373 1316/1326/1249 1208/1328/1251\nf 1177/1246/1177 1176/1329/1252 1315/1331/1254\nf 1325/1505/1384 1394/1187/1119 1178/1307/1232\nf 1130/1399/1149 1234/1332/1255 1241/1333/1256\nf 1338/3138/3601 1339/1314/1237 1190/1335/1258\nf 1276/1357/1273 1270/1336/1171 1146/1338/1260\nf 1124/1202/1134 1243/1339/1261 1125/1299/1209\nf 1202/1531/1395 1313/1341/1262 1203/1342/1263\nf 1391/1432/1339 1297/1308/1233 1390/1344/1265\nf 1323/3139/3602 1176/1329/1252 1327/1346/1267\nf 1269/1239/1170 1140/1220/1151 1273/1348/1268\nf 1225/1280/1197 1365/1349/1245 1229/1350/1269\nf 1155/1276/1207 1271/1351/1270 1154/1352/1271\nf 1289/1293/1172 1293/1234/1165 1160/1353/1139\nf 1290/1382/1190 1283/1354/1272 1159/1355/1191\nf 1135/1375/1290 1136/1356/1152 1276/1357/1273\nf 1113/3140/3603 1114/1358/1274 1243/1339/1261\nf 1317/3141/3604 1178/1359/1232 1393/1360/1275\nf 1353/1419/1329 1354/1361/1276 1401/1362/1277\nf 1282/1325/1248 1406/1363/1278 1280/1365/1280\nf 1382/1493/1376 1250/1366/1281 1383/1368/1283\nf 1133/1444/1346 1247/1369/1284 1132/1179/1111\nf 1369/1228/1158 1365/1349/1245 1161/1213/1145\nf 1212/1415/1325 1210/1370/1285 1348/1371/1286\nf 1259/1318/1241 1258/1317/1240 1141/1372/1287\nf 1173/1232/1161 1316/1326/1249 1169/1374/1289\nf 1261/1203/1135 1254/1300/1226 1135/1375/1290\nf 1397/1285/1214 1312/1376/1291 1396/1378/1293\nf 1301/3142/1187 1167/1379/1294 1404/1381/1296\nf 1283/1354/1272 1290/1382/1190 1146/1338/1260\nf 1403/1225/1156 1232/1384/1298 1376/1263/1194\nf 1246/1438/1343 1117/1385/1299 1247/1369/1284\nf 1274/1526/1205 1276/1357/1273 1148/1383/1297\nf 1314/1414/1324 1347/1386/1300 1210/1370/1285\nf 1388/1309/1234 1291/1388/1302 1279/1390/1303\nf 1292/1192/1124 1154/1352/1271 1288/1193/1125\nf 1375/1182/1114 1233/1392/1305 1242/1394/1307\nf 1355/3143/3605 1198/1395/1308 1402/1397/1310\nf 1259/1506/1241 1380/1398/1311 1130/1399/1149\nf 1386/1323/1246 1265/1400/1312 1387/1324/1247\nf 1258/3136/1240 1261/1203/1135 1137/1402/1204\nf 1132/1179/1111 1244/1321/1244 1131/1404/1315\nf 1306/1298/1225 1366/1297/1224 1174/1406/1317\nf 1167/1379/1294 1286/1407/1318 1281/1380/1295\nf 1301/3142/1187 1404/1381/1296 1222/1409/1188\nf 1302/1474/1363 1359/1410/1320 1223/1270/1201\nf 1307/1301/1227 1228/1411/1321 1299/1215/1147\nf 1249/1436/1341 1251/1412/1322 1380/1398/1311\nf 1140/1220/1151 1253/1219/1150 1138/1347/1182\nf 1344/1327/1250 1316/1326/1249 1171/1231/1144\nf 1321/1430/1338 1314/1414/1324 1212/1415/1325\nf 1317/3141/3604 1393/1360/1275 1215/1416/1326\nf 1401/1362/1277 1352/1417/1327 1353/1419/1329\nf 1267/1401/1313 1383/1368/1283 1156/1421/1330\nf 1342/1448/1350 1324/1422/1331 1206/1424/1333\nf 1271/1351/1270 1278/1425/1334 1144/1272/1203\nf 1238/1482/1314 1374/1426/1335 1131/1428/1315\nf 1332/1507/1385 1396/1378/1293 1193/1429/1337\nf 1168/1475/1365 1314/1414/1324 1170/1431/1316\nf 1372/1258/1189 1391/1432/1339 1371/1433/1340\nf 1145/1512/1389 1268/1420/1218 1252/1367/1282\nf 1275/1275/1206 1274/1274/1205 1152/1435/1236\nf 1159/1355/1191 1157/1206/1138 1305/1287/1216\nf 1251/1412/1322 1249/1436/1341 1381/1290/1219\nf 1239/1466/1361 1246/1438/1343 1127/1183/1115\nf 1113/3140/3603 1243/1339/1261 1115/1440/1344\nf 1341/1222/1153 1328/1441/1345 1205/1423/1332\nf 1119/3144/1196 1115/1442/1344 1241/1443/1256\nf 1278/1425/1334 1271/1351/1270 1150/1292/1221\nf 1127/1525/1115 1257/1413/1323 1129/1277/1208\nf 1246/1438/1343 1247/1369/1284 1128/1184/1116\nf 1166/1214/1146 1284/1235/1166 1165/1445/1347\nf 1362/1236/1167 1222/1409/1188 1389/1237/1168\nf 1353/1419/1329 1398/1446/1348 1354/1361/1276\nf 1171/1212/1144 1172/1211/1143 1342/1448/1350\nf 1398/1446/1348 1353/1419/1329 1322/1449/1351\nf 1367/1494/1222 1407/1195/1127 1163/1389/1192\nf 1329/1495/1377 1350/1450/1352 1170/1405/1316\nf 1372/1258/1189 1222/1257/1188 1391/1432/1339\nf 1405/1364/1279 1371/1433/1340 1303/1452/1228\nf 1198/1395/1308 1319/1453/1353 1334/1396/1309\nf 1179/1282/1211 1346/1281/1210 1180/1455/1355\nf 1176/1329/1252 1368/1456/1356 1175/1345/1266\nf 1371/1433/1340 1405/1364/1279 1372/1258/1189\nf 1392/1485/1370 1306/1458/1225 1294/1460/1358\nf 1164/1194/1126 1303/1302/1228 1165/1445/1347\nf 1318/1454/1354 1346/1281/1210 1211/1387/1301\nf 1351/1519/1392 1400/1447/1349 1191/1462/1360\nf 1138/1251/1182 1139/1250/1181 1273/1463/1268\nf 1152/1435/1236 1148/1434/1297 1291/1464/1302\nf 1168/1475/1365 1169/1465/1289 1314/1414/1324\nf 1116/3145/1364 1117/1385/1299 1239/1466/1361\nf 1275/1529/1206 1384/1437/1342 1141/1467/1287\nf 1368/1456/1356 1360/1245/1176 1228/1411/1321\nf 1263/1185/1117 1255/1252/1183 1139/1250/1181\nf 1221/1267/1198 1361/1468/1362 1223/1470/1201\nf 1232/1384/1298 1403/1225/1156 1123/1472/1306\nf 1388/1309/1234 1385/1408/1319 1264/1310/1235\nf 1239/1524/1361 1248/1248/1179 1116/1473/1364\nf 1359/1410/1320 1302/1474/1363 1168/1475/1365\nf 1134/1180/1112 1260/1476/1175 1237/1181/1113\nf 1282/1325/1248 1387/1324/1247 1167/1479/1294\nf 1396/1378/1293 1357/1480/1367 1397/1285/1214\nf 1120/3146/3606 1231/1481/1368 1238/1482/1314\nf 1280/1365/1280 1405/1364/1279 1164/1483/1126\nf 1323/3139/3602 1327/1346/1267 1200/1484/1369\nf 1378/1528/1394 1235/1427/1336 1379/1477/1366\nf 1370/1197/1129 1373/1196/1128 1389/1237/1168\nf 1151/1242/1173 1269/1239/1170 1149/1486/1371\nf 1385/1408/1319 1388/1309/1234 1281/1380/1295\nf 1208/1328/1251 1320/1487/1372 1207/1488/1373\nf 1264/1310/1235 1266/1291/1220 1384/1437/1342\nf 1389/1237/1168 1392/1485/1370 1296/1238/1169\nf 1360/1245/1176 1368/1456/1356 1177/1246/1177\nf 1120/3147/3606 1238/1403/1314 1121/1320/1243\nf 1355/3143/3605 1402/1397/1310 1217/1489/1374\nf 1319/1453/1353 1175/1490/1266 1399/1186/1118\nf 1363/1269/1200 1298/1288/1217 1158/1205/1137\nf 1286/1407/1318 1156/1491/1330 1385/1408/1319\nf 1169/1374/1289 1302/1469/1363 1173/1232/1161\nf 1308/1210/1142 1229/1350/1269 1360/1245/1176\nf 1331/1330/1253 1204/1492/1375 1315/1331/1254\nf 1165/1445/1347 1307/1301/1227 1166/1214/1146\nf 1237/1181/1113 1235/1427/1336 1375/1182/1114\nf 1383/1368/1283 1267/1401/1313 1382/1493/1376\nf 1227/1530/1386 1373/1196/1128 1367/1494/1222\nf 1350/1450/1352 1329/1495/1377 1214/1497/1379\nf 1395/1305/1231 1335/1188/1120 1356/1499/1381\nf 1387/1324/1247 1267/1401/1313 1286/1478/1318\nf 1377/1243/1174 1236/1226/1157 1380/1398/1311\nf 1309/1520/1393 1398/1446/1348 1185/1500/1382\nf 1313/1341/1262 1172/1211/1143 1315/1331/1254\nf 1402/1397/1310 1334/1396/1309 1395/1305/1231\nf 1312/1376/1291 1397/1285/1214 1189/1501/1383\nf 1175/1490/1266 1364/1502/1357 1295/1343/1264\nf 1382/1493/1376 1265/1400/1312 1272/1504/1184\nf 1394/1187/1119 1325/1505/1384 1335/1188/1120\nf 1380/1398/1311 1259/1506/1241 1249/1436/1341\nf 1154/1352/1271 1277/1254/1185 1153/1391/1304\nf 1236/1226/1157 1403/1225/1156 1234/1332/1255\nf 1217/1489/1374 1357/1480/1367 1332/1507/1385\nf 1253/1219/1150 1254/1508/1226 1129/1277/1208\nf 1367/1295/1222 1305/1294/1216 1227/1509/1386\nf 1214/1497/1379 1213/1496/1378 1330/1510/1387\nf 1184/1199/1131 1343/1198/1130 1182/1511/1388\nf 1363/1313/1200 1158/1312/1137 1300/1268/1199\nf 1260/1476/1175 1145/1512/1389 1379/1477/1366\nf 1374/1426/1335 1231/1481/1368 1375/1182/1114\nf 1378/1528/1394 1250/1366/1281 1256/1514/1109\nf 1250/1366/1281 1382/1493/1376 1142/1513/1193\nf 1204/1492/1375 1340/1315/1238 1203/1342/1263\nf 1221/1267/1198 1225/1266/1197 1361/1468/1362\nf 1209/1516/1391 1345/1373/1288 1207/1488/1373\nf 1343/1198/1130 1326/1515/1390 1207/1488/1373\nf 1285/1209/1141 1287/1517/1136 1151/1242/1173\nf 1126/1201/1133 1240/1439/1148 1124/1202/1134\nf 1296/1238/1169 1294/1460/1358 1393/1360/1275\nf 1215/1416/1326 1354/1361/1276 1351/1519/1392\nf 1311/1461/1359 1400/1447/1349 1309/1520/1393\nf 1357/1480/1367 1402/1397/1310 1358/1286/1215\nf 1406/1363/1278 1282/1325/1248 1301/1256/1187\nf 1288/1521/1125 1153/1503/1304 1386/1323/1246\nf 1386/1323/1246 1280/1365/1280 1288/1521/1125\nf 1273/1463/1268 1278/1425/1334 1149/1522/1371\nf 1359/1410/1320 1168/1475/1365 1366/1523/1224\nf 1248/1248/1179 1239/1524/1361 1129/1277/1208\nf 1137/1402/1204 1135/1375/1290 1274/1526/1205\nf 1281/1380/1295 1279/1390/1303 1404/1381/1296\nf 1352/1417/1327 1401/1362/1277 1174/1459/1317\nf 1377/1243/1174 1251/1412/1322 1260/1244/1175\nf 1143/1255/1186 1277/1254/1185 1144/1272/1203\nf 1399/1186/1118 1295/1343/1264 1394/1187/1119\nf 1250/1366/1281 1378/1528/1394 1252/1367/1282\nf 1131/1428/1315 1235/1427/1336 1256/1514/1109\nf 1364/1502/1357 1224/1451/1229 1390/1344/1265\nf 1368/1456/1356 1228/1411/1321 1364/1457/1357\nf 1268/1289/1218 1145/1527/1389 1381/1290/1219\nf 1152/1311/1236 1264/1310/1235 1275/1529/1206\nf 1270/1240/1171 1269/1239/1170 1147/1518/1259\nf 1306/1458/1225 1392/1485/1370 1227/1530/1386\nf 1146/1338/1260 1147/1337/1259 1283/1354/1272\nf 1338/3138/3601 1202/1531/1395 1339/1314/1237\nf 1128/1184/1116 1133/1444/1346 1263/1185/1117\nf 2622/1600/1749 1658/17/1396 2614/1532/1398\nf 2258/3148/3607 2266/1533/1399 1447/24/1401\nf 1640/752/3608 1967/26/1402 1431/28/1404\nf 1647/756/1794 1968/29/1405 1446/31/1407\nf 1969/759/1757 1662/32/1408 1641/34/1410\nf 2224/3149/3609 2232/1534/1411 1449/39/1413\nf 2130/1603/1765 1664/47/1414 2122/1535/1416\nf 2571/1604/1767 1666/51/1417 2563/1536/1419\nf 1649/788/1804 1973/56/1420 1452/58/1422\nf 2358/1607/1776 1665/22/1423 2349/1537/1425\nf 2656/1608/1778 1671/60/1426 2648/1538/1428\nf 2520/3150/3610 1697/75/1429 2513/1539/1431\nf 1978/810/3611 1673/78/1432 1638/80/1434\nf 2140/3151/3612 2147/1540/1435 1464/98/1437\nf 2623/1611/1791 1693/117/1438 2615/1541/1440\nf 2267/1612/1792 1701/120/1441 2259/1542/1443\nf 1985/844/1793 1702/126/1444 1680/128/1446\nf 1687/845/1825 1986/129/1447 1469/131/1449\nf 1987/846/1795 1705/132/1450 1681/134/1452\nf 2233/1613/1799 1714/138/1453 2225/1543/1455\nf 2123/1623/1831 2131/1544/1456 1463/149/1458\nf 2564/3152/3613 2572/1545/1459 1455/152/1461\nf 1689/859/1837 1991/156/1462 1475/158/1464\nf 2350/1847/2256 2359/1546/1465 1467/124/1467\nf 2657/1616/1805 1713/160/1468 2649/1547/1470\nf 2521/1617/1806 1739/174/1471 2514/1548/1473\nf 1996/870/1807 1695/176/1474 1678/178/1476\nf 2234/1618/1808 1754/179/1477 2226/1549/1479\nf 2141/1632/1848 2148/1550/1480 1487/196/1482\nf 2624/1621/1822 1735/215/1483 2616/1551/1485\nf 2268/1622/1823 1742/218/1486 2260/1552/1488\nf 2004/894/1824 1743/224/1489 1720/226/1491\nf 1727/895/1857 2005/227/1492 1492/229/1494\nf 2006/896/1826 1746/230/1495 1721/232/1497\nf 2124/1633/1862 2132/1553/1498 1486/244/1500\nf 2573/1624/1832 1750/245/1501 2565/1554/1503\nf 1729/909/1866 2010/251/1504 1498/253/1506\nf 2658/1629/1843 1753/255/1507 2650/1555/1509\nf 2617/3153/3614 2625/1556/1510 1504/266/1512\nf 2218/1630/1844 2212/1557/1513 1774/272/1515\nf 2013/921/1846 1737/273/1516 1718/275/1518\nf 2515/1673/1972 2522/1558/1519 1511/279/1521\nf 2219/1631/1847 2213/1559/1522 1926/282/1524\nf 2142/1674/1973 2149/1560/1525 1510/291/1527\nf 2261/1675/1977 2269/1561/1528 1516/310/1530\nf 1760/945/3615 2021/314/1531 1500/316/1533\nf 1767/946/1979 2022/317/1534 1515/319/1536\nf 1761/947/1980 2023/320/1537 1502/322/1539\nf 2125/3154/3616 2133/1562/1540 1509/334/1542\nf 2566/1677/1984 2574/1563/1543 1501/337/1545\nf 1769/959/1988 2027/341/1546 1521/343/1548\nf 2651/1682/1992 2659/1564/1549 1507/346/1551\nf 1758/967/1993 2031/360/1552 1519/362/1554\nf 2032/968/1871 1810/363/1555 1924/365/1557\nf 2626/1637/1872 1930/366/1558 2618/1565/1560\nf 2523/1638/1873 1821/370/1561 2516/1566/1563\nf 2229/3155/3617 2237/1567/1564 1561/375/1566\nf 2150/1640/1876 1826/376/1567 2143/1568/1569\nf 2262/3156/3618 2270/1569/1570 1539/394/1572\nf 2038/994/1883 1825/401/1573 1800/403/1575\nf 1807/995/1946 2039/404/1576 1538/406/1578\nf 2040/997/1885 1828/407/1579 1801/409/1581\nf 2134/1642/1891 1830/419/1582 2126/1570/1584\nf 2575/1643/1892 1832/422/1585 2567/1571/1587\nf 1809/1011/1944 2044/428/1588 1544/430/1590\nf 2660/1648/1904 1834/432/1591 2652/1572/1593\nf 2271/1649/1905 1861/435/1594 2264/1573/1596\nf 1798/1026/1947 2047/447/1597 1542/449/1599\nf 2048/1028/1907 1853/450/1600 1838/452/1602\nf 2049/1032/1908 1850/453/1603 1854/455/1605\nf 2627/1650/1909 1902/456/1606 2619/1574/1608\nf 2518/1663/1949 2524/1575/1609 1590/462/1611\nf 2144/3157/3619 2151/1576/1612 1554/468/1614\nf 1840/1059/3620 2054/488/1615 1546/490/1617\nf 1847/1061/3621 2055/491/1618 1558/493/1620\nf 2056/1063/1918 1865/494/1621 1841/496/1623\nf 2221/1652/1924 2206/1577/1624 1856/505/1626\nf 2135/1653/1925 1866/506/1627 2127/1578/1629\nf 2576/1654/1926 1868/509/1630 2568/1579/1632\nf 1849/1077/3622 2059/515/1633 1564/517/1635\nf 2354/3158/3623 2363/1580/1636 1556/520/1638\nf 2653/3159/3624 2661/1581/1639 1551/522/1641\nf 2139/1610/1782 2152/1582/1642 1441/535/1644\nf 2064/1095/1940 1880/540/1645 1876/464/1647\nf 1883/1103/1966 2067/548/1648 1572/550/1650\nf 2272/1661/1945 1884/551/1651 2263/1583/1653\nf 1887/1062/1917 2068/554/1654 1575/556/1656\nf 1892/1030/3625 2070/560/1657 1576/562/1659\nf 2136/1662/1948 1893/570/1660 2128/1584/1662\nf 2525/3160/3626 1859/573/1663 2517/1585/1665\nf 2145/1651/1910 2153/1586/1666 1581/582/1668\nf 2662/1664/1950 1897/583/1669 2654/1587/1671\nf 2628/1665/1951 1858/586/1672 2620/1588/1674\nf 2077/1124/1958 1906/598/1675 1909/600/1677\nf 2577/1668/1959 1907/601/1678 2569/1589/1680\nf 1913/1060/1916 2080/613/1681 1591/615/1683\nf 2356/1657/1933 2365/1590/1684 1593/624/1686\nf 2083/1134/1962 1920/625/1687 1916/479/1689\nf 1923/1079/1932 2085/632/1690 1595/634/1692\nf 2512/1609/1779 2526/1591/1693 1442/637/1695\nf 2222/1671/1969 2207/1592/1696 1815/640/1698\nf 2088/644/1970 1948/645/1699 1813/1143/1701\nf 2629/1672/1971 1819/647/1702 2621/1593/1704\nf 2519/3161/3627 2527/1594/1705 1604/652/1707\nf 2154/3162/3628 1937/654/1708 2146/1595/1710\nf 2265/1641/1882 2273/1596/1711 1607/671/1713\nf 2094/1159/1978 1936/679/1714 1954/681/1716\nf 1955/996/1884 2095/682/1717 1606/684/1719\nf 1956/687/3629 2096/1160/1720 1611/686/1722\nf 2137/1676/1983 1941/697/1723 2129/1597/1725\nf 2570/3163/3630 2578/1598/1726 1615/701/1728\nf 1960/1013/1898 2100/706/1729 1600/708/1731\nf 2663/3164/3631 1945/710/1732 2655/1599/1734\nf 1963/1027/1906 2103/722/1735 1601/724/1737\nf 1654/12/1742 1965/729/1738 1453/13/1740\nf 1430/736/3632 1629/730/1741 1654/12/1742\nf 1445/748/1790 1674/737/1743 1650/738/1745\nf 1674/737/1743 1422/739/1746 1966/14/1744\nf 2613/3165/3633 1412/745/1748 2622/1600/1749\nf 2266/1533/1399 2257/1601/1750 1657/23/1400\nf 1967/26/1402 1623/754/1752 1659/27/1403\nf 1968/29/1405 1630/757/1754 1655/30/1406\nf 1624/761/3634 1410/762/1756 1969/759/1757\nf 1437/3121/3635 1661/763/1758 1636/764/1760\nf 1414/3122/3636 1619/765/1761 1661/763/1758\nf 2232/1534/1411 2223/1602/1762 1672/38/1412\nf 2121/3166/3637 1417/775/1764 2130/1603/1765\nf 2562/3167/3638 1409/760/1766 2571/1604/1767\nf 2588/1606/1772 1972/786/1768 2582/1605/1770\nf 2581/3168/3639 1625/787/1771 2588/1606/1772\nf 1973/56/1420 1632/789/1773 1667/57/1421\nf 2348/3169/3640 1421/793/1775 2358/1607/1776\nf 2647/3170/3641 1415/798/1777 2656/1608/1778\nf 2520/3150/3610 2512/1609/1779 1697/75/1429\nf 1978/810/3611 1621/811/1780 1673/78/1432\nf 2147/1540/1435 2139/1610/1782 1703/97/1436\nf 1698/115/1786 1983/835/1783 1476/116/1785\nf 1453/13/1740 1646/10/1739 1698/115/1786\nf 1468/843/1821 1715/836/1787 1690/837/1789\nf 1715/836/1787 1445/748/1790 1984/111/1788\nf 2614/1532/1398 1435/18/1397 2623/1611/1791\nf 2258/3148/3607 1447/24/1401 2267/1612/1792\nf 1640/752/3608 1431/28/1404 1985/844/1793\nf 1986/129/1447 1647/756/1794 1700/130/1448\nf 1641/34/1410 1433/33/1409 1987/846/1795\nf 1460/3124/3642 1704/847/1796 1676/848/1798\nf 1437/3121/3635 1636/764/1760 1704/847/1796\nf 2224/3149/3609 1449/39/1413 2233/1613/1799\nf 2131/1544/1456 2122/1535/1416 1707/148/1457\nf 2563/1536/1419 1432/52/1418 2572/1545/1459\nf 2589/1615/1803 1990/858/1800 2583/1614/1802\nf 2582/1605/1770 1642/55/1769 2589/1615/1803\nf 1991/156/1462 1649/788/1804 1710/157/1463\nf 2359/1546/1465 2349/1537/1425 1708/125/1466\nf 2648/1538/1428 1438/61/1427 2657/1616/1805\nf 2513/1539/1431 1465/76/1430 2521/1617/1806\nf 1638/80/1434 1450/79/1433 1996/870/1807\nf 2225/1543/1455 1472/139/1454 2234/1618/1808\nf 2177/1731/2078 2183/1619/1809 1719/875/1811\nf 2183/1619/1809 2176/1620/1812 1998/185/1810\nf 2140/3151/3612 1464/98/1437 2148/1550/1480\nf 1740/212/1817 2002/884/1814 1499/213/1816\nf 1476/116/1785 1686/110/1784 1740/212/1817\nf 1491/893/1856 1755/885/1818 1730/886/1820\nf 1755/885/1818 1468/843/1821 2003/209/1819\nf 2615/1541/1440 1458/118/1439 2624/1621/1822\nf 2259/1542/1443 1470/121/1442 2268/1622/1823\nf 1680/128/1446 1454/127/1445 2004/894/1824\nf 2005/227/1492 1687/845/1825 1741/228/1493\nf 1681/134/1452 1456/133/1451 2006/896/1826\nf 1745/899/1830 2007/897/1827 1483/898/1829\nf 1460/3124/3642 1676/848/1798 1745/899/1830\nf 2132/1553/1498 2123/1623/1831 1748/243/1499\nf 2564/3152/3613 1455/152/1461 2573/1624/1832\nf 2590/1626/1836 2009/908/1833 2584/1625/1835\nf 2583/1614/1802 1682/155/1801 2590/1626/1836\nf 2010/251/1504 1689/859/1837 1734/252/1505\nf 2343/1840/2244 2334/1627/1838 1685/860/1840\nf 2334/1627/1838 2344/1628/1841 2011/910/1839\nf 2649/1547/1470 1461/161/1469 2658/1629/1843\nf 2616/1551/1485 1481/216/1484 2625/1556/1510\nf 2211/1755/2122 2218/1630/1844 1497/201/1845\nf 1678/178/1476 1473/177/1475 2013/921/1846\nf 2514/1548/1473 1488/175/1472 2522/1558/1519\nf 2207/1592/1696 2219/1631/1847 1598/639/1697\nf 2149/1560/1525 2141/1632/1848 1785/290/1526\nf 1781/306/1852 2019/937/1849 1522/307/1851\nf 1499/213/1816 1726/208/1815 1781/306/1852\nf 1795/938/3643 2020/302/1853 1514/944/1855\nf 1795/938/3643 1491/893/1856 2020/302/1853\nf 2269/1561/1528 2260/1552/1488 1783/309/1529\nf 2021/314/1531 1720/226/1491 1784/315/1532\nf 2022/317/1534 1727/895/1857 1782/318/1535\nf 2023/320/1537 1721/232/1497 1787/321/1538\nf 1786/950/1861 2024/948/1858 1506/949/1860\nf 1483/898/1829 1716/235/1828 1786/950/1861\nf 2133/1562/1540 2124/1633/1862 1789/333/1541\nf 2565/1554/1503 1478/246/1502 2574/1563/1543\nf 2585/1679/1987 2591/1634/1863 1762/958/1865\nf 2584/1625/1835 1722/250/1834 2591/1634/1863\nf 2027/341/1546 1729/909/1866 1776/342/1547\nf 2344/1628/1841 2335/1635/1867 1725/254/1842\nf 2335/1635/1867 2345/1636/1869 2028/960/1868\nf 2650/1555/1509 1484/256/1508 2659/1564/1549\nf 2031/360/1552 1718/275/1518 1779/361/1553\nf 1948/645/1699 2032/968/1871 1596/646/1700\nf 2621/1593/1704 1602/648/1703 2626/1637/1872\nf 2519/3161/3627 1604/652/1707 2523/1638/1873\nf 2237/1567/1564 2230/1639/1874 1891/374/1565\nf 2146/1595/1710 1609/655/1709 2150/1640/1876\nf 1933/396/1881 2037/987/1877 1545/397/1879\nf 1605/675/1975 1953/669/1880 1933/396/1881\nf 2270/1569/1570 2265/1641/1882 1935/393/1571\nf 1954/681/1716 1608/680/1715 2038/994/1883\nf 2039/404/1576 1955/996/1884 1934/405/1577\nf 1956/687/3629 1611/686/1722 2040/997/1885\nf 1529/3129/3644 1938/998/1886 1796/999/1888\nf 1938/998/1886 1610/1000/1889 2041/410/1887\nf 2129/1597/1725 1613/698/1724 2134/1642/1891\nf 2570/3163/3630 1615/701/1728 2575/1643/1892\nf 2592/1645/1897 2043/1010/1893 2586/1644/1895\nf 2580/1678/1986 1959/705/1896 2592/1645/1897\nf 2044/428/1588 1960/1013/1898 1928/429/1589\nf 2331/1681/1991 2336/1646/1899 1961/709/1901\nf 2336/1646/1899 2346/1647/1902 2045/1014/1900\nf 2655/1599/1734 1617/711/1733 2660/1648/1904\nf 2262/3156/3618 1539/394/1572 2271/1649/1905\nf 2047/447/1597 1963/1027/1906 1929/448/1598\nf 1892/1030/3625 1576/562/1659 2048/1028/1907\nf 1920/625/1687 2049/1032/1908 1592/480/1688\nf 2620/1588/1674 1585/587/1673 2627/1650/1909\nf 2516/1566/1563 1534/371/1562 2524/1575/1609\nf 2151/1576/1612 2145/1651/1910 1863/467/1613\nf 1565/485/3645 1877/484/1911 1846/1053/1913\nf 1877/484/1911 1594/630/1914 2053/481/1912\nf 2054/488/1615 1913/1060/1916 1862/489/1616\nf 2055/491/1618 1887/1062/1917 1886/492/1619\nf 1909/600/1677 1587/599/1676 2056/1063/1918\nf 1903/1066/1923 2057/1064/1919 1567/1065/1921\nf 1586/1121/1953 1904/594/1922 1903/1066/1923\nf 2213/1559/1522 2221/1652/1924 1543/281/1523\nf 2128/1584/1662 1579/571/1661 2135/1653/1925\nf 2569/1589/1680 1588/602/1679 2576/1654/1926\nf 2593/1656/1931 2058/1076/1927 2587/1655/1929\nf 2579/1666/1956 1905/597/1930 2593/1656/1931\nf 2059/515/1633 1923/1079/1932 1879/516/1634\nf 2363/1580/1636 2356/1657/1933 1867/519/1637\nf 2654/1587/1671 1582/584/1670 2661/1581/1639\nf 2152/1582/1642 2138/1658/1934 1660/534/1643\nf 2346/1647/1902 2338/1659/1936 1805/431/1903\nf 2338/1659/1936 2329/1660/1938 2063/1094/1937\nf 1810/363/1555 2064/1095/1940 1537/364/1556\nf 1570/547/1965 1860/546/1941 1881/1099/1943\nf 1545/397/1879 1806/391/1878 1860/546/1941\nf 2067/548/1648 1809/1011/1944 1872/549/1649\nf 2264/1573/1596 1573/436/1595 2272/1661/1945\nf 2068/554/1654 1807/995/1946 1874/555/1655\nf 2070/560/1657 1798/1026/1947 1889/561/1658\nf 2126/1570/1584 1532/420/1583 2136/1662/1948\nf 2525/3160/3626 2518/1663/1949 1859/573/1663\nf 2143/1568/1569 1533/377/1568 2153/1586/1666\nf 2652/1572/1593 1530/433/1592 2662/1664/1950\nf 2618/1565/1560 1527/367/1559 2628/1665/1951\nf 1864/1122/1954 2075/1120/1952 1586/1121/1953\nf 1529/3129/3644 1796/999/1888 1864/1122/1954\nf 2594/1667/1957 2076/1123/1955 2579/1666/1956\nf 2586/1644/1895 1802/427/1894 2594/1667/1957\nf 1801/409/1581 1525/408/1580 2077/1124/1958\nf 2567/1571/1587 1524/423/1586 2577/1668/1959\nf 1800/403/1575 1523/402/1574 2080/613/1681\nf 2365/1590/1684 2355/1669/1960 1917/623/1685\nf 1880/540/1645 2083/1134/1962 1569/465/1646\nf 1594/630/1914 1918/629/1963 1921/1054/1915\nf 1918/629/1963 1570/547/1965 2084/626/1964\nf 2085/632/1690 1883/1103/1966 1919/633/1691\nf 2526/1591/1693 2511/1670/1967 1653/636/1694\nf 2212/1557/1513 2222/1671/1969 1520/271/1514\nf 1514/944/1855 1770/939/1854 1813/1143/1701\nf 2617/3153/3614 1504/266/1512 2629/1672/1971\nf 2527/1594/1705 2515/1673/1972 1932/651/1706\nf 2154/3162/3628 2142/1674/1973 1937/654/1708\nf 1822/674/1976 2093/1154/1974 1605/675/1975\nf 1522/307/1851 1766/301/1850 1822/674/1976\nf 2273/1596/1711 2261/1675/1977 1824/670/1712\nf 1760/945/3615 1500/316/1533 2094/1159/1978\nf 2095/682/1717 1767/946/1979 1823/683/1718\nf 2096/1160/1720 1761/947/1980 1939/685/1721\nf 1610/1000/1889 1827/1161/1981 1957/1001/1890\nf 1827/1161/1981 1506/949/1860 2097/688/1982\nf 2125/3154/3616 1509/334/1542 2137/1676/1983\nf 2578/1598/1726 2566/1677/1984 1943/700/1727\nf 2595/3171/3646 2099/1170/1985 2580/1678/1986\nf 2595/3171/3646 2585/1679/1987 2099/1170/1985\nf 2100/706/1729 1769/959/1988 1817/707/1730\nf 2345/1636/1869 2340/1680/1989 1765/344/1870\nf 2340/1680/1989 2331/1681/1991 2101/1171/1990\nf 2663/3164/3631 2651/1682/1992 1945/710/1732\nf 2103/722/1735 1758/967/1993 1818/723/1736\nf 1971/774/2019 2113/1683/1994 1637/46/1996\nf 1989/851/3647 2114/1685/1997 1677/146/1999\nf 2008/901/2020 2115/1687/2000 1717/241/2002\nf 1757/951/3648 2025/326/2003 2108/1690/2005\nf 2042/1003/2021 2117/1691/2006 1797/418/2008\nf 1837/1106/3649 2069/557/2009 2110/1694/2011\nf 2071/1108/2022 2119/1695/2012 1894/565/2014\nf 2098/1163/2023 2120/1697/2015 1958/696/2017\nf 1620/776/3650 2104/1699/2018 1971/774/2019\nf 1989/851/3647 1637/46/1996 2114/1685/1997\nf 1677/146/1999 2106/1686/1998 2008/901/2020\nf 2025/326/2003 1717/241/2002 2116/1689/2004\nf 1958/696/2017 2112/1698/2016 2042/1003/2021\nf 1894/565/2014 2111/1696/2013 2069/557/2009\nf 1797/418/2008 2109/1692/2007 2071/1108/2022\nf 1757/951/3648 2108/1690/2005 2098/1163/2023\nf 1462/867/3651 1699/829/2024 2157/1701/2026\nf 1699/829/2024 1439/817/2027 2164/1700/2025\nf 1485/187/2035 1733/186/2029 2158/1704/2031\nf 1462/867/3651 2157/1701/2026 1733/186/2029\nf 1508/924/2054 1775/923/2032 2159/1706/2034\nf 1775/923/2032 1485/187/2035 2166/1705/2033\nf 1816/973/2040 2167/1707/2036 1531/974/2038\nf 1599/1148/2053 2163/1709/2039 1816/973/2040\nf 1552/1038/3652 1857/1037/2041 2161/1711/2043\nf 1857/1037/2041 1580/1043/2044 2168/1710/2042\nf 1439/817/2027 1656/815/2046 2156/1702/2028\nf 1656/815/2046 1416/1714/2048 2169/1713/2047\nf 1580/1043/2044 1895/1115/2050 2162/1712/2045\nf 1531/974/2038 2160/1708/2037 1895/1115/2050\nf 1927/1147/3653 2171/1717/2052 1599/1148/2053\nf 1927/1147/3653 1508/924/2054 2171/1717/2052\nf 2181/1730/2075 1979/813/2055 2175/1718/2057\nf 1993/866/2076 1679/169/1813 2182/1719/2058\nf 2014/922/2077 1759/276/2059 2184/1721/2061\nf 2033/972/2079 1799/369/2062 2185/1723/2064\nf 2050/1036/2080 1839/459/2065 2186/1725/2067\nf 2074/1114/2081 1900/579/2068 2187/1727/2070\nf 2089/1146/2082 1949/650/2071 2188/1729/2073\nf 2174/3172/3654 1622/816/2074 2181/1730/2075\nf 1639/81/2056 1993/866/2076 2175/1718/2057\nf 1719/875/1811 2014/922/2077 2177/1731/2078\nf 1949/650/2071 2033/972/2079 2173/1728/2072\nf 1900/579/2068 2050/1036/2080 2172/1726/2069\nf 1799/369/2062 2074/1114/2081 2179/1722/2063\nf 1759/276/2059 2089/1146/2082 2178/1720/2060\nf 1684/799/3655 1975/63/2083 2191/1733/2085\nf 1724/86/3656 1980/818/2086 2192/1735/2088\nf 1764/876/2112 1999/188/2089 2193/1737/2091\nf 2016/283/2107 2201/1738/2092 1804/929/2094\nf 2029/965/2108 2202/1740/2095 1844/356/2097\nf 2062/1092/2110 2203/1742/2098 1644/536/2100\nf 2073/1113/2111 2204/1744/2101 1899/578/2103\nf 2087/1142/3657 2205/1746/2104 1947/643/2106\nf 1975/63/2083 1644/536/2100 2198/1732/2084\nf 1684/799/3655 2191/1733/2085 1980/818/2086\nf 1724/86/3656 2192/1735/2088 1999/188/2089\nf 1947/643/2106 2197/1747/2105 2016/283/2107\nf 1899/578/2103 2196/1745/2102 2029/965/2108\nf 1627/1093/3658 2189/1748/2109 2062/1092/2110\nf 1804/929/2094 2194/1739/2093 2073/1113/2111\nf 2087/1142/3657 1764/876/2112 2205/1746/2104\nf 1451/95/3659 1675/94/2113 2209/1750/2115\nf 1675/94/2113 1428/768/2116 2215/1749/2114\nf 1474/103/3660 1696/102/2118 2210/1753/2120\nf 1451/95/3659 2209/1750/2115 1696/102/2118\nf 1738/200/2123 2217/1754/2121 1497/201/1845\nf 1474/103/3660 2210/1753/2120 1738/200/2123\nf 1563/477/3661 1890/476/2124 2214/1757/2126\nf 1890/476/2124 1577/504/1625 2220/1756/2125\nf 1495/180/1478 1794/919/2127 2226/1549/1479\nf 1794/919/2127 1518/920/2129 2235/1758/2128\nf 1618/1023/2140 1946/927/2131 2231/1761/2133\nf 1946/927/2131 1541/928/2134 2236/1760/2132\nf 1541/928/2134 1871/1069/2136 2228/1762/2135\nf 1871/1069/2136 1578/977/1875 2238/1763/2137\nf 1518/920/2129 1835/1141/2138 2227/1759/2130\nf 1835/1141/2138 1618/1023/2140 2239/1764/2139\nf 1448/70/3662 1669/69/2141 2243/1766/2143\nf 1669/69/2141 1425/750/2144 2249/1765/2142\nf 1471/167/3663 1712/166/2146 2244/1769/2148\nf 1448/70/3662 2243/1766/2143 1712/166/2146\nf 1752/258/2152 2251/1770/2149 1494/259/2151\nf 1471/167/3663 2244/1769/2148 1752/258/2152\nf 1517/353/2171 1792/352/2153 2246/1773/2155\nf 1792/352/2153 1494/259/2151 2252/1772/2154\nf 1540/443/3664 1944/442/2156 2247/1775/2158\nf 1944/442/2156 1616/718/2159 2253/1774/2157\nf 1869/1020/2164 2254/1777/2161 1574/1019/2163\nf 1540/443/3664 2247/1775/2158 1869/1020/2164\nf 1885/1104/2168 2255/1779/2165 1560/1781/2167\nf 1574/1019/2163 2240/1778/2162 1885/1104/2168\nf 1616/718/2159 1833/717/2169 2241/1776/2160\nf 1833/717/2169 1517/353/2171 2256/1782/2170\nf 1652/725/2198 1964/5/2172 2275/1784/2174\nf 1692/834/2199 1982/105/2175 2276/1786/2177\nf 2001/883/3665 2285/1787/2178 1732/205/2180\nf 1772/936/3666 2018/296/2181 2278/1790/2183\nf 1812/388/3667 2036/986/2184 2279/1792/2186\nf 2065/1098/2200 2288/1793/2187 1888/543/2189\nf 1852/612/3668 2079/1131/2190 2280/1796/2192\nf 2092/1153/2201 2290/1797/2193 1952/666/2195\nf 1964/5/2172 1635/727/2196 2283/1783/2173\nf 1982/105/2175 1652/725/2198 2284/1785/2176\nf 2001/883/3665 1692/834/2199 2285/1787/2178\nf 2018/296/2181 1732/205/2180 2286/1789/2182\nf 2036/986/2184 1952/666/2195 2287/1791/2185\nf 1812/388/3667 2279/1792/2186 2065/1098/2200\nf 2079/1131/2190 1888/543/2189 2289/1795/2191\nf 1772/936/3666 2278/1790/2183 2092/1153/2201\nf 2323/1808/2210 2313/1800/2202 2295/1802/2204\nf 2313/1800/2202 2322/1803/2205 2301/1801/2203\nf 2324/1832/2234 2314/1805/2207 2296/1807/2209\nf 2314/1805/2207 2323/1808/2210 2302/1806/2208\nf 2328/3173/3669 2318/1809/2211 2300/1811/2213\nf 2318/1809/2211 2311/1812/2214 2306/1810/2212\nf 2311/1812/2214 2320/1814/2216 2292/1813/2215\nf 2320/1814/2216 2310/1816/2218 2308/1815/2217\nf 2303/1831/2233 2297/1818/2220 2315/1820/2222\nf 2304/1833/2235 2298/1821/2223 2316/1823/2225\nf 2305/1834/2236 2299/1824/2226 2317/1826/2228\nf 2307/1835/2237 2291/1817/2219 2319/1827/2229\nf 2309/1836/2238 2293/1828/2230 2321/1830/2232\nf 2296/1807/2209 2303/1831/2233 2324/1832/2234\nf 2297/1818/2220 2304/1833/2235 2325/1819/2221\nf 2293/1828/2230 2305/1834/2236 2312/1829/2231\nf 2299/1824/2226 2307/1835/2237 2327/1825/2227\nf 2298/1821/2223 2309/1836/2238 2326/1822/2224\nf 1974/791/3670 2332/1837/2239 1645/59/2241\nf 1685/860/1840 1992/159/2242 2343/1840/2244\nf 1845/1080/3671 2060/518/2245 2347/1842/2247\nf 1922/1081/2253 2082/622/2248 2330/1844/2250\nf 1974/791/3670 1628/792/2251 2332/1837/2239\nf 1992/159/2242 1645/59/2241 2333/1839/2243\nf 2060/518/2245 1922/1081/2253 2337/1841/2246\nf 2082/622/2248 1882/537/1939 2339/1843/2249\nf 1467/124/1467 1749/223/2254 2350/1847/2256\nf 1749/223/2254 1490/222/2257 2360/1846/2255\nf 2351/1848/2258 1490/222/2257 2361/1849/2260\nf 2361/1849/2260 1790/943/2259 2352/1850/2262\nf 1614/678/2272 1831/993/2263 2357/1852/2265\nf 1831/993/2263 1536/400/2266 2362/1851/2264\nf 1536/400/2266 1878/1040/2268 2353/1853/2267\nf 1878/1040/2268 1571/1052/1961 2364/1854/2269\nf 1513/313/2261 1942/1158/2270 2352/1850/2262\nf 1942/1158/2270 1614/678/2272 2366/1855/2271\nf 2396/1874/2291 2387/1856/2273 2377/1858/2275\nf 2397/1876/2293 2388/1859/2276 2378/1861/2278\nf 2398/1877/2294 2389/1862/2279 2379/1864/2281\nf 2380/1878/2295 2399/1865/2282 2371/1867/2284\nf 2381/1879/2296 2400/1868/2285 2372/1870/2287\nf 2385/1880/2297 2404/1871/2288 2376/1873/2290\nf 2386/3174/3672 2396/1874/2291 2367/1875/2292\nf 2387/1856/2273 2397/1876/2293 2368/1857/2274\nf 2388/1859/2276 2398/1877/2294 2369/1860/2277\nf 2370/1863/2280 2389/1862/2279 2380/1878/2295\nf 2376/1873/2290 2395/1872/2289 2381/1879/2296\nf 2371/1867/2284 2390/1866/2283 2385/1880/2297\nf 2382/1884/2301 2401/1881/2298 2374/1883/2300\nf 2372/1870/2287 2391/1869/2286 2382/1884/2301\nf 2375/1891/2308 2383/1885/2302 2394/1887/2304\nf 2383/1885/2302 2374/1883/2300 2402/1886/2303\nf 2373/3175/3673 2384/1888/2305 2392/1890/2307\nf 2384/1888/2305 2375/1891/2308 2403/1889/2306\nf 2439/3176/3674 2420/1892/2309 2431/1894/2311\nf 2432/1903/2320 2440/1895/2312 2413/1897/2314\nf 2430/3177/3675 2441/1898/2315 2411/1900/2317\nf 2439/3176/3674 2429/1901/2318 2420/1892/2309\nf 2440/1895/2312 2431/1894/2311 2421/1896/2313\nf 2441/1898/2315 2432/1903/2320 2422/1899/2316\nf 2405/3178/3676 2415/1904/2321 2424/1906/2323\nf 2434/1905/2322 2415/1904/2321 2425/1908/2325\nf 2406/1907/2324 2416/1909/2326 2425/1908/2325\nf 2416/1909/2326 2407/1911/2328 2435/1910/2327\nf 2407/1911/2328 2417/1913/2330 2426/1912/2329\nf 2417/1913/2330 2408/1915/2332 2436/1914/2331\nf 2427/1916/2333 2408/1915/2332 2437/1918/2335\nf 2437/1918/2335 2418/1917/2334 2428/1920/2337\nf 2433/1926/2343 2414/1921/2338 2438/1923/2340\nf 2438/1923/2340 2419/1922/2339 2429/1901/2318\nf 2428/1920/2337 2409/1919/2336 2442/1925/2342\nf 2442/1925/2342 2423/1924/2341 2433/1926/2343\nf 1651/89/2370 1981/820/2344 2444/1928/2346\nf 1691/873/2371 1997/182/2347 2445/1930/2349\nf 1731/878/2372 2000/191/2350 2446/1932/2352\nf 2017/286/3677 2455/1933/2353 1771/931/2355\nf 1811/980/2374 2035/379/2356 2448/1936/2358\nf 1851/1046/3678 2052/469/2359 2449/1938/2361\nf 2078/1128/3679 2458/1939/2362 1912/609/2364\nf 1951/982/2373 2091/657/2365 2451/1942/2367\nf 1981/820/2344 1634/822/2368 2452/1927/2345\nf 1997/182/2347 1651/89/2370 2453/1929/2348\nf 2000/191/2350 1691/873/2371 2454/1931/2351\nf 2017/286/3677 1731/878/2372 2455/1933/2353\nf 2035/379/2356 1951/982/2373 2456/1935/2357\nf 1912/609/2364 2450/1940/2363 2052/469/2359\nf 2078/1128/3679 1811/980/2374 2458/1939/2362\nf 1771/931/2355 2447/1934/2354 2091/657/2365\nf 2479/3179/3680 2469/1944/2375 2489/1946/2377\nf 2479/3179/3680 2488/1947/2378 2469/1944/2375\nf 2490/1955/2386 2480/1949/2380 2465/1951/2382\nf 2480/1949/2380 2489/1946/2377 2470/1950/2381\nf 2481/3180/3681 2471/1952/2383 2491/1954/2385\nf 2481/3180/3681 2490/1955/2386 2471/1952/2383\nf 2482/1960/2391 2472/1956/2387 2492/1958/2389\nf 2478/1974/2405 2461/1959/2390 2482/1960/2391\nf 2483/1964/2395 2473/1961/2392 2477/1963/2394\nf 2492/1958/2389 2467/1957/2388 2483/1964/2395\nf 2484/1968/2399 2474/1965/2396 2493/1967/2398\nf 2477/1963/2394 2460/1962/2393 2484/1968/2399\nf 2488/1947/2378 2485/1969/2400 2463/1948/2379\nf 2485/1969/2400 2487/1971/2402 2475/1970/2401\nf 2486/1975/2406 2476/1973/2404 2478/1974/2405\nf 2491/1954/2385 2466/1953/2384 2486/1975/2406\nf 1977/808/3682 2496/1976/2407 1688/77/2409\nf 1728/869/2432 1995/173/2410 2507/1979/2412\nf 1768/925/2437 2015/277/2413 2508/1981/2415\nf 2034/975/2433 2499/1982/2416 1808/372/2418\nf 1914/1039/2434 2051/460/2419 2494/1985/2421\nf 2072/1112/3683 2501/1986/2422 1848/575/2424\nf 1648/809/2431 2086/635/2425 2505/1989/2427\nf 1950/653/3684 2090/1149/2428 2495/1991/2430\nf 1977/808/3682 1648/809/2431 2496/1976/2407\nf 1995/173/2410 1688/77/2409 2497/1978/2411\nf 2015/277/2413 1728/869/2432 2498/1980/2414\nf 1950/653/3684 2495/1991/2430 2034/975/2433\nf 1808/372/2418 2509/1983/2417 2051/460/2419\nf 2072/1112/3683 1914/1039/2434 2501/1986/2422\nf 2086/635/2425 1631/1139/2435 2502/1988/2426\nf 2090/1149/2428 1768/925/2437 2503/1990/2429\nf 1643/805/2463 1976/72/2438 2529/1994/2440\nf 1994/868/3685 2538/1995/2441 1683/172/2443\nf 2012/917/2464 2539/1997/2444 1723/269/2446\nf 1763/966/3686 2030/357/2447 2532/2000/2449\nf 2046/1025/2465 2541/2001/2450 1803/446/2452\nf 2061/1089/2466 2542/2003/2453 1843/532/2455\nf 1915/621/3687 2081/1133/2456 2535/2006/2458\nf 2102/1176/2467 2544/2007/2459 1962/721/2461\nf 1626/807/3688 2528/2009/2462 1976/72/2438\nf 1994/868/3685 1643/805/2463 2538/1995/2441\nf 1683/172/2443 2530/1996/2442 2012/917/2464\nf 1723/269/2446 2531/1998/2445 2030/357/2447\nf 1962/721/2461 2536/2008/2460 2046/1025/2465\nf 1915/621/3687 2535/2006/2458 2061/1089/2466\nf 1803/446/2452 2533/2002/2451 2081/1133/2456\nf 1763/966/3686 2532/2000/2449 2102/1176/2467\nf 1443/857/2475 1663/782/2468 2548/2011/2470\nf 1420/784/3689 2547/2012/2471 1663/782/2468\nf 1466/3125/3690 1706/855/2472 2549/2014/2474\nf 1706/855/2472 1443/857/2475 2555/2013/2473\nf 1747/907/2479 2556/2015/2476 1489/906/2478\nf 1466/3125/3690 2549/2014/2474 1747/907/2479\nf 1512/2027/2498 1788/956/2480 2551/2018/2482\nf 1489/906/2478 2550/2016/2477 1788/956/2480\nf 1829/1009/2487 2558/2019/2483 1535/1008/2485\nf 1612/1168/3691 2546/2021/2486 1829/1009/2487\nf 1875/1075/2492 2559/2022/2488 1568/1074/2490\nf 1589/1126/2494 2545/2024/2491 1875/1075/2492\nf 1908/1127/2495 2560/2025/2493 1589/1126/2494\nf 1535/1008/2485 2552/2020/2484 1908/1127/2495\nf 1612/1168/3691 1940/1169/2496 2546/2021/2486\nf 1940/1169/2496 1512/2027/2498 2561/2026/2497\nf 1668/53/2503 2605/2028/2499 1434/54/2501\nf 1411/743/3692 2598/2030/2502 1668/53/2503\nf 1711/153/2507 2606/2031/2504 1457/154/2506\nf 1434/54/2501 2599/2029/2500 1711/153/2507\nf 1751/248/2511 2607/2033/2508 1480/249/2510\nf 1457/154/2506 2600/2032/2505 1751/248/2511\nf 1503/340/2530 1773/339/2512 2602/2036/2514\nf 1773/339/2512 1480/249/2510 2608/2035/2513\nf 1925/425/2519 2609/2037/2515 1526/426/2517\nf 1597/704/2529 2597/2039/2518 1925/425/2519\nf 1901/512/2524 2610/2040/2520 1549/513/2522\nf 1584/596/2526 2596/2042/2523 1901/512/2524\nf 1855/595/2527 2611/2043/2525 1584/596/2526\nf 1526/426/2517 2603/2038/2516 1855/595/2527\nf 1814/703/3693 2612/2044/2528 1597/704/2529\nf 1814/703/3693 1503/340/2530 2612/2044/2528\nf 1670/797/2535 2639/2045/2531 1436/795/2533\nf 1413/3123/3694 2630/2047/2534 1670/797/2535\nf 1694/863/2539 2640/2048/2536 1459/862/2538\nf 1436/795/2533 2631/2046/2532 1694/863/2539\nf 1736/913/2543 2641/2050/2540 1482/912/2542\nf 1459/862/2538 2632/2049/2537 1736/913/2543\nf 1505/1174/2562 1778/961/2544 2634/2053/2546\nf 1482/912/2542 2633/2051/2541 1778/961/2544\nf 1820/1017/2551 2643/2054/2547 1528/1016/2549\nf 1603/1173/2561 2638/2056/2550 1820/1017/2551\nf 1873/1084/2556 2644/2057/2552 1566/1083/2554\nf 1583/1117/2558 2637/2059/2555 1873/1084/2556\nf 1898/1118/2559 2645/2060/2557 1583/1117/2558\nf 1528/1016/2549 2635/2055/2548 1898/1118/2559\nf 1931/3134/3695 2646/2061/2560 1603/1173/2561\nf 1931/3134/3695 1505/1174/2562 2646/2061/2560\nf 3128/2567/3047 3093/2062/2563 3084/2064/2565\nf 2950/2095/2596 2706/2065/2566 2953/2067/2568\nf 2701/2078/2579 2686/2068/2569 2700/2070/2571\nf 2982/2149/2650 2669/2071/2572 2978/2073/2574\nf 2956/2359/2843 2862/2074/2575 2951/2076/2577\nf 2702/2101/2602 2685/2077/2578 2701/2078/2579\nf 2948/2139/2640 3116/2079/2580 2710/2081/2582\nf 2966/2091/2592 2965/2082/2583 2726/2084/2585\nf 3086/2096/2597 3087/2085/2586 2680/2087/2588\nf 2707/2066/2567 2700/2070/2571 2708/2089/2590\nf 2729/2141/2642 2968/2090/2591 2726/2084/2585\nf 2979/2112/2613 2667/2092/2593 2983/2094/2595\nf 2951/2076/2577 2705/2075/2576 2950/2095/2596\nf 3085/2441/2923 3086/2096/2597 2679/2097/2598\nf 2710/2081/2582 3097/2080/2581 2697/2099/2600\nf 2862/2074/2575 2861/2100/2601 2705/2075/2576\nf 2975/2106/2607 2671/2102/2603 2976/2104/2605\nf 2974/2137/2638 2672/2105/2606 2975/2106/2607\nf 2953/2067/2568 2707/2066/2567 2954/2107/2608\nf 2695/2116/2617 2696/2108/2609 2692/2110/2611\nf 2709/2150/2651 2708/2089/2590 2698/2111/2612\nf 2706/2065/2566 2701/2078/2579 2707/2066/2567\nf 2978/2073/2574 2668/2072/2573 2979/2112/2613\nf 2718/2126/2627 2962/2113/2614 2717/2115/2616\nf 2694/2119/2620 2695/2116/2617 2693/2117/2618\nf 2713/2152/2653 2712/2118/2619 2694/2119/2620\nf 2711/2128/2629 2710/2081/2582 2696/2108/2609\nf 2983/2094/2595 2666/2093/2594 2981/2121/2622\nf 2984/2361/2845 2859/2122/2623 2980/2124/2625\nf 2721/2135/2636 2963/2125/2626 2718/2126/2627\nf 2697/2099/2600 2690/2127/2628 2696/2108/2609\nf 2712/2118/2619 2711/2128/2629 2695/2116/2617\nf 2946/2151/2652 2947/2129/2630 2712/2118/2619\nf 3080/2142/2643 3076/2130/2631 2676/2132/2633\nf 2699/2088/2589 2700/2070/2571 2688/2133/2634\nf 3098/2571/3051 3117/2134/2635 2721/2135/2636\nf 2977/2528/3008 2673/2136/2637 2974/2137/2638\nf 2697/2099/2600 3096/2098/2599 2690/2127/2628\nf 2947/2129/2630 2948/2139/2640 2711/2128/2629\nf 2730/2160/2661 2967/2140/2641 2729/2141/2642\nf 3077/2155/2656 3080/2142/2643 2677/2143/2644\nf 3076/2130/2631 3127/2144/2645 2675/2131/2632\nf 2965/2082/2583 2964/2146/2647 2725/2083/2584\nf 3118/2529/3009 3092/2148/2649 2982/2149/2650\nf 3084/2064/2565 2682/2063/2564 3087/2085/2586\nf 2949/2518/2998 2954/2107/2608 2709/2150/2651\nf 2952/2440/2922 2946/2151/2652 2713/2152/2653\nf 2717/2115/2616 2961/2114/2615 2714/2154/2655\nf 3078/2447/2929 3077/2155/2656 2678/2156/2657\nf 2699/2088/2589 2688/2133/2634 2698/2111/2612\nf 2861/2100/2601 2860/2158/2659 2702/2101/2602\nf 2863/2364/2848 2970/2159/2660 2730/2160/2661\nf 2705/2075/2576 2702/2101/2602 2706/2065/2566\nf 2672/2105/2606 2742/2161/2662 2671/2102/2603\nf 2673/2136/2637 2743/2163/2664 2672/2105/2606\nf 2671/2102/2603 2741/2162/2663 2670/2103/2604\nf 2668/2072/2573 2738/2165/2666 2667/2092/2593\nf 3092/2148/2649 3100/2167/2668 2669/2071/2572\nf 2669/2071/2572 2739/2168/2669 2668/2072/2573\nf 2666/2093/2594 2736/2169/2670 2665/2120/2621\nf 2667/2092/2593 2737/2166/2667 2666/2093/2594\nf 2859/2122/2623 2865/2171/2672 2664/2123/2624\nf 3069/2179/2680 3068/2173/2674 2747/2175/2676\nf 3071/2181/2682 3126/2176/2677 2745/2178/2679\nf 3072/2443/2925 3069/2179/2680 2748/2180/2681\nf 3068/2173/2674 3071/2181/2682 2746/2174/2675\nf 2747/2175/2676 2746/2174/2675 2752/2183/2684\nf 2745/2178/2679 3101/2177/2678 2750/2185/2686\nf 2748/2180/2681 2747/2175/2676 2753/2186/2687\nf 2746/2174/2675 2745/2178/2679 2751/2182/2683\nf 2851/2189/2690 2741/2162/2663 2852/2187/2688\nf 2852/2187/2688 2742/2161/2662 2853/2188/2689\nf 2850/2191/2692 2740/2164/2665 2851/2189/2690\nf 2847/2195/2696 2737/2166/2667 2848/2190/2691\nf 3100/2167/2668 2740/2164/2665 3103/2192/2693\nf 2848/2190/2691 2738/2165/2666 2849/2193/2694\nf 2845/2196/2697 2735/2170/2671 2846/2194/2695\nf 2846/2194/2695 2736/2169/2670 2847/2195/2696\nf 2865/2171/2672 2735/2170/2671 2866/2197/2698\nf 2752/2183/2684 2751/2182/2683 2857/2199/2700\nf 3102/2184/2685 2749/2200/2701 3104/2202/2703\nf 2753/2186/2687 2752/2183/2684 2858/2203/2704\nf 2751/2182/2683 2750/2185/2686 2856/2198/2699\nf 3123/2556/3036 3044/2205/2706 3106/2207/2708\nf 2796/2238/2739 3020/2208/2709 2797/2210/2711\nf 2791/2220/2721 2790/2211/2712 2776/2213/2714\nf 2996/2298/2799 2992/2214/2715 2759/2216/2717\nf 3026/2365/2849 3021/2217/2718 2870/2219/2720\nf 2792/2245/2746 2791/2220/2721 2775/2221/2722\nf 3110/2553/3033 3121/2222/2723 2800/2224/2725\nf 3007/2535/3015 3008/2225/2726 2815/2227/2728\nf 2771/2300/2801 3047/2228/2729 2770/2230/2731\nf 3032/2259/2760 3034/2231/2732 2790/2211/2712\nf 3008/2225/2726 3010/2233/2734 2816/2226/2727\nf 2993/2260/2761 2997/2235/2736 2757/2237/2738\nf 3021/2217/2718 3020/2208/2709 2795/2218/2719\nf 2770/2230/2731 3046/2229/2730 2769/2240/2741\nf 3109/2576/3056 3122/2241/2742 2787/2243/2744\nf 3040/2367/2851 3031/2244/2745 2869/2246/2747\nf 2989/2250/2751 2990/2247/2748 2761/2249/2750\nf 2988/2286/2787 2989/2250/2751 2762/2251/2752\nf 3023/2209/2710 3024/2252/2753 2797/2210/2711\nf 2781/2275/2776 2786/2254/2755 2782/2256/2757\nf 2789/2232/2733 3034/2231/2732 2788/2258/2759\nf 3033/2313/2814 3032/2259/2760 2791/2220/2721\nf 2992/2214/2715 2993/2260/2761 2758/2215/2716\nf 3003/2305/2806 3004/2261/2762 2807/2263/2764\nf 2782/2256/2757 2785/2255/2756 2783/2265/2766\nf 2785/2255/2756 3037/2266/2767 2784/2264/2765\nf 3039/2242/2743 3038/2268/2769 2787/2243/2744\nf 2997/2235/2736 2995/2269/2770 2756/2236/2737\nf 2998/2369/2853 2994/2271/2772 2867/2273/2774\nf 3005/2285/2786 2811/2274/2775 3004/2261/2762\nf 2787/2243/2744 2786/2254/2755 2780/2276/2777\nf 3038/2268/2769 3037/2266/2767 2786/2254/2755\nf 2801/2289/2790 3017/2277/2778 2802/2279/2780\nf 2765/2295/2796 3052/2280/2781 2766/2282/2783\nf 2777/2212/2713 2790/2211/2712 2778/2283/2784\nf 3120/2540/3020 3111/2284/2785 3005/2285/2786\nf 2991/2438/2920 2988/2286/2787 2763/2287/2788\nf 3109/2576/3056 2787/2243/2744 3108/2288/2789\nf 2800/2224/2725 3018/2223/2724 2801/2289/2790\nf 3010/2233/2734 3009/2290/2791 2819/2234/2735\nf 2766/2282/2783 3056/2281/2782 2767/2293/2794\nf 3107/2560/3040 3124/2294/2795 2765/2295/2796\nf 3007/2535/3015 2815/2227/2728 3006/2297/2798\nf 3119/2532/3012 2996/2298/2799 3105/2299/2800\nf 3044/2205/2706 3047/2228/2729 2772/2206/2707\nf 2798/2253/2754 3024/2252/2753 2799/2302/2803\nf 2802/2279/2780 3016/2278/2779 2803/2304/2805\nf 3002/2444/2926 3003/2305/2806 2804/2306/2807\nf 2767/2293/2794 3053/2292/2793 2768/2308/2809\nf 2789/2232/2733 2788/2258/2759 2778/2283/2784\nf 2869/2246/2747 2792/2245/2746 2868/2310/2811\nf 3009/2290/2791 3012/2311/2812 2820/2291/2792\nf 3031/2244/2745 3033/2313/2814 2792/2245/2746\nf 2762/2251/2752 2761/2249/2750 2832/2315/2816\nf 2763/2287/2788 2762/2251/2752 2833/2316/2817\nf 2761/2249/2750 2760/2248/2749 2831/2314/2815\nf 2758/2215/2716 2757/2237/2738 2828/2319/2820\nf 3105/2299/2800 2759/2216/2717 3113/2321/2822\nf 2759/2216/2717 2758/2215/2716 2829/2320/2821\nf 2756/2236/2737 2755/2270/2771 2826/2323/2824\nf 2757/2237/2738 2756/2236/2737 2827/2318/2819\nf 2867/2273/2774 2754/2272/2773 2873/2325/2826\nf 2836/2334/2835 3060/2326/2827 2837/2328/2829\nf 3114/2336/2837 3125/2329/2830 2835/2331/2832\nf 2837/2328/2829 3061/2327/2828 2838/2333/2834\nf 2835/2331/2832 3063/2330/2831 2836/2334/2835\nf 2841/2339/2840 2836/2334/2835 2842/2335/2836\nf 3115/2353/2841 3114/2336/2837 2840/2337/2838\nf 2842/2335/2836 2837/2328/2829 2843/2338/2839\nf 2840/2337/2838 2835/2331/2832 2841/2339/2840\nf 2831/2314/2815 2851/2340/2690 2832/2315/2816\nf 2833/2316/2817 2832/2315/2816 2853/2342/2689\nf 2831/2314/2815 2830/2317/2818 2851/2340/2690\nf 2827/2318/2819 2847/2344/2696 2828/2319/2820\nf 2830/2317/2818 3113/2321/2822 2850/2343/2692\nf 2829/2320/2821 2828/2319/2820 2849/2347/2694\nf 2826/2323/2824 2825/2322/2823 2846/2349/2695\nf 2827/2318/2819 2826/2323/2824 2847/2344/2696\nf 2825/2322/2823 2873/2325/2826 2845/2348/2697\nf 2842/2335/2836 2857/2351/2700 2841/2339/2840\nf 2839/3181/3696 3115/2353/2841 2854/2355/2702\nf 2842/2335/2836 2843/2338/2839 2857/2351/2700\nf 2841/2339/2840 2856/2352/2699 2840/2337/2838\nf 2955/2520/3000 2704/2358/2842 2956/2359/2843\nf 2704/2358/2842 2703/2360/2844 2862/2074/2575\nf 2981/2121/2622 2665/2120/2621 2984/2361/2845\nf 2703/2360/2844 2684/2362/2846 2861/2100/2601\nf 2733/2527/3007 2969/2363/2847 2863/2364/2848\nf 2665/2120/2621 2735/2170/2671 2859/2122/2623\nf 2844/3182/2857 2734/2172/2673 2866/2197/2698\nf 3025/2550/3030 3026/2365/2849 2794/2366/2850\nf 3030/2554/3034 3040/2367/2851 2793/2368/2852\nf 2995/2269/2770 2998/2369/2853 2755/2270/2771\nf 2793/2368/2852 2869/2246/2747 2774/2370/2854\nf 3012/2311/2812 3011/2371/2855 2871/2312/2813\nf 2755/2270/2771 2867/2273/2774 2825/2322/2823\nf 2873/2325/2826 2824/2324/2825 2866/2350/2698\nf 3042/2437/2919 2899/2374/2858 3041/2376/2860\nf 2985/2530/3010 2986/2377/2861 2880/2379/2863\nf 2879/2392/2876 2902/2380/2864 2878/2382/2866\nf 2999/2533/3013 3000/2383/2867 2885/2385/2869\nf 2885/2385/2869 2905/2384/2868 2893/2387/2871\nf 3027/2551/3031 3028/2388/2872 2892/2390/2874\nf 2957/2522/3002 2958/2391/2875 2879/2392/2876\nf 2909/2432/2915 2900/2393/2877 2882/2395/2879\nf 2910/2422/2905 2911/2396/2880 2884/2398/2882\nf 2897/3183/2881 2911/2399/2880 2895/2401/2884\nf 3089/2568/3048 3090/2402/2885 2876/2404/2887\nf 3050/2442/2924 2916/2405/2888 3049/2407/2890\nf 3065/2561/3041 3066/2408/2891 2886/2410/2893\nf 3074/2563/3043 2920/2411/2894 3073/2413/2896\nf 2895/2401/2884 2912/2400/2883 2894/2415/2898\nf 3013/2546/3026 3014/2416/2899 2891/2418/2901\nf 2972/2446/2928 2908/2419/2902 2971/2421/2904\nf 2920/2411/2894 2910/2422/2905 2883/2412/2895\nf 2878/2382/2866 2903/2381/2865 2877/2424/2907\nf 2916/2405/2888 2898/2425/2908 2888/2406/2889\nf 2906/2386/2870 2921/2427/2910 2893/2387/2871\nf 3082/2565/3045 2919/2429/2912 3081/2431/2914\nf 2921/3184/2910 2909/2432/2915 2896/2433/2911\nf 3057/2558/3038 3058/2434/2916 2887/2436/2918\nf 3036/2267/2768 2803/2304/2805 3042/2437/2919\nf 2977/2528/3008 2714/2154/2655 2986/2377/2861\nf 2902/2380/2864 2713/2152/2653 2903/2381/2865\nf 3000/2383/2867 2991/2438/2920 2905/2384/2868\nf 2905/2384/2868 2763/2287/2788 2906/2386/2870\nf 3022/2303/2804 2805/2439/2921 3028/2388/2872\nf 2958/2391/2875 2952/2440/2922 2902/2380/2864\nf 2743/2163/2664 2673/2136/2637 2909/2432/2915\nf 2910/2422/2905 2753/2186/2687 2911/2396/2880\nf 2911/2399/2880 2858/2356/2704 2912/2400/2883\nf 3090/2402/2885 3085/2441/2923 2914/2403/2886\nf 3045/2239/2740 2783/2265/2766 3050/2442/2924\nf 3064/2332/2833 2768/2308/2809 3066/2408/2891\nf 3074/2563/3043 3072/2443/2925 2920/2411/2894\nf 2843/2338/2839 2838/2333/2834 2912/2400/2883\nf 3014/2416/2899 3002/2444/2926 2904/2417/2900\nf 2960/2153/2654 2715/2445/2927 2972/2446/2928\nf 2920/2411/2894 2748/2180/2681 2910/2422/2905\nf 2903/2381/2865 2694/2119/2620 2913/2423/2906\nf 2783/2265/2766 2784/2264/2765 2916/2405/2888\nf 2833/2316/2817 2853/2342/2689 2906/2386/2870\nf 3082/2565/3045 3078/2447/2929 2919/2429/2912\nf 2921/3184/2910 2853/2188/2689 2909/2432/2915\nf 3054/2307/2808 2769/2240/2741 3058/2434/2916\nf 3067/2562/3042 3187/2448/2930 2934/2450/2932\nf 3192/2487/2969 3167/2451/2933 2931/2453/2935\nf 3015/2547/3027 3182/2454/2936 2939/2456/2938\nf 3194/2483/2965 3169/2457/2939 2930/2459/2941\nf 3043/2555/3035 3184/2460/2942 2938/2462/2944\nf 2959/2523/3003 3178/2463/2945 2927/2465/2947\nf 3189/2566/3046 3172/2466/2948 3083/2468/2950\nf 2936/2503/2985 3198/2469/2951 2937/2471/2953\nf 3199/2623/2990 3173/2472/2954 2945/2474/2956\nf 3190/2569/3049 3197/2475/2957 3091/2477/2959\nf 3181/2534/3014 3174/2478/2960 3001/2480/2962\nf 3173/2472/2954 3191/2481/2963 2943/2473/2955\nf 3201/2624/2986 3194/2483/2965 2944/2484/2966\nf 3174/2478/2960 3175/2485/2967 2933/2479/2961\nf 3188/2564/3044 3192/2487/2969 3075/2488/2970\nf 3029/2552/3032 3183/2489/2971 2940/2491/2973\nf 2973/2526/3006 3179/2492/2974 2929/2494/2976\nf 2927/2465/2947 3171/2464/2946 2926/2496/2978\nf 3059/2559/3039 3186/2497/2979 2935/2499/2981\nf 2926/2496/2978 3176/2495/2977 2925/2501/2983\nf 3051/2557/3037 3185/2502/2984 2936/2503/2985\nf 3175/2485/2967 3201/2504/2986 2941/2486/2968\nf 2987/2531/3011 3180/2506/2987 2928/2508/2989\nf 3167/2451/2933 3199/2509/2990 2932/2452/2934\nf 2728/2514/2994 2950/2095/2596 2727/2511/2991\nf 2864/2521/3001 2956/2359/2843 2731/2512/2992\nf 2720/2517/2997 3099/2513/2993 2948/2139/2640\nf 2731/2512/2992 2951/2076/2577 2728/2514/2994\nf 2727/2511/2991 2953/2067/2568 2724/2515/2995\nf 2719/2524/3004 2947/2129/2630 2716/2516/2996\nf 2719/2524/3004 2720/2517/2997 2947/2129/2630\nf 2724/2515/2995 2954/2107/2608 2723/2519/2999\nf 2715/2445/2927 2716/2516/2996 2952/2440/2922\nf 2732/2525/3005 2955/2520/3000 2864/2521/3001\nf 2908/2419/2902 2958/2391/2875 2881/2420/2903\nf 2908/2419/2902 2715/2445/2927 2958/2391/2875\nf 2929/2494/2976 3196/2493/2975 2959/2523/3003\nf 2966/2091/2592 2727/2511/2991 2965/2082/2583\nf 2968/2090/2591 2728/2514/2994 2966/2091/2592\nf 2962/2113/2614 2719/2524/3004 2961/2114/2615\nf 2963/2125/2626 2720/2517/2997 2962/2113/2614\nf 3099/2513/2993 2720/2517/2997 3117/2134/2635\nf 2967/2140/2641 2731/2512/2992 2968/2090/2591\nf 2724/2515/2995 2723/2519/2999 2965/2082/2583\nf 2961/2114/2615 2716/2516/2996 2960/2153/2654\nf 2970/2159/2660 2864/2521/3001 2967/2140/2641\nf 2969/2363/2847 2732/2525/3005 2970/2159/2660\nf 2901/2378/2862 2972/2446/2928 2880/2379/2863\nf 2714/2154/2655 2960/2153/2654 2901/2378/2862\nf 2928/2508/2989 3202/2507/2988 2973/2526/3006\nf 2722/2147/2648 2982/2149/2650 2725/2083/2584\nf 2726/2084/2585 2979/2112/2613 2729/2141/2642\nf 2718/2126/2627 2975/2106/2607 2721/2135/2636\nf 2717/2115/2616 2974/2137/2638 2718/2126/2627\nf 2725/2083/2584 2978/2073/2574 2726/2084/2585\nf 2729/2141/2642 2983/2094/2595 2730/2160/2661\nf 2863/2364/2848 2984/2361/2845 2733/2527/3007\nf 2714/2154/2655 2977/2528/3008 2717/2115/2616\nf 3098/2571/3051 3118/2529/3009 2722/2147/2648\nf 2730/2160/2661 2981/2121/2622 2863/2364/2848\nf 2900/2393/2877 2986/2377/2861 2874/2394/2878\nf 2673/2136/2637 2977/2528/3008 2900/2393/2877\nf 2922/2458/2940 3169/2457/2939 2987/2531/3011\nf 2812/2296/2797 2815/2227/2728 2996/2298/2799\nf 2816/2226/2727 2819/2234/2735 2993/2260/2761\nf 2989/2250/2751 2808/2262/2763 2990/2247/2748\nf 2988/2286/2787 2807/2263/2764 2989/2250/2751\nf 2815/2227/2728 2816/2226/2727 2992/2214/2715\nf 2819/2234/2735 2820/2291/2792 2997/2235/2736\nf 2871/2312/2813 2823/2372/2856 2998/2369/2853\nf 2804/2306/2807 2807/2263/2764 2991/2438/2920\nf 3111/2284/2785 2812/2296/2797 3119/2532/3012\nf 2820/2291/2792 2871/2312/2813 2995/2269/2770\nf 2891/2418/2901 2904/2417/2900 2999/2533/3013\nf 2904/2417/2900 2804/2306/2807 3000/2383/2867\nf 3168/2455/2937 3181/2534/3014 2939/2456/2938\nf 2817/2548/3028 3008/2225/2726 2814/2536/3016\nf 2817/2548/3028 2818/2537/3017 3008/2225/2726\nf 2809/2539/3019 3004/2261/2762 2806/2538/3018\nf 2810/2541/3021 3005/2285/2786 2809/2539/3019\nf 3112/2549/3029 3120/2540/3020 2810/2541/3021\nf 2818/2537/3017 2821/2542/3022 3010/2233/2734\nf 2814/2536/3016 3007/2535/3015 2813/2543/3023\nf 2805/2439/2921 2806/2538/3018 3002/2444/2926\nf 2821/2542/3022 2872/2544/3024 3009/2290/2791\nf 2872/2544/3024 2822/2545/3025 3012/2311/2812\nf 2892/2390/2874 2907/2389/2873 3013/2546/3026\nf 2907/2389/2873 2805/2439/2921 3014/2416/2899\nf 2940/2491/2973 3193/2490/2972 3015/2547/3027\nf 2818/2537/3017 2817/2548/3028 3020/2208/2709\nf 2872/2544/3024 2821/2542/3022 3026/2365/2849\nf 3121/2222/2723 3112/2549/3029 3018/2223/2724\nf 2821/2542/3022 2818/2537/3017 3021/2217/2718\nf 2817/2548/3028 2814/2536/3016 3023/2209/2710\nf 3017/2277/2778 2809/2539/3019 3016/2278/2779\nf 3018/2223/2724 2810/2541/3021 3017/2277/2778\nf 3024/2252/2753 2814/2536/3016 3019/2301/2802\nf 3016/2278/2779 2806/2538/3018 3022/2303/2804\nf 2822/2545/3025 2872/2544/3024 3025/2550/3030\nf 2899/2374/2858 3028/2388/2872 2890/2375/2859\nf 2803/2304/2805 3022/2303/2804 2899/2374/2858\nf 2938/2462/2944 3170/2461/2943 3029/2552/3032\nf 2797/2210/2711 2798/2253/2754 3032/2259/2760\nf 3122/2241/2742 3110/2553/3033 3039/2242/2743\nf 2870/2219/2720 2795/2218/2719 3040/2367/2851\nf 3034/2231/2732 2798/2253/2754 3035/2257/2758\nf 3033/2313/2814 2796/2238/2739 3032/2259/2760\nf 3037/2266/2767 2802/2279/2780 3036/2267/2768\nf 3039/2242/2743 2800/2224/2725 3038/2268/2769\nf 3038/2268/2769 2801/2289/2790 3037/2266/2767\nf 2795/2218/2719 2796/2238/2739 3031/2244/2745\nf 2794/2366/2850 2870/2219/2720 3030/2554/3034\nf 2898/2425/2908 3042/2437/2919 2889/2426/2909\nf 2784/2264/2765 3036/2267/2768 2898/2425/2908\nf 2937/2471/2953 3195/2470/2952 3043/2555/3035\nf 3108/2288/2789 2780/2276/2777 3123/2556/3036\nf 3047/2228/2729 2781/2275/2776 3046/2229/2730\nf 3046/2229/2730 2782/2256/2757 3045/2239/2740\nf 2780/2276/2777 2781/2275/2776 3044/2205/2706\nf 2915/2435/2917 3050/2442/2924 2887/2436/2918\nf 2769/2240/2741 3045/2239/2740 2915/2435/2917\nf 2935/2499/2981 3177/2498/2980 3051/2557/3037\nf 2772/2206/2707 2771/2300/2801 3052/2280/2781\nf 3056/2281/2782 2771/2300/2801 3053/2292/2793\nf 3106/2207/2708 2772/2206/2707 3124/2294/2795\nf 3053/2292/2793 2770/2230/2731 3054/2307/2808\nf 2886/2410/2893 2918/2409/2892 3057/2558/3038\nf 2768/2308/2809 3054/2307/2808 2918/2409/2892\nf 2934/2450/2932 3166/2449/2931 3059/2559/3039\nf 3060/2326/2827 2766/2282/2783 3061/2327/2828\nf 3125/2329/2830 3107/2560/3040 3063/2330/2831\nf 3061/2327/2828 2767/2293/2794 3064/2332/2833\nf 3063/2330/2831 2765/2295/2796 3060/2326/2827\nf 2894/2415/2898 2917/2414/2897 3065/2561/3041\nf 2838/2333/2834 3064/2332/2833 2917/2414/2897\nf 2942/2482/2964 3191/2481/2963 3067/2562/3042\nf 2677/2143/2644 2676/2132/2633 3069/2179/2680\nf 2675/2131/2632 3094/2145/2646 3071/2181/2682\nf 2678/2156/2657 2677/2143/2644 3072/2443/2925\nf 2676/2132/2633 2675/2131/2632 3068/2173/2674\nf 2919/2429/2912 3074/2563/3043 2875/2430/2913\nf 2919/2429/2912 2678/2156/2657 3074/2563/3043\nf 3172/2466/2948 3188/2564/3044 2923/2467/2949\nf 2682/2063/2564 3076/2130/2631 2681/2086/2587\nf 2680/2087/2588 2681/2086/2587 3077/2155/2656\nf 3093/2062/2563 3127/2144/2645 2682/2063/2564\nf 2679/2097/2598 2680/2087/2588 3078/2447/2929\nf 2914/2403/2886 3082/2565/3045 2876/2404/2887\nf 2914/2403/2886 2679/2097/2598 3082/2565/3045\nf 3197/2475/2957 3189/2566/3046 2924/2476/2958\nf 3095/2138/2639 3128/2567/3047 2690/2127/2628\nf 2692/2110/2611 2691/2109/2610 3086/2096/2597\nf 2693/2117/2618 2692/2110/2611 3085/2441/2923\nf 2690/2127/2628 3084/2064/2565 2691/2109/2610\nf 2877/2424/2907 2913/2423/2906 3089/2568/3048\nf 2913/2423/2906 2693/2117/2618 3090/2402/2885\nf 2925/2501/2983 3200/2500/2982 3091/2477/2959\nf 3088/2583/3063 2683/2570/3050 3128/2567/3047\nf 3116/2079/2580 2949/2518/2998 3097/2080/2581\nf 3097/2080/2581 2709/2150/2651 3096/2098/2599\nf 2722/2147/2648 2964/2146/2647 3098/2571/3051\nf 3096/2098/2599 2698/2111/2612 3095/2138/2639\nf 3079/2582/3062 2674/2572/3052 3127/2144/2645\nf 2976/2104/2605 2670/2103/2604 3118/2529/3009\nf 2670/2103/2604 2740/2164/2665 3092/2148/2649\nf 3126/2176/2677 3070/2573/3053 3101/2177/2678\nf 3101/2177/2678 2744/2574/3054 3102/2184/2685\nf 2849/2193/2694 2739/2168/2669 3103/2192/2693\nf 2750/2185/2686 3102/2184/2685 2855/2204/2705\nf 3048/2580/3060 3123/2556/3036 2773/2575/3055\nf 2799/2302/2803 3019/2301/2802 3110/2553/3033\nf 2788/2258/2759 3035/2257/2758 3109/2576/3056\nf 3006/2297/2798 2812/2296/2797 3120/2540/3020\nf 2788/2258/2759 3109/2576/3056 2779/2309/2810\nf 2764/2581/3061 3055/2577/3057 3107/2560/3040\nf 2990/2247/2748 3119/2532/3012 2760/2248/2749\nf 2760/2248/2749 3105/2299/2800 2830/2317/2818\nf 2834/2579/3059 3062/2578/3058 3114/2336/2837\nf 2839/3181/3696 2834/2579/3059 3115/2353/2841\nf 3113/2321/2822 2829/2320/2821 3103/2346/2693\nf 3115/2353/2841 2840/2337/2838 3104/2354/2703\nf 3099/2513/2993 2723/2519/2999 3116/2079/2580\nf 2723/2519/2999 3099/2513/2993 2964/2146/2647\nf 2721/2135/2636 2976/2104/2605 3098/2571/3051\nf 2811/2274/2775 3111/2284/2785 2990/2247/2748\nf 2813/2543/3023 3006/2297/2798 3112/2549/3029\nf 3019/2301/2802 2813/2543/3023 3121/2222/2723\nf 3035/2257/2758 2799/2302/2803 3122/2241/2742\nf 2779/2309/2810 3108/2288/2789 3048/2580/3060\nf 2773/2575/3055 3106/2207/2708 3055/2577/3057\nf 3062/2578/3058 2764/2581/3061 3125/2329/2830\nf 3094/2145/2646 2674/2572/3052 3126/2176/2677\nf 2683/2570/3050 3079/2582/3062 3093/2062/2563\nf 2689/2157/2658 3088/2583/3063 3095/2138/2639\nf 3162/2622/3100 3065/2561/3041 3130/2584/3064\nf 2883/2412/2895 2884/2398/2882 3131/2586/3066\nf 3157/2617/3095 3013/2546/3026 3134/2587/3067\nf 2882/2395/2879 2874/2394/2878 3135/2589/3069\nf 3159/2619/3097 3041/2376/2860 3138/2590/3070\nf 2957/2522/3002 2879/2392/2876 3153/2592/3072\nf 3081/2431/2914 2875/2430/2913 3164/2594/3074\nf 3143/2612/3092 2888/2406/2889 3137/2595/3075\nf 2897/3183/2881 2895/2401/2884 3144/2597/3077\nf 3089/2568/3048 2876/2404/2887 3165/2599/3079\nf 2999/2533/3013 2885/2385/2869 3156/2601/3081\nf 3145/2596/3076 2895/2401/2884 3129/2602/3082\nf 2896/2433/2911 2882/2395/2879 3148/2603/3083\nf 3147/2600/3080 2885/2385/2869 3149/2604/3084\nf 3073/2413/2896 2883/2412/2895 3163/2605/3085\nf 3158/2618/3096 3027/2551/3031 3133/2606/3086\nf 2971/2421/2904 2881/2420/2903 3154/2608/3088\nf 2879/2392/2876 2878/2382/2866 3140/2591/3071\nf 3161/2621/3099 3057/2558/3038 3152/2610/3090\nf 2878/2382/2866 2877/2424/2907 3151/2609/3089\nf 3160/2620/3098 3049/2407/2890 3143/2612/3092\nf 2893/2387/2871 2896/2428/2911 3149/2604/3084\nf 3155/2616/3094 2985/2530/3010 3150/2614/3093\nf 2884/2398/2882 2897/2397/2881 3132/2585/3065\nf 2881/2420/2903 2957/2522/3002 3139/2607/3087\nf 2880/2379/2863 2971/2421/2904 3150/2614/3093\nf 2874/2394/2878 2985/2530/3010 3136/2588/3068\nf 3134/2587/3067 2891/2418/2901 3156/2601/3081\nf 3133/2606/3086 2892/2390/2874 3157/2617/3095\nf 3138/2590/3070 2890/2375/2859 3158/2618/3096\nf 3137/2595/3075 2889/2426/2909 3159/2619/3097\nf 3152/2610/3090 2887/2436/2918 3160/2620/3098\nf 3130/2584/3064 2886/2410/2893 3161/2621/3099\nf 3129/2602/3082 2894/2415/2898 3162/2622/3100\nf 2875/2430/2913 3073/2413/2896 3142/2593/3073\nf 2876/2404/2887 3081/2431/2914 3141/2598/3078\nf 2877/2424/2907 3089/2568/3048 3146/2611/3091\nf 3187/2448/2930 3162/2622/3100 3166/2449/2931\nf 3131/2586/3066 3132/2585/3065 3192/2487/2969\nf 3182/2454/2936 3157/2617/3095 3168/2455/2937\nf 3135/2589/3069 3136/2588/3068 3194/2483/2965\nf 3184/2460/2942 3159/2619/3097 3170/2461/2943\nf 3153/2592/3072 3140/2591/3071 3178/2463/2945\nf 3164/2594/3074 3142/2593/3073 3189/2566/3046\nf 3198/2469/2951 3143/2612/3092 3195/2470/2952\nf 3144/2597/3077 3145/2596/3076 3199/2623/2990\nf 3165/2599/3079 3141/2598/3078 3190/2569/3049\nf 3156/2601/3081 3147/2600/3080 3181/2534/3014\nf 3145/2596/3076 3129/2602/3082 3173/2472/2954\nf 3148/2603/3083 3135/2589/3069 3201/2624/2986\nf 3147/2600/3080 3149/2604/3084 3174/2478/2960\nf 3163/2605/3085 3131/2586/3066 3188/2564/3044\nf 3183/2489/2971 3158/2618/3096 3193/2490/2972\nf 3179/2492/2974 3154/2608/3088 3196/2493/2975\nf 3140/2591/3071 3151/2609/3089 3171/2464/2946\nf 3186/2497/2979 3161/2621/3099 3177/2498/2980\nf 3176/2495/2977 3151/2609/3089 3200/2500/2982\nf 3185/2502/2984 3160/2620/3098 3198/2469/2951\nf 3149/2604/3084 3148/2613/3083 3175/2485/2967\nf 3180/2506/2987 3155/2616/3094 3202/2507/2988\nf 3132/2585/3065 3144/2615/3077 3167/2451/2933\nf 3196/2493/2975 3139/2607/3087 3178/2463/2945\nf 3202/2507/2988 3150/2614/3093 3179/2492/2974\nf 3169/2457/2939 3136/2588/3068 3180/2506/2987\nf 3134/2587/3067 3156/2601/3081 3168/2455/2937\nf 3193/2490/2972 3133/2606/3086 3182/2454/2936\nf 3170/2461/2943 3138/2590/3070 3183/2489/2971\nf 3195/2470/2952 3137/2595/3075 3184/2460/2942\nf 3177/2498/2980 3152/2610/3090 3185/2502/2984\nf 3166/2449/2931 3130/2584/3064 3186/2497/2979\nf 3191/2481/2963 3129/2602/3082 3187/2448/2930\nf 3142/2593/3073 3163/2605/3085 3172/2466/2948\nf 3141/2598/3078 3164/2594/3074 3197/2475/2957\nf 3146/2611/3091 3165/2599/3079 3200/2500/2982\nf 1366/1523/1224 1226/2625/1223 1359/1410/1320\nf 3235/2642/3117 3236/2626/3101 3233/2628/3103\nf 3211/3185/3697 3234/2627/3102 3212/2629/3104\nf 3203/3186/3698 3209/2630/3105 3217/2632/3107\nf 3217/2632/3107 3230/2631/3106 3218/2634/3109\nf 3203/3186/3698 3217/2632/3107 3210/2636/3111\nf 3232/2635/3110 3217/2632/3107 3231/2637/3112\nf 3204/2640/3115 3210/2636/3111 3219/2638/3113\nf 3219/2638/3113 3232/2635/3110 3220/2639/3114\nf 3211/3185/3697 3204/2640/3115 3234/2627/3102\nf 3219/2638/3113 3220/2639/3114 3234/2627/3102\nf 3205/2643/3118 3212/2629/3104 3221/2641/3116\nf 3222/2645/3120 3221/2641/3116 3235/2642/3117\nf 3213/2647/3122 3205/2643/3118 3238/2644/3119\nf 3238/2644/3119 3221/2641/3116 3237/2646/3121\nf 3206/2649/3124 3213/2647/3122 3223/2648/3123\nf 3224/2651/3126 3223/2648/3123 3237/2646/3121\nf 3214/2653/3128 3206/2649/3124 3240/2650/3125\nf 3223/2648/3123 3224/2651/3126 3240/2650/3125\nf 3207/2655/3130 3214/2653/3128 3225/2654/3129\nf 3226/2657/3132 3225/2654/3129 3239/2652/3127\nf 3215/2659/3134 3207/2655/3130 3242/2656/3131\nf 3225/2654/3129 3226/2657/3132 3242/2656/3131\nf 3208/2661/3136 3215/2659/3134 3227/2660/3135\nf 3228/2663/3138 3227/2660/3135 3241/2658/3133\nf 3216/3187/3699 3208/2661/3136 3244/2662/3137\nf 3244/2662/3137 3227/2660/3135 3243/2664/3139\nf 3296/3188/3700 3245/2665/3140 3297/2667/3142\nf 3246/2666/3141 3247/2668/3143 3297/2667/3142\nf 3245/2665/3140 3290/2670/3145 3246/2666/3141\nf 3246/2666/3141 3291/2671/3146 3247/2668/3143\nf 3290/2670/3145 3248/2673/3148 3291/2671/3146\nf 3249/2674/3149 3250/2675/3150 3291/2671/3146\nf 3249/2674/3149 3248/2673/3148 3300/2677/3152\nf 3249/2674/3149 3300/2677/3152 3250/2675/3150\nf 3251/2681/3156 3252/2679/3154 3299/2676/3151\nf 3300/2677/3152 3252/2679/3154 3301/2678/3153\nf 3252/2679/3154 3251/2681/3156 3288/2683/3158\nf 3252/2679/3154 3288/2683/3158 3253/2680/3155\nf 3287/2682/3157 3254/2685/3160 3288/2683/3158\nf 3288/2683/3158 3255/2686/3161 3289/2684/3159\nf 3255/2686/3161 3254/2685/3160 3294/2689/3164\nf 3256/2687/3162 3255/2686/3161 3295/2690/3165\nf 3257/2693/3168 3258/2691/3166 3293/2688/3163\nf 3258/2691/3166 3259/2692/3167 3294/2689/3164\nf 3258/2691/3166 3257/2693/3168 3285/2695/3170\nf 3259/2692/3167 3258/2691/3166 3286/2696/3171\nf 3260/2699/3174 3261/2697/3172 3284/2694/3169\nf 3261/2697/3172 3262/2698/3173 3285/2695/3170\nf 3261/2697/3172 3260/2699/3174 3282/2701/3176\nf 3262/2698/3173 3261/2697/3172 3283/2702/3177\nf 3263/2705/3180 3264/2703/3178 3281/2700/3175\nf 3282/2701/3176 3264/2703/3178 3283/2702/3177\nf 3264/2703/3178 3263/2705/3180 3303/2707/3182\nf 3265/2704/3179 3264/2703/3178 3304/2708/3183\nf 3266/3189/3701 3267/2709/3184 3302/2706/3181\nf 3303/2707/3182 3267/2709/3184 3304/2708/3183\nf 3266/3189/3701 3305/2711/3186 3267/2709/3184\nf 3267/2709/3184 3306/2712/3187 3268/2710/3185\nf 3269/2716/3191 3270/2714/3189 3305/2711/3186\nf 3270/2714/3189 3271/2715/3190 3306/2712/3187\nf 3270/2714/3189 3269/2716/3191 3279/2718/3193\nf 3270/2714/3189 3279/2718/3193 3271/2715/3190\nf 3272/3190/3702 3273/2720/3195 3278/2717/3192\nf 3279/2718/3193 3273/2720/3195 3280/2719/3194\nf 3272/3190/3702 3275/2722/3197 3273/2720/3195\nf 3273/2720/3195 3276/2723/3198 3274/2721/3196\nf 3353/3191/3703 3366/2725/3200 3354/2727/3202\nf 3354/2727/3202 3365/2726/3201 3355/2729/3204\nf 3369/2733/3208 3370/2730/3205 3348/2732/3207\nf 3368/2785/3260 3369/2733/3208 3349/2734/3209\nf 3311/2737/3212 3312/2735/3210 3347/2731/3206\nf 3312/2735/3210 3313/2736/3211 3348/2732/3207\nf 3312/2735/3210 3311/2737/3212 3357/2739/3214\nf 3313/2736/3211 3312/2735/3210 3358/2740/3215\nf 3356/2738/3213 3314/2741/3216 3357/2739/3214\nf 3357/2739/3214 3315/2742/3217 3358/2740/3215\nf 3314/2741/3216 3344/2744/3219 3315/2742/3217\nf 3315/2742/3217 3345/2745/3220 3316/2743/3218\nf 3344/2744/3219 3317/2747/3222 3345/2745/3220\nf 3345/2745/3220 3318/2748/3223 3346/2746/3221\nf 3317/2747/3222 3350/2750/3225 3318/2748/3223\nf 3318/2748/3223 3351/2751/3226 3319/2749/3224\nf 3350/2750/3225 3320/2753/3228 3351/2751/3226\nf 3321/2754/3229 3322/2755/3230 3351/2751/3226\nf 3321/2754/3229 3320/2753/3228 3342/2757/3232\nf 3322/2755/3230 3321/2754/3229 3343/2758/3233\nf 3323/3192/3704 3324/2759/3234 3341/2756/3231\nf 3324/2759/3234 3325/2760/3235 3342/2757/3232\nf 3323/3192/3704 3338/2761/3236 3324/2759/3234\nf 3324/2759/3234 3339/2762/3237 3325/2760/3235\nf 3338/2761/3236 3326/2764/3239 3339/2762/3237\nf 3339/2762/3237 3327/2765/3240 3340/2763/3238\nf 3326/2764/3239 3359/2767/3242 3327/2765/3240\nf 3327/2765/3240 3360/2768/3243 3328/2766/3241\nf 3359/2767/3242 3329/2770/3245 3360/2768/3243\nf 3360/2768/3243 3330/2771/3246 3361/2769/3244\nf 3329/2770/3245 3362/2773/3248 3330/2771/3246\nf 3331/2772/3247 3330/2771/3246 3364/2775/3250\nf 3362/2773/3248 3332/2776/3251 3363/2774/3249\nf 3333/2777/3252 3334/2778/3253 3363/2774/3249\nf 3332/2776/3251 3335/2779/3254 3333/2777/3252\nf 3333/2777/3252 3336/2780/3255 3334/2778/3253\nf 3366/2725/3200 3308/2782/3257 3365/2726/3201\nf 3365/2726/3201 3309/2783/3258 3367/2728/3203\nf 3308/2782/3257 3370/2730/3205 3309/2783/3258\nf 3310/2784/3259 3309/2783/3258 3368/2785/3260\nf 3374/2846/3321 3375/2786/3261 3412/2788/3263\nf 3429/2843/3318 3430/2789/3264 3416/2791/3266\nf 3375/2786/3261 3376/2792/3267 3411/2787/3262\nf 3430/2789/3264 3428/2794/3269 3417/2790/3265\nf 3373/3193/3705 3372/2796/3271 3410/2793/3268\nf 3372/2796/3271 3371/2797/3272 3411/2787/3262\nf 3373/3193/3705 3419/2798/3273 3372/2796/3271\nf 3371/2797/3272 3372/2796/3271 3421/2800/3275\nf 3377/3194/3706 3378/2801/3276 3419/2798/3273\nf 3420/2799/3274 3378/2801/3276 3421/2800/3275\nf 3377/3194/3706 3407/2803/3278 3378/2801/3276\nf 3378/2801/3276 3408/2804/3279 3379/2802/3277\nf 3407/2803/3278 3380/2806/3281 3408/2804/3279\nf 3408/2804/3279 3381/2807/3282 3409/2805/3280\nf 3380/2806/3281 3413/2809/3284 3381/2807/3282\nf 3381/2807/3282 3414/2810/3285 3382/2808/3283\nf 3413/2809/3284 3383/2812/3287 3414/2810/3285\nf 3414/2810/3285 3384/2813/3288 3415/2811/3286\nf 3383/2812/3287 3404/2815/3290 3384/2813/3288\nf 3384/2813/3288 3405/2816/3291 3385/2814/3289\nf 3404/2815/3290 3386/2818/3293 3405/2816/3291\nf 3387/2819/3294 3388/2820/3295 3405/2816/3291\nf 3386/2818/3293 3401/2821/3296 3387/2819/3294\nf 3388/2820/3295 3387/2819/3294 3403/2823/3298\nf 3401/2821/3296 3389/2824/3299 3402/2822/3297\nf 3402/2822/3297 3390/2825/3300 3403/2823/3298\nf 3389/2824/3299 3422/2827/3302 3390/2825/3300\nf 3390/2825/3300 3423/2828/3303 3391/2826/3301\nf 3422/2827/3302 3392/2830/3305 3423/2828/3303\nf 3423/2828/3303 3393/2831/3306 3424/2829/3304\nf 3392/2830/3305 3425/2833/3308 3393/2831/3306\nf 3394/2832/3307 3393/2831/3306 3427/2835/3310\nf 3425/2833/3308 3395/2836/3311 3426/2834/3309\nf 3396/2837/3312 3397/2838/3313 3426/2834/3309\nf 3395/2836/3311 3398/2839/3314 3396/2837/3312\nf 3397/2838/3313 3396/2837/3312 3400/2841/3316\nf 3432/2845/3320 3433/2842/3317 3429/2843/3318\nf 3433/2842/3317 3431/2844/3319 3430/2789/3264\nf 3376/2792/3267 3375/2786/3261 3432/2845/3320\nf 3375/2786/3261 3374/2846/3321 3433/2842/3317\nf 3437/2905/3380 3438/2847/3322 3475/2849/3324\nf 3479/3195/3707 3492/2850/3325 3480/2852/3327\nf 3438/2847/3322 3439/2853/3328 3474/2848/3323\nf 3480/2852/3327 3493/2851/3326 3481/2856/3331\nf 3436/3196/3708 3435/2857/3332 3473/2854/3329\nf 3435/2857/3332 3434/2858/3333 3474/2848/3323\nf 3436/3196/3708 3482/2859/3334 3435/2857/3332\nf 3434/2858/3333 3435/2857/3332 3484/2861/3336\nf 3482/2859/3334 3440/2862/3337 3483/2860/3335\nf 3483/2860/3335 3441/2863/3338 3484/2861/3336\nf 3440/2862/3337 3470/2865/3340 3441/2863/3338\nf 3441/2863/3338 3471/2866/3341 3442/2864/3339\nf 3443/2870/3345 3444/2868/3343 3470/2865/3340\nf 3471/2866/3341 3444/2868/3343 3472/2867/3342\nf 3444/2868/3343 3443/2870/3345 3477/2872/3347\nf 3444/2868/3343 3477/2872/3347 3445/2869/3344\nf 3446/3197/3709 3447/2874/3349 3476/2871/3346\nf 3477/2872/3347 3447/2874/3349 3478/2873/3348\nf 3446/3197/3709 3467/2876/3351 3447/2874/3349\nf 3448/2875/3350 3447/2874/3349 3469/2878/3353\nf 3449/3198/3710 3450/2879/3354 3467/2876/3351\nf 3450/2879/3354 3451/2880/3355 3468/2877/3352\nf 3449/3198/3710 3464/2881/3356 3450/2879/3354\nf 3451/2880/3355 3450/2879/3354 3466/2883/3358\nf 3464/2881/3356 3452/2884/3359 3465/2882/3357\nf 3465/2882/3357 3453/2885/3360 3466/2883/3358\nf 3452/2884/3359 3485/2887/3362 3453/2885/3360\nf 3453/2885/3360 3486/2888/3363 3454/2886/3361\nf 3485/2887/3362 3455/2890/3365 3486/2888/3363\nf 3456/2891/3366 3457/2892/3367 3486/2888/3363\nf 3455/2890/3365 3488/2893/3368 3456/2891/3366\nf 3457/2892/3367 3456/2891/3366 3490/2895/3370\nf 3488/2893/3368 3458/2896/3371 3489/2894/3369\nf 3459/2897/3372 3460/2898/3373 3489/2894/3369\nf 3458/2896/3371 3461/2899/3374 3459/2897/3372\nf 3460/2898/3373 3459/2897/3372 3463/2901/3376\nf 3495/2904/3379 3496/2902/3377 3492/2850/3325\nf 3496/2902/3377 3494/2903/3378 3493/2851/3326\nf 3439/2853/3328 3438/2847/3322 3495/2904/3379\nf 3438/2847/3322 3437/2905/3380 3496/2902/3377\nf 3500/2969/3444 3501/2906/3381 3538/2908/3383\nf 3542/3199/3711 3561/2909/3384 3543/2911/3386\nf 3501/2906/3381 3502/2912/3387 3537/2907/3382\nf 3543/2911/3386 3562/2910/3385 3544/2915/3390\nf 3499/3200/3712 3498/2916/3391 3536/2913/3388\nf 3498/2916/3391 3497/2917/3392 3537/2907/3382\nf 3499/3200/3712 3545/2918/3393 3498/2916/3391\nf 3497/2917/3392 3498/2916/3391 3547/2920/3395\nf 3503/2923/3398 3504/2921/3396 3545/2918/3393\nf 3546/2919/3394 3504/2921/3396 3547/2920/3395\nf 3504/2921/3396 3503/2923/3398 3534/2925/3400\nf 3504/2921/3396 3534/2925/3400 3505/2922/3397\nf 3506/2929/3404 3507/2927/3402 3533/2924/3399\nf 3534/2925/3400 3507/2927/3402 3535/2926/3401\nf 3507/2927/3402 3506/2929/3404 3540/2931/3406\nf 3507/2927/3402 3540/2931/3406 3508/2928/3403\nf 3509/2935/3410 3510/2933/3408 3539/2930/3405\nf 3540/2931/3406 3510/2933/3408 3541/2932/3407\nf 3510/2933/3408 3509/2935/3410 3531/2937/3412\nf 3511/2934/3409 3510/2933/3408 3532/2938/3413\nf 3512/2941/3416 3513/2939/3414 3530/2936/3411\nf 3513/2939/3414 3514/2940/3415 3531/2937/3412\nf 3513/2939/3414 3512/2941/3416 3528/2943/3418\nf 3514/2940/3415 3513/2939/3414 3529/2944/3419\nf 3527/2942/3417 3515/2945/3420 3528/2943/3418\nf 3516/2946/3421 3517/2947/3422 3528/2943/3418\nf 3515/2945/3420 3548/2948/3423 3516/2946/3421\nf 3516/2946/3421 3549/2949/3424 3517/2947/3422\nf 3518/2953/3428 3519/2951/3426 3548/2948/3423\nf 3549/2949/3424 3519/2951/3426 3550/2950/3425\nf 3519/2951/3426 3518/2953/3428 3552/2955/3430\nf 3520/2952/3427 3519/2951/3426 3553/2956/3431\nf 3521/2959/3434 3522/2957/3432 3551/2954/3429\nf 3552/2955/3430 3522/2957/3432 3553/2956/3431\nf 3522/2957/3432 3521/2959/3434 3525/2961/3436\nf 3523/2958/3433 3522/2957/3432 3526/2962/3437\nf 3558/2968/3443 3559/2963/3438 3555/2965/3440\nf 3556/2964/3439 3559/2963/3438 3554/2967/3442\nf 3502/2912/3387 3501/2906/3381 3558/2968/3443\nf 3501/2906/3381 3500/2969/3444 3559/2963/3438\nf 3561/2909/3384 3555/2965/3440 3562/2910/3385\nf 3562/2910/3385 3556/2964/3439 3560/2914/3389\nf 3566/3034/3509 3567/2970/3445 3604/2972/3447\nf 3608/3201/3713 3627/2973/3448 3609/2975/3450\nf 3567/2970/3445 3568/2976/3451 3603/2971/3446\nf 3609/2975/3450 3628/2974/3449 3610/2979/3454\nf 3602/2977/3452 3565/2980/3455 3603/2971/3446\nf 3564/2981/3456 3563/2982/3457 3603/2971/3446\nf 3565/2980/3455 3611/2983/3458 3564/2981/3456\nf 3564/2981/3456 3612/2984/3459 3563/2982/3457\nf 3611/2983/3458 3569/2986/3461 3612/2984/3459\nf 3612/2984/3459 3570/2987/3462 3613/2985/3460\nf 3569/2986/3461 3599/2989/3464 3570/2987/3462\nf 3570/2987/3462 3600/2990/3465 3571/2988/3463\nf 3599/2989/3464 3572/2992/3467 3600/2990/3465\nf 3600/2990/3465 3573/2993/3468 3601/2991/3466\nf 3573/2993/3468 3572/2992/3467 3606/2996/3471\nf 3573/2993/3468 3606/2996/3471 3574/2994/3469\nf 3605/2995/3470 3575/2998/3473 3606/2996/3471\nf 3606/2996/3471 3576/2999/3474 3607/2997/3472\nf 3575/2998/3473 3596/3001/3476 3576/2999/3474\nf 3576/2999/3474 3597/3002/3477 3577/3000/3475\nf 3596/3001/3476 3578/3004/3479 3597/3002/3477\nf 3579/3005/3480 3580/3006/3481 3597/3002/3477\nf 3578/3004/3479 3593/3007/3482 3579/3005/3480\nf 3579/3005/3480 3594/3008/3483 3580/3006/3481\nf 3593/3007/3482 3581/3010/3485 3594/3008/3483\nf 3594/3008/3483 3582/3011/3486 3595/3009/3484\nf 3581/3010/3485 3614/3013/3488 3582/3011/3486\nf 3582/3011/3486 3615/3014/3489 3583/3012/3487\nf 3614/3013/3488 3584/3016/3491 3615/3014/3489\nf 3615/3014/3489 3585/3017/3492 3616/3015/3490\nf 3585/3017/3492 3584/3016/3491 3618/3020/3495\nf 3586/3018/3493 3585/3017/3492 3619/3021/3496\nf 3587/3202/3714 3588/3022/3497 3617/3019/3494\nf 3588/3022/3497 3589/3023/3498 3618/3020/3495\nf 3670/3072/3547 3590/3024/3499 3669/3026/3501\nf 3669/3026/3501 3591/3025/3500 3642/3028/3503\nf 3621/3035/3510 3624/3029/3504 3622/3031/3506\nf 3622/3031/3506 3625/3030/3505 3620/3033/3508\nf 3568/2976/3451 3567/2970/3445 3624/3029/3504\nf 3567/2970/3445 3566/3034/3509 3625/3030/3505\nf 3627/2973/3448 3621/3035/3510 3628/2974/3449\nf 3628/2974/3449 3622/3031/3506 3626/2978/3453\nf 3661/3054/3529 3662/3036/3511 3659/3038/3513\nf 3637/3051/3526 3660/3037/3512 3638/3039/3514\nf 3629/3045/3520 3635/3040/3515 3643/3042/3517\nf 3643/3042/3517 3656/3041/3516 3644/3044/3519\nf 3636/3048/3523 3629/3045/3520 3658/3046/3521\nf 3658/3046/3521 3643/3042/3517 3657/3047/3522\nf 3630/3203/3715 3636/3048/3523 3645/3049/3524\nf 3645/3049/3524 3658/3046/3521 3646/3050/3525\nf 3630/3203/3715 3645/3049/3524 3637/3051/3526\nf 3660/3037/3512 3645/3049/3524 3659/3038/3513\nf 3647/3053/3528 3631/3052/3527 3662/3036/3511\nf 3648/3057/3532 3647/3053/3528 3661/3054/3529\nf 3631/3052/3527 3647/3053/3528 3639/3056/3531\nf 3664/3055/3530 3647/3053/3528 3663/3058/3533\nf 3649/3061/3536 3632/3059/3534 3664/3055/3530\nf 3649/3061/3536 3664/3055/3530 3650/3060/3535\nf 3632/3059/3534 3649/3061/3536 3640/3063/3538\nf 3666/3062/3537 3649/3061/3536 3665/3064/3539\nf 3651/3066/3541 3633/3065/3540 3666/3062/3537\nf 3652/3068/3543 3651/3066/3541 3665/3064/3539\nf 3641/3070/3545 3633/3065/3540 3668/3067/3542\nf 3651/3066/3541 3652/3068/3543 3668/3067/3542\nf 3634/3204/3716 3641/3070/3545 3653/3071/3546\nf 3654/3205/3717 3653/3071/3546 3667/3069/3544\nf 3589/3023/3498 3588/3022/3497 3642/3028/3503\nf 3587/3202/3714 3670/3072/3547 3588/3022/3497\nf 3700/3094/3569 3702/3073/3548 3701/3075/3550\nf 3701/3075/3550 3703/3074/3549 3679/3077/3552\nf 3710/3115/3590 3677/3078/3553 3712/3080/3555\nf 3712/3080/3555 3697/3079/3554 3711/3082/3557\nf 3678/3088/3563 3715/3083/3558 3699/3085/3560\nf 3699/3085/3560 3713/3084/3559 3698/3087/3562\nf 3716/3119/3594 3678/3088/3563 3717/3089/3564\nf 3717/3089/3564 3699/3085/3560 3718/3090/3565\nf 3679/3077/3552 3672/3091/3566 3701/3075/3550\nf 3701/3075/3550 3686/3092/3567 3700/3094/3569\nf 3688/3097/3572 3673/3095/3570 3703/3074/3549\nf 3688/3097/3572 3703/3074/3549 3689/3096/3571\nf 3681/3100/3575 3673/3095/3570 3705/3098/3573\nf 3705/3098/3573 3688/3097/3572 3704/3099/3574\nf 3674/3103/3578 3681/3100/3575 3690/3101/3576\nf 3690/3101/3576 3705/3098/3573 3691/3102/3577\nf 3682/3106/3581 3674/3103/3578 3707/3104/3579\nf 3707/3104/3579 3690/3101/3576 3706/3105/3580\nf 3675/3109/3584 3682/3106/3581 3692/3107/3582\nf 3692/3107/3582 3707/3104/3579 3693/3108/3583\nf 3683/3112/3587 3675/3109/3584 3709/3110/3585\nf 3709/3110/3585 3692/3107/3582 3708/3111/3586\nf 3676/3206/3718 3683/3112/3587 3694/3113/3588\nf 3694/3113/3588 3709/3110/3585 3695/3114/3589\nf 3671/3118/3593 3710/3115/3590 3684/3116/3591\nf 3684/3116/3591 3712/3080/3555 3685/3117/3592\nf 3715/3083/3558 3671/3118/3593 3713/3084/3559\nf 3713/3084/3559 3684/3116/3591 3714/3086/3561\nf 3672/3091/3566 3716/3119/3594 3686/3092/3567\nf 3686/3092/3567 3717/3089/3564 3687/3093/3568\no face-highpolyeyes\nv 0.024460 0.031937 0.127970\nv 0.022990 0.031957 0.126930\nv 0.019790 0.031947 0.125770\nv 0.017440 0.031957 0.124030\nv 0.015520 0.031987 0.121750\nv 0.014020 0.032007 0.119360\nv 0.013110 0.032047 0.116540\nv 0.012630 0.032057 0.113730\nv 0.012810 0.032077 0.110820\nv 0.013380 0.032077 0.107920\nv 0.024670 0.033087 0.127980\nv 0.023260 0.033497 0.126950\nv 0.020220 0.034477 0.125830\nv 0.017920 0.035177 0.124100\nv 0.016050 0.035767 0.121860\nv 0.014550 0.036197 0.119420\nv 0.013660 0.036487 0.116610\nv 0.013160 0.036597 0.113740\nv 0.013340 0.036527 0.110800\nv 0.013880 0.036247 0.107900\nv 0.025220 0.034097 0.127960\nv 0.024050 0.034907 0.126880\nv 0.021430 0.036657 0.125750\nv 0.019510 0.037957 0.123990\nv 0.017890 0.038977 0.121710\nv 0.016640 0.039777 0.119290\nv 0.015840 0.040227 0.116460\nv 0.015430 0.040477 0.113680\nv 0.015520 0.040257 0.110710\nv 0.015980 0.039837 0.107830\nv 0.026120 0.034917 0.127890\nv 0.025260 0.036047 0.126810\nv 0.023360 0.038457 0.125640\nv 0.021930 0.040237 0.123900\nv 0.020750 0.041687 0.121600\nv 0.019800 0.042787 0.119130\nv 0.019200 0.043417 0.116300\nv 0.018800 0.043707 0.113480\nv 0.018880 0.043467 0.110560\nv 0.019140 0.042867 0.107680\nv 0.027180 0.035427 0.127870\nv 0.026760 0.036757 0.126740\nv 0.025660 0.039607 0.125600\nv 0.024840 0.041737 0.123830\nv 0.024110 0.043437 0.121510\nv 0.023550 0.044777 0.119000\nv 0.023110 0.045507 0.116170\nv 0.022860 0.045867 0.113300\nv 0.022780 0.045557 0.110360\nv 0.022880 0.044867 0.107500\nv 0.028390 0.035617 0.127780\nv 0.028400 0.036997 0.126640\nv 0.028260 0.039977 0.125370\nv 0.028180 0.042157 0.123560\nv 0.028050 0.043917 0.121210\nv 0.027950 0.045247 0.118760\nv 0.027760 0.046017 0.115880\nv 0.027620 0.046387 0.113100\nv 0.027450 0.046047 0.110150\nv 0.027290 0.045337 0.107280\nv 0.029610 0.035427 0.127730\nv 0.030030 0.036757 0.126580\nv 0.030920 0.039617 0.125290\nv 0.031520 0.041747 0.123430\nv 0.032020 0.043437 0.121110\nv 0.032370 0.044767 0.118600\nv 0.032450 0.045497 0.115710\nv 0.032370 0.045867 0.112820\nv 0.032110 0.045547 0.109870\nv 0.031690 0.044857 0.107000\nv 0.030650 0.034927 0.127660\nv 0.031500 0.036017 0.126490\nv 0.033210 0.038457 0.125120\nv 0.034430 0.040237 0.123210\nv 0.035370 0.041677 0.120850\nv 0.036110 0.042787 0.118370\nv 0.036370 0.043427 0.115490\nv 0.036440 0.043717 0.112630\nv 0.036050 0.043477 0.109690\nv 0.035420 0.042877 0.106840\nv 0.031500 0.034097 0.127620\nv 0.032650 0.034907 0.126420\nv 0.035090 0.036647 0.125020\nv 0.036890 0.037927 0.123050\nv 0.038250 0.038967 0.120660\nv 0.039280 0.039797 0.118130\nv 0.039720 0.040217 0.115230\nv 0.039850 0.040467 0.112380\nv 0.039370 0.040287 0.109490\nv 0.038560 0.039877 0.106650\nv 0.032040 0.033087 0.127590\nv 0.033390 0.033487 0.126400\nv 0.036310 0.034447 0.124980\nv 0.038490 0.035147 0.122990\nv 0.040100 0.035757 0.120580\nv 0.041370 0.036207 0.117990\nv 0.041930 0.036497 0.115110\nv 0.042110 0.036607 0.112200\nv 0.041560 0.036547 0.109310\nv 0.040620 0.036307 0.106480\nv 0.032220 0.031927 0.127560\nv 0.033620 0.031927 0.126350\nv 0.036650 0.031947 0.124880\nv 0.038860 0.031947 0.122890\nv 0.040530 0.031977 0.120440\nv 0.041800 0.031997 0.117900\nv 0.042420 0.032027 0.115030\nv 0.042610 0.032037 0.112180\nv 0.042070 0.032087 0.109320\nv 0.041110 0.032117 0.106490\nv 0.032040 0.030747 0.127550\nv 0.033380 0.030367 0.126360\nv 0.036270 0.029407 0.124930\nv 0.038430 0.028737 0.122940\nv 0.040020 0.028197 0.120500\nv 0.041280 0.027797 0.117880\nv 0.041870 0.027567 0.115020\nv 0.042070 0.027497 0.112120\nv 0.041530 0.027617 0.109250\nv 0.040600 0.027907 0.106420\nv 0.031490 0.029767 0.127570\nv 0.032620 0.028967 0.126380\nv 0.035040 0.027227 0.124950\nv 0.036810 0.025947 0.122970\nv 0.038160 0.024967 0.120540\nv 0.039180 0.024197 0.117980\nv 0.039650 0.023777 0.115120\nv 0.039790 0.023597 0.112270\nv 0.039330 0.023847 0.109390\nv 0.038520 0.024287 0.106560\nv 0.030630 0.028937 0.127620\nv 0.031470 0.027847 0.126460\nv 0.033150 0.025407 0.125050\nv 0.034360 0.023627 0.123110\nv 0.035290 0.022247 0.120700\nv 0.036020 0.021157 0.118170\nv 0.036290 0.020567 0.115330\nv 0.036350 0.020297 0.112460\nv 0.035970 0.020587 0.109580\nv 0.035350 0.021227 0.106740\nv 0.029570 0.028447 0.127720\nv 0.029980 0.027127 0.126560\nv 0.030870 0.024257 0.125210\nv 0.031450 0.022107 0.123300\nv 0.031940 0.020467 0.120940\nv 0.032280 0.019167 0.118390\nv 0.032370 0.018457 0.115530\nv 0.032290 0.018127 0.112650\nv 0.032040 0.018477 0.109730\nv 0.031600 0.019207 0.106880\nv 0.028360 0.028257 0.127790\nv 0.028350 0.026917 0.126610\nv 0.028200 0.023927 0.125280\nv 0.028100 0.021737 0.123430\nv 0.027970 0.019977 0.121080\nv 0.027860 0.018687 0.118610\nv 0.027680 0.017947 0.115770\nv 0.027540 0.017567 0.112910\nv 0.027370 0.017977 0.110040\nv 0.027200 0.018727 0.107170\nv 0.027130 0.028457 0.127850\nv 0.026710 0.027157 0.126710\nv 0.025580 0.024297 0.125510\nv 0.024740 0.022157 0.123700\nv 0.024010 0.020487 0.121400\nv 0.023450 0.019167 0.118890\nv 0.023040 0.018437 0.116050\nv 0.022790 0.018067 0.113150\nv 0.022710 0.018447 0.110240\nv 0.022790 0.019197 0.107380\nv 0.026090 0.028937 0.127860\nv 0.025200 0.027877 0.126770\nv 0.023270 0.025447 0.125570\nv 0.021830 0.023667 0.123790\nv 0.020650 0.022267 0.121490\nv 0.019710 0.021167 0.119050\nv 0.019140 0.020567 0.116200\nv 0.018760 0.020257 0.113350\nv 0.018820 0.020577 0.110450\nv 0.019070 0.021227 0.107600\nv 0.025180 0.029777 0.127920\nv 0.023990 0.028987 0.126840\nv 0.021330 0.027247 0.125690\nv 0.019380 0.025957 0.123920\nv 0.017780 0.024967 0.121650\nv 0.016550 0.024207 0.119220\nv 0.015780 0.023787 0.116380\nv 0.015390 0.023577 0.113540\nv 0.015480 0.023817 0.110630\nv 0.015920 0.024267 0.107770\nv 0.024650 0.030767 0.127960\nv 0.023220 0.030397 0.126920\nv 0.020130 0.029437 0.125800\nv 0.017810 0.028727 0.124060\nv 0.015960 0.028197 0.121810\nv 0.014470 0.027817 0.119370\nv 0.013630 0.027577 0.116540\nv 0.013150 0.027517 0.113670\nv 0.013310 0.027617 0.110740\nv 0.013840 0.027877 0.107870\nv 0.031670 0.031917 0.127880\nv 0.028390 0.035067 0.128090\nv 0.025050 0.031917 0.128230\nv 0.028350 0.028797 0.128080\nv 0.025380 0.031217 0.128320\nv 0.029090 0.029097 0.128150\nv 0.031370 0.032627 0.128030\nv 0.027660 0.034767 0.128260\nv 0.027610 0.029087 0.128250\nv 0.031370 0.031217 0.128000\nv 0.029120 0.034767 0.128170\nv 0.025380 0.032627 0.128340\nv 0.025890 0.030347 0.128350\nv 0.030000 0.029587 0.128150\nv 0.030850 0.033477 0.128130\nv 0.026760 0.034277 0.128370\nv 0.026720 0.029577 0.128340\nv 0.030850 0.030357 0.128070\nv 0.030010 0.034287 0.128190\nv 0.025900 0.033477 0.128400\nv 0.026620 0.032767 0.128710\nv 0.027500 0.033597 0.128670\nv 0.028370 0.034277 0.128490\nv 0.025890 0.031927 0.128580\nv 0.026620 0.031077 0.128670\nv 0.027460 0.031927 0.128850\nv 0.028370 0.032797 0.128810\nv 0.029250 0.033597 0.128570\nv 0.029240 0.030267 0.128540\nv 0.030120 0.031067 0.128470\nv 0.030860 0.031927 0.128300\nv 0.028350 0.029567 0.128460\nv 0.028370 0.031067 0.128780\nv 0.030120 0.032757 0.128510\nv 0.027480 0.030267 0.128640\nv 0.029280 0.031927 0.128740\nv 0.023500 0.031947 0.127390\nv 0.023760 0.033357 0.127400\nv 0.024460 0.034617 0.127340\nv 0.025560 0.035647 0.127290\nv 0.026900 0.036287 0.127230\nv 0.028390 0.036507 0.127130\nv 0.029890 0.036287 0.127090\nv 0.031200 0.035647 0.126990\nv 0.032260 0.034627 0.126930\nv 0.032920 0.033357 0.126910\nv 0.033130 0.031937 0.126870\nv 0.032900 0.030517 0.126880\nv 0.032230 0.029247 0.126890\nv 0.031160 0.028217 0.126960\nv 0.029840 0.027587 0.127070\nv 0.028350 0.027387 0.127110\nv 0.026850 0.027607 0.127190\nv 0.025500 0.028257 0.127250\nv 0.024420 0.029277 0.127310\nv 0.023710 0.030527 0.127370\nv 0.025650 0.031897 0.125650\nv 0.023780 0.031937 0.126420\nv 0.020030 0.031937 0.125720\nv 0.017730 0.031957 0.123940\nv 0.015840 0.032007 0.121540\nv 0.014360 0.031997 0.119180\nv 0.013480 0.032047 0.116470\nv 0.013030 0.032067 0.113720\nv 0.013190 0.032067 0.110890\nv 0.013740 0.032077 0.108110\nv 0.025790 0.032567 0.125660\nv 0.024000 0.033237 0.126440\nv 0.020450 0.034387 0.125780\nv 0.018190 0.035047 0.124020\nv 0.016350 0.035607 0.121650\nv 0.014870 0.036037 0.119240\nv 0.014020 0.036337 0.116530\nv 0.013540 0.036447 0.113740\nv 0.013700 0.036367 0.110870\nv 0.014220 0.036097 0.108080\nv 0.026250 0.033377 0.125660\nv 0.024690 0.034477 0.126410\nv 0.021630 0.036527 0.125700\nv 0.019760 0.037807 0.123910\nv 0.018170 0.038827 0.121500\nv 0.016940 0.039597 0.119110\nv 0.016170 0.040027 0.116380\nv 0.015750 0.040267 0.113650\nv 0.015850 0.040057 0.110790\nv 0.016290 0.039667 0.108010\nv 0.027010 0.033717 0.125630\nv 0.025700 0.035407 0.126350\nv 0.023510 0.038277 0.125590\nv 0.022090 0.040007 0.123830\nv 0.020910 0.041407 0.121390\nv 0.019980 0.042487 0.118950\nv 0.019400 0.043117 0.116220\nv 0.019030 0.043387 0.113480\nv 0.019090 0.043147 0.110640\nv 0.019340 0.042567 0.107880\nv 0.027680 0.034067 0.125590\nv 0.027030 0.036057 0.126270\nv 0.025750 0.039387 0.125540\nv 0.024960 0.041477 0.123740\nv 0.024260 0.043137 0.121290\nv 0.023700 0.044447 0.118810\nv 0.023280 0.045157 0.116090\nv 0.023020 0.045497 0.113270\nv 0.022950 0.045177 0.110430\nv 0.023050 0.044537 0.107680\nv 0.028400 0.034367 0.125560\nv 0.028390 0.036237 0.126160\nv 0.028300 0.039747 0.125350\nv 0.028180 0.041877 0.123480\nv 0.028070 0.043597 0.121040\nv 0.027940 0.044907 0.118580\nv 0.027760 0.045627 0.115810\nv 0.027620 0.045987 0.113070\nv 0.027450 0.045667 0.110240\nv 0.027300 0.044987 0.107470\nv 0.029080 0.034077 0.125500\nv 0.029760 0.036037 0.126130\nv 0.030840 0.039397 0.125240\nv 0.031400 0.041477 0.123350\nv 0.031880 0.043127 0.120910\nv 0.032200 0.044457 0.118430\nv 0.032280 0.045157 0.115650\nv 0.032200 0.045497 0.112800\nv 0.031950 0.045187 0.109960\nv 0.031540 0.044547 0.107200\nv 0.029750 0.033717 0.125470\nv 0.031060 0.035417 0.126060\nv 0.033080 0.038257 0.125080\nv 0.034280 0.039997 0.123130\nv 0.035200 0.041427 0.120650\nv 0.035920 0.042487 0.118180\nv 0.036170 0.043117 0.115410\nv 0.036210 0.043387 0.112590\nv 0.035840 0.043157 0.109770\nv 0.035250 0.042587 0.107020\nv 0.030490 0.033387 0.125370\nv 0.032020 0.034477 0.126000\nv 0.034880 0.036507 0.124980\nv 0.036640 0.037767 0.122980\nv 0.037980 0.038787 0.120460\nv 0.038970 0.039597 0.117950\nv 0.039400 0.040027 0.115170\nv 0.039510 0.040267 0.112370\nv 0.039050 0.040077 0.109580\nv 0.038260 0.039697 0.106840\nv 0.030930 0.032567 0.125310\nv 0.032670 0.033237 0.125950\nv 0.036080 0.034367 0.124940\nv 0.038230 0.035027 0.122910\nv 0.039800 0.035607 0.120370\nv 0.041030 0.036047 0.117800\nv 0.041560 0.036337 0.115030\nv 0.041740 0.036447 0.112190\nv 0.041200 0.036377 0.109380\nv 0.040300 0.036157 0.106670\nv 0.031060 0.031907 0.125280\nv 0.032870 0.031917 0.125890\nv 0.036420 0.031937 0.124840\nv 0.038570 0.031957 0.122810\nv 0.040210 0.031977 0.120240\nv 0.041450 0.031997 0.117710\nv 0.042040 0.032037 0.114960\nv 0.042220 0.032057 0.112170\nv 0.041700 0.032087 0.109390\nv 0.040770 0.032107 0.106670\nv 0.030920 0.031217 0.125280\nv 0.032650 0.030607 0.125910\nv 0.036040 0.029497 0.124900\nv 0.038160 0.028857 0.122860\nv 0.039720 0.028327 0.120290\nv 0.040940 0.027957 0.117700\nv 0.041510 0.027727 0.114950\nv 0.041700 0.027677 0.112120\nv 0.041170 0.027787 0.109320\nv 0.040280 0.028057 0.106610\nv 0.030470 0.030437 0.125320\nv 0.031990 0.029367 0.125960\nv 0.034830 0.027367 0.124910\nv 0.036570 0.026107 0.122890\nv 0.037890 0.025137 0.120340\nv 0.038870 0.024387 0.117800\nv 0.039320 0.023987 0.115040\nv 0.039460 0.023797 0.112260\nv 0.039010 0.024047 0.109480\nv 0.038220 0.024477 0.106740\nv 0.029740 0.030097 0.125430\nv 0.031020 0.028457 0.126030\nv 0.033020 0.025627 0.125030\nv 0.034210 0.023867 0.123020\nv 0.035120 0.022497 0.120490\nv 0.035830 0.021467 0.117980\nv 0.036100 0.020897 0.115250\nv 0.036140 0.020627 0.112450\nv 0.035770 0.020917 0.109650\nv 0.035180 0.021537 0.106910\nv 0.029070 0.029757 0.125480\nv 0.029720 0.027827 0.126100\nv 0.030790 0.024487 0.125170\nv 0.031330 0.022377 0.123220\nv 0.031800 0.020777 0.120740\nv 0.032110 0.019497 0.118220\nv 0.032200 0.018807 0.115470\nv 0.032120 0.018487 0.112640\nv 0.031860 0.018837 0.109820\nv 0.031440 0.019547 0.107070\nv 0.028340 0.029387 0.125450\nv 0.028350 0.027627 0.126140\nv 0.028230 0.024157 0.125270\nv 0.028090 0.022007 0.123350\nv 0.027970 0.020297 0.120870\nv 0.027850 0.019027 0.118420\nv 0.027680 0.018327 0.115690\nv 0.027540 0.017967 0.112900\nv 0.027370 0.018337 0.110110\nv 0.027210 0.019077 0.107350\nv 0.027640 0.029767 0.125560\nv 0.026980 0.027847 0.126230\nv 0.025670 0.024527 0.125450\nv 0.024860 0.022427 0.123610\nv 0.024160 0.020787 0.121170\nv 0.023610 0.019487 0.118700\nv 0.023200 0.018787 0.115950\nv 0.022960 0.018457 0.113130\nv 0.022880 0.018807 0.110300\nv 0.022960 0.019537 0.107560\nv 0.026980 0.030087 0.125600\nv 0.025650 0.028477 0.126320\nv 0.023420 0.025647 0.125520\nv 0.021980 0.023897 0.123710\nv 0.020810 0.022527 0.121290\nv 0.019890 0.021467 0.118870\nv 0.019340 0.020877 0.116120\nv 0.018970 0.020597 0.113340\nv 0.019030 0.020907 0.110530\nv 0.019260 0.021507 0.107770\nv 0.026220 0.030437 0.125620\nv 0.024650 0.029407 0.126370\nv 0.021540 0.027387 0.125640\nv 0.019630 0.026117 0.123840\nv 0.018050 0.025147 0.121440\nv 0.016850 0.024387 0.119030\nv 0.016110 0.023987 0.116290\nv 0.015720 0.023797 0.113520\nv 0.015810 0.024027 0.110720\nv 0.016230 0.024467 0.107950\nv 0.025790 0.031217 0.125640\nv 0.023960 0.030647 0.126420\nv 0.020370 0.029517 0.125750\nv 0.018080 0.028837 0.123980\nv 0.016270 0.028337 0.121610\nv 0.014800 0.027967 0.119180\nv 0.013990 0.027737 0.116460\nv 0.013530 0.027687 0.113660\nv 0.013670 0.027777 0.110810\nv 0.014180 0.028037 0.108060\nv 0.030270 0.031897 0.125220\nv 0.028370 0.033707 0.125360\nv 0.026480 0.031897 0.125440\nv 0.028360 0.030107 0.125320\nv 0.026700 0.031507 0.125380\nv 0.028760 0.030317 0.125260\nv 0.030050 0.032267 0.125200\nv 0.027970 0.033487 0.125340\nv 0.027960 0.030317 0.125310\nv 0.030050 0.031507 0.125190\nv 0.028770 0.033477 0.125290\nv 0.026700 0.032257 0.125390\nv 0.027050 0.031047 0.125340\nv 0.029250 0.030647 0.125210\nv 0.029690 0.032737 0.125220\nv 0.027490 0.033147 0.125350\nv 0.027480 0.030637 0.125310\nv 0.029690 0.031057 0.125190\nv 0.029250 0.033147 0.125260\nv 0.027050 0.032737 0.125370\nv 0.027510 0.032297 0.125200\nv 0.027940 0.032717 0.125190\nv 0.028370 0.033077 0.125200\nv 0.027110 0.031897 0.125250\nv 0.027510 0.031477 0.125180\nv 0.027940 0.031887 0.125110\nv 0.028370 0.032297 0.125100\nv 0.028810 0.032697 0.125130\nv 0.028810 0.031067 0.125100\nv 0.029230 0.031477 0.125080\nv 0.029630 0.031897 0.125110\nv 0.028370 0.030707 0.125160\nv 0.028370 0.031477 0.125090\nv 0.029230 0.032307 0.125100\nv 0.027940 0.031077 0.125160\nv 0.028800 0.031897 0.125070\nv 0.024760 0.031917 0.126030\nv 0.024940 0.032897 0.126050\nv 0.025500 0.033917 0.126020\nv 0.026260 0.034647 0.126000\nv 0.027360 0.035157 0.125910\nv 0.028400 0.035307 0.125840\nv 0.029430 0.035157 0.125810\nv 0.030480 0.034647 0.125740\nv 0.031240 0.033927 0.125680\nv 0.031770 0.032897 0.125630\nv 0.031930 0.031907 0.125580\nv 0.031750 0.030917 0.125600\nv 0.031220 0.029907 0.125640\nv 0.030450 0.029197 0.125700\nv 0.029380 0.028677 0.125780\nv 0.028340 0.028537 0.125810\nv 0.027310 0.028707 0.125870\nv 0.026200 0.029207 0.125970\nv 0.025480 0.029927 0.125980\nv 0.024910 0.030927 0.126030\nv 0.022730 0.031947 0.126510\nv 0.023000 0.033537 0.126550\nv 0.023860 0.035057 0.126480\nv 0.025100 0.036207 0.126400\nv 0.026700 0.036997 0.126320\nv 0.028390 0.037217 0.126200\nv 0.030080 0.036997 0.126160\nv 0.031630 0.036217 0.126060\nv 0.032810 0.035047 0.126000\nv 0.033630 0.033537 0.125950\nv 0.033860 0.031927 0.125880\nv 0.033620 0.030317 0.125910\nv 0.032800 0.028827 0.125940\nv 0.031600 0.027667 0.126020\nv 0.030030 0.026897 0.126130\nv 0.028330 0.026667 0.126150\nv 0.026650 0.026917 0.126280\nv 0.025030 0.027707 0.126360\nv 0.023800 0.028857 0.126440\nv 0.022950 0.030367 0.126520\nv -0.024460 0.031937 0.127970\nv -0.022990 0.031957 0.126930\nv -0.019790 0.031947 0.125770\nv -0.017440 0.031957 0.124030\nv -0.015520 0.031987 0.121750\nv -0.014020 0.032007 0.119360\nv -0.013110 0.032047 0.116540\nv -0.012630 0.032057 0.113730\nv -0.012810 0.032077 0.110820\nv -0.013380 0.032077 0.107920\nv -0.024670 0.033087 0.127980\nv -0.023260 0.033497 0.126950\nv -0.020220 0.034477 0.125830\nv -0.017920 0.035177 0.124100\nv -0.016050 0.035767 0.121860\nv -0.014550 0.036197 0.119420\nv -0.013660 0.036487 0.116610\nv -0.013160 0.036597 0.113740\nv -0.013340 0.036527 0.110800\nv -0.013880 0.036247 0.107900\nv -0.025220 0.034097 0.127960\nv -0.024050 0.034907 0.126880\nv -0.021430 0.036657 0.125750\nv -0.019510 0.037957 0.123990\nv -0.017890 0.038977 0.121710\nv -0.016640 0.039777 0.119290\nv -0.015840 0.040227 0.116460\nv -0.015430 0.040477 0.113680\nv -0.015520 0.040257 0.110710\nv -0.015980 0.039837 0.107830\nv -0.026120 0.034917 0.127890\nv -0.025260 0.036047 0.126810\nv -0.023360 0.038457 0.125640\nv -0.021930 0.040237 0.123900\nv -0.020750 0.041687 0.121600\nv -0.019800 0.042787 0.119130\nv -0.019200 0.043417 0.116300\nv -0.018800 0.043707 0.113480\nv -0.018880 0.043467 0.110560\nv -0.019140 0.042867 0.107680\nv -0.027180 0.035427 0.127870\nv -0.026760 0.036757 0.126740\nv -0.025660 0.039607 0.125600\nv -0.024840 0.041737 0.123830\nv -0.024110 0.043437 0.121510\nv -0.023550 0.044777 0.119000\nv -0.023110 0.045507 0.116170\nv -0.022860 0.045867 0.113300\nv -0.022780 0.045557 0.110360\nv -0.022880 0.044867 0.107500\nv -0.028390 0.035617 0.127780\nv -0.028400 0.036997 0.126650\nv -0.028260 0.039977 0.125370\nv -0.028180 0.042157 0.123560\nv -0.028050 0.043917 0.121210\nv -0.027950 0.045247 0.118760\nv -0.027760 0.046017 0.115880\nv -0.027620 0.046387 0.113100\nv -0.027450 0.046047 0.110150\nv -0.027290 0.045337 0.107280\nv -0.029610 0.035427 0.127730\nv -0.030030 0.036757 0.126580\nv -0.030920 0.039617 0.125290\nv -0.031520 0.041747 0.123430\nv -0.032020 0.043437 0.121110\nv -0.032370 0.044767 0.118600\nv -0.032450 0.045497 0.115710\nv -0.032370 0.045867 0.112820\nv -0.032110 0.045547 0.109870\nv -0.031690 0.044857 0.107000\nv -0.030650 0.034927 0.127660\nv -0.031500 0.036017 0.126490\nv -0.033210 0.038457 0.125120\nv -0.034430 0.040237 0.123210\nv -0.035370 0.041677 0.120850\nv -0.036110 0.042787 0.118370\nv -0.036370 0.043427 0.115490\nv -0.036440 0.043717 0.112630\nv -0.036050 0.043477 0.109690\nv -0.035420 0.042887 0.106840\nv -0.031500 0.034097 0.127620\nv -0.032650 0.034907 0.126420\nv -0.035090 0.036647 0.125020\nv -0.036890 0.037927 0.123050\nv -0.038250 0.038967 0.120660\nv -0.039280 0.039797 0.118130\nv -0.039720 0.040217 0.115230\nv -0.039850 0.040467 0.112380\nv -0.039370 0.040287 0.109490\nv -0.038560 0.039877 0.106650\nv -0.032040 0.033087 0.127590\nv -0.033390 0.033487 0.126400\nv -0.036310 0.034447 0.124980\nv -0.038490 0.035147 0.122990\nv -0.040100 0.035757 0.120580\nv -0.041370 0.036207 0.117990\nv -0.041930 0.036497 0.115110\nv -0.042110 0.036607 0.112200\nv -0.041560 0.036547 0.109310\nv -0.040620 0.036307 0.106480\nv -0.032220 0.031927 0.127560\nv -0.033620 0.031927 0.126350\nv -0.036650 0.031947 0.124880\nv -0.038860 0.031947 0.122890\nv -0.040530 0.031977 0.120440\nv -0.041800 0.031997 0.117900\nv -0.042420 0.032027 0.115030\nv -0.042610 0.032037 0.112180\nv -0.042070 0.032087 0.109320\nv -0.041110 0.032117 0.106490\nv -0.032040 0.030747 0.127550\nv -0.033380 0.030367 0.126360\nv -0.036270 0.029407 0.124930\nv -0.038430 0.028737 0.122940\nv -0.040020 0.028197 0.120500\nv -0.041280 0.027797 0.117880\nv -0.041870 0.027567 0.115020\nv -0.042070 0.027497 0.112120\nv -0.041530 0.027617 0.109250\nv -0.040600 0.027907 0.106420\nv -0.031490 0.029767 0.127570\nv -0.032620 0.028967 0.126380\nv -0.035040 0.027227 0.124950\nv -0.036810 0.025947 0.122970\nv -0.038160 0.024967 0.120540\nv -0.039180 0.024197 0.117980\nv -0.039650 0.023787 0.115120\nv -0.039790 0.023597 0.112270\nv -0.039330 0.023847 0.109390\nv -0.038520 0.024287 0.106560\nv -0.030630 0.028937 0.127620\nv -0.031470 0.027847 0.126460\nv -0.033150 0.025407 0.125050\nv -0.034360 0.023627 0.123110\nv -0.035290 0.022247 0.120700\nv -0.036020 0.021157 0.118170\nv -0.036290 0.020567 0.115330\nv -0.036350 0.020297 0.112460\nv -0.035970 0.020587 0.109580\nv -0.035350 0.021227 0.106740\nv -0.029570 0.028447 0.127720\nv -0.029980 0.027127 0.126560\nv -0.030870 0.024257 0.125210\nv -0.031450 0.022097 0.123300\nv -0.031940 0.020467 0.120940\nv -0.032280 0.019167 0.118390\nv -0.032370 0.018457 0.115530\nv -0.032290 0.018127 0.112650\nv -0.032040 0.018477 0.109730\nv -0.031600 0.019207 0.106880\nv -0.028360 0.028257 0.127790\nv -0.028350 0.026917 0.126610\nv -0.028200 0.023927 0.125280\nv -0.028090 0.021727 0.123430\nv -0.027970 0.019977 0.121080\nv -0.027860 0.018687 0.118610\nv -0.027680 0.017947 0.115770\nv -0.027540 0.017567 0.112910\nv -0.027370 0.017977 0.110040\nv -0.027200 0.018727 0.107170\nv -0.027130 0.028457 0.127850\nv -0.026710 0.027157 0.126710\nv -0.025580 0.024297 0.125510\nv -0.024740 0.022157 0.123700\nv -0.024010 0.020487 0.121400\nv -0.023450 0.019167 0.118890\nv -0.023040 0.018437 0.116050\nv -0.022790 0.018067 0.113150\nv -0.022710 0.018447 0.110240\nv -0.022790 0.019197 0.107380\nv -0.026090 0.028937 0.127860\nv -0.025200 0.027877 0.126770\nv -0.023270 0.025447 0.125570\nv -0.021830 0.023667 0.123790\nv -0.020650 0.022267 0.121490\nv -0.019710 0.021167 0.119050\nv -0.019140 0.020567 0.116200\nv -0.018760 0.020257 0.113350\nv -0.018820 0.020577 0.110450\nv -0.019070 0.021227 0.107600\nv -0.025180 0.029777 0.127920\nv -0.023990 0.028987 0.126840\nv -0.021330 0.027247 0.125690\nv -0.019380 0.025957 0.123920\nv -0.017780 0.024967 0.121650\nv -0.016550 0.024207 0.119220\nv -0.015780 0.023787 0.116380\nv -0.015390 0.023577 0.113540\nv -0.015480 0.023817 0.110630\nv -0.015920 0.024267 0.107770\nv -0.024650 0.030767 0.127960\nv -0.023220 0.030397 0.126920\nv -0.020130 0.029437 0.125800\nv -0.017810 0.028727 0.124060\nv -0.015960 0.028197 0.121810\nv -0.014470 0.027817 0.119370\nv -0.013630 0.027577 0.116540\nv -0.013150 0.027517 0.113670\nv -0.013310 0.027617 0.110740\nv -0.013840 0.027877 0.107870\nv -0.031670 0.031917 0.127880\nv -0.028400 0.035057 0.128100\nv -0.025050 0.031917 0.128230\nv -0.028350 0.028797 0.128070\nv -0.025380 0.031217 0.128320\nv -0.029090 0.029087 0.128150\nv -0.031370 0.032627 0.128030\nv -0.027660 0.034767 0.128270\nv -0.027610 0.029087 0.128250\nv -0.031370 0.031217 0.128000\nv -0.029120 0.034767 0.128170\nv -0.025380 0.032627 0.128340\nv -0.025890 0.030347 0.128350\nv -0.030000 0.029587 0.128150\nv -0.030850 0.033477 0.128130\nv -0.026760 0.034277 0.128370\nv -0.026720 0.029577 0.128340\nv -0.030850 0.030357 0.128070\nv -0.030010 0.034287 0.128190\nv -0.025900 0.033477 0.128400\nv -0.026620 0.032767 0.128710\nv -0.027500 0.033597 0.128670\nv -0.028390 0.034287 0.128490\nv -0.025890 0.031927 0.128580\nv -0.026620 0.031077 0.128670\nv -0.027460 0.031927 0.128850\nv -0.028370 0.032797 0.128810\nv -0.029250 0.033597 0.128570\nv -0.029240 0.030267 0.128540\nv -0.030120 0.031067 0.128470\nv -0.030860 0.031927 0.128300\nv -0.028350 0.029567 0.128460\nv -0.028370 0.031067 0.128780\nv -0.030120 0.032757 0.128510\nv -0.027480 0.030267 0.128640\nv -0.029280 0.031927 0.128740\nv -0.023500 0.031947 0.127390\nv -0.023760 0.033357 0.127400\nv -0.024460 0.034617 0.127340\nv -0.025560 0.035647 0.127290\nv -0.026900 0.036287 0.127230\nv -0.028400 0.036507 0.127140\nv -0.029890 0.036287 0.127090\nv -0.031200 0.035647 0.126990\nv -0.032260 0.034627 0.126930\nv -0.032920 0.033357 0.126910\nv -0.033130 0.031937 0.126870\nv -0.032900 0.030517 0.126880\nv -0.032230 0.029247 0.126890\nv -0.031160 0.028217 0.126960\nv -0.029840 0.027587 0.127070\nv -0.028350 0.027387 0.127110\nv -0.026850 0.027607 0.127190\nv -0.025500 0.028257 0.127250\nv -0.024420 0.029277 0.127310\nv -0.023710 0.030527 0.127370\nv -0.025650 0.031897 0.125650\nv -0.023780 0.031937 0.126420\nv -0.020030 0.031937 0.125720\nv -0.017730 0.031957 0.123940\nv -0.015840 0.032007 0.121540\nv -0.014360 0.031997 0.119180\nv -0.013480 0.032047 0.116470\nv -0.013030 0.032067 0.113720\nv -0.013190 0.032067 0.110890\nv -0.013740 0.032077 0.108110\nv -0.025790 0.032567 0.125660\nv -0.024000 0.033237 0.126440\nv -0.020450 0.034387 0.125780\nv -0.018190 0.035047 0.124020\nv -0.016350 0.035607 0.121650\nv -0.014870 0.036037 0.119240\nv -0.014020 0.036337 0.116530\nv -0.013540 0.036447 0.113740\nv -0.013700 0.036367 0.110870\nv -0.014220 0.036097 0.108080\nv -0.026250 0.033377 0.125660\nv -0.024690 0.034477 0.126410\nv -0.021630 0.036527 0.125700\nv -0.019760 0.037807 0.123910\nv -0.018170 0.038827 0.121500\nv -0.016940 0.039597 0.119110\nv -0.016170 0.040037 0.116380\nv -0.015750 0.040267 0.113650\nv -0.015850 0.040057 0.110790\nv -0.016290 0.039667 0.108010\nv -0.027010 0.033717 0.125630\nv -0.025700 0.035407 0.126350\nv -0.023510 0.038277 0.125590\nv -0.022090 0.040007 0.123830\nv -0.020910 0.041407 0.121390\nv -0.019980 0.042487 0.118950\nv -0.019400 0.043117 0.116220\nv -0.019030 0.043387 0.113480\nv -0.019090 0.043147 0.110640\nv -0.019340 0.042567 0.107880\nv -0.027680 0.034067 0.125590\nv -0.027030 0.036057 0.126270\nv -0.025750 0.039387 0.125540\nv -0.024960 0.041477 0.123740\nv -0.024260 0.043137 0.121290\nv -0.023700 0.044447 0.118810\nv -0.023280 0.045157 0.116090\nv -0.023020 0.045497 0.113270\nv -0.022950 0.045177 0.110430\nv -0.023050 0.044537 0.107680\nv -0.028400 0.034367 0.125560\nv -0.028400 0.036247 0.126170\nv -0.028300 0.039747 0.125350\nv -0.028180 0.041877 0.123480\nv -0.028070 0.043597 0.121040\nv -0.027940 0.044907 0.118580\nv -0.027760 0.045627 0.115810\nv -0.027620 0.045987 0.113070\nv -0.027450 0.045667 0.110240\nv -0.027300 0.044987 0.107470\nv -0.029080 0.034077 0.125500\nv -0.029760 0.036037 0.126130\nv -0.030840 0.039397 0.125240\nv -0.031400 0.041477 0.123350\nv -0.031880 0.043127 0.120910\nv -0.032200 0.044457 0.118430\nv -0.032280 0.045157 0.115650\nv -0.032200 0.045497 0.112800\nv -0.031950 0.045187 0.109960\nv -0.031540 0.044547 0.107200\nv -0.029750 0.033717 0.125470\nv -0.031060 0.035417 0.126060\nv -0.033080 0.038257 0.125080\nv -0.034280 0.039997 0.123130\nv -0.035200 0.041427 0.120650\nv -0.035920 0.042487 0.118180\nv -0.036170 0.043117 0.115410\nv -0.036210 0.043387 0.112590\nv -0.035840 0.043157 0.109770\nv -0.035250 0.042587 0.107020\nv -0.030490 0.033387 0.125370\nv -0.032020 0.034477 0.126000\nv -0.034880 0.036507 0.124980\nv -0.036640 0.037767 0.122980\nv -0.037980 0.038787 0.120460\nv -0.038970 0.039597 0.117950\nv -0.039400 0.040027 0.115170\nv -0.039510 0.040267 0.112370\nv -0.039050 0.040077 0.109580\nv -0.038260 0.039697 0.106840\nv -0.030930 0.032567 0.125310\nv -0.032670 0.033237 0.125950\nv -0.036080 0.034367 0.124940\nv -0.038230 0.035027 0.122910\nv -0.039800 0.035607 0.120370\nv -0.041030 0.036047 0.117800\nv -0.041560 0.036337 0.115030\nv -0.041740 0.036447 0.112190\nv -0.041200 0.036377 0.109380\nv -0.040300 0.036157 0.106670\nv -0.031060 0.031907 0.125280\nv -0.032870 0.031917 0.125890\nv -0.036420 0.031937 0.124840\nv -0.038570 0.031957 0.122810\nv -0.040210 0.031977 0.120240\nv -0.041450 0.031997 0.117710\nv -0.042040 0.032037 0.114960\nv -0.042220 0.032057 0.112170\nv -0.041700 0.032087 0.109390\nv -0.040770 0.032107 0.106670\nv -0.030920 0.031217 0.125280\nv -0.032650 0.030607 0.125910\nv -0.036040 0.029497 0.124900\nv -0.038160 0.028857 0.122860\nv -0.039720 0.028327 0.120290\nv -0.040940 0.027957 0.117700\nv -0.041510 0.027727 0.114950\nv -0.041700 0.027677 0.112120\nv -0.041170 0.027787 0.109320\nv -0.040280 0.028057 0.106610\nv -0.030470 0.030437 0.125320\nv -0.031990 0.029367 0.125960\nv -0.034830 0.027367 0.124910\nv -0.036570 0.026107 0.122890\nv -0.037890 0.025137 0.120340\nv -0.038870 0.024387 0.117800\nv -0.039320 0.023987 0.115040\nv -0.039460 0.023797 0.112260\nv -0.039010 0.024047 0.109480\nv -0.038220 0.024477 0.106740\nv -0.029740 0.030097 0.125430\nv -0.031020 0.028457 0.126030\nv -0.033020 0.025627 0.125030\nv -0.034210 0.023867 0.123020\nv -0.035120 0.022497 0.120490\nv -0.035830 0.021467 0.117980\nv -0.036100 0.020897 0.115250\nv -0.036140 0.020627 0.112450\nv -0.035770 0.020917 0.109650\nv -0.035180 0.021537 0.106910\nv -0.029070 0.029757 0.125480\nv -0.029720 0.027827 0.126100\nv -0.030790 0.024487 0.125170\nv -0.031330 0.022377 0.123220\nv -0.031800 0.020777 0.120740\nv -0.032110 0.019497 0.118220\nv -0.032200 0.018807 0.115470\nv -0.032120 0.018487 0.112640\nv -0.031860 0.018837 0.109820\nv -0.031440 0.019547 0.107070\nv -0.028340 0.029387 0.125450\nv -0.028350 0.027627 0.126140\nv -0.028230 0.024157 0.125270\nv -0.028090 0.022017 0.123360\nv -0.027970 0.020297 0.120870\nv -0.027850 0.019027 0.118420\nv -0.027680 0.018327 0.115690\nv -0.027540 0.017967 0.112900\nv -0.027370 0.018337 0.110110\nv -0.027210 0.019077 0.107350\nv -0.027640 0.029767 0.125560\nv -0.026980 0.027847 0.126230\nv -0.025670 0.024527 0.125450\nv -0.024860 0.022427 0.123610\nv -0.024160 0.020787 0.121170\nv -0.023610 0.019487 0.118700\nv -0.023200 0.018787 0.115950\nv -0.022960 0.018457 0.113130\nv -0.022880 0.018807 0.110300\nv -0.022960 0.019537 0.107560\nv -0.026980 0.030087 0.125600\nv -0.025650 0.028477 0.126320\nv -0.023420 0.025647 0.125520\nv -0.021980 0.023897 0.123710\nv -0.020810 0.022527 0.121290\nv -0.019890 0.021467 0.118870\nv -0.019340 0.020877 0.116120\nv -0.018970 0.020597 0.113340\nv -0.019030 0.020907 0.110530\nv -0.019260 0.021507 0.107770\nv -0.026220 0.030437 0.125620\nv -0.024650 0.029407 0.126370\nv -0.021540 0.027387 0.125640\nv -0.019630 0.026117 0.123840\nv -0.018050 0.025147 0.121440\nv -0.016850 0.024387 0.119030\nv -0.016110 0.023987 0.116290\nv -0.015720 0.023797 0.113520\nv -0.015810 0.024027 0.110720\nv -0.016230 0.024467 0.107950\nv -0.025790 0.031217 0.125640\nv -0.023960 0.030647 0.126420\nv -0.020370 0.029517 0.125750\nv -0.018080 0.028837 0.123980\nv -0.016270 0.028337 0.121610\nv -0.014800 0.027967 0.119180\nv -0.013990 0.027737 0.116460\nv -0.013530 0.027687 0.113660\nv -0.013670 0.027777 0.110810\nv -0.014180 0.028037 0.108060\nv -0.030270 0.031897 0.125220\nv -0.028370 0.033707 0.125360\nv -0.026480 0.031897 0.125440\nv -0.028360 0.030107 0.125320\nv -0.026700 0.031507 0.125380\nv -0.028760 0.030317 0.125260\nv -0.030040 0.032267 0.125200\nv -0.027980 0.033487 0.125340\nv -0.027960 0.030317 0.125310\nv -0.030050 0.031507 0.125190\nv -0.028780 0.033477 0.125300\nv -0.026700 0.032257 0.125390\nv -0.027050 0.031057 0.125340\nv -0.029250 0.030647 0.125210\nv -0.029690 0.032737 0.125220\nv -0.027490 0.033147 0.125350\nv -0.027490 0.030637 0.125320\nv -0.029690 0.031047 0.125190\nv -0.029250 0.033137 0.125250\nv -0.027050 0.032737 0.125370\nv -0.027510 0.032297 0.125200\nv -0.027940 0.032707 0.125180\nv -0.028370 0.033077 0.125200\nv -0.027110 0.031897 0.125250\nv -0.027510 0.031477 0.125180\nv -0.027940 0.031887 0.125110\nv -0.028370 0.032297 0.125090\nv -0.028810 0.032697 0.125130\nv -0.028810 0.031077 0.125110\nv -0.029230 0.031477 0.125080\nv -0.029630 0.031897 0.125110\nv -0.028370 0.030707 0.125160\nv -0.028370 0.031477 0.125080\nv -0.029230 0.032307 0.125100\nv -0.027940 0.031067 0.125160\nv -0.028800 0.031897 0.125070\nv -0.024760 0.031917 0.126030\nv -0.024940 0.032897 0.126050\nv -0.025500 0.033917 0.126020\nv -0.026260 0.034647 0.126000\nv -0.027360 0.035157 0.125910\nv -0.028400 0.035307 0.125840\nv -0.029430 0.035157 0.125810\nv -0.030480 0.034647 0.125740\nv -0.031240 0.033927 0.125680\nv -0.031770 0.032897 0.125630\nv -0.031930 0.031907 0.125580\nv -0.031750 0.030917 0.125600\nv -0.031220 0.029907 0.125640\nv -0.030450 0.029197 0.125700\nv -0.029380 0.028677 0.125780\nv -0.028340 0.028537 0.125810\nv -0.027310 0.028707 0.125870\nv -0.026200 0.029207 0.125970\nv -0.025480 0.029927 0.125980\nv -0.024910 0.030927 0.126030\nv -0.022730 0.031947 0.126510\nv -0.023000 0.033537 0.126550\nv -0.023860 0.035057 0.126480\nv -0.025100 0.036207 0.126400\nv -0.026700 0.036987 0.126320\nv -0.028380 0.037217 0.126190\nv -0.030080 0.036987 0.126160\nv -0.031630 0.036217 0.126060\nv -0.032810 0.035047 0.126000\nv -0.033630 0.033537 0.125950\nv -0.033860 0.031927 0.125880\nv -0.033620 0.030317 0.125910\nv -0.032800 0.028827 0.125940\nv -0.031600 0.027667 0.126020\nv -0.030030 0.026897 0.126130\nv -0.028330 0.026667 0.126150\nv -0.026650 0.026917 0.126280\nv -0.025030 0.027707 0.126360\nv -0.023800 0.028857 0.126440\nv -0.022950 0.030367 0.126520\nvt 0.902100 0.100600\nvt 0.905300 0.097600\nvt 0.916400 0.105300\nvt 0.914200 0.109200\nvt 0.923100 0.079600\nvt 0.925500 0.077200\nvt 0.929400 0.079700\nvt 0.927700 0.082800\nvt 0.898800 0.103700\nvt 0.912000 0.113100\nvt 0.918500 0.084500\nvt 0.921400 0.081400\nvt 0.926600 0.085000\nvt 0.924800 0.088800\nvt 0.895500 0.106700\nvt 0.909800 0.117000\nvt 0.915100 0.088000\nvt 0.922700 0.093100\nvt 0.911800 0.091300\nvt 0.920600 0.097300\nvt 0.908600 0.094400\nvt 0.918500 0.101300\nvt 0.931500 0.095600\nvt 0.930700 0.100200\nvt 0.930000 0.104800\nvt 0.929200 0.109200\nvt 0.928300 0.113700\nvt 0.933600 0.081000\nvt 0.933100 0.084400\nvt 0.927500 0.118100\nvt 0.932700 0.086900\nvt 0.932200 0.090900\nvt 0.926500 0.122500\nvt 0.937900 0.080700\nvt 0.938600 0.084200\nvt 0.943100 0.113500\nvt 0.943600 0.118000\nvt 0.939100 0.086600\nvt 0.939800 0.090700\nvt 0.944100 0.122500\nvt 0.940600 0.095500\nvt 0.941300 0.100100\nvt 0.941900 0.104600\nvt 0.942500 0.109100\nvt 0.951300 0.096700\nvt 0.953300 0.100800\nvt 0.955300 0.104800\nvt 0.957200 0.108900\nvt 0.942100 0.079300\nvt 0.943800 0.082300\nvt 0.959100 0.112900\nvt 0.945000 0.084500\nvt 0.947000 0.088200\nvt 0.960900 0.117000\nvt 0.949200 0.092500\nvt 0.972200 0.103300\nvt 0.975200 0.106700\nvt 0.953100 0.083600\nvt 0.956600 0.087000\nvt 0.959800 0.090300\nvt 0.963000 0.093600\nvt 0.966100 0.096800\nvt 0.969200 0.100100\nvt 0.945800 0.076500\nvt 0.948300 0.078900\nvt 0.950100 0.080600\nvt 0.973900 0.085800\nvt 0.977800 0.087900\nvt 0.948300 0.072700\nvt 0.951400 0.074300\nvt 0.981700 0.090100\nvt 0.953700 0.075400\nvt 0.957400 0.077300\nvt 0.985500 0.092400\nvt 0.961700 0.079400\nvt 0.965900 0.081500\nvt 0.969900 0.083600\nvt 0.968900 0.071400\nvt 0.973400 0.072100\nvt 0.977800 0.073000\nvt 0.982200 0.073800\nvt 0.949600 0.068500\nvt 0.953000 0.069000\nvt 0.986600 0.074700\nvt 0.955500 0.069300\nvt 0.959600 0.069900\nvt 0.991000 0.075600\nvt 0.964200 0.070600\nvt 0.986600 0.058500\nvt 0.991100 0.058000\nvt 0.959400 0.062200\nvt 0.964100 0.061400\nvt 0.968700 0.060800\nvt 0.973200 0.060200\nvt 0.977700 0.059600\nvt 0.982200 0.059000\nvt 0.949400 0.064100\nvt 0.952800 0.063400\nvt 0.955300 0.063000\nvt 0.973400 0.046800\nvt 0.977500 0.044900\nvt 0.947900 0.060000\nvt 0.950900 0.058200\nvt 0.981500 0.043000\nvt 0.953100 0.057000\nvt 0.956800 0.055000\nvt 0.985600 0.041200\nvt 0.961100 0.052800\nvt 0.965300 0.050700\nvt 0.969400 0.048700\nvt 0.958900 0.042200\nvt 0.962100 0.039000\nvt 0.965400 0.035900\nvt 0.968600 0.032900\nvt 0.945200 0.056200\nvt 0.947500 0.053800\nvt 0.971900 0.029800\nvt 0.949200 0.052000\nvt 0.952200 0.048900\nvt 0.975200 0.026900\nvt 0.955600 0.045400\nvt 0.958700 0.020300\nvt 0.960900 0.016500\nvt 0.945900 0.044600\nvt 0.947900 0.040200\nvt 0.950100 0.036100\nvt 0.952200 0.032100\nvt 0.954300 0.028100\nvt 0.956500 0.024200\nvt 0.941300 0.053700\nvt 0.942900 0.050600\nvt 0.944000 0.048400\nvt 0.941500 0.024200\nvt 0.942300 0.019700\nvt 0.937100 0.052400\nvt 0.937600 0.049000\nvt 0.943200 0.015400\nvt 0.937900 0.046500\nvt 0.938500 0.042500\nvt 0.944100 0.011000\nvt 0.939100 0.037800\nvt 0.939900 0.033100\nvt 0.940700 0.028600\nvt 0.930000 0.037900\nvt 0.929300 0.033300\nvt 0.928600 0.028800\nvt 0.928000 0.024300\nvt 0.927400 0.019900\nvt 0.932700 0.052700\nvt 0.932000 0.049200\nvt 0.926900 0.015400\nvt 0.931600 0.046700\nvt 0.930800 0.042600\nvt 0.926400 0.011000\nvt 0.913300 0.024600\nvt 0.911400 0.020600\nvt 0.925600 0.048900\nvt 0.923600 0.045200\nvt 0.909600 0.016500\nvt 0.921400 0.040900\nvt 0.919300 0.036800\nvt 0.917200 0.032700\nvt 0.915200 0.028600\nvt 0.928600 0.054100\nvt 0.926800 0.051100\nvt 0.907500 0.039900\nvt 0.904400 0.036700\nvt 0.901300 0.033500\nvt 0.924900 0.056900\nvt 0.922400 0.054500\nvt 0.898300 0.030200\nvt 0.920600 0.052800\nvt 0.917500 0.049800\nvt 0.895200 0.026900\nvt 0.914000 0.046400\nvt 0.910700 0.043200\nvt 0.908900 0.054100\nvt 0.904800 0.052000\nvt 0.900600 0.049900\nvt 0.896600 0.047800\nvt 0.892700 0.045700\nvt 0.922300 0.060700\nvt 0.919200 0.059100\nvt 0.888800 0.043500\nvt 0.917000 0.058000\nvt 0.913300 0.056100\nvt 0.884900 0.041300\nvt 0.888300 0.059900\nvt 0.883900 0.059100\nvt 0.915200 0.064100\nvt 0.911100 0.063500\nvt 0.879500 0.058200\nvt 0.906400 0.062800\nvt 0.901800 0.062000\nvt 0.897200 0.061400\nvt 0.892800 0.060700\nvt 0.921100 0.065000\nvt 0.917600 0.064400\nvt 0.897500 0.073400\nvt 0.893000 0.074100\nvt 0.888500 0.074700\nvt 0.921300 0.069300\nvt 0.917800 0.070000\nvt 0.884100 0.075300\nvt 0.915400 0.070500\nvt 0.911300 0.071200\nvt 0.879600 0.075800\nvt 0.906500 0.072000\nvt 0.901900 0.072700\nvt 0.909500 0.080600\nvt 0.905400 0.082700\nvt 0.901300 0.084800\nvt 0.897300 0.086800\nvt 0.893300 0.088700\nvt 0.922800 0.073400\nvt 0.919700 0.075200\nvt 0.889200 0.090600\nvt 0.917500 0.076400\nvt 0.913800 0.078400\nvt 0.885100 0.092500\nvt 0.941500 0.064600\nvt 0.945600 0.064500\nvt 0.945800 0.068300\nvt 0.941600 0.068400\nvt 0.940800 0.060800\nvt 0.944700 0.060900\nvt 0.937500 0.077000\nvt 0.937400 0.072800\nvt 0.941200 0.072200\nvt 0.941100 0.076100\nvt 0.930200 0.076500\nvt 0.929800 0.072600\nvt 0.933600 0.073000\nvt 0.933800 0.077200\nvt 0.940500 0.056900\nvt 0.943400 0.058100\nvt 0.929600 0.057300\nvt 0.929400 0.061200\nvt 0.925600 0.061500\nvt 0.926800 0.058600\nvt 0.925900 0.072500\nvt 0.927300 0.075300\nvt 0.929200 0.068800\nvt 0.925000 0.068900\nvt 0.929100 0.065000\nvt 0.924800 0.065100\nvt 0.933200 0.060600\nvt 0.933200 0.064700\nvt 0.933400 0.068800\nvt 0.937400 0.068700\nvt 0.937300 0.064600\nvt 0.937100 0.060400\nvt 0.945100 0.071900\nvt 0.943900 0.074800\nvt 0.933100 0.056400\nvt 0.936900 0.056200\nvt 0.047200 0.269200\nvt 0.054700 0.269900\nvt 0.056700 0.342500\nvt 0.050300 0.344000\nvt 0.227800 0.290800\nvt 0.246600 0.292300\nvt 0.247300 0.305200\nvt 0.228400 0.310200\nvt 0.041700 0.268200\nvt 0.045000 0.344600\nvt 0.186900 0.286800\nvt 0.206900 0.288800\nvt 0.207600 0.315200\nvt 0.187700 0.319000\nvt 0.036900 0.267300\nvt 0.036200 0.345600\nvt 0.095200 0.275100\nvt 0.131600 0.280500\nvt 0.133600 0.330200\nvt 0.097500 0.335300\nvt 0.064400 0.271300\nvt 0.066900 0.340500\nvt 0.060800 0.270300\nvt 0.061700 0.340400\nvt 0.118600 0.392700\nvt 0.090300 0.406800\nvt 0.085200 0.408100\nvt 0.079600 0.411500\nvt 0.074900 0.414200\nvt 0.252700 0.320000\nvt 0.235800 0.330300\nvt 0.068800 0.416700\nvt 0.217200 0.340800\nvt 0.199900 0.350600\nvt 0.064200 0.419000\nvt 0.150700 0.376500\nvt 0.264000 0.329300\nvt 0.247800 0.345800\nvt 0.120100 0.475900\nvt 0.115300 0.480200\nvt 0.233900 0.361400\nvt 0.220400 0.376000\nvt 0.108900 0.484600\nvt 0.182400 0.416100\nvt 0.156600 0.440800\nvt 0.133900 0.463400\nvt 0.129300 0.466900\nvt 0.125700 0.471400\nvt 0.193300 0.503700\nvt 0.190100 0.508600\nvt 0.186800 0.513800\nvt 0.182800 0.521600\nvt 0.275300 0.337300\nvt 0.266300 0.357900\nvt 0.179100 0.527100\nvt 0.257000 0.376900\nvt 0.248700 0.395000\nvt 0.174300 0.536100\nvt 0.223700 0.443600\nvt 0.207400 0.474800\nvt 0.256500 0.553000\nvt 0.255200 0.559400\nvt 0.272700 0.458400\nvt 0.266800 0.493300\nvt 0.262900 0.525000\nvt 0.261500 0.530500\nvt 0.259600 0.538400\nvt 0.258300 0.545300\nvt 0.287700 0.344500\nvt 0.285400 0.363300\nvt 0.283000 0.384200\nvt 0.280400 0.404200\nvt 0.337100 0.536400\nvt 0.338000 0.545400\nvt 0.301400 0.340900\nvt 0.305400 0.363100\nvt 0.338300 0.552600\nvt 0.309800 0.383800\nvt 0.313500 0.403800\nvt 0.338200 0.560800\nvt 0.323700 0.457200\nvt 0.329200 0.492400\nvt 0.335400 0.522500\nvt 0.336100 0.528700\nvt 0.403500 0.501400\nvt 0.406500 0.506200\nvt 0.409500 0.513000\nvt 0.413100 0.520200\nvt 0.314600 0.336000\nvt 0.326200 0.356300\nvt 0.415500 0.527900\nvt 0.336100 0.375400\nvt 0.345500 0.393100\nvt 0.418900 0.536500\nvt 0.371200 0.441900\nvt 0.388600 0.473200\nvt 0.482500 0.479200\nvt 0.488700 0.487500\nvt 0.412400 0.412000\nvt 0.439500 0.436800\nvt 0.462900 0.458700\nvt 0.467000 0.462700\nvt 0.472100 0.467500\nvt 0.477400 0.472900\nvt 0.328000 0.330200\nvt 0.342200 0.344400\nvt 0.357400 0.359600\nvt 0.371900 0.373600\nvt 0.515400 0.406000\nvt 0.522700 0.408800\nvt 0.337200 0.317100\nvt 0.354300 0.326800\nvt 0.529100 0.413000\nvt 0.373300 0.337200\nvt 0.391800 0.346200\nvt 0.540200 0.418400\nvt 0.442000 0.371500\nvt 0.476400 0.386600\nvt 0.504400 0.400700\nvt 0.510700 0.403000\nvt 0.525800 0.332500\nvt 0.531200 0.332300\nvt 0.538500 0.333500\nvt 0.545100 0.334000\nvt 0.341300 0.305000\nvt 0.360000 0.308200\nvt 0.554300 0.335400\nvt 0.381000 0.311700\nvt 0.401000 0.314900\nvt 0.561200 0.335800\nvt 0.457100 0.323400\nvt 0.493300 0.328100\nvt 0.551500 0.254600\nvt 0.561200 0.253500\nvt 0.455500 0.272600\nvt 0.493300 0.266200\nvt 0.525100 0.259800\nvt 0.531400 0.258500\nvt 0.537600 0.256900\nvt 0.545300 0.256000\nvt 0.340400 0.291900\nvt 0.359400 0.288600\nvt 0.380300 0.285100\nvt 0.400400 0.282000\nvt 0.511500 0.185400\nvt 0.518600 0.181300\nvt 0.334700 0.277300\nvt 0.352100 0.268500\nvt 0.525300 0.177600\nvt 0.370900 0.259300\nvt 0.388700 0.250800\nvt 0.537100 0.170900\nvt 0.437600 0.225900\nvt 0.470900 0.207700\nvt 0.499800 0.192400\nvt 0.505300 0.188800\nvt 0.431200 0.158100\nvt 0.453700 0.134300\nvt 0.458300 0.129300\nvt 0.463100 0.124200\nvt 0.469200 0.117000\nvt 0.323600 0.267800\nvt 0.339700 0.252800\nvt 0.474900 0.109800\nvt 0.354400 0.238500\nvt 0.368300 0.224700\nvt 0.481300 0.101700\nvt 0.405800 0.186100\nvt 0.403200 0.070800\nvt 0.406000 0.063900\nvt 0.331000 0.223100\nvt 0.339800 0.205700\nvt 0.409300 0.056100\nvt 0.363900 0.157200\nvt 0.378500 0.123200\nvt 0.392900 0.094000\nvt 0.396100 0.086900\nvt 0.399800 0.079400\nvt 0.312200 0.259800\nvt 0.321400 0.240900\nvt 0.322600 0.067500\nvt 0.323400 0.059200\nvt 0.324200 0.050200\nvt 0.299700 0.253300\nvt 0.302200 0.235600\nvt 0.324800 0.041100\nvt 0.305100 0.215700\nvt 0.307700 0.196900\nvt 0.326100 0.027900\nvt 0.314000 0.144000\nvt 0.317700 0.107200\nvt 0.321800 0.074500\nvt 0.254800 0.108100\nvt 0.247900 0.075900\nvt 0.246600 0.068700\nvt 0.245000 0.061600\nvt 0.243100 0.052900\nvt 0.285900 0.256400\nvt 0.282400 0.236000\nvt 0.240700 0.046300\nvt 0.278000 0.216300\nvt 0.274400 0.197400\nvt 0.237600 0.035500\nvt 0.262600 0.144800\nvt 0.169800 0.082900\nvt 0.164800 0.075600\nvt 0.251500 0.225300\nvt 0.242000 0.208700\nvt 0.158700 0.068100\nvt 0.215100 0.161500\nvt 0.196400 0.129400\nvt 0.180300 0.102200\nvt 0.177000 0.096200\nvt 0.173900 0.089600\nvt 0.273000 0.261100\nvt 0.261300 0.242700\nvt 0.119700 0.143100\nvt 0.114500 0.138000\nvt 0.108300 0.132100\nvt 0.259900 0.267600\nvt 0.245800 0.254900\nvt 0.102900 0.128800\nvt 0.230100 0.241300\nvt 0.215500 0.228400\nvt 0.095700 0.123900\nvt 0.174100 0.192200\nvt 0.147200 0.167200\nvt 0.123700 0.146400\nvt 0.112400 0.216600\nvt 0.084100 0.204000\nvt 0.078400 0.201900\nvt 0.073400 0.199000\nvt 0.066500 0.196400\nvt 0.250600 0.280100\nvt 0.233300 0.272100\nvt 0.062100 0.194700\nvt 0.214200 0.263600\nvt 0.195800 0.255800\nvt 0.055200 0.192900\nvt 0.145500 0.232500\nvt 0.308100 0.307600\nvt 0.315500 0.316800\nvt 0.306600 0.323400\nvt 0.299700 0.313800\nvt 0.316300 0.301100\nvt 0.323000 0.309200\nvt 0.275000 0.319200\nvt 0.284300 0.311900\nvt 0.291000 0.319600\nvt 0.282800 0.326400\nvt 0.263100 0.301100\nvt 0.271700 0.295300\nvt 0.277700 0.303500\nvt 0.268100 0.310600\nvt 0.324800 0.295200\nvt 0.328000 0.302900\nvt 0.304900 0.270100\nvt 0.296700 0.276500\nvt 0.290400 0.268400\nvt 0.298100 0.265400\nvt 0.264900 0.287400\nvt 0.259900 0.293900\nvt 0.279700 0.288700\nvt 0.272200 0.279700\nvt 0.288200 0.282500\nvt 0.281100 0.273100\nvt 0.303600 0.284500\nvt 0.294800 0.290700\nvt 0.286300 0.297100\nvt 0.292900 0.305300\nvt 0.301500 0.299100\nvt 0.310100 0.292700\nvt 0.297200 0.328200\nvt 0.289500 0.331500\nvt 0.312600 0.277300\nvt 0.319500 0.285900\nvt 0.957300 0.671900\nvt 0.953600 0.748300\nvt 0.948400 0.747000\nvt 0.951100 0.672500\nvt 0.771300 0.692600\nvt 0.770500 0.711900\nvt 0.751700 0.706800\nvt 0.752500 0.694000\nvt 0.964100 0.670800\nvt 0.960100 0.749200\nvt 0.812200 0.688900\nvt 0.811100 0.721100\nvt 0.791300 0.717100\nvt 0.792200 0.690800\nvt 0.976600 0.669100\nvt 0.976600 0.751700\nvt 0.905100 0.677800\nvt 0.902300 0.738400\nvt 0.865200 0.732800\nvt 0.867600 0.683100\nvt 0.936000 0.674400\nvt 0.932900 0.743800\nvt 0.943400 0.673000\nvt 0.941900 0.744600\nvt 0.908900 0.810300\nvt 0.880600 0.795900\nvt 0.917300 0.813500\nvt 0.924200 0.817700\nvt 0.927900 0.819900\nvt 0.762900 0.732000\nvt 0.746200 0.721600\nvt 0.935100 0.822900\nvt 0.798700 0.752600\nvt 0.781400 0.742700\nvt 0.946500 0.829000\nvt 0.847600 0.778900\nvt 0.750800 0.747400\nvt 0.734700 0.730800\nvt 0.886800 0.887700\nvt 0.881100 0.882500\nvt 0.777900 0.777900\nvt 0.764600 0.763100\nvt 0.898800 0.897900\nvt 0.842000 0.844000\nvt 0.815600 0.818300\nvt 0.864500 0.866800\nvt 0.871700 0.873200\nvt 0.876300 0.878800\nvt 0.809200 0.915200\nvt 0.804500 0.906800\nvt 0.813300 0.921900\nvt 0.816700 0.928700\nvt 0.732200 0.759300\nvt 0.723400 0.738600\nvt 0.820900 0.935300\nvt 0.749500 0.796600\nvt 0.741300 0.778400\nvt 0.829300 0.951700\nvt 0.790600 0.877700\nvt 0.774000 0.845400\nvt 0.743600 0.975600\nvt 0.741300 0.961200\nvt 0.730600 0.895800\nvt 0.724900 0.859800\nvt 0.734200 0.927600\nvt 0.736200 0.937000\nvt 0.738200 0.946500\nvt 0.739300 0.952200\nvt 0.713100 0.764500\nvt 0.710900 0.745800\nvt 0.717700 0.805600\nvt 0.715300 0.785500\nvt 0.657900 0.951600\nvt 0.658600 0.943700\nvt 0.693000 0.764200\nvt 0.697200 0.742100\nvt 0.657300 0.960100\nvt 0.684600 0.804800\nvt 0.688500 0.784900\nvt 0.656000 0.976300\nvt 0.667900 0.894400\nvt 0.673900 0.858100\nvt 0.661400 0.924500\nvt 0.659900 0.934400\nvt 0.588200 0.910800\nvt 0.593100 0.902600\nvt 0.584400 0.919100\nvt 0.581300 0.925200\nvt 0.672300 0.757200\nvt 0.684100 0.737100\nvt 0.578200 0.934000\nvt 0.652700 0.793900\nvt 0.662200 0.776200\nvt 0.570900 0.949900\nvt 0.608400 0.874600\nvt 0.626500 0.842400\nvt 0.497600 0.897400\nvt 0.509900 0.883500\nvt 0.557500 0.837400\nvt 0.585600 0.812100\nvt 0.533800 0.859200\nvt 0.526800 0.865800\nvt 0.520500 0.871700\nvt 0.516000 0.876300\nvt 0.656400 0.745200\nvt 0.670700 0.731100\nvt 0.626400 0.774100\nvt 0.641000 0.760200\nvt 0.470300 0.810400\nvt 0.476600 0.808100\nvt 0.644400 0.727500\nvt 0.661700 0.717900\nvt 0.462600 0.815000\nvt 0.606800 0.746500\nvt 0.625400 0.737700\nvt 0.443900 0.824000\nvt 0.520800 0.786700\nvt 0.556400 0.771400\nvt 0.492600 0.800600\nvt 0.482800 0.804500\nvt 0.462500 0.732100\nvt 0.471700 0.731800\nvt 0.453500 0.733400\nvt 0.448100 0.733700\nvt 0.638900 0.708800\nvt 0.657600 0.705700\nvt 0.437600 0.735200\nvt 0.597800 0.715100\nvt 0.617900 0.712100\nvt 0.422600 0.736500\nvt 0.504300 0.727700\nvt 0.541700 0.723200\nvt 0.423400 0.649700\nvt 0.441200 0.652300\nvt 0.504900 0.665400\nvt 0.543800 0.672300\nvt 0.473100 0.658700\nvt 0.463000 0.656700\nvt 0.455100 0.654700\nvt 0.448600 0.654000\nvt 0.639700 0.689200\nvt 0.658700 0.692700\nvt 0.598800 0.682200\nvt 0.618900 0.685500\nvt 0.476600 0.577900\nvt 0.482700 0.581500\nvt 0.647200 0.669200\nvt 0.664500 0.678200\nvt 0.468800 0.573500\nvt 0.610800 0.651100\nvt 0.628500 0.659800\nvt 0.449700 0.562700\nvt 0.527900 0.606800\nvt 0.562100 0.625800\nvt 0.499200 0.591200\nvt 0.490300 0.585700\nvt 0.546000 0.533200\nvt 0.568300 0.557200\nvt 0.538800 0.525400\nvt 0.533000 0.519100\nvt 0.527800 0.512700\nvt 0.659700 0.653600\nvt 0.675700 0.668800\nvt 0.521200 0.504400\nvt 0.631400 0.625200\nvt 0.645100 0.639200\nvt 0.509200 0.490200\nvt 0.594200 0.586300\nvt 0.592300 0.458100\nvt 0.595600 0.466100\nvt 0.660000 0.606500\nvt 0.668700 0.624000\nvt 0.585700 0.442900\nvt 0.621600 0.522600\nvt 0.636400 0.557800\nvt 0.607400 0.493300\nvt 0.602700 0.482700\nvt 0.598400 0.473600\nvt 0.678100 0.641800\nvt 0.687200 0.660800\nvt 0.677100 0.453700\nvt 0.678000 0.463600\nvt 0.676400 0.445800\nvt 0.697400 0.636700\nvt 0.699700 0.654500\nvt 0.675800 0.435400\nvt 0.692200 0.598000\nvt 0.694700 0.616800\nvt 0.673800 0.414000\nvt 0.682900 0.507100\nvt 0.686400 0.545000\nvt 0.679000 0.474400\nvt 0.753300 0.476500\nvt 0.746100 0.508600\nvt 0.755500 0.465500\nvt 0.757500 0.456900\nvt 0.759300 0.449300\nvt 0.717200 0.637300\nvt 0.713500 0.657700\nvt 0.762000 0.441500\nvt 0.725500 0.598700\nvt 0.721800 0.617700\nvt 0.767000 0.422800\nvt 0.737800 0.546300\nvt 0.839600 0.472300\nvt 0.833800 0.480600\nvt 0.757800 0.610400\nvt 0.748100 0.626800\nvt 0.849800 0.457900\nvt 0.804700 0.530500\nvt 0.785100 0.563400\nvt 0.821000 0.503400\nvt 0.826300 0.494200\nvt 0.830300 0.486300\nvt 0.738200 0.644200\nvt 0.726400 0.662500\nvt 0.890800 0.536500\nvt 0.884400 0.542600\nvt 0.896200 0.531400\nvt 0.753600 0.656500\nvt 0.739400 0.669100\nvt 0.902600 0.527300\nvt 0.784100 0.630300\nvt 0.769500 0.643100\nvt 0.915800 0.517300\nvt 0.853800 0.568900\nvt 0.825800 0.594400\nvt 0.877500 0.548400\nvt 0.916800 0.606500\nvt 0.888300 0.618900\nvt 0.926000 0.602900\nvt 0.932400 0.599500\nvt 0.938300 0.597400\nvt 0.765900 0.673800\nvt 0.748600 0.681700\nvt 0.943800 0.595300\nvt 0.803600 0.657800\nvt 0.785200 0.665500\nvt 0.957900 0.590400\nvt 0.854100 0.635000\nvt 0.690800 0.708700\nvt 0.699200 0.714900\nvt 0.692200 0.724400\nvt 0.683300 0.717800\nvt 0.682700 0.702100\nvt 0.675900 0.710100\nvt 0.723800 0.720500\nvt 0.716000 0.727700\nvt 0.707800 0.720800\nvt 0.714600 0.713200\nvt 0.735900 0.702600\nvt 0.730800 0.712000\nvt 0.721300 0.704800\nvt 0.727400 0.696700\nvt 0.671000 0.703700\nvt 0.674200 0.696100\nvt 0.694400 0.671200\nvt 0.701200 0.666600\nvt 0.708900 0.669600\nvt 0.702500 0.677700\nvt 0.734200 0.688800\nvt 0.739100 0.695400\nvt 0.719500 0.690000\nvt 0.726900 0.681100\nvt 0.711000 0.683700\nvt 0.718100 0.674400\nvt 0.704200 0.691900\nvt 0.695600 0.685600\nvt 0.712700 0.698400\nvt 0.706000 0.706500\nvt 0.697600 0.700200\nvt 0.689000 0.693800\nvt 0.709300 0.732800\nvt 0.701500 0.729400\nvt 0.686600 0.678400\nvt 0.679600 0.686900\nvn -0.998500 0.001700 0.054600\nvn -0.971600 0.002700 0.236500\nvn -0.918000 0.312700 0.243800\nvn -0.946800 0.316900 0.054700\nvn -0.598500 0.000900 0.801100\nvn -0.468900 -0.002700 0.883200\nvn -0.446400 0.166800 0.879100\nvn -0.562600 0.214200 0.798500\nvn -0.992000 0.004100 -0.126200\nvn -0.939600 0.315400 -0.132500\nvn -0.479900 0.002300 0.877300\nvn -0.494200 0.000600 0.869300\nvn -0.460300 0.173500 0.870600\nvn -0.446700 0.163800 0.879500\nvn -0.981200 0.005000 -0.192600\nvn -0.929900 0.306800 -0.202900\nvn -0.686900 0.005800 0.726700\nvn -0.643700 0.227100 0.730800\nvn -0.808700 0.006000 0.588200\nvn -0.759400 0.265100 0.594100\nvn -0.908400 0.004400 0.418100\nvn -0.856700 0.293000 0.424500\nvn -0.530700 0.448900 0.718900\nvn -0.628400 0.519800 0.578800\nvn -0.706300 0.576100 0.411300\nvn -0.758100 0.607900 0.236100\nvn -0.782200 0.621000 0.050300\nvn -0.371700 0.327300 0.868700\nvn -0.469000 0.405300 0.784600\nvn -0.780200 0.609800 -0.139300\nvn -0.376400 0.339300 0.862100\nvn -0.364500 0.326600 0.872000\nvn -0.770300 0.602200 -0.209500\nvn -0.261900 0.444000 0.856900\nvn -0.332100 0.540600 0.772900\nvn -0.585600 0.809600 0.040400\nvn -0.584300 0.797900 -0.147900\nvn -0.267300 0.446600 0.853800\nvn -0.263200 0.423200 0.866900\nvn -0.580600 0.784600 -0.217300\nvn -0.391200 0.585100 0.710300\nvn -0.465700 0.679900 0.566400\nvn -0.525500 0.751700 0.398400\nvn -0.563400 0.794700 0.225900\nvn -0.220200 0.801400 0.556100\nvn -0.253500 0.887100 0.385800\nvn -0.280300 0.936200 0.212000\nvn -0.292800 0.955800 0.025300\nvn -0.117900 0.517200 0.847700\nvn -0.151700 0.627700 0.763500\nvn -0.298300 0.940500 -0.162600\nvn -0.110000 0.521300 0.846200\nvn -0.106400 0.494600 0.862600\nvn -0.295200 0.926800 -0.232200\nvn -0.175800 0.689900 0.702200\nvn -0.008600 0.984400 -0.175600\nvn -0.011900 0.970500 -0.240900\nvn 0.047300 0.529000 0.847300\nvn 0.038200 0.728500 0.684000\nvn 0.027000 0.842600 0.537800\nvn 0.018800 0.930100 0.366900\nvn 0.009400 0.981300 0.192300\nvn 0.001100 0.999900 0.009800\nvn 0.044900 0.545000 0.837200\nvn 0.036100 0.655000 0.754700\nvn 0.045200 0.546800 0.836000\nvn 0.297400 0.938000 0.177900\nvn 0.291600 0.956500 -0.007600\nvn 0.200900 0.506200 0.838600\nvn 0.230100 0.616700 0.752700\nvn 0.278000 0.940500 -0.195300\nvn 0.203900 0.518400 0.830400\nvn 0.199500 0.500900 0.842200\nvn 0.267200 0.926900 -0.263400\nvn 0.248700 0.689300 0.680500\nvn 0.273900 0.797000 0.538300\nvn 0.291200 0.886400 0.359700\nvn 0.517000 0.673900 0.527700\nvn 0.563300 0.750300 0.345900\nvn 0.582900 0.796700 0.159300\nvn 0.584300 0.811200 -0.023500\nvn 0.347100 0.425000 0.835900\nvn 0.413300 0.523600 0.745000\nvn 0.563500 0.798000 -0.213600\nvn 0.364200 0.437800 0.822000\nvn 0.356700 0.426400 0.831200\nvn 0.550200 0.785200 -0.284000\nvn 0.461300 0.584100 0.667800\nvn 0.757700 0.610000 -0.231900\nvn 0.740200 0.601100 -0.301300\nvn 0.456000 0.323900 0.828900\nvn 0.601000 0.445800 0.663400\nvn 0.680900 0.514400 0.521200\nvn 0.746600 0.574300 0.335800\nvn 0.779400 0.609100 0.147100\nvn 0.782800 0.621000 -0.039500\nvn 0.455900 0.309700 0.834400\nvn 0.548000 0.384000 0.743100\nvn 0.469900 0.324700 0.820800\nvn 0.940500 0.309100 0.140800\nvn 0.947700 0.314300 -0.055500\nvn 0.532100 0.155800 0.832200\nvn 0.639500 0.192100 0.744400\nvn 0.916700 0.311000 -0.250700\nvn 0.549100 0.156500 0.820900\nvn 0.535100 0.154800 0.830500\nvn 0.896700 0.305200 -0.320400\nvn 0.716300 0.216300 0.663400\nvn 0.817000 0.253800 0.517700\nvn 0.899100 0.284600 0.332600\nvn 0.863400 -0.014100 0.504200\nvn 0.944700 -0.012800 0.327700\nvn 0.990500 -0.008200 0.137300\nvn 0.998200 -0.004900 -0.059500\nvn 0.561800 -0.013800 0.827100\nvn 0.670200 -0.011300 0.742100\nvn 0.967300 -0.001100 -0.253700\nvn 0.576000 -0.012800 0.817300\nvn 0.565200 -0.012100 0.824800\nvn 0.946700 -0.000100 -0.322100\nvn 0.756500 -0.013100 0.653800\nvn 0.915900 -0.310200 -0.254700\nvn 0.896600 -0.302500 -0.323400\nvn 0.534800 -0.173300 0.827000\nvn 0.717200 -0.235800 0.655800\nvn 0.817900 -0.272300 0.506800\nvn 0.895800 -0.298400 0.329300\nvn 0.938200 -0.315700 0.142000\nvn 0.946400 -0.317500 -0.059000\nvn 0.529000 -0.178900 0.829500\nvn 0.635900 -0.208000 0.743200\nvn 0.544400 -0.174200 0.820500\nvn 0.779900 -0.608800 0.144900\nvn 0.783800 -0.619000 -0.048600\nvn 0.455900 -0.316800 0.831700\nvn 0.546900 -0.387400 0.742100\nvn 0.759000 -0.604900 -0.240700\nvn 0.471700 -0.329900 0.817700\nvn 0.459600 -0.332400 0.823500\nvn 0.741600 -0.595800 -0.308100\nvn 0.605400 -0.456600 0.651800\nvn 0.686500 -0.523100 0.505000\nvn 0.748200 -0.575500 0.330100\nvn 0.465300 -0.594600 0.655600\nvn 0.522700 -0.682400 0.510900\nvn 0.566200 -0.752300 0.336800\nvn 0.586000 -0.795800 0.152700\nvn 0.587000 -0.808700 -0.035900\nvn 0.353100 -0.422800 0.834600\nvn 0.414500 -0.523600 0.744300\nvn 0.567100 -0.792200 -0.225400\nvn 0.367000 -0.440900 0.819000\nvn 0.360200 -0.434800 0.825300\nvn 0.554600 -0.778100 -0.294800\nvn 0.295900 -0.955000 -0.019700\nvn 0.281400 -0.936200 -0.210500\nvn 0.199200 -0.531700 0.823100\nvn 0.196200 -0.512600 0.835900\nvn 0.268700 -0.922400 -0.277500\nvn 0.247700 -0.699700 0.670100\nvn 0.278000 -0.805300 0.523700\nvn 0.295000 -0.889400 0.349200\nvn 0.301500 -0.938100 0.170500\nvn 0.208700 -0.505500 0.837200\nvn 0.227900 -0.626700 0.745200\nvn 0.020800 -0.933200 0.358800\nvn 0.012400 -0.981900 0.188800\nvn 0.004500 -1.000000 -0.003400\nvn 0.040300 -0.552600 0.832400\nvn 0.027900 -0.671100 0.740800\nvn -0.007300 -0.981000 -0.193900\nvn 0.037500 -0.563300 0.825400\nvn 0.042300 -0.539300 0.841000\nvn -0.012200 -0.966700 -0.255400\nvn 0.035500 -0.733600 0.678600\nvn 0.028100 -0.848000 0.529300\nvn -0.177400 -0.694400 0.697400\nvn -0.222800 -0.803600 0.551900\nvn -0.256400 -0.888700 0.380000\nvn -0.281700 -0.936400 0.209000\nvn -0.295000 -0.955400 0.014300\nvn -0.131700 -0.528400 0.838700\nvn -0.162400 -0.641400 0.749800\nvn -0.301000 -0.936100 -0.182000\nvn -0.115500 -0.533200 0.838000\nvn -0.107600 -0.504000 0.857000\nvn -0.299300 -0.921500 -0.247200\nvn -0.592500 -0.804900 0.030800\nvn -0.591200 -0.790200 -0.161100\nvn -0.270600 -0.454500 0.848600\nvn -0.262300 -0.431300 0.863200\nvn -0.586700 -0.777100 -0.227800\nvn -0.390000 -0.592800 0.704600\nvn -0.466600 -0.683400 0.561400\nvn -0.529300 -0.752900 0.391100\nvn -0.570200 -0.792000 0.218100\nvn -0.270200 -0.450000 0.851200\nvn -0.338400 -0.548500 0.764600\nvn -0.712900 -0.576300 0.399500\nvn -0.765700 -0.603700 0.221900\nvn -0.789300 -0.612700 0.040400\nvn -0.372200 -0.329400 0.867700\nvn -0.469700 -0.410500 0.781500\nvn -0.785600 -0.601800 -0.143700\nvn -0.375000 -0.344200 0.860700\nvn -0.362100 -0.333400 0.870500\nvn -0.775300 -0.594800 -0.212300\nvn -0.530400 -0.456000 0.714600\nvn -0.631300 -0.524200 0.571500\nvn -0.647600 -0.224100 0.728200\nvn -0.765900 -0.259800 0.588100\nvn -0.863800 -0.287200 0.413900\nvn -0.923100 -0.307200 0.231100\nvn -0.949500 -0.309800 0.049800\nvn -0.439900 -0.174800 0.880900\nvn -0.565300 -0.215300 0.796300\nvn -0.942900 -0.305700 -0.131800\nvn -0.460000 -0.175300 0.870400\nvn -0.446000 -0.163900 0.879800\nvn -0.932800 -0.298800 -0.201400\nvn 0.271600 0.101500 0.957000\nvn 0.372900 0.218500 0.901800\nvn 0.269700 0.334100 0.903100\nvn 0.169500 0.219200 0.960800\nvn 0.367900 -0.018500 0.929700\nvn 0.447500 0.092200 0.889500\nvn -0.179300 0.347400 0.920400\nvn -0.065000 0.225000 0.972200\nvn 0.052200 0.336300 0.940300\nvn -0.055700 0.428300 0.901900\nvn -0.362300 0.097000 0.927000\nvn -0.285900 -0.015600 0.958100\nvn -0.178000 0.109700 0.977900\nvn -0.285300 0.229800 0.930400\nvn 0.443100 -0.121600 0.888100\nvn 0.494200 -0.016800 0.869100\nvn 0.161500 -0.413300 0.896100\nvn 0.056900 -0.329900 0.942300\nvn -0.062000 -0.423000 0.904000\nvn 0.053000 -0.472600 0.879700\nvn -0.352200 -0.115700 0.928700\nvn -0.400100 -0.009400 0.916400\nvn -0.177700 -0.129900 0.975500\nvn -0.281800 -0.235500 0.930100\nvn -0.068100 -0.221500 0.972700\nvn -0.187500 -0.340700 0.921200\nvn 0.174600 -0.224300 0.958700\nvn 0.056900 -0.119200 0.991200\nvn -0.058800 -0.014500 0.998100\nvn 0.057000 0.102000 0.993100\nvn 0.169300 -0.014500 0.985400\nvn 0.274600 -0.129400 0.952800\nvn 0.151000 0.422700 0.893600\nvn 0.051500 0.478800 0.876400\nvn 0.278500 -0.331300 0.901400\nvn 0.373600 -0.233900 0.897600\nvn -0.998500 0.002000 0.054800\nvn -0.972100 0.002300 0.234600\nvn -0.918100 0.312800 0.243000\nvn -0.947100 0.316200 0.055500\nvn 0.376800 -0.014100 0.926100\nvn 0.332500 -0.014100 0.943000\nvn 0.312300 -0.115000 0.943000\nvn 0.354700 -0.125900 0.926500\nvn -0.992200 0.003700 -0.124000\nvn -0.940500 0.313500 -0.131100\nvn -0.114500 -0.005900 0.993400\nvn 0.217700 -0.011900 0.975900\nvn 0.207700 -0.068100 0.975800\nvn -0.102400 0.042600 0.993800\nvn -0.981100 0.005200 -0.193500\nvn -0.930400 0.305600 -0.202200\nvn -0.706400 0.006300 0.707700\nvn -0.465600 0.001800 0.885000\nvn -0.432800 0.157500 0.887600\nvn -0.663000 0.231700 0.711800\nvn -0.818600 0.006800 0.574300\nvn -0.769800 0.266200 0.580100\nvn -0.908400 0.003300 0.417900\nvn -0.857300 0.292100 0.423900\nvn -0.547100 0.459300 0.699800\nvn -0.637100 0.525600 0.563700\nvn -0.707100 0.575700 0.410600\nvn -0.758500 0.607200 0.236400\nvn -0.783000 0.620100 0.049400\nvn 0.248700 -0.204800 0.946700\nvn 0.289800 -0.207600 0.934300\nvn -0.780300 0.609800 -0.138600\nvn 0.183100 -0.097900 0.978200\nvn -0.072900 0.109800 0.991300\nvn -0.770400 0.602700 -0.207900\nvn -0.352100 0.317300 0.880500\nvn 0.197700 -0.251800 0.947400\nvn 0.218700 -0.256600 0.941400\nvn -0.583000 0.811500 0.038200\nvn -0.581700 0.799800 -0.147900\nvn 0.147700 -0.131800 0.980200\nvn -0.044100 0.137800 0.989500\nvn -0.577900 0.787100 -0.215500\nvn -0.250500 0.411500 0.876300\nvn -0.400200 0.602300 0.690600\nvn -0.470100 0.690200 0.550100\nvn -0.523500 0.753100 0.398400\nvn -0.561600 0.796000 0.225700\nvn -0.222800 0.812200 0.539100\nvn -0.252000 0.888200 0.384100\nvn -0.276300 0.937700 0.210500\nvn -0.290300 0.956700 0.021700\nvn 0.168700 -0.271400 0.947600\nvn 0.155300 -0.281300 0.946900\nvn -0.296700 0.941000 -0.162500\nvn 0.114200 -0.155500 0.981200\nvn 0.011800 0.155600 0.987700\nvn -0.293000 0.928300 -0.228700\nvn -0.100700 0.479100 0.871900\nvn -0.181700 0.709200 0.681100\nvn -0.010200 0.984800 -0.173500\nvn -0.013700 0.971600 -0.236000\nvn 0.048800 0.512000 0.857600\nvn 0.037800 0.747100 0.663600\nvn 0.027000 0.851600 0.523500\nvn 0.017000 0.931300 0.363700\nvn 0.008200 0.982000 0.188800\nvn 0.000300 1.000000 0.007200\nvn 0.053400 -0.284500 0.957200\nvn 0.047600 -0.302600 0.951900\nvn 0.048300 -0.172300 0.983800\nvn 0.051200 0.161200 0.985600\nvn 0.294700 0.939500 0.174300\nvn 0.289000 0.957200 -0.010600\nvn -0.058000 -0.271400 0.960700\nvn -0.052000 -0.294400 0.954300\nvn 0.276000 0.941700 -0.192300\nvn -0.011700 -0.168600 0.985600\nvn 0.094400 0.157000 0.983100\nvn 0.264500 0.929200 -0.258000\nvn 0.197900 0.488000 0.850100\nvn 0.253900 0.707500 0.659500\nvn 0.276100 0.806400 0.522900\nvn 0.289200 0.888100 0.357200\nvn 0.521700 0.683300 0.510800\nvn 0.564100 0.750900 0.343300\nvn 0.582200 0.797700 0.156900\nvn 0.582000 0.812700 -0.028300\nvn -0.074200 -0.257300 0.963500\nvn -0.114300 -0.277700 0.953800\nvn 0.562300 0.799400 -0.211500\nvn -0.045400 -0.149800 0.987600\nvn 0.155300 0.134500 0.978600\nvn 0.550600 0.786700 -0.279300\nvn 0.350100 0.415500 0.839500\nvn 0.470100 0.598900 0.648300\nvn 0.758300 0.609300 -0.231600\nvn 0.741200 0.601100 -0.298900\nvn 0.446100 0.314500 0.837900\nvn 0.614900 0.455500 0.643600\nvn 0.691000 0.519200 0.502800\nvn 0.749100 0.572500 0.333200\nvn 0.780200 0.608000 0.146900\nvn 0.782500 0.621100 -0.042900\nvn -0.131100 -0.216000 0.967500\nvn -0.206900 -0.230300 0.950900\nvn -0.092300 -0.117300 0.988800\nvn 0.182000 0.099500 0.978200\nvn 0.941000 0.307900 0.140400\nvn 0.947800 0.313700 -0.057000\nvn -0.203500 -0.117000 0.972000\nvn -0.289900 -0.142500 0.946400\nvn 0.916700 0.310400 -0.251800\nvn -0.122300 -0.082600 0.989000\nvn 0.206900 0.033800 0.977800\nvn 0.896600 0.305500 -0.320500\nvn 0.522300 0.149500 0.839600\nvn 0.733600 0.221300 0.642500\nvn 0.827700 0.255700 0.499400\nvn 0.900900 0.283500 0.328500\nvn 0.873200 -0.014600 0.487100\nvn 0.946200 -0.012700 0.323200\nvn 0.990600 -0.007600 0.136200\nvn 0.998200 -0.004200 -0.060200\nvn -0.224900 -0.016500 0.974200\nvn -0.316900 -0.012400 0.948400\nvn 0.967100 -0.001300 -0.254200\nvn -0.135900 -0.013000 0.990600\nvn 0.213600 -0.012600 0.976800\nvn 0.946400 -0.000500 -0.323000\nvn 0.551900 -0.012300 0.833800\nvn 0.773900 -0.013500 0.633100\nvn 0.916000 -0.309300 -0.255300\nvn 0.896400 -0.302700 -0.323900\nvn 0.521900 -0.168500 0.836200\nvn 0.733800 -0.240800 0.635200\nvn 0.827500 -0.275000 0.489400\nvn 0.897500 -0.298000 0.325000\nvn 0.938400 -0.315300 0.141100\nvn 0.947000 -0.315500 -0.059800\nvn -0.208000 0.094400 0.973500\nvn -0.295500 0.129500 0.946500\nvn -0.123500 0.066700 0.990100\nvn 0.206500 -0.052700 0.977000\nvn 0.780800 -0.607700 0.145000\nvn 0.784400 -0.618200 -0.049800\nvn -0.134600 0.211700 0.968000\nvn -0.211100 0.236600 0.948400\nvn 0.759400 -0.604000 -0.241900\nvn -0.086000 0.116400 0.989500\nvn 0.189600 -0.107200 0.976000\nvn 0.741800 -0.595300 -0.308600\nvn 0.449900 -0.323800 0.832300\nvn 0.619000 -0.466200 0.632000\nvn 0.695200 -0.528500 0.487200\nvn 0.750100 -0.575900 0.325000\nvn 0.474100 -0.609500 0.635400\nvn 0.526500 -0.692500 0.493200\nvn 0.566600 -0.754000 0.332200\nvn 0.586000 -0.795700 0.153300\nvn 0.585300 -0.809900 -0.037800\nvn -0.069600 0.269300 0.960500\nvn -0.112800 0.290200 0.950300\nvn 0.564500 -0.793400 -0.227500\nvn -0.041800 0.156000 0.986800\nvn 0.162600 -0.138700 0.976900\nvn 0.552400 -0.779500 -0.295100\nvn 0.353500 -0.422000 0.834800\nvn 0.294200 -0.955500 -0.021200\nvn 0.279500 -0.936500 -0.211800\nvn -0.011400 0.169700 0.985400\nvn 0.093300 -0.166500 0.981600\nvn 0.267800 -0.922100 -0.279300\nvn 0.195400 -0.498700 0.844400\nvn 0.253000 -0.718400 0.647900\nvn 0.279500 -0.815500 0.506700\nvn 0.293700 -0.890700 0.346800\nvn 0.299900 -0.938700 0.170200\nvn -0.082600 0.276100 0.957600\nvn -0.064300 0.311200 0.948100\nvn 0.021000 -0.933900 0.356800\nvn 0.011600 -0.982500 0.185600\nvn 0.003000 -1.000000 -0.003000\nvn 0.052300 0.281500 0.958100\nvn 0.048000 0.326400 0.944000\nvn -0.008000 -0.981100 -0.193400\nvn 0.046400 0.169600 0.984400\nvn 0.046600 -0.177400 0.983000\nvn -0.012100 -0.965500 -0.260000\nvn 0.042600 -0.521600 0.852100\nvn 0.033400 -0.753800 0.656200\nvn 0.027700 -0.857700 0.513400\nvn -0.183400 -0.713400 0.676300\nvn -0.223100 -0.814800 0.535100\nvn -0.253400 -0.890400 0.378000\nvn -0.279800 -0.938000 0.204500\nvn -0.293900 -0.955700 0.013200\nvn 0.195400 0.264900 0.944300\nvn 0.171400 0.295200 0.939900\nvn -0.300300 -0.936800 -0.179600\nvn 0.115100 0.157400 0.980800\nvn 0.009100 -0.166900 0.985900\nvn -0.298200 -0.921700 -0.248000\nvn -0.103800 -0.488700 0.866200\nvn -0.591300 -0.805900 0.028500\nvn -0.590400 -0.791400 -0.158500\nvn 0.147900 0.132300 0.980100\nvn -0.047200 -0.146100 0.988100\nvn -0.586100 -0.778700 -0.223700\nvn -0.250100 -0.419800 0.872400\nvn -0.398500 -0.608500 0.686200\nvn -0.471000 -0.693200 0.545500\nvn -0.528500 -0.754400 0.389300\nvn -0.569000 -0.793500 0.215600\nvn 0.196300 0.256500 0.946400\nvn 0.221700 0.263800 0.938700\nvn -0.714600 -0.575900 0.397200\nvn -0.766800 -0.602800 0.220500\nvn -0.790300 -0.611300 0.039500\nvn 0.253100 0.197200 0.947100\nvn 0.294700 0.206600 0.933000\nvn -0.786600 -0.601000 -0.141900\nvn 0.184200 0.093100 0.978500\nvn -0.074400 -0.117400 0.990300\nvn -0.776800 -0.593700 -0.209900\nvn -0.349000 -0.324900 0.879000\nvn -0.545600 -0.466100 0.696400\nvn -0.641600 -0.528800 0.555600\nvn -0.666300 -0.229500 0.709500\nvn -0.776400 -0.262100 0.573100\nvn -0.864400 -0.287500 0.412500\nvn -0.923500 -0.307300 0.229400\nvn -0.949800 -0.308700 0.050200\nvn 0.316300 0.090300 0.944300\nvn 0.361200 0.106200 0.926400\nvn -0.943300 -0.305200 -0.130300\nvn 0.209000 0.050000 0.976600\nvn -0.103100 -0.053900 0.993200\nvn -0.932900 -0.297900 -0.202400\nvn -0.431300 -0.159300 0.888000\nvn -0.067000 -0.101800 0.992500\nvn -0.084500 -0.168400 0.982100\nvn -0.073800 -0.226400 0.971200\nvn -0.020300 -0.147300 0.988900\nvn -0.118900 -0.018900 0.992700\nvn -0.117300 -0.078100 0.990000\nvn 0.188600 -0.224800 0.956000\nvn 0.131600 -0.146800 0.980300\nvn 0.055800 -0.191100 0.980000\nvn 0.148400 -0.259000 0.954400\nvn 0.252900 -0.086300 0.963600\nvn 0.231700 -0.019300 0.972600\nvn 0.176700 -0.101700 0.979000\nvn 0.213800 -0.169600 0.962000\nvn -0.117200 0.046600 0.992000\nvn -0.117500 -0.017400 0.992900\nvn -0.048900 0.254200 0.965900\nvn 0.059600 0.185600 0.980800\nvn 0.160800 0.245000 0.956100\nvn 0.055700 0.244400 0.968000\nvn 0.256200 0.057400 0.964900\nvn 0.267500 -0.014100 0.963400\nvn 0.176900 0.067400 0.981900\nvn 0.217800 0.148800 0.964600\nvn 0.128900 0.123600 0.983900\nvn 0.186800 0.224200 0.956500\nvn -0.016400 0.124100 0.992100\nvn 0.057900 0.044000 0.997300\nvn 0.108000 -0.017500 0.994000\nvn 0.057400 -0.077100 0.995400\nvn 0.002700 -0.019000 0.999800\nvn -0.068200 0.063100 0.995700\nvn -0.039200 -0.253600 0.966500\nvn 0.060300 -0.286300 0.956200\nvn -0.072000 0.229100 0.970700\nvn -0.089800 0.144000 0.985500\nvn 0.998500 0.001700 0.054600\nvn 0.946800 0.316900 0.054700\nvn 0.918000 0.312700 0.243800\nvn 0.971600 0.002700 0.236500\nvn 0.598500 0.000900 0.801100\nvn 0.562600 0.214200 0.798500\nvn 0.446400 0.166800 0.879100\nvn 0.468900 -0.002700 0.883200\nvn 0.992000 0.004100 -0.126200\nvn 0.939600 0.315400 -0.132500\nvn 0.479900 0.002300 0.877300\nvn 0.446700 0.163800 0.879500\nvn 0.460300 0.173500 0.870600\nvn 0.494200 0.000600 0.869300\nvn 0.981200 0.005000 -0.192600\nvn 0.929900 0.306800 -0.202900\nvn 0.686900 0.005800 0.726700\nvn 0.643700 0.227100 0.730800\nvn 0.808700 0.006000 0.588200\nvn 0.759400 0.265100 0.594100\nvn 0.908400 0.004400 0.418100\nvn 0.856700 0.293000 0.424500\nvn 0.628400 0.519800 0.578800\nvn 0.530700 0.448900 0.718900\nvn 0.706300 0.576100 0.411300\nvn 0.758100 0.607900 0.236100\nvn 0.782200 0.621000 0.050300\nvn 0.469000 0.405300 0.784600\nvn 0.371700 0.327300 0.868700\nvn 0.780200 0.609800 -0.139300\nvn 0.364500 0.326600 0.872000\nvn 0.376400 0.339300 0.862100\nvn 0.770300 0.602200 -0.209500\nvn 0.332100 0.540600 0.772900\nvn 0.262900 0.444200 0.856500\nvn 0.584300 0.797900 -0.147900\nvn 0.585600 0.809600 0.040400\nvn 0.263200 0.423200 0.866900\nvn 0.267300 0.446600 0.853800\nvn 0.580600 0.784600 -0.217300\nvn 0.391200 0.585100 0.710300\nvn 0.465700 0.679900 0.566400\nvn 0.525500 0.751700 0.398400\nvn 0.563400 0.794700 0.225900\nvn 0.253500 0.887100 0.385800\nvn 0.220200 0.801400 0.556100\nvn 0.280300 0.936200 0.212000\nvn 0.292800 0.955800 0.025300\nvn 0.153300 0.626800 0.763900\nvn 0.119800 0.518100 0.846900\nvn 0.298300 0.940500 -0.162600\nvn 0.107000 0.494700 0.862400\nvn 0.111600 0.521100 0.846200\nvn 0.295200 0.926800 -0.232200\nvn 0.175800 0.689900 0.702200\nvn 0.011900 0.970500 -0.240900\nvn 0.008600 0.984400 -0.175600\nvn -0.038200 0.728500 0.684000\nvn -0.047300 0.529500 0.847000\nvn -0.027000 0.842600 0.537800\nvn -0.018800 0.930100 0.366900\nvn -0.009400 0.981300 0.192300\nvn -0.001100 0.999900 0.009800\nvn -0.037100 0.653200 0.756200\nvn -0.045300 0.545200 0.837000\nvn -0.045000 0.547500 0.835500\nvn -0.291600 0.956500 -0.007600\nvn -0.297400 0.938000 0.177900\nvn -0.232100 0.615800 0.753000\nvn -0.202200 0.505400 0.838900\nvn -0.277800 0.940600 -0.194900\nvn -0.200000 0.501100 0.841900\nvn -0.205600 0.518400 0.830000\nvn -0.266800 0.927200 -0.262700\nvn -0.248700 0.689300 0.680500\nvn -0.273900 0.797000 0.538300\nvn -0.291200 0.886400 0.359700\nvn -0.563300 0.750300 0.345900\nvn -0.517000 0.673900 0.527700\nvn -0.582900 0.796700 0.159300\nvn -0.584300 0.811200 -0.023500\nvn -0.413300 0.523600 0.745000\nvn -0.347100 0.425000 0.835900\nvn -0.563600 0.798100 -0.213000\nvn -0.356700 0.426400 0.831200\nvn -0.364200 0.437800 0.822000\nvn -0.550200 0.785600 -0.282700\nvn -0.461300 0.584100 0.667800\nvn -0.740600 0.600800 -0.300700\nvn -0.757900 0.609900 -0.231600\nvn -0.601000 0.445800 0.663400\nvn -0.456000 0.323900 0.828900\nvn -0.680900 0.514400 0.521200\nvn -0.746600 0.574300 0.335800\nvn -0.779400 0.609100 0.147100\nvn -0.782800 0.621000 -0.039500\nvn -0.548000 0.384000 0.743100\nvn -0.455900 0.309700 0.834400\nvn -0.469900 0.324700 0.820800\nvn -0.947700 0.314300 -0.055500\nvn -0.940500 0.309100 0.140800\nvn -0.639500 0.192100 0.744400\nvn -0.532100 0.155800 0.832200\nvn -0.916700 0.311000 -0.250700\nvn -0.535100 0.154800 0.830500\nvn -0.549100 0.156500 0.820900\nvn -0.896700 0.305200 -0.320400\nvn -0.716300 0.216300 0.663400\nvn -0.817000 0.253800 0.517700\nvn -0.899100 0.284600 0.332600\nvn -0.944700 -0.012800 0.327700\nvn -0.863400 -0.014100 0.504200\nvn -0.990500 -0.008200 0.137300\nvn -0.998200 -0.004900 -0.059500\nvn -0.670200 -0.011300 0.742100\nvn -0.561800 -0.013800 0.827100\nvn -0.967300 -0.001100 -0.253700\nvn -0.565200 -0.012100 0.824800\nvn -0.576000 -0.012800 0.817300\nvn -0.946700 -0.000100 -0.322100\nvn -0.756500 -0.013100 0.653800\nvn -0.896600 -0.302500 -0.323400\nvn -0.915900 -0.310200 -0.254700\nvn -0.717200 -0.235800 0.655800\nvn -0.534800 -0.173300 0.827000\nvn -0.817900 -0.272300 0.506800\nvn -0.895800 -0.298600 0.329100\nvn -0.938100 -0.315900 0.142000\nvn -0.946400 -0.317600 -0.058800\nvn -0.635900 -0.208000 0.743200\nvn -0.529000 -0.178900 0.829500\nvn -0.544400 -0.174200 0.820500\nvn -0.783800 -0.619100 -0.048100\nvn -0.780100 -0.608600 0.144900\nvn -0.546900 -0.387400 0.742100\nvn -0.455900 -0.316800 0.831700\nvn -0.759000 -0.604900 -0.240700\nvn -0.459600 -0.332400 0.823500\nvn -0.471700 -0.329900 0.817700\nvn -0.741600 -0.595800 -0.308100\nvn -0.605400 -0.456600 0.651800\nvn -0.686500 -0.523100 0.505000\nvn -0.748300 -0.575700 0.329600\nvn -0.523000 -0.682400 0.510600\nvn -0.465800 -0.594400 0.655500\nvn -0.566400 -0.752300 0.336600\nvn -0.586300 -0.795600 0.152700\nvn -0.587200 -0.808600 -0.035600\nvn -0.414500 -0.523600 0.744300\nvn -0.353500 -0.422900 0.834300\nvn -0.567100 -0.792200 -0.225400\nvn -0.360300 -0.434500 0.825400\nvn -0.367000 -0.440900 0.819000\nvn -0.554600 -0.778100 -0.294800\nvn -0.281400 -0.936200 -0.210500\nvn -0.295900 -0.955000 -0.019700\nvn -0.196300 -0.511800 0.836300\nvn -0.199200 -0.531700 0.823100\nvn -0.268700 -0.922400 -0.277500\nvn -0.248100 -0.699800 0.669900\nvn -0.278300 -0.805600 0.522900\nvn -0.295000 -0.889400 0.349200\nvn -0.301500 -0.938100 0.170500\nvn -0.227900 -0.626700 0.745200\nvn -0.208300 -0.505700 0.837200\nvn -0.012400 -0.981900 0.188800\nvn -0.020800 -0.933200 0.358800\nvn -0.004500 -1.000000 -0.003400\nvn -0.027900 -0.671100 0.740800\nvn -0.039900 -0.551700 0.833000\nvn 0.007300 -0.981000 -0.193900\nvn -0.042100 -0.538600 0.841500\nvn -0.037500 -0.563300 0.825400\nvn 0.012200 -0.966700 -0.255400\nvn -0.034700 -0.733800 0.678500\nvn -0.027900 -0.848400 0.528500\nvn 0.223100 -0.803700 0.551600\nvn 0.177900 -0.694300 0.697300\nvn 0.256400 -0.888700 0.380000\nvn 0.281700 -0.936400 0.209000\nvn 0.295000 -0.955400 0.014300\nvn 0.162400 -0.641400 0.749800\nvn 0.130700 -0.527800 0.839200\nvn 0.301000 -0.936100 -0.182000\nvn 0.107900 -0.503600 0.857100\nvn 0.115500 -0.533200 0.838000\nvn 0.299300 -0.921500 -0.247200\nvn 0.591200 -0.790200 -0.161100\nvn 0.592500 -0.804900 0.030800\nvn 0.262300 -0.431300 0.863200\nvn 0.270600 -0.454500 0.848600\nvn 0.586700 -0.777100 -0.227800\nvn 0.390000 -0.592800 0.704600\nvn 0.466600 -0.683400 0.561400\nvn 0.529300 -0.752900 0.391100\nvn 0.570200 -0.792000 0.218100\nvn 0.338400 -0.548500 0.764600\nvn 0.270200 -0.450000 0.851200\nvn 0.765700 -0.603700 0.221900\nvn 0.712900 -0.576300 0.399500\nvn 0.789300 -0.612700 0.040400\nvn 0.469700 -0.410500 0.781500\nvn 0.372200 -0.329400 0.867700\nvn 0.785600 -0.601800 -0.143700\nvn 0.362100 -0.333400 0.870500\nvn 0.375000 -0.344200 0.860700\nvn 0.775300 -0.594800 -0.212300\nvn 0.530400 -0.456000 0.714600\nvn 0.631300 -0.524200 0.571500\nvn 0.765900 -0.259800 0.588100\nvn 0.647600 -0.224100 0.728200\nvn 0.863800 -0.287200 0.413900\nvn 0.923100 -0.307200 0.231100\nvn 0.949500 -0.309800 0.049800\nvn 0.565300 -0.215300 0.796300\nvn 0.439900 -0.174800 0.880900\nvn 0.942900 -0.305700 -0.131800\nvn 0.446000 -0.163900 0.879800\nvn 0.460000 -0.175300 0.870400\nvn 0.932800 -0.298800 -0.201400\nvn -0.271600 0.101500 0.957000\nvn -0.170300 0.218400 0.960900\nvn -0.270500 0.334100 0.902900\nvn -0.372900 0.218500 0.901800\nvn -0.367900 -0.018500 0.929700\nvn -0.447500 0.092200 0.889500\nvn 0.181100 0.346400 0.920400\nvn 0.057000 0.428400 0.901800\nvn -0.055500 0.335100 0.940500\nvn 0.065400 0.222600 0.972700\nvn 0.362300 0.097000 0.927000\nvn 0.285300 0.229800 0.930400\nvn 0.178000 0.109700 0.977900\nvn 0.285900 -0.015600 0.958100\nvn -0.494200 -0.016800 0.869100\nvn -0.443100 -0.121600 0.888100\nvn -0.159500 -0.414600 0.895900\nvn -0.051400 -0.474700 0.878700\nvn 0.060900 -0.423400 0.903800\nvn -0.056100 -0.332200 0.941500\nvn 0.352200 -0.115700 0.928700\nvn 0.400100 -0.009400 0.916400\nvn 0.177700 -0.129900 0.975500\nvn 0.281800 -0.235500 0.930100\nvn 0.068100 -0.221500 0.972700\nvn 0.187500 -0.340700 0.921200\nvn -0.056900 -0.119200 0.991200\nvn -0.174700 -0.223500 0.958900\nvn 0.058800 -0.014500 0.998100\nvn -0.057000 0.101500 0.993200\nvn -0.169300 -0.014500 0.985400\nvn -0.274600 -0.129400 0.952800\nvn -0.055100 0.481800 0.874500\nvn -0.154100 0.423500 0.892700\nvn -0.279200 -0.330900 0.901400\nvn -0.373600 -0.233900 0.897600\nvn 0.998500 0.002000 0.054800\nvn 0.947100 0.316100 0.055200\nvn 0.918200 0.312600 0.243000\nvn 0.972100 0.002300 0.234600\nvn -0.376800 -0.014100 0.926100\nvn -0.354700 -0.125900 0.926500\nvn -0.312300 -0.115000 0.943000\nvn -0.332500 -0.014100 0.943000\nvn 0.992200 0.003700 -0.124000\nvn 0.940500 0.313500 -0.131100\nvn 0.114500 -0.005900 0.993400\nvn 0.102400 0.042600 0.993800\nvn -0.207700 -0.068100 0.975800\nvn -0.217700 -0.011900 0.975900\nvn 0.981100 0.005200 -0.193500\nvn 0.930400 0.305600 -0.202200\nvn 0.706400 0.006300 0.707700\nvn 0.663000 0.231700 0.711800\nvn 0.432800 0.157500 0.887600\nvn 0.465600 0.001800 0.885000\nvn 0.818600 0.006800 0.574300\nvn 0.769800 0.266200 0.580100\nvn 0.908400 0.003300 0.417900\nvn 0.857300 0.292000 0.424100\nvn 0.637100 0.525600 0.563700\nvn 0.547100 0.459300 0.699800\nvn 0.707000 0.575500 0.411100\nvn 0.758300 0.607500 0.236400\nvn 0.783000 0.620000 0.048900\nvn -0.289800 -0.207600 0.934300\nvn -0.248700 -0.204800 0.946700\nvn 0.780300 0.609800 -0.138600\nvn 0.072900 0.109800 0.991300\nvn -0.183100 -0.097900 0.978200\nvn 0.770400 0.602700 -0.207900\nvn 0.352100 0.317300 0.880500\nvn -0.218700 -0.256600 0.941400\nvn -0.197200 -0.251700 0.947500\nvn 0.581700 0.799800 -0.147900\nvn 0.582800 0.811700 0.037900\nvn 0.044000 0.138000 0.989400\nvn -0.147700 -0.131800 0.980200\nvn 0.577900 0.787100 -0.215500\nvn 0.400200 0.602300 0.690600\nvn 0.250300 0.411500 0.876300\nvn 0.470100 0.690200 0.550100\nvn 0.523300 0.753100 0.398600\nvn 0.561200 0.796300 0.225700\nvn 0.252000 0.888200 0.384100\nvn 0.222800 0.812200 0.539100\nvn 0.276300 0.937700 0.210500\nvn 0.290300 0.956700 0.021700\nvn -0.154600 -0.282500 0.946700\nvn -0.168500 -0.270900 0.947700\nvn 0.296700 0.941000 -0.162500\nvn -0.012400 0.156500 0.987600\nvn -0.113400 -0.153800 0.981500\nvn 0.293000 0.928300 -0.228700\nvn 0.181700 0.709200 0.681100\nvn 0.100100 0.478700 0.872200\nvn 0.013700 0.971600 -0.236000\nvn 0.010200 0.984800 -0.173500\nvn -0.037800 0.747100 0.663600\nvn -0.048800 0.511100 0.858100\nvn -0.027000 0.851600 0.523500\nvn -0.017000 0.931300 0.363700\nvn -0.008200 0.982000 0.188800\nvn -0.000300 1.000000 0.007200\nvn -0.047700 -0.304500 0.951300\nvn -0.052700 -0.282800 0.957700\nvn -0.051200 0.165500 0.984900\nvn -0.047800 -0.167700 0.984600\nvn -0.289000 0.957200 -0.010600\nvn -0.294700 0.939500 0.174300\nvn 0.051500 -0.295300 0.954000\nvn 0.056500 -0.270900 0.960900\nvn -0.276000 0.941700 -0.192300\nvn -0.093700 0.157800 0.983000\nvn 0.011000 -0.167100 0.985900\nvn -0.264500 0.929200 -0.258000\nvn -0.253900 0.707500 0.659500\nvn -0.197300 0.487500 0.850500\nvn -0.276100 0.806400 0.522900\nvn -0.289200 0.888100 0.357200\nvn -0.564100 0.750900 0.343300\nvn -0.521700 0.683300 0.510800\nvn -0.582200 0.797700 0.156900\nvn -0.582000 0.812700 -0.028300\nvn 0.114300 -0.277700 0.953800\nvn 0.073800 -0.258300 0.963200\nvn -0.562300 0.799400 -0.211500\nvn -0.155200 0.134600 0.978600\nvn 0.045400 -0.149800 0.987600\nvn -0.550600 0.786700 -0.279300\nvn -0.470100 0.598900 0.648300\nvn -0.349900 0.415500 0.839600\nvn -0.741200 0.601100 -0.298900\nvn -0.758300 0.609300 -0.231600\nvn -0.614900 0.455500 0.643600\nvn -0.446100 0.314500 0.837900\nvn -0.691000 0.519200 0.502800\nvn -0.749100 0.572500 0.333200\nvn -0.780200 0.608000 0.146900\nvn -0.782500 0.621100 -0.042900\nvn 0.206900 -0.230300 0.950900\nvn 0.132100 -0.215700 0.967400\nvn -0.182000 0.099500 0.978200\nvn 0.092300 -0.117300 0.988800\nvn -0.947800 0.313700 -0.057000\nvn -0.941000 0.307900 0.140400\nvn 0.289900 -0.142500 0.946400\nvn 0.203300 -0.117000 0.972100\nvn -0.916700 0.310400 -0.251800\nvn -0.206900 0.033800 0.977800\nvn 0.122300 -0.082600 0.989000\nvn -0.896600 0.305500 -0.320500\nvn -0.733600 0.221300 0.642500\nvn -0.522300 0.149500 0.839600\nvn -0.827700 0.255700 0.499400\nvn -0.900900 0.283500 0.328500\nvn -0.946200 -0.012700 0.323200\nvn -0.873200 -0.014600 0.487100\nvn -0.990600 -0.007600 0.136200\nvn -0.998200 -0.004200 -0.060200\nvn 0.316900 -0.012400 0.948400\nvn 0.224700 -0.016600 0.974300\nvn -0.967100 -0.001300 -0.254200\nvn -0.213600 -0.012600 0.976800\nvn 0.135900 -0.013000 0.990600\nvn -0.946400 -0.000500 -0.323000\nvn -0.773900 -0.013500 0.633100\nvn -0.551900 -0.012300 0.833800\nvn -0.896400 -0.302700 -0.323900\nvn -0.916000 -0.309300 -0.255300\nvn -0.733800 -0.240800 0.635200\nvn -0.521900 -0.168500 0.836200\nvn -0.827500 -0.275000 0.489400\nvn -0.897500 -0.298000 0.325000\nvn -0.938400 -0.315300 0.141100\nvn -0.947000 -0.315500 -0.059800\nvn 0.295500 0.129500 0.946500\nvn 0.208100 0.094300 0.973500\nvn -0.206500 -0.052700 0.977000\nvn 0.123500 0.066700 0.990100\nvn -0.784400 -0.618200 -0.049800\nvn -0.780800 -0.607700 0.145000\nvn 0.211100 0.236600 0.948400\nvn 0.134700 0.211900 0.968000\nvn -0.759400 -0.604000 -0.241900\nvn -0.189600 -0.107200 0.976000\nvn 0.086000 0.116400 0.989500\nvn -0.741800 -0.595300 -0.308600\nvn -0.619000 -0.466200 0.632000\nvn -0.449900 -0.323800 0.832300\nvn -0.695200 -0.528500 0.487200\nvn -0.750100 -0.575900 0.325000\nvn -0.526500 -0.692500 0.493200\nvn -0.474100 -0.609500 0.635400\nvn -0.566600 -0.754000 0.332200\nvn -0.586000 -0.795700 0.153300\nvn -0.585300 -0.809900 -0.037800\nvn 0.112800 0.290200 0.950300\nvn 0.069500 0.270000 0.960400\nvn -0.564500 -0.793400 -0.227500\nvn -0.162600 -0.138700 0.976900\nvn 0.041800 0.156000 0.986800\nvn -0.552400 -0.779500 -0.295100\nvn -0.353500 -0.422000 0.834800\nvn -0.279500 -0.936500 -0.211800\nvn -0.294200 -0.955500 -0.021200\nvn -0.093300 -0.166500 0.981600\nvn 0.011400 0.169700 0.985400\nvn -0.267800 -0.922100 -0.279300\nvn -0.253000 -0.718500 0.647900\nvn -0.195500 -0.498600 0.844400\nvn -0.279400 -0.815500 0.506800\nvn -0.293700 -0.890700 0.346800\nvn -0.299900 -0.938700 0.170200\nvn 0.064300 0.311200 0.948100\nvn 0.082600 0.276100 0.957600\nvn -0.011600 -0.982500 0.185600\nvn -0.021000 -0.933900 0.356800\nvn -0.003000 -1.000000 -0.003000\nvn -0.048000 0.326400 0.944000\nvn -0.052300 0.281500 0.958100\nvn 0.008000 -0.981100 -0.193400\nvn -0.046600 -0.177400 0.983000\nvn -0.046400 0.169600 0.984400\nvn 0.012100 -0.965500 -0.260000\nvn -0.033400 -0.753400 0.656700\nvn -0.042600 -0.521500 0.852200\nvn -0.027700 -0.857600 0.513500\nvn 0.223000 -0.814800 0.535100\nvn 0.183300 -0.713500 0.676300\nvn 0.253400 -0.890400 0.378000\nvn 0.279800 -0.938000 0.204500\nvn 0.293900 -0.955700 0.013200\nvn -0.171400 0.295200 0.939900\nvn -0.196300 0.261800 0.944900\nvn 0.300300 -0.936800 -0.179600\nvn -0.009100 -0.166900 0.985900\nvn -0.115100 0.157400 0.980800\nvn 0.298200 -0.921700 -0.248000\nvn 0.103900 -0.488700 0.866200\nvn 0.590400 -0.791400 -0.158500\nvn 0.591300 -0.805900 0.028500\nvn 0.047200 -0.146100 0.988100\nvn -0.147900 0.132300 0.980100\nvn 0.586100 -0.778700 -0.223700\nvn 0.398500 -0.608500 0.686200\nvn 0.250100 -0.419800 0.872400\nvn 0.471000 -0.693200 0.545500\nvn 0.528500 -0.754400 0.389300\nvn 0.569000 -0.793500 0.215600\nvn -0.221700 0.263800 0.938700\nvn -0.194600 0.253600 0.947500\nvn 0.766800 -0.602800 0.220500\nvn 0.714600 -0.575900 0.397200\nvn 0.790300 -0.611300 0.039500\nvn -0.294700 0.206600 0.933000\nvn -0.251400 0.197300 0.947500\nvn 0.786600 -0.601000 -0.141900\nvn 0.074400 -0.117400 0.990300\nvn -0.184200 0.093100 0.978500\nvn 0.776800 -0.593700 -0.209900\nvn 0.545600 -0.466100 0.696400\nvn 0.349000 -0.324900 0.879000\nvn 0.641600 -0.528800 0.555600\nvn 0.776400 -0.262100 0.573100\nvn 0.666300 -0.229500 0.709500\nvn 0.864400 -0.287500 0.412500\nvn 0.923500 -0.307300 0.229400\nvn 0.949800 -0.308700 0.050200\nvn -0.361200 0.106200 0.926400\nvn -0.316100 0.090400 0.944400\nvn 0.943300 -0.305200 -0.130300\nvn 0.103100 -0.053900 0.993200\nvn -0.209000 0.050000 0.976600\nvn 0.932900 -0.297900 -0.202400\nvn 0.431300 -0.159300 0.888000\nvn 0.070300 -0.099300 0.992600\nvn 0.023300 -0.150800 0.988300\nvn 0.070400 -0.227300 0.971300\nvn 0.086300 -0.166000 0.982300\nvn 0.119400 -0.019400 0.992600\nvn 0.117700 -0.078600 0.989900\nvn -0.190000 -0.227200 0.955100\nvn -0.144600 -0.261700 0.954200\nvn -0.052600 -0.200000 0.978400\nvn -0.133800 -0.149400 0.979700\nvn -0.252900 -0.086300 0.963600\nvn -0.215900 -0.169500 0.961600\nvn -0.181900 -0.099100 0.978300\nvn -0.231700 -0.019100 0.972600\nvn 0.117000 -0.018400 0.993000\nvn 0.117500 0.045800 0.992000\nvn 0.049200 0.250100 0.966900\nvn -0.055700 0.244400 0.968000\nvn -0.165200 0.242700 0.955900\nvn -0.058000 0.186200 0.980800\nvn -0.256000 0.057800 0.964900\nvn -0.267500 -0.014100 0.963400\nvn -0.180100 0.070900 0.981100\nvn -0.216000 0.151600 0.964500\nvn -0.132900 0.130700 0.982500\nvn -0.188800 0.224600 0.956000\nvn -0.054500 0.050200 0.997200\nvn 0.019100 0.125800 0.991900\nvn -0.114000 -0.014900 0.993300\nvn -0.054700 -0.077800 0.995500\nvn 0.003200 -0.015800 0.999800\nvn 0.067500 0.066100 0.995500\nvn -0.055400 -0.283400 0.957400\nvn 0.038100 -0.256500 0.965800\nvn 0.068400 0.226500 0.971600\nvn 0.086100 0.145000 0.985700\nusemtl Eye_brown\ns 1\nf 3726/3207/3719 3725/3208/3720 3735/3209/3721 3736/3210/3722\nf 3955/3211/3723 3719/3212/3724 3729/3213/3725 3956/3214/3726\nf 3727/3215/3727 3726/3207/3719 3736/3210/3722 3737/3216/3728\nf 3721/3217/3729 3720/3218/3730 3730/3219/3731 3731/3220/3732\nf 3728/3221/3733 3727/3215/3727 3737/3216/3728 3738/3222/3734\nf 3722/3223/3735 3721/3217/3729 3731/3220/3732 3732/3224/3736\nf 3723/3225/3737 3722/3223/3735 3732/3224/3736 3733/3226/3738\nf 3724/3227/3739 3723/3225/3737 3733/3226/3738 3734/3228/3740\nf 3725/3208/3720 3724/3227/3739 3734/3228/3740 3735/3209/3721\nf 3733/3226/3738 3732/3224/3736 3742/3229/3741 3743/3230/3742\nf 3734/3228/3740 3733/3226/3738 3743/3230/3742 3744/3231/3743\nf 3735/3209/3721 3734/3228/3740 3744/3231/3743 3745/3232/3744\nf 3736/3210/3722 3735/3209/3721 3745/3232/3744 3746/3233/3745\nf 3956/3214/3726 3729/3213/3725 3739/3234/3746 3957/3235/3747\nf 3737/3216/3728 3736/3210/3722 3746/3233/3745 3747/3236/3748\nf 3731/3220/3732 3730/3219/3731 3740/3237/3749 3741/3238/3750\nf 3738/3222/3734 3737/3216/3728 3747/3236/3748 3748/3239/3751\nf 3732/3224/3736 3731/3220/3732 3741/3238/3750 3742/3229/3741\nf 3957/3235/3747 3739/3234/3746 3749/3240/3752 3958/3241/3753\nf 3747/3236/3748 3746/3233/3745 3756/3242/3754 3757/3243/3755\nf 3741/3238/3750 3740/3237/3749 3750/3244/3756 3751/3245/3757\nf 3748/3239/3751 3747/3236/3748 3757/3243/3755 3758/3246/3758\nf 3742/3229/3741 3741/3238/3750 3751/3245/3757 3752/3247/3759\nf 3743/3230/3742 3742/3229/3741 3752/3247/3759 3753/3248/3760\nf 3744/3231/3743 3743/3230/3742 3753/3248/3760 3754/3249/3761\nf 3745/3232/3744 3744/3231/3743 3754/3249/3761 3755/3250/3762\nf 3746/3233/3745 3745/3232/3744 3755/3250/3762 3756/3242/3754\nf 3754/3249/3761 3753/3248/3760 3763/3251/3763 3764/3252/3764\nf 3755/3250/3762 3754/3249/3761 3764/3252/3764 3765/3253/3765\nf 3756/3242/3754 3755/3250/3762 3765/3253/3765 3766/3254/3766\nf 3958/3241/3753 3749/3240/3752 3759/3255/3767 3959/3256/3768\nf 3757/3243/3755 3756/3242/3754 3766/3254/3766 3767/3257/3769\nf 3751/3245/3757 3750/3244/3756 3760/3258/3770 3761/3259/3771\nf 3758/3246/3758 3757/3243/3755 3767/3257/3769 3768/3260/3772\nf 3752/3247/3759 3751/3245/3757 3761/3259/3771 3762/3261/3773\nf 3753/3248/3760 3752/3247/3759 3762/3261/3773 3763/3251/3763\nf 3768/3260/3772 3767/3257/3769 3777/3262/3774 3778/3263/3775\nf 3762/3261/3773 3761/3259/3771 3771/3264/3776 3772/3265/3777\nf 3763/3251/3763 3762/3261/3773 3772/3265/3777 3773/3266/3778\nf 3764/3252/3764 3763/3251/3763 3773/3266/3778 3774/3267/3779\nf 3765/3253/3765 3764/3252/3764 3774/3267/3779 3775/3268/3780\nf 3766/3254/3766 3765/3253/3765 3775/3268/3780 3776/3269/3781\nf 3959/3256/3768 3759/3255/3767 3769/3270/3782 3960/3271/3783\nf 3767/3257/3769 3766/3254/3766 3776/3269/3781 3777/3262/3774\nf 3761/3259/3771 3760/3258/3770 3770/3272/3784 3771/3264/3776\nf 3776/3269/3781 3775/3268/3780 3785/3273/3785 3786/3274/3786\nf 3960/3271/3783 3769/3270/3782 3779/3275/3787 3961/3276/3788\nf 3777/3262/3774 3776/3269/3781 3786/3274/3786 3787/3277/3789\nf 3771/3264/3776 3770/3272/3784 3780/3278/3790 3781/3279/3791\nf 3778/3263/3775 3777/3262/3774 3787/3277/3789 3788/3280/3792\nf 3772/3265/3777 3771/3264/3776 3781/3279/3791 3782/3281/3793\nf 3773/3266/3778 3772/3265/3777 3782/3281/3793 3783/3282/3794\nf 3774/3267/3779 3773/3266/3778 3783/3282/3794 3784/3283/3795\nf 3775/3268/3780 3774/3267/3779 3784/3283/3795 3785/3273/3785\nf 3784/3283/3795 3783/3282/3794 3793/3284/3796 3794/3285/3797\nf 3785/3273/3785 3784/3283/3795 3794/3285/3797 3795/3286/3798\nf 3786/3274/3786 3785/3273/3785 3795/3286/3798 3796/3287/3799\nf 3961/3276/3788 3779/3275/3787 3789/3288/3800 3962/3289/3801\nf 3787/3277/3789 3786/3274/3786 3796/3287/3799 3797/3290/3802\nf 3781/3279/3791 3780/3278/3790 3790/3291/3803 3791/3292/3804\nf 3788/3280/3792 3787/3277/3789 3797/3290/3802 3798/3293/3805\nf 3782/3281/3793 3781/3279/3791 3791/3292/3804 3792/3294/3806\nf 3783/3282/3794 3782/3281/3793 3792/3294/3806 3793/3284/3796\nf 3798/3293/3805 3797/3290/3802 3807/3295/3807 3808/3296/3808\nf 3792/3294/3806 3791/3292/3804 3801/3297/3809 3802/3298/3810\nf 3793/3284/3796 3792/3294/3806 3802/3298/3810 3803/3299/3811\nf 3794/3285/3797 3793/3284/3796 3803/3299/3811 3804/3300/3812\nf 3795/3286/3798 3794/3285/3797 3804/3300/3812 3805/3301/3813\nf 3796/3287/3799 3795/3286/3798 3805/3301/3813 3806/3302/3814\nf 3962/3289/3801 3789/3288/3800 3799/3303/3815 3963/3304/3816\nf 3797/3290/3802 3796/3287/3799 3806/3302/3814 3807/3295/3807\nf 3791/3292/3804 3790/3291/3803 3800/3305/3817 3801/3297/3809\nf 3806/3302/3814 3805/3301/3813 3815/3306/3818 3816/3307/3819\nf 3963/3304/3816 3799/3303/3815 3809/3308/3820 3964/3309/3821\nf 3807/3295/3807 3806/3302/3814 3816/3307/3819 3817/3310/3822\nf 3801/3297/3809 3800/3305/3817 3810/3311/3823 3811/3312/3824\nf 3808/3296/3808 3807/3295/3807 3817/3310/3822 3818/3313/3825\nf 3802/3298/3810 3801/3297/3809 3811/3312/3824 3812/3314/3826\nf 3803/3299/3811 3802/3298/3810 3812/3314/3826 3813/3315/3827\nf 3804/3300/3812 3803/3299/3811 3813/3315/3827 3814/3316/3828\nf 3805/3301/3813 3804/3300/3812 3814/3316/3828 3815/3306/3818\nf 3814/3316/3828 3813/3315/3827 3823/3317/3829 3824/3318/3830\nf 3815/3306/3818 3814/3316/3828 3824/3318/3830 3825/3319/3831\nf 3816/3307/3819 3815/3306/3818 3825/3319/3831 3826/3320/3832\nf 3964/3309/3821 3809/3308/3820 3819/3321/3833 3965/3322/3834\nf 3817/3310/3822 3816/3307/3819 3826/3320/3832 3827/3323/3835\nf 3811/3312/3824 3810/3311/3823 3820/3324/3836 3821/3325/3837\nf 3818/3313/3825 3817/3310/3822 3827/3323/3835 3828/3326/3838\nf 3812/3314/3826 3811/3312/3824 3821/3325/3837 3822/3327/3839\nf 3813/3315/3827 3812/3314/3826 3822/3327/3839 3823/3317/3829\nf 3828/3326/3838 3827/3323/3835 3837/3328/3840 3838/3329/3841\nf 3822/3327/3839 3821/3325/3837 3831/3330/3842 3832/3331/3843\nf 3823/3317/3829 3822/3327/3839 3832/3331/3843 3833/3332/3844\nf 3824/3318/3830 3823/3317/3829 3833/3332/3844 3834/3333/3845\nf 3825/3319/3831 3824/3318/3830 3834/3333/3845 3835/3334/3846\nf 3826/3320/3832 3825/3319/3831 3835/3334/3846 3836/3335/3847\nf 3965/3322/3834 3819/3321/3833 3829/3336/3848 3966/3337/3849\nf 3827/3323/3835 3826/3320/3832 3836/3335/3847 3837/3328/3840\nf 3821/3325/3837 3820/3324/3836 3830/3338/3850 3831/3330/3842\nf 3836/3335/3847 3835/3334/3846 3845/3339/3851 3846/3340/3852\nf 3966/3337/3849 3829/3336/3848 3839/3341/3853 3967/3342/3854\nf 3837/3328/3840 3836/3335/3847 3846/3340/3852 3847/3343/3855\nf 3831/3330/3842 3830/3338/3850 3840/3344/3856 3841/3345/3857\nf 3838/3329/3841 3837/3328/3840 3847/3343/3855 3848/3346/3858\nf 3832/3331/3843 3831/3330/3842 3841/3345/3857 3842/3347/3859\nf 3833/3332/3844 3832/3331/3843 3842/3347/3859 3843/3348/3860\nf 3834/3333/3845 3833/3332/3844 3843/3348/3860 3844/3349/3861\nf 3835/3334/3846 3834/3333/3845 3844/3349/3861 3845/3339/3851\nf 3843/3348/3860 3842/3347/3859 3852/3350/3862 3853/3351/3863\nf 3844/3349/3861 3843/3348/3860 3853/3351/3863 3854/3352/3864\nf 3845/3339/3851 3844/3349/3861 3854/3352/3864 3855/3353/3865\nf 3846/3340/3852 3845/3339/3851 3855/3353/3865 3856/3354/3866\nf 3967/3342/3854 3839/3341/3853 3849/3355/3867 3968/3356/3868\nf 3847/3343/3855 3846/3340/3852 3856/3354/3866 3857/3357/3869\nf 3841/3345/3857 3840/3344/3856 3850/3358/3870 3851/3359/3871\nf 3848/3346/3858 3847/3343/3855 3857/3357/3869 3858/3360/3872\nf 3842/3347/3859 3841/3345/3857 3851/3359/3871 3852/3350/3862\nf 3857/3357/3869 3856/3354/3866 3866/3361/3873 3867/3362/3874\nf 3851/3359/3871 3850/3358/3870 3860/3363/3875 3861/3364/3876\nf 3858/3360/3872 3857/3357/3869 3867/3362/3874 3868/3365/3877\nf 3852/3350/3862 3851/3359/3871 3861/3364/3876 3862/3366/3878\nf 3853/3351/3863 3852/3350/3862 3862/3366/3878 3863/3367/3879\nf 3854/3352/3864 3853/3351/3863 3863/3367/3879 3864/3368/3880\nf 3855/3353/3865 3854/3352/3864 3864/3368/3880 3865/3369/3881\nf 3856/3354/3866 3855/3353/3865 3865/3369/3881 3866/3361/3873\nf 3968/3356/3868 3849/3355/3867 3859/3370/3882 3969/3371/3883\nf 3865/3369/3881 3864/3368/3880 3874/3372/3884 3875/3373/3885\nf 3866/3361/3873 3865/3369/3881 3875/3373/3885 3876/3374/3886\nf 3969/3371/3883 3859/3370/3882 3869/3375/3887 3970/3376/3888\nf 3867/3362/3874 3866/3361/3873 3876/3374/3886 3877/3377/3889\nf 3861/3364/3876 3860/3363/3875 3870/3378/3890 3871/3379/3891\nf 3868/3365/3877 3867/3362/3874 3877/3377/3889 3878/3380/3892\nf 3862/3366/3878 3861/3364/3876 3871/3379/3891 3872/3381/3893\nf 3863/3367/3879 3862/3366/3878 3872/3381/3893 3873/3382/3894\nf 3864/3368/3880 3863/3367/3879 3873/3382/3894 3874/3372/3884\nf 3873/3382/3894 3872/3381/3893 3882/3383/3895 3883/3384/3896\nf 3874/3372/3884 3873/3382/3894 3883/3384/3896 3884/3385/3897\nf 3875/3373/3885 3874/3372/3884 3884/3385/3897 3885/3386/3898\nf 3876/3374/3886 3875/3373/3885 3885/3386/3898 3886/3387/3899\nf 3970/3376/3888 3869/3375/3887 3879/3388/3900 3971/3389/3901\nf 3877/3377/3889 3876/3374/3886 3886/3387/3899 3887/3390/3902\nf 3871/3379/3891 3870/3378/3890 3880/3391/3903 3881/3392/3904\nf 3878/3380/3892 3877/3377/3889 3887/3390/3902 3888/3393/3905\nf 3872/3381/3893 3871/3379/3891 3881/3392/3904 3882/3383/3895\nf 3887/3390/3902 3886/3387/3899 3896/3394/3906 3897/3395/3907\nf 3881/3392/3904 3880/3391/3903 3890/3396/3908 3891/3397/3909\nf 3888/3393/3905 3887/3390/3902 3897/3395/3907 3898/3398/3910\nf 3882/3383/3895 3881/3392/3904 3891/3397/3909 3892/3399/3911\nf 3883/3384/3896 3882/3383/3895 3892/3399/3911 3893/3400/3912\nf 3884/3385/3897 3883/3384/3896 3893/3400/3912 3894/3401/3913\nf 3885/3386/3898 3884/3385/3897 3894/3401/3913 3895/3402/3914\nf 3886/3387/3899 3885/3386/3898 3895/3402/3914 3896/3394/3906\nf 3971/3389/3901 3879/3388/3900 3889/3403/3915 3972/3404/3916\nf 3895/3402/3914 3894/3401/3913 3904/3405/3917 3905/3406/3918\nf 3896/3394/3906 3895/3402/3914 3905/3406/3918 3906/3407/3919\nf 3972/3404/3916 3889/3403/3915 3899/3408/3920 3973/3409/3921\nf 3897/3395/3907 3896/3394/3906 3906/3407/3919 3907/3410/3922\nf 3891/3397/3909 3890/3396/3908 3900/3411/3923 3901/3412/3924\nf 3898/3398/3910 3897/3395/3907 3907/3410/3922 3908/3413/3925\nf 3892/3399/3911 3891/3397/3909 3901/3412/3924 3902/3414/3926\nf 3893/3400/3912 3892/3399/3911 3902/3414/3926 3903/3415/3927\nf 3894/3401/3913 3893/3400/3912 3903/3415/3927 3904/3405/3917\nf 3903/3415/3927 3902/3414/3926 3912/3416/3928 3913/3417/3929\nf 3904/3405/3917 3903/3415/3927 3913/3417/3929 3914/3418/3930\nf 3905/3406/3918 3904/3405/3917 3914/3418/3930 3915/3419/3931\nf 3906/3407/3919 3905/3406/3918 3915/3419/3931 3916/3420/3932\nf 3973/3409/3921 3899/3408/3920 3909/3421/3933 3974/3422/3934\nf 3907/3410/3922 3906/3407/3919 3916/3420/3932 3917/3423/3935\nf 3901/3412/3924 3900/3411/3923 3910/3424/3936 3911/3425/3937\nf 3908/3413/3925 3907/3410/3922 3917/3423/3935 3918/3426/3938\nf 3902/3414/3926 3901/3412/3924 3911/3425/3937 3912/3416/3928\nf 3917/3207/3935 3916/3215/3932 3726/3423/3719 3727/3420/3727\nf 3911/3425/3937 3910/3424/3936 3720/3218/3730 3721/3217/3729\nf 3918/3426/3938 3917/3423/3935 3727/3215/3727 3728/3221/3733\nf 3912/3416/3928 3911/3425/3937 3721/3217/3729 3722/3223/3735\nf 3913/3417/3929 3912/3416/3928 3722/3223/3735 3723/3225/3737\nf 3914/3418/3930 3913/3417/3929 3723/3225/3737 3724/3227/3739\nf 3915/3419/3931 3914/3418/3930 3724/3227/3739 3725/3208/3720\nf 3916/3208/3932 3915/3207/3931 3725/3420/3720 3726/3419/3719\nf 3719/3422/3724 3955/3421/3723 3974/3212/3934 3909/3211/3933\nf 3952/3427/3939 3933/3428/3940 3937/3429/3941 3946/3430/3942\nf 3949/3431/3943 3925/3432/3944 3933/3428/3940 3952/3427/3939\nf 3934/3433/3945 3940/3434/3946 3941/3435/3947 3926/3436/3948\nf 3930/3437/3949 3942/3438/3950 3939/3439/3951 3938/3440/3952\nf 3938/3440/3952 3939/3439/3951 3940/3434/3946 3934/3433/3945\nf 3925/3432/3944 3949/3431/3943 3928/3441/3953 3919/3442/3954\nf 3924/3443/3955 3950/3444/3956 3927/3445/3957 3922/3446/3958\nf 3923/3447/3959 3942/3438/3950 3930/3437/3949 3921/3448/3960\nf 3943/3449/3961 3942/3438/3950 3923/3447/3959 3931/3450/3962\nf 3953/3451/3963 3943/3449/3961 3931/3450/3962 3935/3452/3964\nf 3953/3451/3963 3935/3452/3964 3927/3445/3957 3950/3444/3956\nf 3953/3451/3963 3950/3444/3956 3947/3453/3965 3951/3454/3966\nf 3943/3449/3961 3953/3451/3963 3951/3454/3966 3944/3455/3967\nf 3942/3438/3950 3943/3449/3961 3944/3455/3967 3939/3439/3951\nf 3939/3439/3951 3944/3455/3967 3945/3456/3968 3940/3434/3946\nf 3944/3455/3967 3951/3454/3966 3954/3457/3969 3945/3456/3968\nf 3951/3454/3966 3947/3453/3965 3948/3458/3970 3954/3457/3969\nf 3954/3457/3969 3948/3458/3970 3949/3431/3943 3952/3427/3939\nf 3945/3456/3968 3954/3457/3969 3952/3427/3939 3946/3430/3942\nf 3940/3434/3946 3945/3456/3968 3946/3430/3942 3941/3435/3947\nf 3926/3436/3948 3941/3435/3947 3929/3459/3971 3920/3460/3972\nf 3950/3444/3956 3924/3443/3955 3932/3461/3973 3947/3453/3965\nf 3948/3458/3970 3936/3462/3974 3928/3441/3953 3949/3431/3943\nf 3947/3453/3965 3932/3461/3973 3936/3462/3974 3948/3458/3970\nf 3931/3450/3962 3899/3408/3920 3889/3403/3915 3935/3452/3964\nf 3923/3447/3959 3909/3421/3933 3899/3408/3920 3931/3450/3962\nf 3921/3448/3960 3719/3212/3724 3909/3421/3933 3923/3447/3959\nf 3719/3212/3724 3921/3448/3960 3930/3437/3949 3729/3213/3725\nf 3938/3440/3952 3739/3234/3746 3729/3213/3725 3930/3437/3949\nf 3739/3234/3746 3938/3440/3952 3934/3433/3945 3749/3240/3752\nf 3926/3436/3948 3759/3255/3767 3749/3240/3752 3934/3433/3945\nf 3920/3460/3972 3769/3270/3782 3759/3255/3767 3926/3436/3948\nf 3935/3452/3964 3889/3403/3915 3879/3388/3900 3927/3445/3957\nf 3927/3445/3957 3879/3388/3900 3869/3375/3887 3922/3446/3958\nf 3922/3446/3958 3869/3375/3887 3859/3370/3882 3924/3443/3955\nf 3924/3443/3955 3859/3370/3882 3849/3355/3867 3932/3461/3973\nf 3932/3461/3973 3849/3355/3867 3839/3341/3853 3936/3462/3974\nf 3936/3462/3974 3839/3341/3853 3829/3336/3848 3928/3441/3953\nf 3928/3441/3953 3829/3336/3848 3819/3321/3833 3919/3442/3954\nf 3919/3442/3954 3819/3321/3833 3809/3308/3820 3925/3432/3944\nf 3799/3303/3815 3933/3428/3940 3925/3432/3944 3809/3308/3820\nf 3933/3428/3940 3799/3303/3815 3789/3288/3800 3937/3429/3941\nf 3937/3429/3941 3789/3288/3800 3779/3275/3787 3929/3459/3971\nf 3769/3270/3782 3920/3460/3972 3929/3459/3971 3779/3275/3787\nf 3946/3430/3942 3937/3429/3941 3929/3459/3971 3941/3435/3947\nf 3720/3218/3730 3955/3211/3723 3956/3214/3726 3730/3219/3731\nf 3730/3219/3731 3956/3214/3726 3957/3235/3747 3740/3237/3749\nf 3740/3237/3749 3957/3235/3747 3958/3241/3753 3750/3244/3756\nf 3750/3244/3756 3958/3241/3753 3959/3256/3768 3760/3258/3770\nf 3760/3258/3770 3959/3256/3768 3960/3271/3783 3770/3272/3784\nf 3770/3272/3784 3960/3271/3783 3961/3276/3788 3780/3278/3790\nf 3780/3278/3790 3961/3276/3788 3962/3289/3801 3790/3291/3803\nf 3790/3291/3803 3962/3289/3801 3963/3304/3816 3800/3305/3817\nf 3800/3305/3817 3963/3304/3816 3964/3309/3821 3810/3311/3823\nf 3810/3311/3823 3964/3309/3821 3965/3322/3834 3820/3324/3836\nf 3820/3324/3836 3965/3322/3834 3966/3337/3849 3830/3338/3850\nf 3830/3338/3850 3966/3337/3849 3967/3342/3854 3840/3344/3856\nf 3840/3344/3856 3967/3342/3854 3968/3356/3868 3850/3358/3870\nf 3850/3358/3870 3968/3356/3868 3969/3371/3883 3860/3363/3875\nf 3860/3363/3875 3969/3371/3883 3970/3376/3888 3870/3378/3890\nf 3870/3378/3890 3970/3376/3888 3971/3389/3901 3880/3391/3903\nf 3880/3391/3903 3971/3389/3901 3972/3404/3916 3890/3396/3908\nf 3890/3396/3908 3972/3404/3916 3973/3409/3921 3900/3411/3923\nf 3900/3411/3923 3973/3409/3921 3974/3422/3934 3910/3424/3936\nf 3910/3424/3936 3974/3422/3934 3955/3211/3723 3720/3218/3730\nf 3982/3463/3975 3981/3464/3976 3991/3465/3977 3992/3466/3978\nf 4211/3467/3979 3975/3468/3980 3985/3469/3981 4212/3470/3982\nf 3983/3471/3983 3982/3463/3975 3992/3466/3978 3993/3472/3984\nf 4231/3473/3985 3976/3474/3986 3986/3475/3987 4232/3476/3988\nf 3984/3477/3989 3983/3471/3983 3993/3472/3984 3994/3478/3990\nf 3978/3479/3991 3977/3480/3992 3987/3481/3993 3988/3482/3994\nf 3979/3483/3995 3978/3479/3991 3988/3482/3994 3989/3484/3996\nf 3980/3485/3997 3979/3483/3995 3989/3484/3996 3990/3486/3998\nf 3981/3464/3976 3980/3485/3997 3990/3486/3998 3991/3465/3977\nf 3989/3484/3996 3988/3482/3994 3998/3487/3999 3999/3488/4000\nf 3990/3486/3998 3989/3484/3996 3999/3488/4000 4000/3489/4001\nf 3991/3465/3977 3990/3486/3998 4000/3489/4001 4001/3490/4002\nf 3992/3466/3978 3991/3465/3977 4001/3490/4002 4002/3491/4003\nf 4212/3470/3982 3985/3469/3981 3995/3492/4004 4213/3493/4005\nf 3993/3472/3984 3992/3466/3978 4002/3491/4003 4003/3494/4006\nf 4232/3476/3988 3986/3475/3987 3996/3495/4007 4233/3496/4008\nf 3994/3478/3990 3993/3472/3984 4003/3494/4006 4004/3497/4009\nf 3988/3482/3994 3987/3481/3993 3997/3498/4010 3998/3487/3999\nf 4213/3493/4005 3995/3492/4004 4005/3499/4011 4214/3500/4012\nf 4003/3494/4006 4002/3491/4003 4012/3501/4013 4013/3502/4014\nf 4233/3496/4008 3996/3495/4007 4006/3503/4015 4234/3504/4016\nf 4004/3497/4009 4003/3494/4006 4013/3502/4014 4014/3505/4017\nf 3998/3487/3999 3997/3498/4010 4007/3506/4018 4008/3507/4019\nf 3999/3488/4000 3998/3487/3999 4008/3507/4019 4009/3508/4020\nf 4000/3489/4001 3999/3488/4000 4009/3508/4020 4010/3509/4021\nf 4001/3490/4002 4000/3489/4001 4010/3509/4021 4011/3510/4022\nf 4002/3491/4003 4001/3490/4002 4011/3510/4022 4012/3501/4013\nf 4010/3509/4021 4009/3508/4020 4019/3511/4023 4020/3512/4024\nf 4011/3510/4022 4010/3509/4021 4020/3512/4024 4021/3513/4025\nf 4012/3501/4013 4011/3510/4022 4021/3513/4025 4022/3514/4026\nf 4214/3500/4012 4005/3499/4011 4015/3515/4027 4215/3516/4028\nf 4013/3502/4014 4012/3501/4013 4022/3514/4026 4023/3517/4029\nf 4234/3504/4016 4006/3503/4015 4016/3518/4030 4235/3519/4031\nf 4014/3505/4017 4013/3502/4014 4023/3517/4029 4024/3520/4032\nf 4008/3507/4019 4007/3506/4018 4017/3521/4033 4018/3522/4034\nf 4009/3508/4020 4008/3507/4019 4018/3522/4034 4019/3511/4023\nf 4024/3520/4032 4023/3517/4029 4033/3523/4035 4034/3524/4036\nf 4018/3522/4034 4017/3521/4033 4027/3525/4037 4028/3526/4038\nf 4019/3511/4023 4018/3522/4034 4028/3526/4038 4029/3527/4039\nf 4020/3512/4024 4019/3511/4023 4029/3527/4039 4030/3528/4040\nf 4021/3513/4025 4020/3512/4024 4030/3528/4040 4031/3529/4041\nf 4022/3514/4026 4021/3513/4025 4031/3529/4041 4032/3530/4042\nf 4215/3516/4028 4015/3515/4027 4025/3531/4043 4216/3532/4044\nf 4023/3517/4029 4022/3514/4026 4032/3530/4042 4033/3523/4035\nf 4235/3519/4031 4016/3518/4030 4026/3533/4045 4236/3534/4046\nf 4032/3530/4042 4031/3529/4041 4041/3535/4047 4042/3536/4048\nf 4216/3532/4044 4025/3531/4043 4035/3537/4049 4217/3538/4050\nf 4033/3523/4035 4032/3530/4042 4042/3536/4048 4043/3539/4051\nf 4236/3534/4046 4026/3533/4045 4036/3540/4052 4237/3541/4053\nf 4034/3524/4036 4033/3523/4035 4043/3539/4051 4044/3542/4054\nf 4028/3526/4038 4027/3525/4037 4037/3543/4055 4038/3544/4056\nf 4029/3527/4039 4028/3526/4038 4038/3544/4056 4039/3545/4057\nf 4030/3528/4040 4029/3527/4039 4039/3545/4057 4040/3546/4058\nf 4031/3529/4041 4030/3528/4040 4040/3546/4058 4041/3535/4047\nf 4040/3546/4058 4039/3545/4057 4049/3547/4059 4050/3548/4060\nf 4041/3535/4047 4040/3546/4058 4050/3548/4060 4051/3549/4061\nf 4042/3536/4048 4041/3535/4047 4051/3549/4061 4052/3550/4062\nf 4217/3538/4050 4035/3537/4049 4045/3551/4063 4218/3552/4064\nf 4043/3539/4051 4042/3536/4048 4052/3550/4062 4053/3553/4065\nf 4237/3541/4053 4036/3540/4052 4046/3554/4066 4238/3555/4067\nf 4044/3542/4054 4043/3539/4051 4053/3553/4065 4054/3556/4068\nf 4038/3544/4056 4037/3543/4055 4047/3557/4069 4048/3558/4070\nf 4039/3545/4057 4038/3544/4056 4048/3558/4070 4049/3547/4059\nf 4054/3556/4068 4053/3553/4065 4063/3559/4071 4064/3560/4072\nf 4048/3558/4070 4047/3557/4069 4057/3561/4073 4058/3562/4074\nf 4049/3547/4059 4048/3558/4070 4058/3562/4074 4059/3563/4075\nf 4050/3548/4060 4049/3547/4059 4059/3563/4075 4060/3564/4076\nf 4051/3549/4061 4050/3548/4060 4060/3564/4076 4061/3565/4077\nf 4052/3550/4062 4051/3549/4061 4061/3565/4077 4062/3566/4078\nf 4218/3552/4064 4045/3551/4063 4055/3567/4079 4219/3568/4080\nf 4053/3553/4065 4052/3550/4062 4062/3566/4078 4063/3559/4071\nf 4238/3555/4067 4046/3554/4066 4056/3569/4081 4239/3570/4082\nf 4062/3566/4078 4061/3565/4077 4071/3571/4083 4072/3572/4084\nf 4219/3568/4080 4055/3567/4079 4065/3573/4085 4220/3574/4086\nf 4063/3559/4071 4062/3566/4078 4072/3572/4084 4073/3575/4087\nf 4239/3570/4082 4056/3569/4081 4066/3576/4088 4240/3577/4089\nf 4064/3560/4072 4063/3559/4071 4073/3575/4087 4074/3578/4090\nf 4058/3562/4074 4057/3561/4073 4067/3579/4091 4068/3580/4092\nf 4059/3563/4075 4058/3562/4074 4068/3580/4092 4069/3581/4093\nf 4060/3564/4076 4059/3563/4075 4069/3581/4093 4070/3582/4094\nf 4061/3565/4077 4060/3564/4076 4070/3582/4094 4071/3571/4083\nf 4070/3582/4094 4069/3581/4093 4079/3583/4095 4080/3584/4096\nf 4071/3571/4083 4070/3582/4094 4080/3584/4096 4081/3585/4097\nf 4072/3572/4084 4071/3571/4083 4081/3585/4097 4082/3586/4098\nf 4220/3574/4086 4065/3573/4085 4075/3587/4099 4221/3588/4100\nf 4073/3575/4087 4072/3572/4084 4082/3586/4098 4083/3589/4101\nf 4240/3577/4089 4066/3576/4088 4076/3590/4102 4241/3591/4103\nf 4074/3578/4090 4073/3575/4087 4083/3589/4101 4084/3592/4104\nf 4068/3580/4092 4067/3579/4091 4077/3593/4105 4078/3594/4106\nf 4069/3581/4093 4068/3580/4092 4078/3594/4106 4079/3583/4095\nf 4084/3592/4104 4083/3589/4101 4093/3595/4107 4094/3596/4108\nf 4078/3594/4106 4077/3593/4105 4087/3597/4109 4088/3598/4110\nf 4079/3583/4095 4078/3594/4106 4088/3598/4110 4089/3599/4111\nf 4080/3584/4096 4079/3583/4095 4089/3599/4111 4090/3600/4112\nf 4081/3585/4097 4080/3584/4096 4090/3600/4112 4091/3601/4113\nf 4082/3586/4098 4081/3585/4097 4091/3601/4113 4092/3602/4114\nf 4221/3588/4100 4075/3587/4099 4085/3603/4115 4222/3604/4116\nf 4083/3589/4101 4082/3586/4098 4092/3602/4114 4093/3595/4107\nf 4241/3591/4103 4076/3590/4102 4086/3605/4117 4242/3606/4118\nf 4092/3602/4114 4091/3601/4113 4101/3607/4119 4102/3608/4120\nf 4222/3604/4116 4085/3603/4115 4095/3609/4121 4223/3610/4122\nf 4093/3595/4107 4092/3602/4114 4102/3608/4120 4103/3611/4123\nf 4242/3606/4118 4086/3605/4117 4096/3612/4124 4243/3613/4125\nf 4094/3596/4108 4093/3595/4107 4103/3611/4123 4104/3614/4126\nf 4088/3598/4110 4087/3597/4109 4097/3615/4127 4098/3616/4128\nf 4089/3599/4111 4088/3598/4110 4098/3616/4128 4099/3617/4129\nf 4090/3600/4112 4089/3599/4111 4099/3617/4129 4100/3618/4130\nf 4091/3601/4113 4090/3600/4112 4100/3618/4130 4101/3607/4119\nf 4099/3617/4129 4098/3616/4128 4108/3619/4131 4109/3620/4132\nf 4100/3618/4130 4099/3617/4129 4109/3620/4132 4110/3621/4133\nf 4101/3607/4119 4100/3618/4130 4110/3621/4133 4111/3622/4134\nf 4102/3608/4120 4101/3607/4119 4111/3622/4134 4112/3623/4135\nf 4223/3610/4122 4095/3609/4121 4105/3624/4136 4224/3625/4137\nf 4103/3611/4123 4102/3608/4120 4112/3623/4135 4113/3626/4138\nf 4243/3613/4125 4096/3612/4124 4106/3627/4139 4244/3628/4140\nf 4104/3614/4126 4103/3611/4123 4113/3626/4138 4114/3629/4141\nf 4098/3616/4128 4097/3615/4127 4107/3630/4142 4108/3619/4131\nf 4113/3626/4138 4112/3623/4135 4122/3631/4143 4123/3632/4144\nf 4244/3628/4140 4106/3627/4139 4116/3633/4145 4245/3634/4146\nf 4114/3629/4141 4113/3626/4138 4123/3632/4144 4124/3635/4147\nf 4108/3619/4131 4107/3630/4142 4117/3636/4148 4118/3637/4149\nf 4109/3620/4132 4108/3619/4131 4118/3637/4149 4119/3638/4150\nf 4110/3621/4133 4109/3620/4132 4119/3638/4150 4120/3639/4151\nf 4111/3622/4134 4110/3621/4133 4120/3639/4151 4121/3640/4152\nf 4112/3623/4135 4111/3622/4134 4121/3640/4152 4122/3631/4143\nf 4224/3625/4137 4105/3624/4136 4115/3641/4153 4225/3642/4154\nf 4121/3640/4152 4120/3639/4151 4130/3643/4155 4131/3644/4156\nf 4122/3631/4143 4121/3640/4152 4131/3644/4156 4132/3645/4157\nf 4225/3642/4154 4115/3641/4153 4125/3646/4158 4226/3647/4159\nf 4123/3632/4144 4122/3631/4143 4132/3645/4157 4133/3648/4160\nf 4245/3634/4146 4116/3633/4145 4126/3649/4161 4246/3650/4162\nf 4124/3635/4147 4123/3632/4144 4133/3648/4160 4134/3651/4163\nf 4118/3637/4149 4117/3636/4148 4127/3652/4164 4128/3653/4165\nf 4119/3638/4150 4118/3637/4149 4128/3653/4165 4129/3654/4166\nf 4120/3639/4151 4119/3638/4150 4129/3654/4166 4130/3643/4155\nf 4129/3654/4166 4128/3653/4165 4138/3655/4167 4139/3656/4168\nf 4130/3643/4155 4129/3654/4166 4139/3656/4168 4140/3657/4169\nf 4131/3644/4156 4130/3643/4155 4140/3657/4169 4141/3658/4170\nf 4132/3645/4157 4131/3644/4156 4141/3658/4170 4142/3659/4171\nf 4226/3647/4159 4125/3646/4158 4135/3660/4172 4227/3661/4173\nf 4133/3648/4160 4132/3645/4157 4142/3659/4171 4143/3662/4174\nf 4246/3650/4162 4126/3649/4161 4136/3663/4175 4247/3664/4176\nf 4134/3651/4163 4133/3648/4160 4143/3662/4174 4144/3665/4177\nf 4128/3653/4165 4127/3652/4164 4137/3666/4178 4138/3655/4167\nf 4143/3662/4174 4142/3659/4171 4152/3667/4179 4153/3668/4180\nf 4247/3664/4176 4136/3663/4175 4146/3669/4181 4248/3670/4182\nf 4144/3665/4177 4143/3662/4174 4153/3668/4180 4154/3671/4183\nf 4138/3655/4167 4137/3666/4178 4147/3672/4184 4148/3673/4185\nf 4139/3656/4168 4138/3655/4167 4148/3673/4185 4149/3674/4186\nf 4140/3657/4169 4139/3656/4168 4149/3674/4186 4150/3675/4187\nf 4141/3658/4170 4140/3657/4169 4150/3675/4187 4151/3676/4188\nf 4142/3659/4171 4141/3658/4170 4151/3676/4188 4152/3667/4179\nf 4227/3661/4173 4135/3660/4172 4145/3677/4189 4228/3678/4190\nf 4151/3676/4188 4150/3675/4187 4160/3679/4191 4161/3680/4192\nf 4152/3667/4179 4151/3676/4188 4161/3680/4192 4162/3681/4193\nf 4228/3678/4190 4145/3677/4189 4155/3682/4194 4229/3683/4195\nf 4153/3668/4180 4152/3667/4179 4162/3681/4193 4163/3684/4196\nf 4248/3670/4182 4146/3669/4181 4156/3685/4197 4249/3686/4198\nf 4154/3671/4183 4153/3668/4180 4163/3684/4196 4164/3687/4199\nf 4148/3673/4185 4147/3672/4184 4157/3688/4200 4158/3689/4201\nf 4149/3674/4186 4148/3673/4185 4158/3689/4201 4159/3690/4202\nf 4150/3675/4187 4149/3674/4186 4159/3690/4202 4160/3679/4191\nf 4159/3690/4202 4158/3689/4201 4168/3691/4203 4169/3692/4204\nf 4160/3679/4191 4159/3690/4202 4169/3692/4204 4170/3693/4205\nf 4161/3680/4192 4160/3679/4191 4170/3693/4205 4171/3694/4206\nf 4162/3681/4193 4161/3680/4192 4171/3694/4206 4172/3695/4207\nf 4229/3683/4195 4155/3682/4194 4165/3696/4208 4230/3697/4209\nf 4163/3684/4196 4162/3681/4193 4172/3695/4207 4173/3698/4210\nf 4249/3686/4198 4156/3685/4197 4166/3699/4211 4250/3700/4212\nf 4164/3687/4199 4163/3684/4196 4173/3698/4210 4174/3701/4213\nf 4158/3689/4201 4157/3688/4200 4167/3702/4214 4168/3691/4203\nf 4173/3698/4210 4172/3695/4207 3982/3463/3975 3983/3471/3983\nf 4250/3700/4212 4166/3699/4211 3976/3474/3986 4231/3473/3985\nf 4174/3701/4213 4173/3698/4210 3983/3471/3983 3984/3477/3989\nf 4168/3691/4203 4167/3702/4214 3977/3480/3992 3978/3479/3991\nf 4169/3692/4204 4168/3691/4203 3978/3479/3991 3979/3483/3995\nf 4170/3693/4205 4169/3692/4204 3979/3483/3995 3980/3485/3997\nf 4171/3694/4206 4170/3693/4205 3980/3485/3997 3981/3464/3976\nf 4172/3695/4207 4171/3694/4206 3981/3464/3976 3982/3463/3975\nf 4230/3697/4209 4165/3696/4208 3975/3468/3980 4211/3467/3979\nf 4208/3703/4215 4189/3704/4216 4193/3705/4217 4202/3706/4218\nf 4205/3707/4219 4181/3708/4220 4189/3704/4216 4208/3703/4215\nf 4190/3709/4221 4196/3710/4222 4197/3711/4223 4182/3712/4224\nf 4186/3713/4225 4198/3714/4226 4195/3715/4227 4194/3716/4228\nf 4194/3716/4228 4195/3715/4227 4196/3710/4222 4190/3709/4221\nf 4181/3708/4220 4205/3707/4219 4184/3717/4229 4175/3718/4230\nf 4180/3719/4231 4206/3720/4232 4183/3721/4233 4178/3722/4234\nf 4179/3723/4235 4198/3714/4226 4186/3713/4225 4177/3724/4236\nf 4199/3725/4237 4198/3714/4226 4179/3723/4235 4187/3726/4238\nf 4209/3727/4239 4199/3725/4237 4187/3726/4238 4191/3728/4240\nf 4209/3727/4239 4191/3728/4240 4183/3721/4233 4206/3720/4232\nf 4209/3727/4239 4206/3720/4232 4203/3729/4241 4207/3730/4242\nf 4199/3725/4237 4209/3727/4239 4207/3730/4242 4200/3731/4243\nf 4198/3714/4226 4199/3725/4237 4200/3731/4243 4195/3715/4227\nf 4195/3715/4227 4200/3731/4243 4201/3732/4244 4196/3710/4222\nf 4200/3731/4243 4207/3730/4242 4210/3733/4245 4201/3732/4244\nf 4207/3730/4242 4203/3729/4241 4204/3734/4246 4210/3733/4245\nf 4210/3733/4245 4204/3734/4246 4205/3707/4219 4208/3703/4215\nf 4201/3732/4244 4210/3733/4245 4208/3703/4215 4202/3706/4218\nf 4196/3710/4222 4201/3732/4244 4202/3706/4218 4197/3711/4223\nf 4182/3712/4224 4197/3711/4223 4185/3735/4247 4176/3736/4248\nf 4206/3720/4232 4180/3719/4231 4188/3737/4249 4203/3729/4241\nf 4204/3734/4246 4192/3738/4250 4184/3717/4229 4205/3707/4219\nf 4203/3729/4241 4188/3737/4249 4192/3738/4250 4204/3734/4246\nf 4187/3726/4238 4155/3682/4194 4145/3677/4189 4191/3728/4240\nf 4179/3723/4235 4165/3696/4208 4155/3682/4194 4187/3726/4238\nf 4177/3724/4236 3975/3468/3980 4165/3696/4208 4179/3723/4235\nf 3975/3468/3980 4177/3724/4236 4186/3713/4225 3985/3469/3981\nf 4194/3716/4228 3995/3492/4004 3985/3469/3981 4186/3713/4225\nf 3995/3492/4004 4194/3716/4228 4190/3709/4221 4005/3499/4011\nf 4182/3712/4224 4015/3515/4027 4005/3499/4011 4190/3709/4221\nf 4176/3736/4248 4025/3531/4043 4015/3515/4027 4182/3712/4224\nf 4191/3728/4240 4145/3677/4189 4135/3660/4172 4183/3721/4233\nf 4183/3721/4233 4135/3660/4172 4125/3646/4158 4178/3722/4234\nf 4178/3722/4234 4125/3646/4158 4115/3641/4153 4180/3719/4231\nf 4180/3719/4231 4115/3641/4153 4105/3624/4136 4188/3737/4249\nf 4188/3737/4249 4105/3624/4136 4095/3609/4121 4192/3738/4250\nf 4192/3738/4250 4095/3609/4121 4085/3603/4115 4184/3717/4229\nf 4184/3717/4229 4085/3603/4115 4075/3587/4099 4175/3718/4230\nf 4175/3718/4230 4075/3587/4099 4065/3573/4085 4181/3708/4220\nf 4055/3567/4079 4189/3704/4216 4181/3708/4220 4065/3573/4085\nf 4189/3704/4216 4055/3567/4079 4045/3551/4063 4193/3705/4217\nf 4193/3705/4217 4045/3551/4063 4035/3537/4049 4185/3735/4247\nf 4025/3531/4043 4176/3736/4248 4185/3735/4247 4035/3537/4049\nf 4202/3706/4218 4193/3705/4217 4185/3735/4247 4197/3711/4223\nf 3976/3474/3986 4211/3467/3979 4212/3470/3982 3986/3475/3987\nf 3986/3475/3987 4212/3470/3982 4213/3493/4005 3996/3495/4007\nf 3996/3495/4007 4213/3493/4005 4214/3500/4012 4006/3503/4015\nf 4006/3503/4015 4214/3500/4012 4215/3516/4028 4016/3518/4030\nf 4016/3518/4030 4215/3516/4028 4216/3532/4044 4026/3533/4045\nf 4026/3533/4045 4216/3532/4044 4217/3538/4050 4036/3540/4052\nf 4036/3540/4052 4217/3538/4050 4218/3552/4064 4046/3554/4066\nf 4046/3554/4066 4218/3552/4064 4219/3568/4080 4056/3569/4081\nf 4056/3569/4081 4219/3568/4080 4220/3574/4086 4066/3576/4088\nf 4066/3576/4088 4220/3574/4086 4221/3588/4100 4076/3590/4102\nf 4076/3590/4102 4221/3588/4100 4222/3604/4116 4086/3605/4117\nf 4086/3605/4117 4222/3604/4116 4223/3610/4122 4096/3612/4124\nf 4096/3612/4124 4223/3610/4122 4224/3625/4137 4106/3627/4139\nf 4106/3627/4139 4224/3625/4137 4225/3642/4154 4116/3633/4145\nf 4116/3633/4145 4225/3642/4154 4226/3647/4159 4126/3649/4161\nf 4126/3649/4161 4226/3647/4159 4227/3661/4173 4136/3663/4175\nf 4136/3663/4175 4227/3661/4173 4228/3678/4190 4146/3669/4181\nf 4146/3669/4181 4228/3678/4190 4229/3683/4195 4156/3685/4197\nf 4156/3685/4197 4229/3683/4195 4230/3697/4209 4166/3699/4211\nf 4166/3699/4211 4230/3697/4209 4211/3467/3979 3976/3474/3986\nf 3977/3480/3992 4231/3473/3985 4232/3476/3988 3987/3481/3993\nf 3987/3481/3993 4232/3476/3988 4233/3496/4008 3997/3498/4010\nf 3997/3498/4010 4233/3496/4008 4234/3504/4016 4007/3506/4018\nf 4007/3506/4018 4234/3504/4016 4235/3519/4031 4017/3521/4033\nf 4017/3521/4033 4235/3519/4031 4236/3534/4046 4027/3525/4037\nf 4027/3525/4037 4236/3534/4046 4237/3541/4053 4037/3543/4055\nf 4037/3543/4055 4237/3541/4053 4238/3555/4067 4047/3557/4069\nf 4047/3557/4069 4238/3555/4067 4239/3570/4082 4057/3561/4073\nf 4057/3561/4073 4239/3570/4082 4240/3577/4089 4067/3579/4091\nf 4067/3579/4091 4240/3577/4089 4241/3591/4103 4077/3593/4105\nf 4077/3593/4105 4241/3591/4103 4242/3606/4118 4087/3597/4109\nf 4087/3597/4109 4242/3606/4118 4243/3613/4125 4097/3615/4127\nf 4097/3615/4127 4243/3613/4125 4244/3628/4140 4107/3630/4142\nf 4107/3630/4142 4244/3628/4140 4245/3634/4146 4117/3636/4148\nf 4117/3636/4148 4245/3634/4146 4246/3650/4162 4127/3652/4164\nf 4127/3652/4164 4246/3650/4162 4247/3664/4176 4137/3666/4178\nf 4137/3666/4178 4247/3664/4176 4248/3670/4182 4147/3672/4184\nf 4147/3672/4184 4248/3670/4182 4249/3686/4198 4157/3688/4200\nf 4157/3688/4200 4249/3686/4198 4250/3700/4212 4167/3702/4214\nf 4167/3702/4214 4250/3700/4212 4231/3473/3985 3977/3480/3992\nf 4258/3207/4251 4268/3210/4252 4267/3209/4253 4257/3208/4254\nf 4487/3211/4255 4488/3214/4256 4261/3213/4257 4251/3212/4258\nf 4259/3215/4259 4269/3216/4260 4268/3210/4252 4258/3207/4251\nf 4253/3217/4261 4263/3220/4262 4262/3219/4263 4252/3218/4264\nf 4260/3221/4265 4270/3222/4266 4269/3216/4260 4259/3215/4259\nf 4254/3223/4267 4264/3224/4268 4263/3220/4262 4253/3217/4261\nf 4255/3225/4269 4265/3226/4270 4264/3224/4268 4254/3223/4267\nf 4256/3227/4271 4266/3228/4272 4265/3226/4270 4255/3225/4269\nf 4257/3208/4254 4267/3209/4253 4266/3228/4272 4256/3227/4271\nf 4265/3226/4270 4275/3230/4273 4274/3229/4274 4264/3224/4268\nf 4266/3228/4272 4276/3231/4275 4275/3230/4273 4265/3226/4270\nf 4267/3209/4253 4277/3232/4276 4276/3231/4275 4266/3228/4272\nf 4268/3210/4252 4278/3233/4277 4277/3232/4276 4267/3209/4253\nf 4488/3214/4256 4489/3235/4278 4271/3234/4279 4261/3213/4257\nf 4269/3216/4260 4279/3236/4280 4278/3233/4277 4268/3210/4252\nf 4263/3220/4262 4273/3238/4281 4272/3237/4282 4262/3219/4263\nf 4270/3222/4266 4280/3239/4283 4279/3236/4280 4269/3216/4260\nf 4264/3224/4268 4274/3229/4274 4273/3238/4281 4263/3220/4262\nf 4489/3235/4278 4490/3241/4284 4281/3240/4285 4271/3234/4279\nf 4279/3236/4280 4289/3243/4286 4288/3242/4287 4278/3233/4277\nf 4273/3238/4281 4283/3245/4288 4282/3244/4289 4272/3237/4282\nf 4280/3239/4283 4290/3246/4290 4289/3243/4286 4279/3236/4280\nf 4274/3229/4274 4284/3247/4291 4283/3245/4288 4273/3238/4281\nf 4275/3230/4273 4285/3248/4292 4284/3247/4291 4274/3229/4274\nf 4276/3231/4275 4286/3249/4293 4285/3248/4292 4275/3230/4273\nf 4277/3232/4276 4287/3250/4294 4286/3249/4293 4276/3231/4275\nf 4278/3233/4277 4288/3242/4287 4287/3250/4294 4277/3232/4276\nf 4286/3249/4293 4296/3252/4295 4295/3251/4296 4285/3248/4292\nf 4287/3250/4294 4297/3253/4297 4296/3252/4295 4286/3249/4293\nf 4288/3242/4287 4298/3254/4298 4297/3253/4297 4287/3250/4294\nf 4490/3241/4284 4491/3256/4299 4291/3255/4300 4281/3240/4285\nf 4289/3243/4286 4299/3257/4301 4298/3254/4298 4288/3242/4287\nf 4283/3245/4288 4293/3259/4302 4292/3258/4303 4282/3244/4289\nf 4290/3246/4290 4300/3260/4304 4299/3257/4301 4289/3243/4286\nf 4284/3247/4291 4294/3261/4305 4293/3259/4302 4283/3245/4288\nf 4285/3248/4292 4295/3251/4296 4294/3261/4305 4284/3247/4291\nf 4300/3260/4304 4310/3263/4306 4309/3262/4307 4299/3257/4301\nf 4294/3261/4305 4304/3265/4308 4303/3264/4309 4293/3259/4302\nf 4295/3251/4296 4305/3266/4310 4304/3265/4308 4294/3261/4305\nf 4296/3252/4295 4306/3267/4311 4305/3266/4310 4295/3251/4296\nf 4297/3253/4297 4307/3268/4312 4306/3267/4311 4296/3252/4295\nf 4298/3254/4298 4308/3269/4313 4307/3268/4312 4297/3253/4297\nf 4491/3256/4299 4492/3271/4314 4301/3270/4315 4291/3255/4300\nf 4299/3257/4301 4309/3262/4307 4308/3269/4313 4298/3254/4298\nf 4293/3259/4302 4303/3264/4309 4302/3272/4316 4292/3258/4303\nf 4308/3269/4313 4318/3274/4317 4317/3273/4318 4307/3268/4312\nf 4492/3271/4314 4493/3276/4319 4311/3275/4320 4301/3270/4315\nf 4309/3262/4307 4319/3277/4321 4318/3274/4317 4308/3269/4313\nf 4303/3264/4309 4313/3279/4322 4312/3278/4323 4302/3272/4316\nf 4310/3263/4306 4320/3280/4324 4319/3277/4321 4309/3262/4307\nf 4304/3265/4308 4314/3281/4325 4313/3279/4322 4303/3264/4309\nf 4305/3266/4310 4315/3282/4326 4314/3281/4325 4304/3265/4308\nf 4306/3267/4311 4316/3283/4327 4315/3282/4326 4305/3266/4310\nf 4307/3268/4312 4317/3273/4318 4316/3283/4327 4306/3267/4311\nf 4316/3283/4327 4326/3285/4328 4325/3284/4329 4315/3282/4326\nf 4317/3273/4318 4327/3286/4330 4326/3285/4328 4316/3283/4327\nf 4318/3274/4317 4328/3287/4331 4327/3286/4330 4317/3273/4318\nf 4493/3276/4319 4494/3289/4332 4321/3288/4333 4311/3275/4320\nf 4319/3277/4321 4329/3290/4334 4328/3287/4331 4318/3274/4317\nf 4313/3279/4322 4323/3292/4335 4322/3291/4336 4312/3278/4323\nf 4320/3280/4324 4330/3293/4337 4329/3290/4334 4319/3277/4321\nf 4314/3281/4325 4324/3294/4338 4323/3292/4335 4313/3279/4322\nf 4315/3282/4326 4325/3284/4329 4324/3294/4338 4314/3281/4325\nf 4330/3293/4337 4340/3296/4339 4339/3295/4340 4329/3290/4334\nf 4324/3294/4338 4334/3298/4341 4333/3297/4342 4323/3292/4335\nf 4325/3284/4329 4335/3299/4343 4334/3298/4341 4324/3294/4338\nf 4326/3285/4328 4336/3300/4344 4335/3299/4343 4325/3284/4329\nf 4327/3286/4330 4337/3301/4345 4336/3300/4344 4326/3285/4328\nf 4328/3287/4331 4338/3302/4346 4337/3301/4345 4327/3286/4330\nf 4494/3289/4332 4495/3304/4347 4331/3303/4348 4321/3288/4333\nf 4329/3290/4334 4339/3295/4340 4338/3302/4346 4328/3287/4331\nf 4323/3292/4335 4333/3297/4342 4332/3305/4349 4322/3291/4336\nf 4338/3302/4346 4348/3307/4350 4347/3306/4351 4337/3301/4345\nf 4495/3304/4347 4496/3309/4352 4341/3308/4353 4331/3303/4348\nf 4339/3295/4340 4349/3310/4354 4348/3307/4350 4338/3302/4346\nf 4333/3297/4342 4343/3312/4355 4342/3311/4356 4332/3305/4349\nf 4340/3296/4339 4350/3313/4357 4349/3310/4354 4339/3295/4340\nf 4334/3298/4341 4344/3314/4358 4343/3312/4355 4333/3297/4342\nf 4335/3299/4343 4345/3315/4359 4344/3314/4358 4334/3298/4341\nf 4336/3300/4344 4346/3316/4360 4345/3315/4359 4335/3299/4343\nf 4337/3301/4345 4347/3306/4351 4346/3316/4360 4336/3300/4344\nf 4346/3316/4360 4356/3318/4361 4355/3317/4362 4345/3315/4359\nf 4347/3306/4351 4357/3319/4363 4356/3318/4361 4346/3316/4360\nf 4348/3307/4350 4358/3320/4364 4357/3319/4363 4347/3306/4351\nf 4496/3309/4352 4497/3322/4365 4351/3321/4366 4341/3308/4353\nf 4349/3310/4354 4359/3323/4367 4358/3320/4364 4348/3307/4350\nf 4343/3312/4355 4353/3325/4368 4352/3324/4369 4342/3311/4356\nf 4350/3313/4357 4360/3326/4370 4359/3323/4367 4349/3310/4354\nf 4344/3314/4358 4354/3327/4371 4353/3325/4368 4343/3312/4355\nf 4345/3315/4359 4355/3317/4362 4354/3327/4371 4344/3314/4358\nf 4360/3326/4370 4370/3329/4372 4369/3328/4373 4359/3323/4367\nf 4354/3327/4371 4364/3331/4374 4363/3330/4375 4353/3325/4368\nf 4355/3317/4362 4365/3332/4376 4364/3331/4374 4354/3327/4371\nf 4356/3318/4361 4366/3333/4377 4365/3332/4376 4355/3317/4362\nf 4357/3319/4363 4367/3334/4378 4366/3333/4377 4356/3318/4361\nf 4358/3320/4364 4368/3335/4379 4367/3334/4378 4357/3319/4363\nf 4497/3322/4365 4498/3337/4380 4361/3336/4381 4351/3321/4366\nf 4359/3323/4367 4369/3328/4373 4368/3335/4379 4358/3320/4364\nf 4353/3325/4368 4363/3330/4375 4362/3338/4382 4352/3324/4369\nf 4368/3335/4379 4378/3340/4383 4377/3339/4384 4367/3334/4378\nf 4498/3337/4380 4499/3342/4385 4371/3341/4386 4361/3336/4381\nf 4369/3328/4373 4379/3343/4387 4378/3340/4383 4368/3335/4379\nf 4363/3330/4375 4373/3345/4388 4372/3344/4389 4362/3338/4382\nf 4370/3329/4372 4380/3346/4390 4379/3343/4387 4369/3328/4373\nf 4364/3331/4374 4374/3347/4391 4373/3345/4388 4363/3330/4375\nf 4365/3332/4376 4375/3348/4392 4374/3347/4391 4364/3331/4374\nf 4366/3333/4377 4376/3349/4393 4375/3348/4392 4365/3332/4376\nf 4367/3334/4378 4377/3339/4384 4376/3349/4393 4366/3333/4377\nf 4375/3348/4392 4385/3351/4394 4384/3350/4395 4374/3347/4391\nf 4376/3349/4393 4386/3352/4396 4385/3351/4394 4375/3348/4392\nf 4377/3339/4384 4387/3353/4397 4386/3352/4396 4376/3349/4393\nf 4378/3340/4383 4388/3354/4398 4387/3353/4397 4377/3339/4384\nf 4499/3342/4385 4500/3356/4399 4381/3355/4400 4371/3341/4386\nf 4379/3343/4387 4389/3357/4401 4388/3354/4398 4378/3340/4383\nf 4373/3345/4388 4383/3359/4402 4382/3358/4403 4372/3344/4389\nf 4380/3346/4390 4390/3360/4404 4389/3357/4401 4379/3343/4387\nf 4374/3347/4391 4384/3350/4395 4383/3359/4402 4373/3345/4388\nf 4389/3357/4401 4399/3362/4405 4398/3361/4406 4388/3354/4398\nf 4383/3359/4402 4393/3364/4407 4392/3363/4408 4382/3358/4403\nf 4390/3360/4404 4400/3365/4409 4399/3362/4405 4389/3357/4401\nf 4384/3350/4395 4394/3366/4410 4393/3364/4407 4383/3359/4402\nf 4385/3351/4394 4395/3367/4411 4394/3366/4410 4384/3350/4395\nf 4386/3352/4396 4396/3368/4412 4395/3367/4411 4385/3351/4394\nf 4387/3353/4397 4397/3369/4413 4396/3368/4412 4386/3352/4396\nf 4388/3354/4398 4398/3361/4406 4397/3369/4413 4387/3353/4397\nf 4500/3356/4399 4501/3371/4414 4391/3370/4415 4381/3355/4400\nf 4397/3369/4413 4407/3373/4416 4406/3372/4417 4396/3368/4412\nf 4398/3361/4406 4408/3374/4418 4407/3373/4416 4397/3369/4413\nf 4501/3371/4414 4502/3376/4419 4401/3375/4420 4391/3370/4415\nf 4399/3362/4405 4409/3377/4421 4408/3374/4418 4398/3361/4406\nf 4393/3364/4407 4403/3379/4422 4402/3378/4423 4392/3363/4408\nf 4400/3365/4409 4410/3380/4424 4409/3377/4421 4399/3362/4405\nf 4394/3366/4410 4404/3381/4425 4403/3379/4422 4393/3364/4407\nf 4395/3367/4411 4405/3382/4426 4404/3381/4425 4394/3366/4410\nf 4396/3368/4412 4406/3372/4417 4405/3382/4426 4395/3367/4411\nf 4405/3382/4426 4415/3384/4427 4414/3383/4428 4404/3381/4425\nf 4406/3372/4417 4416/3385/4429 4415/3384/4427 4405/3382/4426\nf 4407/3373/4416 4417/3386/4430 4416/3385/4429 4406/3372/4417\nf 4408/3374/4418 4418/3387/4431 4417/3386/4430 4407/3373/4416\nf 4502/3376/4419 4503/3389/4432 4411/3388/4433 4401/3375/4420\nf 4409/3377/4421 4419/3390/4434 4418/3387/4431 4408/3374/4418\nf 4403/3379/4422 4413/3392/4435 4412/3391/4436 4402/3378/4423\nf 4410/3380/4424 4420/3393/4437 4419/3390/4434 4409/3377/4421\nf 4404/3381/4425 4414/3383/4428 4413/3392/4435 4403/3379/4422\nf 4419/3390/4434 4429/3395/4438 4428/3394/4439 4418/3387/4431\nf 4413/3392/4435 4423/3397/4440 4422/3396/4441 4412/3391/4436\nf 4420/3393/4437 4430/3398/4442 4429/3395/4438 4419/3390/4434\nf 4414/3383/4428 4424/3399/4443 4423/3397/4440 4413/3392/4435\nf 4415/3384/4427 4425/3400/4444 4424/3399/4443 4414/3383/4428\nf 4416/3385/4429 4426/3401/4445 4425/3400/4444 4415/3384/4427\nf 4417/3386/4430 4427/3402/4446 4426/3401/4445 4416/3385/4429\nf 4418/3387/4431 4428/3394/4439 4427/3402/4446 4417/3386/4430\nf 4503/3389/4432 4504/3404/4447 4421/3403/4448 4411/3388/4433\nf 4427/3402/4446 4437/3406/4449 4436/3405/4450 4426/3401/4445\nf 4428/3394/4439 4438/3407/4451 4437/3406/4449 4427/3402/4446\nf 4504/3404/4447 4505/3409/4452 4431/3408/4453 4421/3403/4448\nf 4429/3395/4438 4439/3410/4454 4438/3407/4451 4428/3394/4439\nf 4423/3397/4440 4433/3412/4455 4432/3411/4456 4422/3396/4441\nf 4430/3398/4442 4440/3413/4457 4439/3410/4454 4429/3395/4438\nf 4424/3399/4443 4434/3414/4458 4433/3412/4455 4423/3397/4440\nf 4425/3400/4444 4435/3415/4459 4434/3414/4458 4424/3399/4443\nf 4426/3401/4445 4436/3405/4450 4435/3415/4459 4425/3400/4444\nf 4435/3415/4459 4445/3417/4460 4444/3416/4461 4434/3414/4458\nf 4436/3405/4450 4446/3418/4462 4445/3417/4460 4435/3415/4459\nf 4437/3406/4449 4447/3419/4463 4446/3418/4462 4436/3405/4450\nf 4438/3407/4451 4448/3420/4464 4447/3419/4463 4437/3406/4449\nf 4505/3409/4452 4506/3422/4465 4441/3421/4466 4431/3408/4453\nf 4439/3410/4454 4449/3423/4467 4448/3420/4464 4438/3407/4451\nf 4433/3412/4455 4443/3425/4468 4442/3424/4469 4432/3411/4456\nf 4440/3413/4457 4450/3426/4470 4449/3423/4467 4439/3410/4454\nf 4434/3414/4458 4444/3416/4461 4443/3425/4468 4433/3412/4455\nf 4449/3423/4467 4259/3215/4259 4258/3207/4251 4448/3420/4464\nf 4443/3425/4468 4253/3217/4261 4252/3218/4264 4442/3424/4469\nf 4450/3426/4470 4260/3221/4265 4259/3215/4259 4449/3423/4467\nf 4444/3416/4461 4254/3223/4267 4253/3217/4261 4443/3425/4468\nf 4445/3417/4460 4255/3225/4269 4254/3223/4267 4444/3416/4461\nf 4446/3418/4462 4256/3227/4271 4255/3225/4269 4445/3417/4460\nf 4447/3419/4463 4257/3208/4254 4256/3227/4271 4446/3418/4462\nf 4448/3420/4464 4258/3207/4251 4257/3208/4254 4447/3419/4463\nf 4506/3422/4465 4487/3211/4255 4251/3212/4258 4441/3421/4466\nf 4484/3427/4471 4478/3430/4472 4469/3429/4473 4465/3428/4474\nf 4481/3431/4475 4484/3427/4471 4465/3428/4474 4457/3432/4476\nf 4466/3433/4477 4458/3436/4478 4473/3435/4479 4472/3434/4480\nf 4462/3437/4481 4470/3440/4482 4471/3439/4483 4474/3438/4484\nf 4470/3440/4482 4466/3433/4477 4472/3434/4480 4471/3439/4483\nf 4457/3432/4476 4451/3442/4485 4460/3441/4486 4481/3431/4475\nf 4456/3443/4487 4454/3446/4488 4459/3445/4489 4482/3444/4490\nf 4455/3447/4491 4453/3448/4492 4462/3437/4481 4474/3438/4484\nf 4475/3449/4493 4463/3450/4494 4455/3447/4491 4474/3438/4484\nf 4485/3451/4495 4467/3452/4496 4463/3450/4494 4475/3449/4493\nf 4485/3451/4495 4482/3444/4490 4459/3445/4489 4467/3452/4496\nf 4485/3451/4495 4483/3454/4497 4479/3453/4498 4482/3444/4490\nf 4475/3449/4493 4476/3455/4499 4483/3454/4497 4485/3451/4495\nf 4474/3438/4484 4471/3439/4483 4476/3455/4499 4475/3449/4493\nf 4471/3439/4483 4472/3434/4480 4477/3456/4500 4476/3455/4499\nf 4476/3455/4499 4477/3456/4500 4486/3457/4501 4483/3454/4497\nf 4483/3454/4497 4486/3457/4501 4480/3458/4502 4479/3453/4498\nf 4486/3457/4501 4484/3427/4471 4481/3431/4475 4480/3458/4502\nf 4477/3456/4500 4478/3430/4472 4484/3427/4471 4486/3457/4501\nf 4472/3434/4480 4473/3435/4479 4478/3430/4472 4477/3456/4500\nf 4458/3436/4478 4452/3460/4503 4461/3459/4504 4473/3435/4479\nf 4482/3444/4490 4479/3453/4498 4464/3461/4505 4456/3443/4487\nf 4480/3458/4502 4481/3431/4475 4460/3441/4486 4468/3462/4506\nf 4479/3453/4498 4480/3458/4502 4468/3462/4506 4464/3461/4505\nf 4463/3450/4494 4467/3452/4496 4421/3403/4448 4431/3408/4453\nf 4455/3447/4491 4463/3450/4494 4431/3408/4453 4441/3421/4466\nf 4453/3448/4492 4455/3447/4491 4441/3421/4466 4251/3212/4258\nf 4251/3212/4258 4261/3213/4257 4462/3437/4481 4453/3448/4492\nf 4470/3440/4482 4462/3437/4481 4261/3213/4257 4271/3234/4279\nf 4271/3234/4279 4281/3240/4285 4466/3433/4477 4470/3440/4482\nf 4458/3436/4478 4466/3433/4477 4281/3240/4285 4291/3255/4300\nf 4452/3460/4503 4458/3436/4478 4291/3255/4300 4301/3270/4315\nf 4467/3452/4496 4459/3445/4489 4411/3388/4433 4421/3403/4448\nf 4459/3445/4489 4454/3446/4488 4401/3375/4420 4411/3388/4433\nf 4454/3446/4488 4456/3443/4487 4391/3370/4415 4401/3375/4420\nf 4456/3443/4487 4464/3461/4505 4381/3355/4400 4391/3370/4415\nf 4464/3461/4505 4468/3462/4506 4371/3341/4386 4381/3355/4400\nf 4468/3462/4506 4460/3441/4486 4361/3336/4381 4371/3341/4386\nf 4460/3441/4486 4451/3442/4485 4351/3321/4366 4361/3336/4381\nf 4451/3442/4485 4457/3432/4476 4341/3308/4353 4351/3321/4366\nf 4331/3303/4348 4341/3308/4353 4457/3432/4476 4465/3428/4474\nf 4465/3428/4474 4469/3429/4473 4321/3288/4333 4331/3303/4348\nf 4469/3429/4473 4461/3459/4504 4311/3275/4320 4321/3288/4333\nf 4301/3270/4315 4311/3275/4320 4461/3459/4504 4452/3460/4503\nf 4478/3430/4472 4473/3435/4479 4461/3459/4504 4469/3429/4473\nf 4252/3218/4264 4262/3219/4263 4488/3214/4256 4487/3211/4255\nf 4262/3219/4263 4272/3237/4282 4489/3235/4278 4488/3214/4256\nf 4272/3237/4282 4282/3244/4289 4490/3241/4284 4489/3235/4278\nf 4282/3244/4289 4292/3258/4303 4491/3256/4299 4490/3241/4284\nf 4292/3258/4303 4302/3272/4316 4492/3271/4314 4491/3256/4299\nf 4302/3272/4316 4312/3278/4323 4493/3276/4319 4492/3271/4314\nf 4312/3278/4323 4322/3291/4336 4494/3289/4332 4493/3276/4319\nf 4322/3291/4336 4332/3305/4349 4495/3304/4347 4494/3289/4332\nf 4332/3305/4349 4342/3311/4356 4496/3309/4352 4495/3304/4347\nf 4342/3311/4356 4352/3324/4369 4497/3322/4365 4496/3309/4352\nf 4352/3324/4369 4362/3338/4382 4498/3337/4380 4497/3322/4365\nf 4362/3338/4382 4372/3344/4389 4499/3342/4385 4498/3337/4380\nf 4372/3344/4389 4382/3358/4403 4500/3356/4399 4499/3342/4385\nf 4382/3358/4403 4392/3363/4408 4501/3371/4414 4500/3356/4399\nf 4392/3363/4408 4402/3378/4423 4502/3376/4419 4501/3371/4414\nf 4402/3378/4423 4412/3391/4436 4503/3389/4432 4502/3376/4419\nf 4412/3391/4436 4422/3396/4441 4504/3404/4447 4503/3389/4432\nf 4422/3396/4441 4432/3411/4456 4505/3409/4452 4504/3404/4447\nf 4432/3411/4456 4442/3424/4469 4506/3422/4465 4505/3409/4452\nf 4442/3424/4469 4252/3218/4264 4487/3211/4255 4506/3422/4465\nf 4514/3739/4507 4524/3740/4508 4523/3741/4509 4513/3742/4510\nf 4743/3743/4511 4744/3744/4512 4517/3745/4513 4507/3746/4514\nf 4515/3747/4515 4525/3748/4516 4524/3740/4508 4514/3739/4507\nf 4763/3749/4517 4764/3750/4518 4518/3751/4519 4508/3752/4520\nf 4516/3753/4521 4526/3754/4522 4525/3748/4516 4515/3747/4515\nf 4510/3755/4523 4520/3756/4524 4519/3757/4525 4509/3758/4526\nf 4511/3759/4527 4521/3760/4528 4520/3756/4524 4510/3755/4523\nf 4512/3761/4529 4522/3762/4530 4521/3760/4528 4511/3759/4527\nf 4513/3742/4510 4523/3741/4509 4522/3762/4530 4512/3761/4529\nf 4521/3760/4528 4531/3763/4531 4530/3764/4532 4520/3756/4524\nf 4522/3762/4530 4532/3765/4533 4531/3763/4531 4521/3760/4528\nf 4523/3741/4509 4533/3766/4534 4532/3765/4533 4522/3762/4530\nf 4524/3740/4508 4534/3767/4535 4533/3766/4534 4523/3741/4509\nf 4744/3744/4512 4745/3768/4536 4527/3769/4537 4517/3745/4513\nf 4525/3748/4516 4535/3770/4538 4534/3767/4535 4524/3740/4508\nf 4764/3750/4518 4765/3771/4539 4528/3772/4540 4518/3751/4519\nf 4526/3754/4522 4536/3773/4541 4535/3770/4538 4525/3748/4516\nf 4520/3756/4524 4530/3764/4532 4529/3774/4542 4519/3757/4525\nf 4745/3768/4536 4746/3775/4543 4537/3776/4544 4527/3769/4537\nf 4535/3770/4538 4545/3777/4545 4544/3778/4546 4534/3767/4535\nf 4765/3771/4539 4766/3779/4547 4538/3780/4548 4528/3772/4540\nf 4536/3773/4541 4546/3781/4549 4545/3777/4545 4535/3770/4538\nf 4530/3764/4532 4540/3782/4550 4539/3783/4551 4529/3774/4542\nf 4531/3763/4531 4541/3784/4552 4540/3782/4550 4530/3764/4532\nf 4532/3765/4533 4542/3785/4553 4541/3784/4552 4531/3763/4531\nf 4533/3766/4534 4543/3786/4554 4542/3785/4553 4532/3765/4533\nf 4534/3767/4535 4544/3778/4546 4543/3786/4554 4533/3766/4534\nf 4542/3785/4553 4552/3787/4555 4551/3788/4556 4541/3784/4552\nf 4543/3786/4554 4553/3789/4557 4552/3787/4555 4542/3785/4553\nf 4544/3778/4546 4554/3790/4558 4553/3789/4557 4543/3786/4554\nf 4746/3775/4543 4747/3791/4559 4547/3792/4560 4537/3776/4544\nf 4545/3777/4545 4555/3793/4561 4554/3790/4558 4544/3778/4546\nf 4766/3779/4547 4767/3794/4562 4548/3795/4563 4538/3780/4548\nf 4546/3781/4549 4556/3796/4564 4555/3793/4561 4545/3777/4545\nf 4540/3782/4550 4550/3797/4565 4549/3798/4566 4539/3783/4551\nf 4541/3784/4552 4551/3788/4556 4550/3797/4565 4540/3782/4550\nf 4556/3796/4564 4566/3799/4567 4565/3800/4568 4555/3793/4561\nf 4550/3797/4565 4560/3801/4569 4559/3802/4570 4549/3798/4566\nf 4551/3788/4556 4561/3803/4571 4560/3801/4569 4550/3797/4565\nf 4552/3787/4555 4562/3804/4572 4561/3803/4571 4551/3788/4556\nf 4553/3789/4557 4563/3805/4573 4562/3804/4572 4552/3787/4555\nf 4554/3790/4558 4564/3806/4574 4563/3805/4573 4553/3789/4557\nf 4747/3791/4559 4748/3807/4575 4557/3808/4576 4547/3792/4560\nf 4555/3793/4561 4565/3800/4568 4564/3806/4574 4554/3790/4558\nf 4767/3794/4562 4768/3809/4577 4558/3810/4578 4548/3795/4563\nf 4564/3806/4574 4574/3811/4579 4573/3812/4580 4563/3805/4573\nf 4748/3807/4575 4749/3813/4581 4567/3814/4582 4557/3808/4576\nf 4565/3800/4568 4575/3815/4583 4574/3811/4579 4564/3806/4574\nf 4768/3809/4577 4769/3816/4584 4568/3817/4585 4558/3810/4578\nf 4566/3799/4567 4576/3818/4586 4575/3815/4583 4565/3800/4568\nf 4560/3801/4569 4570/3819/4587 4569/3820/4588 4559/3802/4570\nf 4561/3803/4571 4571/3821/4589 4570/3819/4587 4560/3801/4569\nf 4562/3804/4572 4572/3822/4590 4571/3821/4589 4561/3803/4571\nf 4563/3805/4573 4573/3812/4580 4572/3822/4590 4562/3804/4572\nf 4572/3822/4590 4582/3823/4591 4581/3824/4592 4571/3821/4589\nf 4573/3812/4580 4583/3825/4593 4582/3823/4591 4572/3822/4590\nf 4574/3811/4579 4584/3826/4594 4583/3825/4593 4573/3812/4580\nf 4749/3813/4581 4750/3827/4595 4577/3828/4596 4567/3814/4582\nf 4575/3815/4583 4585/3829/4597 4584/3826/4594 4574/3811/4579\nf 4769/3816/4584 4770/3830/4598 4578/3831/4599 4568/3817/4585\nf 4576/3818/4586 4586/3832/4600 4585/3829/4597 4575/3815/4583\nf 4570/3819/4587 4580/3833/4601 4579/3834/4602 4569/3820/4588\nf 4571/3821/4589 4581/3824/4592 4580/3833/4601 4570/3819/4587\nf 4586/3832/4600 4596/3835/4603 4595/3836/4604 4585/3829/4597\nf 4580/3833/4601 4590/3837/4605 4589/3838/4606 4579/3834/4602\nf 4581/3824/4592 4591/3839/4607 4590/3837/4605 4580/3833/4601\nf 4582/3823/4591 4592/3840/4608 4591/3839/4607 4581/3824/4592\nf 4583/3825/4593 4593/3841/4609 4592/3840/4608 4582/3823/4591\nf 4584/3826/4594 4594/3842/4610 4593/3841/4609 4583/3825/4593\nf 4750/3827/4595 4751/3843/4611 4587/3844/4612 4577/3828/4596\nf 4585/3829/4597 4595/3836/4604 4594/3842/4610 4584/3826/4594\nf 4770/3830/4598 4771/3845/4613 4588/3846/4614 4578/3831/4599\nf 4594/3842/4610 4604/3847/4615 4603/3848/4616 4593/3841/4609\nf 4751/3843/4611 4752/3849/4617 4597/3850/4618 4587/3844/4612\nf 4595/3836/4604 4605/3851/4619 4604/3847/4615 4594/3842/4610\nf 4771/3845/4613 4772/3852/4620 4598/3853/4621 4588/3846/4614\nf 4596/3835/4603 4606/3854/4622 4605/3851/4619 4595/3836/4604\nf 4590/3837/4605 4600/3855/4623 4599/3856/4624 4589/3838/4606\nf 4591/3839/4607 4601/3857/4625 4600/3855/4623 4590/3837/4605\nf 4592/3840/4608 4602/3858/4626 4601/3857/4625 4591/3839/4607\nf 4593/3841/4609 4603/3848/4616 4602/3858/4626 4592/3840/4608\nf 4602/3858/4626 4612/3859/4627 4611/3860/4628 4601/3857/4625\nf 4603/3848/4616 4613/3861/4629 4612/3859/4627 4602/3858/4626\nf 4604/3847/4615 4614/3862/4630 4613/3861/4629 4603/3848/4616\nf 4752/3849/4617 4753/3863/4631 4607/3864/4632 4597/3850/4618\nf 4605/3851/4619 4615/3865/4633 4614/3862/4630 4604/3847/4615\nf 4772/3852/4620 4773/3866/4634 4608/3867/4635 4598/3853/4621\nf 4606/3854/4622 4616/3868/4636 4615/3865/4633 4605/3851/4619\nf 4600/3855/4623 4610/3869/4637 4609/3870/4638 4599/3856/4624\nf 4601/3857/4625 4611/3860/4628 4610/3869/4637 4600/3855/4623\nf 4616/3868/4636 4626/3871/4639 4625/3872/4640 4615/3865/4633\nf 4610/3869/4637 4620/3873/4641 4619/3874/4642 4609/3870/4638\nf 4611/3860/4628 4621/3875/4643 4620/3873/4641 4610/3869/4637\nf 4612/3859/4627 4622/3876/4644 4621/3875/4643 4611/3860/4628\nf 4613/3861/4629 4623/3877/4645 4622/3876/4644 4612/3859/4627\nf 4614/3862/4630 4624/3878/4646 4623/3877/4645 4613/3861/4629\nf 4753/3863/4631 4754/3879/4647 4617/3880/4648 4607/3864/4632\nf 4615/3865/4633 4625/3872/4640 4624/3878/4646 4614/3862/4630\nf 4773/3866/4634 4774/3881/4649 4618/3882/4650 4608/3867/4635\nf 4624/3878/4646 4634/3883/4651 4633/3884/4652 4623/3877/4645\nf 4754/3879/4647 4755/3885/4653 4627/3886/4654 4617/3880/4648\nf 4625/3872/4640 4635/3887/4655 4634/3883/4651 4624/3878/4646\nf 4774/3881/4649 4775/3888/4656 4628/3889/4657 4618/3882/4650\nf 4626/3871/4639 4636/3890/4658 4635/3887/4655 4625/3872/4640\nf 4620/3873/4641 4630/3891/4659 4629/3892/4660 4619/3874/4642\nf 4621/3875/4643 4631/3893/4661 4630/3891/4659 4620/3873/4641\nf 4622/3876/4644 4632/3894/4662 4631/3893/4661 4621/3875/4643\nf 4623/3877/4645 4633/3884/4652 4632/3894/4662 4622/3876/4644\nf 4631/3893/4661 4641/3895/4663 4640/3896/4664 4630/3891/4659\nf 4632/3894/4662 4642/3897/4665 4641/3895/4663 4631/3893/4661\nf 4633/3884/4652 4643/3898/4666 4642/3897/4665 4632/3894/4662\nf 4634/3883/4651 4644/3899/4667 4643/3898/4666 4633/3884/4652\nf 4755/3885/4653 4756/3900/4668 4637/3901/4669 4627/3886/4654\nf 4635/3887/4655 4645/3902/4670 4644/3899/4667 4634/3883/4651\nf 4775/3888/4656 4776/3903/4671 4638/3904/4672 4628/3889/4657\nf 4636/3890/4658 4646/3905/4673 4645/3902/4670 4635/3887/4655\nf 4630/3891/4659 4640/3896/4664 4639/3906/4674 4629/3892/4660\nf 4645/3902/4670 4655/3907/4675 4654/3908/4676 4644/3899/4667\nf 4776/3903/4671 4777/3909/4677 4648/3910/4678 4638/3904/4672\nf 4646/3905/4673 4656/3911/4679 4655/3907/4675 4645/3902/4670\nf 4640/3896/4664 4650/3912/4680 4649/3913/4681 4639/3906/4674\nf 4641/3895/4663 4651/3914/4682 4650/3912/4680 4640/3896/4664\nf 4642/3897/4665 4652/3915/4683 4651/3914/4682 4641/3895/4663\nf 4643/3898/4666 4653/3916/4684 4652/3915/4683 4642/3897/4665\nf 4644/3899/4667 4654/3908/4676 4653/3916/4684 4643/3898/4666\nf 4756/3900/4668 4757/3917/4685 4647/3918/4686 4637/3901/4669\nf 4653/3916/4684 4663/3919/4687 4662/3920/4688 4652/3915/4683\nf 4654/3908/4676 4664/3921/4689 4663/3919/4687 4653/3916/4684\nf 4757/3917/4685 4758/3922/4690 4657/3923/4691 4647/3918/4686\nf 4655/3907/4675 4665/3924/4692 4664/3921/4689 4654/3908/4676\nf 4777/3909/4677 4778/3925/4693 4658/3926/4694 4648/3910/4678\nf 4656/3911/4679 4666/3927/4695 4665/3924/4692 4655/3907/4675\nf 4650/3912/4680 4660/3928/4696 4659/3929/4697 4649/3913/4681\nf 4651/3914/4682 4661/3930/4698 4660/3928/4696 4650/3912/4680\nf 4652/3915/4683 4662/3920/4688 4661/3930/4698 4651/3914/4682\nf 4661/3930/4698 4671/3931/4699 4670/3932/4700 4660/3928/4696\nf 4662/3920/4688 4672/3933/4701 4671/3931/4699 4661/3930/4698\nf 4663/3919/4687 4673/3934/4702 4672/3933/4701 4662/3920/4688\nf 4664/3921/4689 4674/3935/4703 4673/3934/4702 4663/3919/4687\nf 4758/3922/4690 4759/3936/4704 4667/3937/4705 4657/3923/4691\nf 4665/3924/4692 4675/3938/4706 4674/3935/4703 4664/3921/4689\nf 4778/3925/4693 4779/3939/4707 4668/3940/4708 4658/3926/4694\nf 4666/3927/4695 4676/3941/4709 4675/3938/4706 4665/3924/4692\nf 4660/3928/4696 4670/3932/4700 4669/3942/4710 4659/3929/4697\nf 4675/3938/4706 4685/3943/4711 4684/3944/4712 4674/3935/4703\nf 4779/3939/4707 4780/3945/4713 4678/3946/4714 4668/3940/4708\nf 4676/3941/4709 4686/3947/4715 4685/3943/4711 4675/3938/4706\nf 4670/3932/4700 4680/3948/4716 4679/3949/4717 4669/3942/4710\nf 4671/3931/4699 4681/3950/4718 4680/3948/4716 4670/3932/4700\nf 4672/3933/4701 4682/3951/4719 4681/3950/4718 4671/3931/4699\nf 4673/3934/4702 4683/3952/4720 4682/3951/4719 4672/3933/4701\nf 4674/3935/4703 4684/3944/4712 4683/3952/4720 4673/3934/4702\nf 4759/3936/4704 4760/3953/4721 4677/3954/4722 4667/3937/4705\nf 4683/3952/4720 4693/3955/4723 4692/3956/4724 4682/3951/4719\nf 4684/3944/4712 4694/3957/4725 4693/3955/4723 4683/3952/4720\nf 4760/3953/4721 4761/3958/4726 4687/3959/4727 4677/3954/4722\nf 4685/3943/4711 4695/3960/4728 4694/3957/4725 4684/3944/4712\nf 4780/3945/4713 4781/3961/4729 4688/3962/4730 4678/3946/4714\nf 4686/3947/4715 4696/3963/4731 4695/3960/4728 4685/3943/4711\nf 4680/3948/4716 4690/3964/4732 4689/3965/4733 4679/3949/4717\nf 4681/3950/4718 4691/3966/4734 4690/3964/4732 4680/3948/4716\nf 4682/3951/4719 4692/3956/4724 4691/3966/4734 4681/3950/4718\nf 4691/3966/4734 4701/3967/4735 4700/3968/4736 4690/3964/4732\nf 4692/3956/4724 4702/3969/4737 4701/3967/4735 4691/3966/4734\nf 4693/3955/4723 4703/3970/4738 4702/3969/4737 4692/3956/4724\nf 4694/3957/4725 4704/3971/4739 4703/3970/4738 4693/3955/4723\nf 4761/3958/4726 4762/3972/4740 4697/3973/4741 4687/3959/4727\nf 4695/3960/4728 4705/3974/4742 4704/3971/4739 4694/3957/4725\nf 4781/3961/4729 4782/3975/4743 4698/3976/4744 4688/3962/4730\nf 4696/3963/4731 4706/3977/4745 4705/3974/4742 4695/3960/4728\nf 4690/3964/4732 4700/3968/4736 4699/3978/4746 4689/3965/4733\nf 4705/3974/4742 4515/3747/4515 4514/3739/4507 4704/3971/4739\nf 4782/3975/4743 4763/3749/4517 4508/3752/4520 4698/3976/4744\nf 4706/3977/4745 4516/3753/4521 4515/3747/4515 4705/3974/4742\nf 4700/3968/4736 4510/3755/4523 4509/3758/4526 4699/3978/4746\nf 4701/3967/4735 4511/3759/4527 4510/3755/4523 4700/3968/4736\nf 4702/3969/4737 4512/3761/4529 4511/3759/4527 4701/3967/4735\nf 4703/3970/4738 4513/3742/4510 4512/3761/4529 4702/3969/4737\nf 4704/3971/4739 4514/3739/4507 4513/3742/4510 4703/3970/4738\nf 4762/3972/4740 4743/3743/4511 4507/3746/4514 4697/3973/4741\nf 4740/3979/4747 4734/3980/4748 4725/3981/4749 4721/3982/4750\nf 4737/3983/4751 4740/3979/4747 4721/3982/4750 4713/3984/4752\nf 4722/3985/4753 4714/3986/4754 4729/3987/4755 4728/3988/4756\nf 4718/3989/4757 4726/3990/4758 4727/3991/4759 4730/3992/4760\nf 4726/3990/4758 4722/3985/4753 4728/3988/4756 4727/3991/4759\nf 4713/3984/4752 4707/3993/4761 4716/3994/4762 4737/3983/4751\nf 4712/3995/4763 4710/3996/4764 4715/3997/4765 4738/3998/4766\nf 4711/3999/4767 4709/4000/4768 4718/3989/4757 4730/3992/4760\nf 4731/4001/4769 4719/4002/4770 4711/3999/4767 4730/3992/4760\nf 4741/4003/4771 4723/4004/4772 4719/4002/4770 4731/4001/4769\nf 4741/4003/4771 4738/3998/4766 4715/3997/4765 4723/4004/4772\nf 4741/4003/4771 4739/4005/4773 4735/4006/4774 4738/3998/4766\nf 4731/4001/4769 4732/4007/4775 4739/4005/4773 4741/4003/4771\nf 4730/3992/4760 4727/3991/4759 4732/4007/4775 4731/4001/4769\nf 4727/3991/4759 4728/3988/4756 4733/4008/4776 4732/4007/4775\nf 4732/4007/4775 4733/4008/4776 4742/4009/4777 4739/4005/4773\nf 4739/4005/4773 4742/4009/4777 4736/4010/4778 4735/4006/4774\nf 4742/4009/4777 4740/3979/4747 4737/3983/4751 4736/4010/4778\nf 4733/4008/4776 4734/3980/4748 4740/3979/4747 4742/4009/4777\nf 4728/3988/4756 4729/3987/4755 4734/3980/4748 4733/4008/4776\nf 4714/3986/4754 4708/4011/4779 4717/4012/4780 4729/3987/4755\nf 4738/3998/4766 4735/4006/4774 4720/4013/4781 4712/3995/4763\nf 4736/4010/4778 4737/3983/4751 4716/3994/4762 4724/4014/4782\nf 4735/4006/4774 4736/4010/4778 4724/4014/4782 4720/4013/4781\nf 4719/4002/4770 4723/4004/4772 4677/3954/4722 4687/3959/4727\nf 4711/3999/4767 4719/4002/4770 4687/3959/4727 4697/3973/4741\nf 4709/4000/4768 4711/3999/4767 4697/3973/4741 4507/3746/4514\nf 4507/3746/4514 4517/3745/4513 4718/3989/4757 4709/4000/4768\nf 4726/3990/4758 4718/3989/4757 4517/3745/4513 4527/3769/4537\nf 4527/3769/4537 4537/3776/4544 4722/3985/4753 4726/3990/4758\nf 4714/3986/4754 4722/3985/4753 4537/3776/4544 4547/3792/4560\nf 4708/4011/4779 4714/3986/4754 4547/3792/4560 4557/3808/4576\nf 4723/4004/4772 4715/3997/4765 4667/3937/4705 4677/3954/4722\nf 4715/3997/4765 4710/3996/4764 4657/3923/4691 4667/3937/4705\nf 4710/3996/4764 4712/3995/4763 4647/3918/4686 4657/3923/4691\nf 4712/3995/4763 4720/4013/4781 4637/3901/4669 4647/3918/4686\nf 4720/4013/4781 4724/4014/4782 4627/3886/4654 4637/3901/4669\nf 4724/4014/4782 4716/3994/4762 4617/3880/4648 4627/3886/4654\nf 4716/3994/4762 4707/3993/4761 4607/3864/4632 4617/3880/4648\nf 4707/3993/4761 4713/3984/4752 4597/3850/4618 4607/3864/4632\nf 4587/3844/4612 4597/3850/4618 4713/3984/4752 4721/3982/4750\nf 4721/3982/4750 4725/3981/4749 4577/3828/4596 4587/3844/4612\nf 4725/3981/4749 4717/4012/4780 4567/3814/4582 4577/3828/4596\nf 4557/3808/4576 4567/3814/4582 4717/4012/4780 4708/4011/4779\nf 4734/3980/4748 4729/3987/4755 4717/4012/4780 4725/3981/4749\nf 4508/3752/4520 4518/3751/4519 4744/3744/4512 4743/3743/4511\nf 4518/3751/4519 4528/3772/4540 4745/3768/4536 4744/3744/4512\nf 4528/3772/4540 4538/3780/4548 4746/3775/4543 4745/3768/4536\nf 4538/3780/4548 4548/3795/4563 4747/3791/4559 4746/3775/4543\nf 4548/3795/4563 4558/3810/4578 4748/3807/4575 4747/3791/4559\nf 4558/3810/4578 4568/3817/4585 4749/3813/4581 4748/3807/4575\nf 4568/3817/4585 4578/3831/4599 4750/3827/4595 4749/3813/4581\nf 4578/3831/4599 4588/3846/4614 4751/3843/4611 4750/3827/4595\nf 4588/3846/4614 4598/3853/4621 4752/3849/4617 4751/3843/4611\nf 4598/3853/4621 4608/3867/4635 4753/3863/4631 4752/3849/4617\nf 4608/3867/4635 4618/3882/4650 4754/3879/4647 4753/3863/4631\nf 4618/3882/4650 4628/3889/4657 4755/3885/4653 4754/3879/4647\nf 4628/3889/4657 4638/3904/4672 4756/3900/4668 4755/3885/4653\nf 4638/3904/4672 4648/3910/4678 4757/3917/4685 4756/3900/4668\nf 4648/3910/4678 4658/3926/4694 4758/3922/4690 4757/3917/4685\nf 4658/3926/4694 4668/3940/4708 4759/3936/4704 4758/3922/4690\nf 4668/3940/4708 4678/3946/4714 4760/3953/4721 4759/3936/4704\nf 4678/3946/4714 4688/3962/4730 4761/3958/4726 4760/3953/4721\nf 4688/3962/4730 4698/3976/4744 4762/3972/4740 4761/3958/4726\nf 4698/3976/4744 4508/3752/4520 4743/3743/4511 4762/3972/4740\nf 4509/3758/4526 4519/3757/4525 4764/3750/4518 4763/3749/4517\nf 4519/3757/4525 4529/3774/4542 4765/3771/4539 4764/3750/4518\nf 4529/3774/4542 4539/3783/4551 4766/3779/4547 4765/3771/4539\nf 4539/3783/4551 4549/3798/4566 4767/3794/4562 4766/3779/4547\nf 4549/3798/4566 4559/3802/4570 4768/3809/4577 4767/3794/4562\nf 4559/3802/4570 4569/3820/4588 4769/3816/4584 4768/3809/4577\nf 4569/3820/4588 4579/3834/4602 4770/3830/4598 4769/3816/4584\nf 4579/3834/4602 4589/3838/4606 4771/3845/4613 4770/3830/4598\nf 4589/3838/4606 4599/3856/4624 4772/3852/4620 4771/3845/4613\nf 4599/3856/4624 4609/3870/4638 4773/3866/4634 4772/3852/4620\nf 4609/3870/4638 4619/3874/4642 4774/3881/4649 4773/3866/4634\nf 4619/3874/4642 4629/3892/4660 4775/3888/4656 4774/3881/4649\nf 4629/3892/4660 4639/3906/4674 4776/3903/4671 4775/3888/4656\nf 4639/3906/4674 4649/3913/4681 4777/3909/4677 4776/3903/4671\nf 4649/3913/4681 4659/3929/4697 4778/3925/4693 4777/3909/4677\nf 4659/3929/4697 4669/3942/4710 4779/3939/4707 4778/3925/4693\nf 4669/3942/4710 4679/3949/4717 4780/3945/4713 4779/3939/4707\nf 4679/3949/4717 4689/3965/4733 4781/3961/4729 4780/3945/4713\nf 4689/3965/4733 4699/3978/4746 4782/3975/4743 4781/3961/4729\nf 4699/3978/4746 4509/3758/4526 4763/3749/4517 4782/3975/4743\n";

},{}],6:[function(require,module,exports){
var padLeft = require('pad-left')

module.exports = addLineNumbers
function addLineNumbers (string, start, delim) {
  start = typeof start === 'number' ? start : 1
  delim = delim || ': '

  var lines = string.split(/\r?\n/)
  var totalDigits = String(lines.length + start - 1).length
  return lines.map(function (line, i) {
    var c = i + start
    var digits = String(c).length
    var prefix = padLeft(c, totalDigits - digits)
    return prefix + delim + line
  }).join('\n')
}

},{"pad-left":81}],7:[function(require,module,exports){
var dtype = require('dtype')

module.exports = pack

function pack(arr, type) {
  type = type || 'float32'

  if (!arr[0] || !arr[0].length) {
    return arr
  }

  var Arr = typeof type === 'string'
    ? dtype(type)
    : type

  var dim = arr[0].length
  var out = new Arr(arr.length * dim)
  var k = 0

  for (var i = 0; i < arr.length; i++)
  for (var j = 0; j < dim; j++) {
    out[k++] = arr[i][j]
  }

  return out
}

},{"dtype":8}],8:[function(require,module,exports){
(function (Buffer){
module.exports = function(dtype) {
  switch (dtype) {
    case 'int8':
      return Int8Array
    case 'int16':
      return Int16Array
    case 'int32':
      return Int32Array
    case 'uint8':
      return Uint8Array
    case 'uint16':
      return Uint16Array
    case 'uint32':
      return Uint32Array
    case 'float32':
      return Float32Array
    case 'float64':
      return Float64Array
    case 'array':
      return Array
    case 'uint8_clamped':
      return Uint8ClampedArray
    case 'generic':
    case 'data':
    case 'dataview':
      return ArrayBuffer
    case 'buffer':
      if (typeof Buffer === "undefined") return ArrayBuffer
      return Buffer
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":12}],9:[function(require,module,exports){
module.exports = function _atob(str) {
  return atob(str)
}

},{}],10:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],11:[function(require,module,exports){
/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */

"use strict"; "use restrict";

//Number of bits in an integer
var INT_BITS = 32;

//Constants
exports.INT_BITS  = INT_BITS;
exports.INT_MAX   =  0x7fffffff;
exports.INT_MIN   = -1<<(INT_BITS-1);

//Returns -1, 0, +1 depending on sign of x
exports.sign = function(v) {
  return (v > 0) - (v < 0);
}

//Computes absolute value of integer
exports.abs = function(v) {
  var mask = v >> (INT_BITS-1);
  return (v ^ mask) - mask;
}

//Computes minimum of integers x and y
exports.min = function(x, y) {
  return y ^ ((x ^ y) & -(x < y));
}

//Computes maximum of integers x and y
exports.max = function(x, y) {
  return x ^ ((x ^ y) & -(x < y));
}

//Checks if a number is a power of two
exports.isPow2 = function(v) {
  return !(v & (v-1)) && (!!v);
}

//Computes log base 2 of v
exports.log2 = function(v) {
  var r, shift;
  r =     (v > 0xFFFF) << 4; v >>>= r;
  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
  return r | (v >> 1);
}

//Computes log base 10 of v
exports.log10 = function(v) {
  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
}

//Counts number of bits
exports.popCount = function(v) {
  v = v - ((v >>> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
}

//Counts number of trailing zeros
function countTrailingZeros(v) {
  var c = 32;
  v &= -v;
  if (v) c--;
  if (v & 0x0000FFFF) c -= 16;
  if (v & 0x00FF00FF) c -= 8;
  if (v & 0x0F0F0F0F) c -= 4;
  if (v & 0x33333333) c -= 2;
  if (v & 0x55555555) c -= 1;
  return c;
}
exports.countTrailingZeros = countTrailingZeros;

//Rounds to next power of 2
exports.nextPow2 = function(v) {
  v += v === 0;
  --v;
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v + 1;
}

//Rounds down to previous power of 2
exports.prevPow2 = function(v) {
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v - (v>>>1);
}

//Computes parity of word
exports.parity = function(v) {
  v ^= v >>> 16;
  v ^= v >>> 8;
  v ^= v >>> 4;
  v &= 0xf;
  return (0x6996 >>> v) & 1;
}

var REVERSE_TABLE = new Array(256);

(function(tab) {
  for(var i=0; i<256; ++i) {
    var v = i, r = i, s = 7;
    for (v >>>= 1; v; v >>>= 1) {
      r <<= 1;
      r |= v & 1;
      --s;
    }
    tab[i] = (r << s) & 0xff;
  }
})(REVERSE_TABLE);

//Reverse bits in a 32 bit word
exports.reverse = function(v) {
  return  (REVERSE_TABLE[ v         & 0xff] << 24) |
          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
           REVERSE_TABLE[(v >>> 24) & 0xff];
}

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
exports.interleave2 = function(x, y) {
  x &= 0xFFFF;
  x = (x | (x << 8)) & 0x00FF00FF;
  x = (x | (x << 4)) & 0x0F0F0F0F;
  x = (x | (x << 2)) & 0x33333333;
  x = (x | (x << 1)) & 0x55555555;

  y &= 0xFFFF;
  y = (y | (y << 8)) & 0x00FF00FF;
  y = (y | (y << 4)) & 0x0F0F0F0F;
  y = (y | (y << 2)) & 0x33333333;
  y = (y | (y << 1)) & 0x55555555;

  return x | (y << 1);
}

//Extracts the nth interleaved component
exports.deinterleave2 = function(v, n) {
  v = (v >>> n) & 0x55555555;
  v = (v | (v >>> 1))  & 0x33333333;
  v = (v | (v >>> 2))  & 0x0F0F0F0F;
  v = (v | (v >>> 4))  & 0x00FF00FF;
  v = (v | (v >>> 16)) & 0x000FFFF;
  return (v << 16) >> 16;
}


//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
exports.interleave3 = function(x, y, z) {
  x &= 0x3FF;
  x  = (x | (x<<16)) & 4278190335;
  x  = (x | (x<<8))  & 251719695;
  x  = (x | (x<<4))  & 3272356035;
  x  = (x | (x<<2))  & 1227133513;

  y &= 0x3FF;
  y  = (y | (y<<16)) & 4278190335;
  y  = (y | (y<<8))  & 251719695;
  y  = (y | (y<<4))  & 3272356035;
  y  = (y | (y<<2))  & 1227133513;
  x |= (y << 1);
  
  z &= 0x3FF;
  z  = (z | (z<<16)) & 4278190335;
  z  = (z | (z<<8))  & 251719695;
  z  = (z | (z<<4))  & 3272356035;
  z  = (z | (z<<2))  & 1227133513;
  
  return x | (z << 2);
}

//Extracts nth interleaved component of a 3-tuple
exports.deinterleave3 = function(v, n) {
  v = (v >>> n)       & 1227133513;
  v = (v | (v>>>2))   & 3272356035;
  v = (v | (v>>>4))   & 251719695;
  v = (v | (v>>>8))   & 4278190335;
  v = (v | (v>>>16))  & 0x3FF;
  return (v<<22)>>22;
}

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
exports.nextCombination = function(v) {
  var t = v | (v - 1);
  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
}


},{}],12:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":10,"ieee754":71}],13:[function(require,module,exports){
"use strict"

var createThunk = require("./lib/thunk.js")

function Procedure() {
  this.argTypes = []
  this.shimArgs = []
  this.arrayArgs = []
  this.arrayBlockIndices = []
  this.scalarArgs = []
  this.offsetArgs = []
  this.offsetArgIndex = []
  this.indexArgs = []
  this.shapeArgs = []
  this.funcName = ""
  this.pre = null
  this.body = null
  this.post = null
  this.debug = false
}

function compileCwise(user_args) {
  //Create procedure
  var proc = new Procedure()
  
  //Parse blocks
  proc.pre    = user_args.pre
  proc.body   = user_args.body
  proc.post   = user_args.post

  //Parse arguments
  var proc_args = user_args.args.slice(0)
  proc.argTypes = proc_args
  for(var i=0; i<proc_args.length; ++i) {
    var arg_type = proc_args[i]
    if(arg_type === "array" || (typeof arg_type === "object" && arg_type.blockIndices)) {
      proc.argTypes[i] = "array"
      proc.arrayArgs.push(i)
      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)
      proc.shimArgs.push("array" + i)
      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {
        throw new Error("cwise: pre() block may not reference array args")
      }
      if(i < proc.post.args.length && proc.post.args[i].count>0) {
        throw new Error("cwise: post() block may not reference array args")
      }
    } else if(arg_type === "scalar") {
      proc.scalarArgs.push(i)
      proc.shimArgs.push("scalar" + i)
    } else if(arg_type === "index") {
      proc.indexArgs.push(i)
      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {
        throw new Error("cwise: pre() block may not reference array index")
      }
      if(i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array index")
      }
      if(i < proc.post.args.length && proc.post.args[i].count > 0) {
        throw new Error("cwise: post() block may not reference array index")
      }
    } else if(arg_type === "shape") {
      proc.shapeArgs.push(i)
      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {
        throw new Error("cwise: pre() block may not write to array shape")
      }
      if(i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array shape")
      }
      if(i < proc.post.args.length && proc.post.args[i].lvalue) {
        throw new Error("cwise: post() block may not write to array shape")
      }
    } else if(typeof arg_type === "object" && arg_type.offset) {
      proc.argTypes[i] = "offset"
      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })
      proc.offsetArgIndex.push(i)
    } else {
      throw new Error("cwise: Unknown argument type " + proc_args[i])
    }
  }
  
  //Make sure at least one array argument was specified
  if(proc.arrayArgs.length <= 0) {
    throw new Error("cwise: No array arguments specified")
  }
  
  //Make sure arguments are correct
  if(proc.pre.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in pre() block")
  }
  if(proc.body.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in body() block")
  }
  if(proc.post.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in post() block")
  }

  //Check debug flag
  proc.debug = !!user_args.printCode || !!user_args.debug
  
  //Retrieve name
  proc.funcName = user_args.funcName || "cwise"
  
  //Read in block size
  proc.blockSize = user_args.blockSize || 64

  return createThunk(proc)
}

module.exports = compileCwise

},{"./lib/thunk.js":15}],14:[function(require,module,exports){
"use strict"

var uniq = require("uniq")

// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)
// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of "pointers" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.
function innerFill(order, proc, body) {
  var dimension = order.length
    , nargs = proc.arrayArgs.length
    , has_index = proc.indexArgs.length>0
    , code = []
    , vars = []
    , idx=0, pidx=0, i, j
  for(i=0; i<dimension; ++i) { // Iteration variables
    vars.push(["i",i,"=0"].join(""))
  }
  //Compute scan deltas
  for(j=0; j<nargs; ++j) {
    for(i=0; i<dimension; ++i) {
      pidx = idx
      idx = order[i]
      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride
        vars.push(["d",j,"s",i,"=t",j,"p",idx].join(""))
      } else { // For other dimensions the delta is basically the stride minus something which essentially "rewinds" the previous (more inner) dimension
        vars.push(["d",j,"s",i,"=(t",j,"p",idx,"-s",pidx,"*t",j,"p",pidx,")"].join(""))
      }
    }
  }
  if (vars.length > 0) {
    code.push("var " + vars.join(","))
  }  
  //Scan loop
  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards
    idx = order[i]
    code.push(["for(i",i,"=0;i",i,"<s",idx,";++i",i,"){"].join(""))
  }
  //Push body of inner loop
  code.push(body)
  //Advance scan pointers
  for(i=0; i<dimension; ++i) {
    pidx = idx
    idx = order[i]
    for(j=0; j<nargs; ++j) {
      code.push(["p",j,"+=d",j,"s",i].join(""))
    }
    if(has_index) {
      if(i > 0) {
        code.push(["index[",pidx,"]-=s",pidx].join(""))
      }
      code.push(["++index[",idx,"]"].join(""))
    }
    code.push("}")
  }
  return code.join("\n")
}

// Generate "outer" loops that loop over blocks of data, applying "inner" loops to the blocks by manipulating the local variables in such a way that the inner loop only "sees" the current block.
// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.
//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and "shape" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.
function outerFill(matched, order, proc, body) {
  var dimension = order.length
    , nargs = proc.arrayArgs.length
    , blockSize = proc.blockSize
    , has_index = proc.indexArgs.length > 0
    , code = []
  for(var i=0; i<nargs; ++i) {
    code.push(["var offset",i,"=p",i].join(""))
  }
  //Generate loops for unmatched dimensions
  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)
  // TODO: It would be nice if the order in which these loops are placed would also be somehow "optimal" (at the very least we should check that it really doesn't hurt us if they're not).
  for(var i=matched; i<dimension; ++i) {
    code.push(["for(var j"+i+"=SS[", order[i], "]|0;j", i, ">0;){"].join("")) // Iterate back to front
    code.push(["if(j",i,"<",blockSize,"){"].join("")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).
    code.push(["s",order[i],"=j",i].join(""))
    code.push(["j",i,"=0"].join(""))
    code.push(["}else{s",order[i],"=",blockSize].join(""))
    code.push(["j",i,"-=",blockSize,"}"].join(""))
    if(has_index) {
      code.push(["index[",order[i],"]=j",i].join(""))
    }
  }
  for(var i=0; i<nargs; ++i) {
    var indexStr = ["offset"+i]
    for(var j=matched; j<dimension; ++j) {
      indexStr.push(["j",j,"*t",i,"p",order[j]].join(""))
    }
    code.push(["p",i,"=(",indexStr.join("+"),")"].join(""))
  }
  code.push(innerFill(order, proc, body))
  for(var i=matched; i<dimension; ++i) {
    code.push("}")
  }
  return code.join("\n")
}

//Count the number of compatible inner orders
// This is the length of the longest common prefix of the arrays in orders.
// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.
// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.
function countMatches(orders) {
  var matched = 0, dimension = orders[0].length
  while(matched < dimension) {
    for(var j=1; j<orders.length; ++j) {
      if(orders[j][matched] !== orders[0][matched]) {
        return matched
      }
    }
    ++matched
  }
  return matched
}

//Processes a block according to the given data types
// Replaces variable names by different ones, either "local" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.
function processBlock(block, proc, dtypes) {
  var code = block.body
  var pre = []
  var post = []
  for(var i=0; i<block.args.length; ++i) {
    var carg = block.args[i]
    if(carg.count <= 0) {
      continue
    }
    var re = new RegExp(carg.name, "g")
    var ptrStr = ""
    var arrNum = proc.arrayArgs.indexOf(i)
    switch(proc.argTypes[i]) {
      case "offset":
        var offArgIndex = proc.offsetArgIndex.indexOf(i)
        var offArg = proc.offsetArgs[offArgIndex]
        arrNum = offArg.array
        ptrStr = "+q" + offArgIndex // Adds offset to the "pointer" in the array
      case "array":
        ptrStr = "p" + arrNum + ptrStr
        var localStr = "l" + i
        var arrStr = "a" + arrNum
        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array
          if(carg.count === 1) { // Argument/array used only once(?)
            if(dtypes[arrNum] === "generic") {
              if(carg.lvalue) {
                pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
                code = code.replace(re, localStr)
                post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
              } else {
                code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
              }
            } else {
              code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
            }
          } else if(dtypes[arrNum] === "generic") {
            pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // TODO: Could we optimize by checking for carg.rvalue?
            code = code.replace(re, localStr)
            if(carg.lvalue) {
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            }
          } else {
            pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join("")) // TODO: Could we optimize by checking for carg.rvalue?
            code = code.replace(re, localStr)
            if(carg.lvalue) {
              post.push([arrStr, "[", ptrStr, "]=", localStr].join(""))
            }
          }
        } else { // Argument to body is a "block"
          var reStrArr = [carg.name], ptrStrArr = [ptrStr]
          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {
            reStrArr.push("\\s*\\[([^\\]]+)\\]")
            ptrStrArr.push("$" + (j+1) + "*t" + arrNum + "b" + j) // Matched index times stride
          }
          re = new RegExp(reStrArr.join(""), "g")
          ptrStr = ptrStrArr.join("+")
          if(dtypes[arrNum] === "generic") {
            /*if(carg.lvalue) {
              pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
              code = code.replace(re, localStr)
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            } else {
              code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
            }*/
            throw new Error("cwise: Generic arrays not supported in combination with blocks!")
          } else {
            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.
            code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
          }
        }
      break
      case "scalar":
        code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
      break
      case "index":
        code = code.replace(re, "index")
      break
      case "shape":
        code = code.replace(re, "shape")
      break
    }
  }
  return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
}

function typeSummary(dtypes) {
  var summary = new Array(dtypes.length)
  var allEqual = true
  for(var i=0; i<dtypes.length; ++i) {
    var t = dtypes[i]
    var digits = t.match(/\d+/)
    if(!digits) {
      digits = ""
    } else {
      digits = digits[0]
    }
    if(t.charAt(0) === 0) {
      summary[i] = "u" + t.charAt(1) + digits
    } else {
      summary[i] = t.charAt(0) + digits
    }
    if(i > 0) {
      allEqual = allEqual && summary[i] === summary[i-1]
    }
  }
  if(allEqual) {
    return summary[0]
  }
  return summary.join("")
}

//Generates a cwise operator
function generateCWiseOp(proc, typesig) {

  //Compute dimension
  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.
  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0
  var orders = new Array(proc.arrayArgs.length)
  var dtypes = new Array(proc.arrayArgs.length)
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    dtypes[i] = typesig[2*i]
    orders[i] = typesig[2*i+1]
  }
  
  //Determine where block and loop indices start and end
  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks
  var loopBegin = [], loopEnd = [] // These indices are iterated over
  var loopOrders = [] // orders restricted to the loop indices
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    if (proc.arrayBlockIndices[i]<0) {
      loopBegin.push(0)
      loopEnd.push(dimension)
      blockBegin.push(dimension)
      blockEnd.push(dimension+proc.arrayBlockIndices[i])
    } else {
      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative
      loopEnd.push(proc.arrayBlockIndices[i]+dimension)
      blockBegin.push(0)
      blockEnd.push(proc.arrayBlockIndices[i])
    }
    var newOrder = []
    for(var j=0; j<orders[i].length; j++) {
      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {
        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.
      }
    }
    loopOrders.push(newOrder)
  }

  //First create arguments for procedure
  var arglist = ["SS"] // SS is the overall shape over which we iterate
  var code = ["'use strict'"]
  var vars = []
  
  for(var j=0; j<dimension; ++j) {
    vars.push(["s", j, "=SS[", j, "]"].join("")) // The limits for each dimension.
  }
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    arglist.push("a"+i) // Actual data array
    arglist.push("t"+i) // Strides
    arglist.push("p"+i) // Offset in the array at which the data starts (also used for iterating over the data)
    
    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping
      vars.push(["t",i,"p",j,"=t",i,"[",loopBegin[i]+j,"]"].join(""))
    }
    
    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration
      vars.push(["t",i,"b",j,"=t",i,"[",blockBegin[i]+j,"]"].join(""))
    }
  }
  for(var i=0; i<proc.scalarArgs.length; ++i) {
    arglist.push("Y" + i)
  }
  if(proc.shapeArgs.length > 0) {
    vars.push("shape=SS.slice(0)") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)
  }
  if(proc.indexArgs.length > 0) {
    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.
    var zeros = new Array(dimension)
    for(var i=0; i<dimension; ++i) {
      zeros[i] = "0"
    }
    vars.push(["index=[", zeros.join(","), "]"].join(""))
  }
  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations
    var off_arg = proc.offsetArgs[i]
    var init_string = []
    for(var j=0; j<off_arg.offset.length; ++j) {
      if(off_arg.offset[j] === 0) {
        continue
      } else if(off_arg.offset[j] === 1) {
        init_string.push(["t", off_arg.array, "p", j].join(""))      
      } else {
        init_string.push([off_arg.offset[j], "*t", off_arg.array, "p", j].join(""))
      }
    }
    if(init_string.length === 0) {
      vars.push("q" + i + "=0")
    } else {
      vars.push(["q", i, "=", init_string.join("+")].join(""))
    }
  }

  //Prepare this variables
  var thisVars = uniq([].concat(proc.pre.thisVars)
                      .concat(proc.body.thisVars)
                      .concat(proc.post.thisVars))
  vars = vars.concat(thisVars)
  if (vars.length > 0) {
    code.push("var " + vars.join(","))
  }
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    code.push("p"+i+"|=0")
  }
  
  //Inline prelude
  if(proc.pre.body.length > 3) {
    code.push(processBlock(proc.pre, proc, dtypes))
  }

  //Process body
  var body = processBlock(proc.body, proc, dtypes)
  var matched = countMatches(loopOrders)
  if(matched < dimension) {
    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.
  } else {
    code.push(innerFill(loopOrders[0], proc, body))
  }

  //Inline epilog
  if(proc.post.body.length > 3) {
    code.push(processBlock(proc.post, proc, dtypes))
  }
  
  if(proc.debug) {
    console.log("-----Generated cwise routine for ", typesig, ":\n" + code.join("\n") + "\n----------")
  }
  
  var loopName = [(proc.funcName||"unnamed"), "_cwise_loop_", orders[0].join("s"),"m",matched,typeSummary(dtypes)].join("")
  var f = new Function(["function ",loopName,"(", arglist.join(","),"){", code.join("\n"),"} return ", loopName].join(""))
  return f()
}
module.exports = generateCWiseOp

},{"uniq":87}],15:[function(require,module,exports){
"use strict"

// The function below is called when constructing a cwise function object, and does the following:
// A function object is constructed which accepts as argument a compilation function and returns another function.
// It is this other function that is eventually returned by createThunk, and this function is the one that actually
// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.
// The compilation passed to the first function object is used for compiling new functions.
// Once this function object is created, it is called with compile as argument, where the first argument of compile
// is bound to "proc" (essentially containing a preprocessed version of the user arguments to cwise).
// So createThunk roughly works like this:
// function createThunk(proc) {
//   var thunk = function(compileBound) {
//     var CACHED = {}
//     return function(arrays and scalars) {
//       if (dtype and order of arrays in CACHED) {
//         var func = CACHED[dtype and order of arrays]
//       } else {
//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)
//       }
//       return func(arrays and scalars)
//     }
//   }
//   return thunk(compile.bind1(proc))
// }

var compile = require("./compile.js")

function createThunk(proc) {
  var code = ["'use strict'", "var CACHED={}"]
  var vars = []
  var thunkName = proc.funcName + "_cwise_thunk"
  
  //Build thunk
  code.push(["return function ", thunkName, "(", proc.shimArgs.join(","), "){"].join(""))
  var typesig = []
  var string_typesig = []
  var proc_args = [["array",proc.arrayArgs[0],".shape.slice(", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).
                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(","+proc.arrayBlockIndices[0]+")"):")"].join("")]
  var shapeLengthConditions = [], shapeConditions = []
  // Process array arguments
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    var j = proc.arrayArgs[i]
    vars.push(["t", j, "=array", j, ".dtype,",
               "r", j, "=array", j, ".order"].join(""))
    typesig.push("t" + j)
    typesig.push("r" + j)
    string_typesig.push("t"+j)
    string_typesig.push("r"+j+".join()")
    proc_args.push("array" + j + ".data")
    proc_args.push("array" + j + ".stride")
    proc_args.push("array" + j + ".offset|0")
    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)
      shapeLengthConditions.push("array" + proc.arrayArgs[0] + ".shape.length===array" + j + ".shape.length+" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))
      shapeConditions.push("array" + proc.arrayArgs[0] + ".shape[shapeIndex+" + Math.max(0,proc.arrayBlockIndices[0]) + "]===array" + j + ".shape[shapeIndex+" + Math.max(0,proc.arrayBlockIndices[i]) + "]")
    }
  }
  // Check for shape equality
  if (proc.arrayArgs.length > 1) {
    code.push("if (!(" + shapeLengthConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same dimensionality!')")
    code.push("for(var shapeIndex=array" + proc.arrayArgs[0] + ".shape.length-" + Math.abs(proc.arrayBlockIndices[0]) + "; shapeIndex-->0;) {")
    code.push("if (!(" + shapeConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same shape!')")
    code.push("}")
  }
  // Process scalar arguments
  for(var i=0; i<proc.scalarArgs.length; ++i) {
    proc_args.push("scalar" + proc.scalarArgs[i])
  }
  // Check for cached function (and if not present, generate it)
  vars.push(["type=[", string_typesig.join(","), "].join()"].join(""))
  vars.push("proc=CACHED[type]")
  code.push("var " + vars.join(","))
  
  code.push(["if(!proc){",
             "CACHED[type]=proc=compile([", typesig.join(","), "])}",
             "return proc(", proc_args.join(","), ")}"].join(""))

  if(proc.debug) {
    console.log("-----Generated thunk:\n" + code.join("\n") + "\n----------")
  }
  
  //Compile thunk
  var thunk = new Function("compile", code.join("\n"))
  return thunk(compile.bind(undefined, proc))
}

module.exports = createThunk

},{"./compile.js":14}],16:[function(require,module,exports){
module.exports = function(dtype) {
  switch (dtype) {
    case 'int8':
      return Int8Array
    case 'int16':
      return Int16Array
    case 'int32':
      return Int32Array
    case 'uint8':
      return Uint8Array
    case 'uint16':
      return Uint16Array
    case 'uint32':
      return Uint32Array
    case 'float32':
      return Float32Array
    case 'float64':
      return Float64Array
    case 'array':
      return Array
  }
}
},{}],17:[function(require,module,exports){
"use strict"

function dupe_array(count, value, i) {
  var c = count[i]|0
  if(c <= 0) {
    return []
  }
  var result = new Array(c), j
  if(i === count.length-1) {
    for(j=0; j<c; ++j) {
      result[j] = value
    }
  } else {
    for(j=0; j<c; ++j) {
      result[j] = dupe_array(count, value, i+1)
    }
  }
  return result
}

function dupe_number(count, value) {
  var result, i
  result = new Array(count)
  for(i=0; i<count; ++i) {
    result[i] = value
  }
  return result
}

function dupe(count, value) {
  if(typeof value === "undefined") {
    value = 0
  }
  switch(typeof count) {
    case "number":
      if(count > 0) {
        return dupe_number(count|0, value)
      }
    break
    case "object":
      if(typeof (count.length) === "number") {
        return dupe_array(count, value, 0)
      }
    break
  }
  return []
}

module.exports = dupe
},{}],18:[function(require,module,exports){
"use strict"

var pool = require("typedarray-pool")
var ops = require("ndarray-ops")
var ndarray = require("ndarray")

var SUPPORTED_TYPES = [
  "uint8",
  "uint8_clamped",
  "uint16",
  "uint32",
  "int8",
  "int16",
  "int32",
  "float32" ]

function GLBuffer(gl, type, handle, length, usage) {
  this.gl = gl
  this.type = type
  this.handle = handle
  this.length = length
  this.usage = usage
}

var proto = GLBuffer.prototype

proto.bind = function() {
  this.gl.bindBuffer(this.type, this.handle)
}

proto.unbind = function() {
  this.gl.bindBuffer(this.type, null)
}

proto.dispose = function() {
  this.gl.deleteBuffer(this.handle)
}

function updateTypeArray(gl, type, len, usage, data, offset) {
  var dataLen = data.length * data.BYTES_PER_ELEMENT
  if(offset < 0) {
    gl.bufferData(type, data, usage)
    return dataLen
  }
  if(dataLen + offset > len) {
    throw new Error("gl-buffer: If resizing buffer, must not specify offset")
  }
  gl.bufferSubData(type, offset, data)
  return len
}

function makeScratchTypeArray(array, dtype) {
  var res = pool.malloc(array.length, dtype)
  var n = array.length
  for(var i=0; i<n; ++i) {
    res[i] = array[i]
  }
  return res
}

function isPacked(shape, stride) {
  var n = 1
  for(var i=stride.length-1; i>=0; --i) {
    if(stride[i] !== n) {
      return false
    }
    n *= shape[i]
  }
  return true
}

proto.update = function(array, offset) {
  if(typeof offset !== "number") {
    offset = -1
  }
  this.bind()
  if(typeof array === "object" && typeof array.shape !== "undefined") { //ndarray
    var dtype = array.dtype
    if(SUPPORTED_TYPES.indexOf(dtype) < 0) {
      dtype = "float32"
    }
    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {
      var ext = gl.getExtension('OES_element_index_uint')
      if(ext && dtype !== "uint16") {
        dtype = "uint32"
      } else {
        dtype = "uint16"
      }
    }
    if(dtype === array.dtype && isPacked(array.shape, array.stride)) {
      if(array.offset === 0 && array.data.length === array.shape[0]) {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data, offset)
      } else {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array.data.subarray(array.offset, array.shape[0]), offset)
      }
    } else {
      var tmp = pool.malloc(array.size, dtype)
      var ndt = ndarray(tmp, array.shape)
      ops.assign(ndt, array)
      if(offset < 0) {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp, offset)
      } else {
        this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, tmp.subarray(0, array.size), offset)
      }
      pool.free(tmp)
    }
  } else if(Array.isArray(array)) { //Vanilla array
    var t
    if(this.type === this.gl.ELEMENT_ARRAY_BUFFER) {
      t = makeScratchTypeArray(array, "uint16")
    } else {
      t = makeScratchTypeArray(array, "float32")
    }
    if(offset < 0) {
      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t, offset)
    } else {
      this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, t.subarray(0, array.length), offset)
    }
    pool.free(t)
  } else if(typeof array === "object" && typeof array.length === "number") { //Typed array
    this.length = updateTypeArray(this.gl, this.type, this.length, this.usage, array, offset)
  } else if(typeof array === "number" || array === undefined) { //Number/default
    if(offset >= 0) {
      throw new Error("gl-buffer: Cannot specify offset when resizing buffer")
    }
    array = array | 0
    if(array <= 0) {
      array = 1
    }
    this.gl.bufferData(this.type, array|0, this.usage)
    this.length = array
  } else { //Error, case should not happen
    throw new Error("gl-buffer: Invalid data type")
  }
}

function createBuffer(gl, data, type, usage) {
  type = type || gl.ARRAY_BUFFER
  usage = usage || gl.DYNAMIC_DRAW
  if(type !== gl.ARRAY_BUFFER && type !== gl.ELEMENT_ARRAY_BUFFER) {
    throw new Error("gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER")
  }
  if(usage !== gl.DYNAMIC_DRAW && usage !== gl.STATIC_DRAW && usage !== gl.STREAM_DRAW) {
    throw new Error("gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW")
  }
  var handle = gl.createBuffer()
  var result = new GLBuffer(gl, type, handle, 0, usage)
  result.update(data)
  return result
}

module.exports = createBuffer

},{"ndarray":79,"ndarray-ops":78,"typedarray-pool":86}],19:[function(require,module,exports){
module.exports = {
  0: 'NONE',
  1: 'ONE',
  2: 'LINE_LOOP',
  3: 'LINE_STRIP',
  4: 'TRIANGLES',
  5: 'TRIANGLE_STRIP',
  6: 'TRIANGLE_FAN',
  256: 'DEPTH_BUFFER_BIT',
  512: 'NEVER',
  513: 'LESS',
  514: 'EQUAL',
  515: 'LEQUAL',
  516: 'GREATER',
  517: 'NOTEQUAL',
  518: 'GEQUAL',
  519: 'ALWAYS',
  768: 'SRC_COLOR',
  769: 'ONE_MINUS_SRC_COLOR',
  770: 'SRC_ALPHA',
  771: 'ONE_MINUS_SRC_ALPHA',
  772: 'DST_ALPHA',
  773: 'ONE_MINUS_DST_ALPHA',
  774: 'DST_COLOR',
  775: 'ONE_MINUS_DST_COLOR',
  776: 'SRC_ALPHA_SATURATE',
  1024: 'STENCIL_BUFFER_BIT',
  1028: 'FRONT',
  1029: 'BACK',
  1032: 'FRONT_AND_BACK',
  1280: 'INVALID_ENUM',
  1281: 'INVALID_VALUE',
  1282: 'INVALID_OPERATION',
  1285: 'OUT_OF_MEMORY',
  1286: 'INVALID_FRAMEBUFFER_OPERATION',
  2304: 'CW',
  2305: 'CCW',
  2849: 'LINE_WIDTH',
  2884: 'CULL_FACE',
  2885: 'CULL_FACE_MODE',
  2886: 'FRONT_FACE',
  2928: 'DEPTH_RANGE',
  2929: 'DEPTH_TEST',
  2930: 'DEPTH_WRITEMASK',
  2931: 'DEPTH_CLEAR_VALUE',
  2932: 'DEPTH_FUNC',
  2960: 'STENCIL_TEST',
  2961: 'STENCIL_CLEAR_VALUE',
  2962: 'STENCIL_FUNC',
  2963: 'STENCIL_VALUE_MASK',
  2964: 'STENCIL_FAIL',
  2965: 'STENCIL_PASS_DEPTH_FAIL',
  2966: 'STENCIL_PASS_DEPTH_PASS',
  2967: 'STENCIL_REF',
  2968: 'STENCIL_WRITEMASK',
  2978: 'VIEWPORT',
  3024: 'DITHER',
  3042: 'BLEND',
  3088: 'SCISSOR_BOX',
  3089: 'SCISSOR_TEST',
  3106: 'COLOR_CLEAR_VALUE',
  3107: 'COLOR_WRITEMASK',
  3317: 'UNPACK_ALIGNMENT',
  3333: 'PACK_ALIGNMENT',
  3379: 'MAX_TEXTURE_SIZE',
  3386: 'MAX_VIEWPORT_DIMS',
  3408: 'SUBPIXEL_BITS',
  3410: 'RED_BITS',
  3411: 'GREEN_BITS',
  3412: 'BLUE_BITS',
  3413: 'ALPHA_BITS',
  3414: 'DEPTH_BITS',
  3415: 'STENCIL_BITS',
  3553: 'TEXTURE_2D',
  4352: 'DONT_CARE',
  4353: 'FASTEST',
  4354: 'NICEST',
  5120: 'BYTE',
  5121: 'UNSIGNED_BYTE',
  5122: 'SHORT',
  5123: 'UNSIGNED_SHORT',
  5124: 'INT',
  5125: 'UNSIGNED_INT',
  5126: 'FLOAT',
  5386: 'INVERT',
  5890: 'TEXTURE',
  6401: 'STENCIL_INDEX',
  6402: 'DEPTH_COMPONENT',
  6406: 'ALPHA',
  6407: 'RGB',
  6408: 'RGBA',
  6409: 'LUMINANCE',
  6410: 'LUMINANCE_ALPHA',
  7680: 'KEEP',
  7681: 'REPLACE',
  7682: 'INCR',
  7683: 'DECR',
  7936: 'VENDOR',
  7937: 'RENDERER',
  7938: 'VERSION',
  9728: 'NEAREST',
  9729: 'LINEAR',
  9984: 'NEAREST_MIPMAP_NEAREST',
  9985: 'LINEAR_MIPMAP_NEAREST',
  9986: 'NEAREST_MIPMAP_LINEAR',
  9987: 'LINEAR_MIPMAP_LINEAR',
  10240: 'TEXTURE_MAG_FILTER',
  10241: 'TEXTURE_MIN_FILTER',
  10242: 'TEXTURE_WRAP_S',
  10243: 'TEXTURE_WRAP_T',
  10497: 'REPEAT',
  10752: 'POLYGON_OFFSET_UNITS',
  16384: 'COLOR_BUFFER_BIT',
  32769: 'CONSTANT_COLOR',
  32770: 'ONE_MINUS_CONSTANT_COLOR',
  32771: 'CONSTANT_ALPHA',
  32772: 'ONE_MINUS_CONSTANT_ALPHA',
  32773: 'BLEND_COLOR',
  32774: 'FUNC_ADD',
  32777: 'BLEND_EQUATION_RGB',
  32778: 'FUNC_SUBTRACT',
  32779: 'FUNC_REVERSE_SUBTRACT',
  32819: 'UNSIGNED_SHORT_4_4_4_4',
  32820: 'UNSIGNED_SHORT_5_5_5_1',
  32823: 'POLYGON_OFFSET_FILL',
  32824: 'POLYGON_OFFSET_FACTOR',
  32854: 'RGBA4',
  32855: 'RGB5_A1',
  32873: 'TEXTURE_BINDING_2D',
  32926: 'SAMPLE_ALPHA_TO_COVERAGE',
  32928: 'SAMPLE_COVERAGE',
  32936: 'SAMPLE_BUFFERS',
  32937: 'SAMPLES',
  32938: 'SAMPLE_COVERAGE_VALUE',
  32939: 'SAMPLE_COVERAGE_INVERT',
  32968: 'BLEND_DST_RGB',
  32969: 'BLEND_SRC_RGB',
  32970: 'BLEND_DST_ALPHA',
  32971: 'BLEND_SRC_ALPHA',
  33071: 'CLAMP_TO_EDGE',
  33170: 'GENERATE_MIPMAP_HINT',
  33189: 'DEPTH_COMPONENT16',
  33306: 'DEPTH_STENCIL_ATTACHMENT',
  33635: 'UNSIGNED_SHORT_5_6_5',
  33648: 'MIRRORED_REPEAT',
  33901: 'ALIASED_POINT_SIZE_RANGE',
  33902: 'ALIASED_LINE_WIDTH_RANGE',
  33984: 'TEXTURE0',
  33985: 'TEXTURE1',
  33986: 'TEXTURE2',
  33987: 'TEXTURE3',
  33988: 'TEXTURE4',
  33989: 'TEXTURE5',
  33990: 'TEXTURE6',
  33991: 'TEXTURE7',
  33992: 'TEXTURE8',
  33993: 'TEXTURE9',
  33994: 'TEXTURE10',
  33995: 'TEXTURE11',
  33996: 'TEXTURE12',
  33997: 'TEXTURE13',
  33998: 'TEXTURE14',
  33999: 'TEXTURE15',
  34000: 'TEXTURE16',
  34001: 'TEXTURE17',
  34002: 'TEXTURE18',
  34003: 'TEXTURE19',
  34004: 'TEXTURE20',
  34005: 'TEXTURE21',
  34006: 'TEXTURE22',
  34007: 'TEXTURE23',
  34008: 'TEXTURE24',
  34009: 'TEXTURE25',
  34010: 'TEXTURE26',
  34011: 'TEXTURE27',
  34012: 'TEXTURE28',
  34013: 'TEXTURE29',
  34014: 'TEXTURE30',
  34015: 'TEXTURE31',
  34016: 'ACTIVE_TEXTURE',
  34024: 'MAX_RENDERBUFFER_SIZE',
  34041: 'DEPTH_STENCIL',
  34055: 'INCR_WRAP',
  34056: 'DECR_WRAP',
  34067: 'TEXTURE_CUBE_MAP',
  34068: 'TEXTURE_BINDING_CUBE_MAP',
  34069: 'TEXTURE_CUBE_MAP_POSITIVE_X',
  34070: 'TEXTURE_CUBE_MAP_NEGATIVE_X',
  34071: 'TEXTURE_CUBE_MAP_POSITIVE_Y',
  34072: 'TEXTURE_CUBE_MAP_NEGATIVE_Y',
  34073: 'TEXTURE_CUBE_MAP_POSITIVE_Z',
  34074: 'TEXTURE_CUBE_MAP_NEGATIVE_Z',
  34076: 'MAX_CUBE_MAP_TEXTURE_SIZE',
  34338: 'VERTEX_ATTRIB_ARRAY_ENABLED',
  34339: 'VERTEX_ATTRIB_ARRAY_SIZE',
  34340: 'VERTEX_ATTRIB_ARRAY_STRIDE',
  34341: 'VERTEX_ATTRIB_ARRAY_TYPE',
  34342: 'CURRENT_VERTEX_ATTRIB',
  34373: 'VERTEX_ATTRIB_ARRAY_POINTER',
  34466: 'NUM_COMPRESSED_TEXTURE_FORMATS',
  34467: 'COMPRESSED_TEXTURE_FORMATS',
  34660: 'BUFFER_SIZE',
  34661: 'BUFFER_USAGE',
  34816: 'STENCIL_BACK_FUNC',
  34817: 'STENCIL_BACK_FAIL',
  34818: 'STENCIL_BACK_PASS_DEPTH_FAIL',
  34819: 'STENCIL_BACK_PASS_DEPTH_PASS',
  34877: 'BLEND_EQUATION_ALPHA',
  34921: 'MAX_VERTEX_ATTRIBS',
  34922: 'VERTEX_ATTRIB_ARRAY_NORMALIZED',
  34930: 'MAX_TEXTURE_IMAGE_UNITS',
  34962: 'ARRAY_BUFFER',
  34963: 'ELEMENT_ARRAY_BUFFER',
  34964: 'ARRAY_BUFFER_BINDING',
  34965: 'ELEMENT_ARRAY_BUFFER_BINDING',
  34975: 'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',
  35040: 'STREAM_DRAW',
  35044: 'STATIC_DRAW',
  35048: 'DYNAMIC_DRAW',
  35632: 'FRAGMENT_SHADER',
  35633: 'VERTEX_SHADER',
  35660: 'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
  35661: 'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
  35663: 'SHADER_TYPE',
  35664: 'FLOAT_VEC2',
  35665: 'FLOAT_VEC3',
  35666: 'FLOAT_VEC4',
  35667: 'INT_VEC2',
  35668: 'INT_VEC3',
  35669: 'INT_VEC4',
  35670: 'BOOL',
  35671: 'BOOL_VEC2',
  35672: 'BOOL_VEC3',
  35673: 'BOOL_VEC4',
  35674: 'FLOAT_MAT2',
  35675: 'FLOAT_MAT3',
  35676: 'FLOAT_MAT4',
  35678: 'SAMPLER_2D',
  35680: 'SAMPLER_CUBE',
  35712: 'DELETE_STATUS',
  35713: 'COMPILE_STATUS',
  35714: 'LINK_STATUS',
  35715: 'VALIDATE_STATUS',
  35716: 'INFO_LOG_LENGTH',
  35717: 'ATTACHED_SHADERS',
  35718: 'ACTIVE_UNIFORMS',
  35719: 'ACTIVE_UNIFORM_MAX_LENGTH',
  35720: 'SHADER_SOURCE_LENGTH',
  35721: 'ACTIVE_ATTRIBUTES',
  35722: 'ACTIVE_ATTRIBUTE_MAX_LENGTH',
  35724: 'SHADING_LANGUAGE_VERSION',
  35725: 'CURRENT_PROGRAM',
  36003: 'STENCIL_BACK_REF',
  36004: 'STENCIL_BACK_VALUE_MASK',
  36005: 'STENCIL_BACK_WRITEMASK',
  36006: 'FRAMEBUFFER_BINDING',
  36007: 'RENDERBUFFER_BINDING',
  36048: 'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',
  36049: 'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',
  36050: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',
  36051: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',
  36053: 'FRAMEBUFFER_COMPLETE',
  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',
  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',
  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',
  36061: 'FRAMEBUFFER_UNSUPPORTED',
  36064: 'COLOR_ATTACHMENT0',
  36096: 'DEPTH_ATTACHMENT',
  36128: 'STENCIL_ATTACHMENT',
  36160: 'FRAMEBUFFER',
  36161: 'RENDERBUFFER',
  36162: 'RENDERBUFFER_WIDTH',
  36163: 'RENDERBUFFER_HEIGHT',
  36164: 'RENDERBUFFER_INTERNAL_FORMAT',
  36168: 'STENCIL_INDEX8',
  36176: 'RENDERBUFFER_RED_SIZE',
  36177: 'RENDERBUFFER_GREEN_SIZE',
  36178: 'RENDERBUFFER_BLUE_SIZE',
  36179: 'RENDERBUFFER_ALPHA_SIZE',
  36180: 'RENDERBUFFER_DEPTH_SIZE',
  36181: 'RENDERBUFFER_STENCIL_SIZE',
  36194: 'RGB565',
  36336: 'LOW_FLOAT',
  36337: 'MEDIUM_FLOAT',
  36338: 'HIGH_FLOAT',
  36339: 'LOW_INT',
  36340: 'MEDIUM_INT',
  36341: 'HIGH_INT',
  36346: 'SHADER_COMPILER',
  36347: 'MAX_VERTEX_UNIFORM_VECTORS',
  36348: 'MAX_VARYING_VECTORS',
  36349: 'MAX_FRAGMENT_UNIFORM_VECTORS',
  37440: 'UNPACK_FLIP_Y_WEBGL',
  37441: 'UNPACK_PREMULTIPLY_ALPHA_WEBGL',
  37442: 'CONTEXT_LOST_WEBGL',
  37443: 'UNPACK_COLORSPACE_CONVERSION_WEBGL',
  37444: 'BROWSER_DEFAULT_WEBGL'
}

},{}],20:[function(require,module,exports){
var gl10 = require('./1.0/numbers')

module.exports = function lookupConstant (number) {
  return gl10[number]
}

},{"./1.0/numbers":19}],21:[function(require,module,exports){

var sprintf = require('sprintf-js').sprintf;
var glConstants = require('gl-constants/lookup');
var shaderName = require('glsl-shader-name');
var addLineNumbers = require('add-line-numbers');

module.exports = formatCompilerError;

function formatCompilerError(errLog, src, type) {
    "use strict";

    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';

    var typeName = 'unknown type';
    if (type !== undefined) {
        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'
    }

    var longForm = sprintf('Error compiling %s shader %s:\n', typeName, name);
    var shortForm = sprintf("%s%s", longForm, errLog);

    var errorStrings = errLog.split('\n');
    var errors = {};

    for (var i = 0; i < errorStrings.length; i++) {
        var errorString = errorStrings[i];
        if (errorString === '' || errorString === "\0") continue;
        var lineNo = parseInt(errorString.split(':')[2]);
        if (isNaN(lineNo)) {
            throw new Error(sprintf('Could not parse error: %s', errorString));
        }
        errors[lineNo] = errorString;
    }

    var lines = addLineNumbers(src).split('\n');

    for (var i = 0; i < lines.length; i++) {
        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;
        var line = lines[i];
        longForm += line + '\n';
        if (errors[i+1]) {
            var e = errors[i+1];
            e = e.substr(e.split(':', 3).join(':').length + 1).trim();
            longForm += sprintf('^^^ %s\n\n', e);
        }
    }

    return {
        long: longForm.trim(),
        short: shortForm.trim()
    };
}


},{"add-line-numbers":6,"gl-constants/lookup":20,"glsl-shader-name":62,"sprintf-js":84}],22:[function(require,module,exports){
var normalize = require('./normalize')
var glType = require('gl-to-dtype')
var createVAO = require('gl-vao')
var dtype = require('dtype')

module.exports = GLGeometry

function GLGeometry (gl) {
  if (!(this instanceof GLGeometry)) {
    return new GLGeometry(gl)
  }

  this._elementsType = 5123
  this._elementsBytes = 2
  this._attributes = []
  this._dirty = true
  this._attrLength = 0
  this._facesLength = 0
  this._index = null
  this._vao = null
  this._keys = []
  this.gl = gl
}

GLGeometry.prototype.dispose = function () {
  for (var i = 0; i < this._attributes.length; i++) {
    this._attributes[i].buffer.dispose()
  }

  this._attributes = []
  this._keys = []
  this._attrLength = 0 // Length of this attribute (the number of vertices it feeds)
  this._facesLength = 0 // Number of vertices needed to draw all faces
  this._dirty = true

  if (this._index) {
    this._index.dispose()
    this._index = null
  }

  if (this._vao) {
    this._vao.dispose()
    this._vao = null
  }
}

GLGeometry.prototype.faces = function faces (attr, opts) {
  var size = opts && opts.size || 3
  attr = attr.cells ? attr.cells : attr

  this._dirty = true

  if (this._index) {
    this._index.dispose()
  }

  this._index = normalize.create(this.gl
    , attr
    , size
    , this.gl.ELEMENT_ARRAY_BUFFER
    , 'uint16'
  )

  this._facesLength = this._index.length * size
  this._index = this._index.buffer

  return this
}

GLGeometry.prototype.attr = function (name, attr, opts) {
  // If we get a simplicial complex
  if (attr.cells && attr.positions) {
    return this.attr(name, attr.positions).faces(attr.cells, opts)
  }

  opts = opts || {}
  var size = opts.size || 3

  // Is this a known attribute (ie, an update)?
  var keyIndex = this._keys.indexOf(name)
  if (keyIndex > -1) {
    var toUpdate = this._attributes[keyIndex].buffer
    var offset = opts.offset || undefined
    normalize.update(toUpdate, attr, size, 'float32', offset)
    this._attrLength = toUpdate.length / size / 4
    return this
  }

  this._dirty = true

  var gl = this.gl
  var first = !this._attributes.length

  var attribute = normalize.create(gl, attr, size, gl.ARRAY_BUFFER, 'float32')
  if (!attribute) {
    throw new Error(
      'Unexpected attribute format: needs an ndarray, array, typed array, ' +
      'gl-buffer or simplicial complex'
    )
  }

  var buffer = attribute.buffer
  var length = attribute.length

  this._keys.push(name)
  this._attributes.push({
    size: size,
    buffer: buffer
  })

  if (first) {
    this._attrLength = length
  }

  return this
}

GLGeometry.prototype.bind = function bind (shader) {
  this.update()
  this._vao.bind()

  if (!this._keys) return
  if (!shader) return

  for (var i = 0; i < this._keys.length; i++) {
    var attr = shader.attributes[this._keys[i]]
    if (attr) attr.location = i
  }

  shader.bind()
}

GLGeometry.prototype.draw = function draw (mode, start, stop) {
  start = typeof start === 'undefined' ? 0 : start
  mode = typeof mode === 'undefined' ? this.gl.TRIANGLES : mode

  this.update()

  if (this._vao._useElements) {
    stop = typeof stop === 'undefined' ? this._facesLength : stop
    this.gl.drawElements(mode, stop - start, this._elementsType, start * this._elementsBytes)
  } else {
    stop = typeof stop === 'undefined' ? this._attrLength : stop
    this.gl.drawArrays(mode, start, stop - start)
  }
}

GLGeometry.prototype.unbind = function unbind () {
  this.update()
  this._vao.unbind()
}

GLGeometry.prototype.update = function update () {
  if (!this._dirty) return
  this._dirty = false
  if (this._vao) this._vao.dispose()

  this._vao = createVAO(this.gl, this._attributes, this._index)
  this._elementsType = this._vao._elementsType
  this._elementsBytes = dtype(
    glType(this._elementsType) || 'array'
  ).BYTES_PER_ELEMENT || 2
}

},{"./normalize":23,"dtype":16,"gl-to-dtype":57,"gl-vao":61}],23:[function(require,module,exports){
var pack = require('array-pack-2d')
var ista = require('is-typedarray')
var createBuffer = require('gl-buffer')
var isnd = require('isndarray')
var dtype = require('dtype')

module.exports.create = create
module.exports.update = update

function create (gl, attr, size, mode, type) {
  // if we get a gl-buffer
  if (attr.handle instanceof WebGLBuffer) {
    return {
      buffer: attr,
      length: attr.length / size / 4
    }
  }

  var arr = normalize(attr, size, type)
  return {
    buffer: createBuffer(gl, arr.data, mode),
    length: arr.length
  }
}

function update (buffer, attr, size, type, offset) {
  // if we get a gl-buffer
  if (attr.handle instanceof WebGLBuffer) {
    throw new Error('Unhandled update case: WebGLBuffer')
  }

  var arr = normalize(attr, size, type)
  buffer.update(arr.data, offset)
}

function normalize (attr, size, type) {
  // if we get a nested 2D array
  if (Array.isArray(attr) && Array.isArray(attr[0])) {
    return {
      data: pack(attr, type),
      length: attr.length
    }
  }

  // if we get a nested 2D array (with the second array being typed)
  if (Array.isArray(attr) && ista(attr[0])) {
    return {
      data: pack(attr, type),
      length: (attr.length * attr[0].length) / size
    }
  }

  // if we get a 1D array
  if (Array.isArray(attr)) {
    return {
      data: new (dtype(type))(attr),
      length: attr.length / size
    }
  }

  // if we get an ndarray
  if (isnd(attr)) {
    return {
      data: attr,
      length: ndlength(attr.shape) / size
    }
  }

  // if we get a typed array
  if (ista(attr)) {
    if (type && !(attr instanceof dtype(type))) {
      attr = convert(attr, dtype(type))
    }

    return {
      data: attr,
      length: attr.length / size
    }
  }
}

function ndlength (shape) {
  var length = 1
  for (var i = 0; i < shape.length; i++) length *= shape[i]
  return length
}

function convert (a, B) {
  var b = new B(a.length)
  for (var i = 0; i < a.length; i++) b[i] = a[i]
  return b
}

},{"array-pack-2d":7,"dtype":16,"gl-buffer":18,"is-typedarray":74,"isndarray":75}],24:[function(require,module,exports){
module.exports = adjoint;

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};
},{}],25:[function(require,module,exports){
module.exports = clone;

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],26:[function(require,module,exports){
module.exports = copy;

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],27:[function(require,module,exports){
module.exports = create;

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
},{}],28:[function(require,module,exports){
module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
},{}],29:[function(require,module,exports){
module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};
},{}],30:[function(require,module,exports){
module.exports = fromRotationTranslation;

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};
},{}],31:[function(require,module,exports){
module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};
},{}],32:[function(require,module,exports){
module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
},{}],33:[function(require,module,exports){
module.exports = {
  create: require('./create')
  , clone: require('./clone')
  , copy: require('./copy')
  , identity: require('./identity')
  , transpose: require('./transpose')
  , invert: require('./invert')
  , adjoint: require('./adjoint')
  , determinant: require('./determinant')
  , multiply: require('./multiply')
  , translate: require('./translate')
  , scale: require('./scale')
  , rotate: require('./rotate')
  , rotateX: require('./rotateX')
  , rotateY: require('./rotateY')
  , rotateZ: require('./rotateZ')
  , fromRotationTranslation: require('./fromRotationTranslation')
  , fromQuat: require('./fromQuat')
  , frustum: require('./frustum')
  , perspective: require('./perspective')
  , perspectiveFromFieldOfView: require('./perspectiveFromFieldOfView')
  , ortho: require('./ortho')
  , lookAt: require('./lookAt')
  , str: require('./str')
}
},{"./adjoint":24,"./clone":25,"./copy":26,"./create":27,"./determinant":28,"./fromQuat":29,"./fromRotationTranslation":30,"./frustum":31,"./identity":32,"./invert":34,"./lookAt":35,"./multiply":36,"./ortho":37,"./perspective":38,"./perspectiveFromFieldOfView":39,"./rotate":40,"./rotateX":41,"./rotateY":42,"./rotateZ":43,"./scale":44,"./str":45,"./translate":46,"./transpose":47}],34:[function(require,module,exports){
module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};
},{}],35:[function(require,module,exports){
var identity = require('./identity');

module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};
},{"./identity":32}],36:[function(require,module,exports){
module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};
},{}],37:[function(require,module,exports){
module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};
},{}],38:[function(require,module,exports){
module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};
},{}],39:[function(require,module,exports){
module.exports = perspectiveFromFieldOfView;

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}


},{}],40:[function(require,module,exports){
module.exports = rotate;

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < 0.000001) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};
},{}],41:[function(require,module,exports){
module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};
},{}],42:[function(require,module,exports){
module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};
},{}],43:[function(require,module,exports){
module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};
},{}],44:[function(require,module,exports){
module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],45:[function(require,module,exports){
module.exports = str;

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};
},{}],46:[function(require,module,exports){
module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};
},{}],47:[function(require,module,exports){
module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};
},{}],48:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.4.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setMatrixArrayType = setMatrixArrayType;
exports.toRadian = toRadian;
exports.equals = equals;
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * Common utilities
 * @module glMatrix
 */

// Configuration Constants
var EPSILON = exports.EPSILON = 0.000001;
var ARRAY_TYPE = exports.ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = exports.RANDOM = Math.random;

/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
function setMatrixArrayType(type) {
  exports.ARRAY_TYPE = ARRAY_TYPE = type;
}

var degree = Math.PI / 180;

/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */
function toRadian(a) {
  return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sub = exports.mul = undefined;
exports.create = create;
exports.fromMat4 = fromMat4;
exports.clone = clone;
exports.copy = copy;
exports.fromValues = fromValues;
exports.set = set;
exports.identity = identity;
exports.transpose = transpose;
exports.invert = invert;
exports.adjoint = adjoint;
exports.determinant = determinant;
exports.multiply = multiply;
exports.translate = translate;
exports.rotate = rotate;
exports.scale = scale;
exports.fromTranslation = fromTranslation;
exports.fromRotation = fromRotation;
exports.fromScaling = fromScaling;
exports.fromMat2d = fromMat2d;
exports.fromQuat = fromQuat;
exports.normalFromMat4 = normalFromMat4;
exports.projection = projection;
exports.str = str;
exports.frob = frob;
exports.add = add;
exports.subtract = subtract;
exports.multiplyScalar = multiplyScalar;
exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
exports.exactEquals = exactEquals;
exports.equals = equals;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(9);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new glMatrix.ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];

  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20;

  // Calculate the determinant
  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];

  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];

  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];

  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];

  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;

  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;

  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
function translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];

  out[0] = a00;
  out[1] = a01;
  out[2] = a02;

  out[3] = a10;
  out[4] = a11;
  out[5] = a12;

  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);

  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;

  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;

  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
function scale(out, a, v) {
  var x = v[0],
      y = v[1];

  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];

  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];

  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);

  out[0] = c;
  out[1] = s;
  out[2] = 0;

  out[3] = -s;
  out[4] = c;
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;

  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;

  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;

  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;

  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;

  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;

  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;

  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;

  return out;
}

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];

  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

  return out;
}

/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */
function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
}

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link mat3.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = undefined;
exports.create = create;
exports.clone = clone;
exports.length = length;
exports.fromValues = fromValues;
exports.copy = copy;
exports.set = set;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.ceil = ceil;
exports.floor = floor;
exports.min = min;
exports.max = max;
exports.round = round;
exports.scale = scale;
exports.scaleAndAdd = scaleAndAdd;
exports.distance = distance;
exports.squaredDistance = squaredDistance;
exports.squaredLength = squaredLength;
exports.negate = negate;
exports.inverse = inverse;
exports.normalize = normalize;
exports.dot = dot;
exports.cross = cross;
exports.lerp = lerp;
exports.hermite = hermite;
exports.bezier = bezier;
exports.random = random;
exports.transformMat4 = transformMat4;
exports.transformMat3 = transformMat3;
exports.transformQuat = transformQuat;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.angle = angle;
exports.str = str;
exports.exactEquals = exactEquals;
exports.equals = equals;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(3);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.sqrt(x * x + y * y + z * z);
}

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
  var out = new glMatrix.ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.sqrt(x * x + y * y + z * z);
}

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];

  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
function random(out, scale) {
  scale = scale || 1.0;

  var r = glMatrix.RANDOM() * 2.0 * Math.PI;
  var z = glMatrix.RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;

  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
function transformQuat(out, a, q) {
  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];

  // calculate quat * vec
  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  return out;
}

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateX(out, a, b, c) {
  var p = [],
      r = [];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0];
  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateY(out, a, b, c) {
  var p = [],
      r = [];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateZ(out, a, b, c) {
  var p = [],
      r = [];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
  r[2] = p[2];

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
  var tempA = fromValues(a[0], a[1], a[2]);
  var tempB = fromValues(b[0], b[1], b[2]);

  normalize(tempA, tempA);
  normalize(tempB, tempB);

  var cosine = dot(tempA, tempB);

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link vec3.divide}
 * @function
 */
var div = exports.div = divide;

/**
 * Alias for {@link vec3.distance}
 * @function
 */
var dist = exports.dist = distance;

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
var sqrDist = exports.sqrDist = squaredDistance;

/**
 * Alias for {@link vec3.length}
 * @function
 */
var len = exports.len = length;

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
var sqrLen = exports.sqrLen = squaredLength;

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
var forEach = exports.forEach = function () {
  var vec = create();

  return function (a, stride, offset, count, fn, arg) {
    var i = void 0,
        l = void 0;
    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];
    }

    return a;
  };
}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = undefined;
exports.create = create;
exports.clone = clone;
exports.fromValues = fromValues;
exports.copy = copy;
exports.set = set;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.ceil = ceil;
exports.floor = floor;
exports.min = min;
exports.max = max;
exports.round = round;
exports.scale = scale;
exports.scaleAndAdd = scaleAndAdd;
exports.distance = distance;
exports.squaredDistance = squaredDistance;
exports.length = length;
exports.squaredLength = squaredLength;
exports.negate = negate;
exports.inverse = inverse;
exports.normalize = normalize;
exports.dot = dot;
exports.lerp = lerp;
exports.random = random;
exports.transformMat4 = transformMat4;
exports.transformQuat = transformQuat;
exports.str = str;
exports.exactEquals = exactEquals;
exports.equals = equals;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
function fromValues(x, y, z, w) {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.sqrt(x * x + y * y + z * z + w * w);
}

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.sqrt(x * x + y * y + z * z + w * w);
}

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
function random(out, vectorScale) {
  vectorScale = vectorScale || 1.0;

  //TODO: This is a pretty awful way of doing this. Find something better.
  out[0] = glMatrix.RANDOM();
  out[1] = glMatrix.RANDOM();
  out[2] = glMatrix.RANDOM();
  out[3] = glMatrix.RANDOM();
  normalize(out, out);
  scale(out, out, vectorScale);
  return out;
}

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
function transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];

  // calculate quat * vec
  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link vec4.divide}
 * @function
 */
var div = exports.div = divide;

/**
 * Alias for {@link vec4.distance}
 * @function
 */
var dist = exports.dist = distance;

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
var sqrDist = exports.sqrDist = squaredDistance;

/**
 * Alias for {@link vec4.length}
 * @function
 */
var len = exports.len = length;

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
var sqrLen = exports.sqrLen = squaredLength;

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
var forEach = exports.forEach = function () {
  var vec = create();

  return function (a, stride, offset, count, fn, arg) {
    var i = void 0,
        l = void 0;
    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];
    }

    return a;
  };
}();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vec4 = exports.vec3 = exports.vec2 = exports.quat = exports.mat4 = exports.mat3 = exports.mat2d = exports.mat2 = exports.glMatrix = undefined;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

var _mat = __webpack_require__(5);

var mat2 = _interopRequireWildcard(_mat);

var _mat2d = __webpack_require__(6);

var mat2d = _interopRequireWildcard(_mat2d);

var _mat2 = __webpack_require__(1);

var mat3 = _interopRequireWildcard(_mat2);

var _mat3 = __webpack_require__(7);

var mat4 = _interopRequireWildcard(_mat3);

var _quat = __webpack_require__(8);

var quat = _interopRequireWildcard(_quat);

var _vec = __webpack_require__(9);

var vec2 = _interopRequireWildcard(_vec);

var _vec2 = __webpack_require__(2);

var vec3 = _interopRequireWildcard(_vec2);

var _vec3 = __webpack_require__(3);

var vec4 = _interopRequireWildcard(_vec3);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.glMatrix = glMatrix;
exports.mat2 = mat2;
exports.mat2d = mat2d;
exports.mat3 = mat3;
exports.mat4 = mat4;
exports.quat = quat;
exports.vec2 = vec2;
exports.vec3 = vec3;
exports.vec4 = vec4; /**
                      * @fileoverview gl-matrix - High performance matrix and vector operations
                      * @author Brandon Jones
                      * @author Colin MacKenzie IV
                      * @version 2.4.0
                      */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sub = exports.mul = undefined;
exports.create = create;
exports.clone = clone;
exports.copy = copy;
exports.identity = identity;
exports.fromValues = fromValues;
exports.set = set;
exports.transpose = transpose;
exports.invert = invert;
exports.adjoint = adjoint;
exports.determinant = determinant;
exports.multiply = multiply;
exports.rotate = rotate;
exports.scale = scale;
exports.fromRotation = fromRotation;
exports.fromScaling = fromScaling;
exports.str = str;
exports.frob = frob;
exports.LDU = LDU;
exports.add = add;
exports.subtract = subtract;
exports.exactEquals = exactEquals;
exports.equals = equals;
exports.multiplyScalar = multiplyScalar;
exports.multiplyScalarAndAdd = multiplyScalarAndAdd;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
function fromValues(m00, m01, m10, m11) {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];

  // Calculate the determinant
  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;

  return out;
}

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;

  return out;
}

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
}

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link mat2.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sub = exports.mul = undefined;
exports.create = create;
exports.clone = clone;
exports.copy = copy;
exports.identity = identity;
exports.fromValues = fromValues;
exports.set = set;
exports.invert = invert;
exports.determinant = determinant;
exports.multiply = multiply;
exports.rotate = rotate;
exports.scale = scale;
exports.translate = translate;
exports.fromRotation = fromRotation;
exports.fromScaling = fromScaling;
exports.fromTranslation = fromTranslation;
exports.str = str;
exports.frob = frob;
exports.add = add;
exports.subtract = subtract;
exports.multiplyScalar = multiplyScalar;
exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
exports.exactEquals = exactEquals;
exports.equals = equals;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(6);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
function fromValues(a, b, c, d, tx, ty) {
  var out = new glMatrix.ARRAY_TYPE(6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];

  var det = aa * ad - ab * ac;
  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
}

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sub = exports.mul = undefined;
exports.create = create;
exports.clone = clone;
exports.copy = copy;
exports.fromValues = fromValues;
exports.set = set;
exports.identity = identity;
exports.transpose = transpose;
exports.invert = invert;
exports.adjoint = adjoint;
exports.determinant = determinant;
exports.multiply = multiply;
exports.translate = translate;
exports.scale = scale;
exports.rotate = rotate;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.fromTranslation = fromTranslation;
exports.fromScaling = fromScaling;
exports.fromRotation = fromRotation;
exports.fromXRotation = fromXRotation;
exports.fromYRotation = fromYRotation;
exports.fromZRotation = fromZRotation;
exports.fromRotationTranslation = fromRotationTranslation;
exports.getTranslation = getTranslation;
exports.getScaling = getScaling;
exports.getRotation = getRotation;
exports.fromRotationTranslationScale = fromRotationTranslationScale;
exports.fromRotationTranslationScaleOrigin = fromRotationTranslationScaleOrigin;
exports.fromQuat = fromQuat;
exports.frustum = frustum;
exports.perspective = perspective;
exports.perspectiveFromFieldOfView = perspectiveFromFieldOfView;
exports.ortho = ortho;
exports.lookAt = lookAt;
exports.targetTo = targetTo;
exports.str = str;
exports.frob = frob;
exports.add = add;
exports.subtract = subtract;
exports.multiplyScalar = multiplyScalar;
exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
exports.exactEquals = exactEquals;
exports.equals = equals;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 4x4 Matrix
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(16);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new glMatrix.ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];

    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];

  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

  return out;
}

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];

  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];

  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];

  // Cache only the current line of the second matrix
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00 = void 0,
      a01 = void 0,
      a02 = void 0,
      a03 = void 0;
  var a10 = void 0,
      a11 = void 0,
      a12 = void 0,
      a13 = void 0;
  var a20 = void 0,
      a21 = void 0,
      a22 = void 0,
      a23 = void 0;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];
    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];
    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];

    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;
    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;
    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;

    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];

  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.sqrt(x * x + y * y + z * z);
  var s = void 0,
      c = void 0,
      t = void 0;
  var a00 = void 0,
      a01 = void 0,
      a02 = void 0,
      a03 = void 0;
  var a10 = void 0,
      a11 = void 0,
      a12 = void 0,
      a13 = void 0;
  var a20 = void 0,
      a21 = void 0,
      a22 = void 0,
      a23 = void 0;
  var b00 = void 0,
      b01 = void 0,
      b02 = void 0;
  var b10 = void 0,
      b11 = void 0,
      b12 = void 0;
  var b20 = void 0,
      b21 = void 0,
      b22 = void 0;

  if (Math.abs(len) < glMatrix.EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];
  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];
  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];

  // Construct the elements of the rotation matrix
  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;

  // Perform rotation-specific matrix multiplication
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.sqrt(x * x + y * y + z * z);
  var s = void 0,
      c = void 0,
      t = void 0;

  if (Math.abs(len) < glMatrix.EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;

  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;

  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
}

/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];

  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);

  return out;
}

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
function getRotation(out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  var trace = mat[0] + mat[5] + mat[10];
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S;
    out[2] = (mat[1] - mat[4]) / S;
  } else if (mat[0] > mat[5] & mat[0] > mat[10]) {
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S;
    out[2] = (mat[8] + mat[2]) / S;
  } else if (mat[5] > mat[10]) {
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S;
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S;
  } else {
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;

  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;

  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;

  var sx = s[0];
  var sy = s[1];
  var sz = s[2];

  var ox = o[0];
  var oy = o[1];
  var oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
}

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;

  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;

  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;

  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;

  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;

  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;

  return out;
}

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2);
  var nf = 1 / (near - far);
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = 2 * far * near * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);

  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
  var x0 = void 0,
      x1 = void 0,
      x2 = void 0,
      y0 = void 0,
      y1 = void 0,
      y2 = void 0,
      z0 = void 0,
      z1 = void 0,
      z2 = void 0,
      len = void 0;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {
    return mat4.identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;

  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;

  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;

  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;

  return out;
}

/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];

  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];

  var len = z0 * z0 + z1 * z1 + z2 * z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
}

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];

  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link mat4.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setAxes = exports.sqlerp = exports.rotationTo = exports.equals = exports.exactEquals = exports.normalize = exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.lerp = exports.dot = exports.scale = exports.mul = exports.add = exports.set = exports.copy = exports.fromValues = exports.clone = undefined;
exports.create = create;
exports.identity = identity;
exports.setAxisAngle = setAxisAngle;
exports.getAxisAngle = getAxisAngle;
exports.multiply = multiply;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.calculateW = calculateW;
exports.slerp = slerp;
exports.invert = invert;
exports.conjugate = conjugate;
exports.fromMat3 = fromMat3;
exports.fromEuler = fromEuler;
exports.str = str;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

var _mat = __webpack_require__(1);

var mat3 = _interopRequireWildcard(_mat);

var _vec = __webpack_require__(2);

var vec3 = _interopRequireWildcard(_vec);

var _vec2 = __webpack_require__(3);

var vec4 = _interopRequireWildcard(_vec2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function create() {
  var out = new glMatrix.ARRAY_TYPE(4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);
  if (s != 0.0) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];

  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX(out, a, rad) {
  rad *= 0.5;

  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);

  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY(out, a, rad) {
  rad *= 0.5;

  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);

  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ(out, a, rad) {
  rad *= 0.5;

  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);

  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];

  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];

  var omega = void 0,
      cosom = void 0,
      sinom = void 0,
      scale0 = void 0,
      scale1 = void 0;

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  // adjust signs (if necessary)
  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  // calculate coefficients
  if (1.0 - cosom > 0.000001) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;

  return out;
}

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0;

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot = void 0;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)
    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;

    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}

/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */
function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;

  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);

  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;

  return out;
}

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
var clone = exports.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
var fromValues = exports.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
var copy = exports.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
var set = exports.set = vec4.set;

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
var add = exports.add = vec4.add;

/**
 * Alias for {@link quat.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
var scale = exports.scale = vec4.scale;

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
var dot = exports.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
var lerp = exports.lerp = vec4.lerp;

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */
var length = exports.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
var len = exports.len = length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
var squaredLength = exports.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
var sqrLen = exports.sqrLen = squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
var normalize = exports.normalize = vec4.normalize;

/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
var exactEquals = exports.exactEquals = vec4.exactEquals;

/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
var equals = exports.equals = vec4.equals;

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
var rotationTo = exports.rotationTo = function () {
  var tmpvec3 = vec3.create();
  var xUnitVec3 = vec3.fromValues(1, 0, 0);
  var yUnitVec3 = vec3.fromValues(0, 1, 0);

  return function (out, a, b) {
    var dot = vec3.dot(a, b);
    if (dot < -0.999999) {
      vec3.cross(tmpvec3, xUnitVec3, a);
      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);
      vec3.normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      vec3.cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
var sqlerp = exports.sqlerp = function () {
  var temp1 = create();
  var temp2 = create();

  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));

    return out;
  };
}();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
var setAxes = exports.setAxes = function () {
  var matr = mat3.create();

  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];

    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];

    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];

    return normalize(out, fromMat3(out, matr));
  };
}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = undefined;
exports.create = create;
exports.clone = clone;
exports.fromValues = fromValues;
exports.copy = copy;
exports.set = set;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.ceil = ceil;
exports.floor = floor;
exports.min = min;
exports.max = max;
exports.round = round;
exports.scale = scale;
exports.scaleAndAdd = scaleAndAdd;
exports.distance = distance;
exports.squaredDistance = squaredDistance;
exports.length = length;
exports.squaredLength = squaredLength;
exports.negate = negate;
exports.inverse = inverse;
exports.normalize = normalize;
exports.dot = dot;
exports.cross = cross;
exports.lerp = lerp;
exports.random = random;
exports.transformMat2 = transformMat2;
exports.transformMat2d = transformMat2d;
exports.transformMat3 = transformMat3;
exports.transformMat4 = transformMat4;
exports.str = str;
exports.exactEquals = exactEquals;
exports.equals = equals;

var _common = __webpack_require__(0);

var glMatrix = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
function create() {
  var out = new glMatrix.ARRAY_TYPE(2);
  out[0] = 0;
  out[1] = 0;
  return out;
}

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

function clone(a) {
  var out = new glMatrix.ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
function fromValues(x, y) {
  var out = new glMatrix.ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
};

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
};

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.sqrt(x * x + y * y);
};

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
};

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  var x = a[0],
      y = a[1];
  return Math.sqrt(x * x + y * y);
};

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
};

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
  }
  return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
function random(out, scale) {
  scale = scale || 1.0;
  var r = glMatrix.RANDOM() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}

/**
 * Alias for {@link vec2.length}
 * @function
 */
var len = exports.len = length;

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
var sub = exports.sub = subtract;

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
var mul = exports.mul = multiply;

/**
 * Alias for {@link vec2.divide}
 * @function
 */
var div = exports.div = divide;

/**
 * Alias for {@link vec2.distance}
 * @function
 */
var dist = exports.dist = distance;

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
var sqrDist = exports.sqrDist = squaredDistance;

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
var sqrLen = exports.sqrLen = squaredLength;

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
var forEach = exports.forEach = function () {
  var vec = create();

  return function (a, stride, offset, count, fn, arg) {
    var i = void 0,
        l = void 0;
    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];a[i + 1] = vec[1];
    }

    return a;
  };
}();

/***/ })
/******/ ]);
});
},{}],49:[function(require,module,exports){
'use strict'

var createUniformWrapper   = require('./lib/create-uniforms')
var createAttributeWrapper = require('./lib/create-attributes')
var makeReflect            = require('./lib/reflect')
var shaderCache            = require('./lib/shader-cache')
var runtime                = require('./lib/runtime-reflect')
var GLError                = require("./lib/GLError")

//Shader object
function Shader(gl) {
  this.gl         = gl
  this.gl.lastAttribCount = 0  // fixme where else should we store info, safe but not nice on the gl object

  //Default initialize these to null
  this._vref      =
  this._fref      =
  this._relink    =
  this.vertShader =
  this.fragShader =
  this.program    =
  this.attributes =
  this.uniforms   =
  this.types      = null
}

var proto = Shader.prototype

proto.bind = function() {
  if(!this.program) {
    this._relink()
  }

  // ensuring that we have the right number of enabled vertex attributes
  var i
  var newAttribCount = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES) // more robust approach
  //var newAttribCount = Object.keys(this.attributes).length // avoids the probably immaterial introspection slowdown
  var oldAttribCount = this.gl.lastAttribCount
  if(newAttribCount > oldAttribCount) {
    for(i = oldAttribCount; i < newAttribCount; i++) {
      this.gl.enableVertexAttribArray(i)
    }
  } else if(oldAttribCount > newAttribCount) {
    for(i = newAttribCount; i < oldAttribCount; i++) {
      this.gl.disableVertexAttribArray(i)
    }
  }

  this.gl.lastAttribCount = newAttribCount

  this.gl.useProgram(this.program)
}

proto.dispose = function() {

  // disabling vertex attributes so new shader starts with zero
  // and it's also useful if all shaders are disposed but the
  // gl context is reused for subsequent replotting
  var oldAttribCount = this.gl.lastAttribCount
  for (var i = 0; i < oldAttribCount; i++) {
    this.gl.disableVertexAttribArray(i)
  }
  this.gl.lastAttribCount = 0

  if(this._fref) {
    this._fref.dispose()
  }
  if(this._vref) {
    this._vref.dispose()
  }
  this.attributes =
  this.types      =
  this.vertShader =
  this.fragShader =
  this.program    =
  this._relink    =
  this._fref      =
  this._vref      = null
}

function compareAttributes(a, b) {
  if(a.name < b.name) {
    return -1
  }
  return 1
}

//Update export hook for glslify-live
proto.update = function(
    vertSource
  , fragSource
  , uniforms
  , attributes) {

  //If only one object passed, assume glslify style output
  if(!fragSource || arguments.length === 1) {
    var obj = vertSource
    vertSource = obj.vertex
    fragSource = obj.fragment
    uniforms   = obj.uniforms
    attributes = obj.attributes
  }

  var wrapper = this
  var gl      = wrapper.gl

  //Compile vertex and fragment shaders
  var pvref = wrapper._vref
  wrapper._vref = shaderCache.shader(gl, gl.VERTEX_SHADER, vertSource)
  if(pvref) {
    pvref.dispose()
  }
  wrapper.vertShader = wrapper._vref.shader
  var pfref = this._fref
  wrapper._fref = shaderCache.shader(gl, gl.FRAGMENT_SHADER, fragSource)
  if(pfref) {
    pfref.dispose()
  }
  wrapper.fragShader = wrapper._fref.shader

  //If uniforms/attributes is not specified, use RT reflection
  if(!uniforms || !attributes) {

    //Create initial test program
    var testProgram = gl.createProgram()
    gl.attachShader(testProgram, wrapper.fragShader)
    gl.attachShader(testProgram, wrapper.vertShader)
    gl.linkProgram(testProgram)
    if(!gl.getProgramParameter(testProgram, gl.LINK_STATUS)) {
      var errLog = gl.getProgramInfoLog(testProgram)
      throw new GLError(errLog, 'Error linking program:' + errLog)
    }

    //Load data from runtime
    uniforms   = uniforms   || runtime.uniforms(gl, testProgram)
    attributes = attributes || runtime.attributes(gl, testProgram)

    //Release test program
    gl.deleteProgram(testProgram)
  }

  //Sort attributes lexicographically
  // overrides undefined WebGL behavior for attribute locations
  attributes = attributes.slice()
  attributes.sort(compareAttributes)

  //Convert attribute types, read out locations
  var attributeUnpacked  = []
  var attributeNames     = []
  var attributeLocations = []
  var i
  for(i=0; i<attributes.length; ++i) {
    var attr = attributes[i]
    if(attr.type.indexOf('mat') >= 0) {
      var size = attr.type.charAt(attr.type.length-1)|0
      var locVector = new Array(size)
      for(var j=0; j<size; ++j) {
        locVector[j] = attributeLocations.length
        attributeNames.push(attr.name + '[' + j + ']')
        if(typeof attr.location === 'number') {
          attributeLocations.push(attr.location + j)
        } else if(Array.isArray(attr.location) &&
                  attr.location.length === size &&
                  typeof attr.location[j] === 'number') {
          attributeLocations.push(attr.location[j]|0)
        } else {
          attributeLocations.push(-1)
        }
      }
      attributeUnpacked.push({
        name: attr.name,
        type: attr.type,
        locations: locVector
      })
    } else {
      attributeUnpacked.push({
        name: attr.name,
        type: attr.type,
        locations: [ attributeLocations.length ]
      })
      attributeNames.push(attr.name)
      if(typeof attr.location === 'number') {
        attributeLocations.push(attr.location|0)
      } else {
        attributeLocations.push(-1)
      }
    }
  }

  //For all unspecified attributes, assign them lexicographically min attribute
  var curLocation = 0
  for(i=0; i<attributeLocations.length; ++i) {
    if(attributeLocations[i] < 0) {
      while(attributeLocations.indexOf(curLocation) >= 0) {
        curLocation += 1
      }
      attributeLocations[i] = curLocation
    }
  }

  //Rebuild program and recompute all uniform locations
  var uniformLocations = new Array(uniforms.length)
  function relink() {
    wrapper.program = shaderCache.program(
        gl
      , wrapper._vref
      , wrapper._fref
      , attributeNames
      , attributeLocations)

    for(var i=0; i<uniforms.length; ++i) {
      uniformLocations[i] = gl.getUniformLocation(
          wrapper.program
        , uniforms[i].name)
    }
  }

  //Perform initial linking, reuse program used for reflection
  relink()

  //Save relinking procedure, defer until runtime
  wrapper._relink = relink

  //Generate type info
  wrapper.types = {
    uniforms:   makeReflect(uniforms),
    attributes: makeReflect(attributes)
  }

  //Generate attribute wrappers
  wrapper.attributes = createAttributeWrapper(
      gl
    , wrapper
    , attributeUnpacked
    , attributeLocations)

  //Generate uniform wrappers
  Object.defineProperty(wrapper, 'uniforms', createUniformWrapper(
      gl
    , wrapper
    , uniforms
    , uniformLocations))
}

//Compiles and links a shader program with the given attribute and vertex list
function createShader(
    gl
  , vertSource
  , fragSource
  , uniforms
  , attributes) {

  var shader = new Shader(gl)

  shader.update(
      vertSource
    , fragSource
    , uniforms
    , attributes)

  return shader
}

module.exports = createShader

},{"./lib/GLError":50,"./lib/create-attributes":51,"./lib/create-uniforms":52,"./lib/reflect":53,"./lib/runtime-reflect":54,"./lib/shader-cache":55}],50:[function(require,module,exports){
function GLError (rawError, shortMessage, longMessage) {
    this.shortMessage = shortMessage || ''
    this.longMessage = longMessage || ''
    this.rawError = rawError || ''
    this.message =
      'gl-shader: ' + (shortMessage || rawError || '') +
      (longMessage ? '\n'+longMessage : '')
    this.stack = (new Error()).stack
}
GLError.prototype = new Error
GLError.prototype.name = 'GLError'
GLError.prototype.constructor = GLError
module.exports = GLError

},{}],51:[function(require,module,exports){
'use strict'

module.exports = createAttributeWrapper

var GLError = require("./GLError")

function ShaderAttribute(
    gl
  , wrapper
  , index
  , locations
  , dimension
  , constFunc) {
  this._gl        = gl
  this._wrapper   = wrapper
  this._index     = index
  this._locations = locations
  this._dimension = dimension
  this._constFunc = constFunc
}

var proto = ShaderAttribute.prototype

proto.pointer = function setAttribPointer(
    type
  , normalized
  , stride
  , offset) {

  var self      = this
  var gl        = self._gl
  var location  = self._locations[self._index]

  gl.vertexAttribPointer(
      location
    , self._dimension
    , type || gl.FLOAT
    , !!normalized
    , stride || 0
    , offset || 0)
  gl.enableVertexAttribArray(location)
}

proto.set = function(x0, x1, x2, x3) {
  return this._constFunc(this._locations[this._index], x0, x1, x2, x3)
}

Object.defineProperty(proto, 'location', {
  get: function() {
    return this._locations[this._index]
  }
  , set: function(v) {
    if(v !== this._locations[this._index]) {
      this._locations[this._index] = v|0
      this._wrapper.program = null
    }
    return v|0
  }
})

//Adds a vector attribute to obj
function addVectorAttribute(
    gl
  , wrapper
  , index
  , locations
  , dimension
  , obj
  , name) {

  //Construct constant function
  var constFuncArgs = [ 'gl', 'v' ]
  var varNames = []
  for(var i=0; i<dimension; ++i) {
    constFuncArgs.push('x'+i)
    varNames.push('x'+i)
  }
  constFuncArgs.push(
    'if(x0.length===void 0){return gl.vertexAttrib' +
    dimension + 'f(v,' +
    varNames.join() +
    ')}else{return gl.vertexAttrib' +
    dimension +
    'fv(v,x0)}')
  var constFunc = Function.apply(null, constFuncArgs)

  //Create attribute wrapper
  var attr = new ShaderAttribute(
      gl
    , wrapper
    , index
    , locations
    , dimension
    , constFunc)

  //Create accessor
  Object.defineProperty(obj, name, {
    set: function(x) {
      gl.disableVertexAttribArray(locations[index])
      constFunc(gl, locations[index], x)
      return x
    }
    , get: function() {
      return attr
    }
    , enumerable: true
  })
}

function addMatrixAttribute(
    gl
  , wrapper
  , index
  , locations
  , dimension
  , obj
  , name) {

  var parts = new Array(dimension)
  var attrs = new Array(dimension)
  for(var i=0; i<dimension; ++i) {
    addVectorAttribute(
        gl
      , wrapper
      , index[i]
      , locations
      , dimension
      , parts
      , i)
    attrs[i] = parts[i]
  }

  Object.defineProperty(parts, 'location', {
    set: function(v) {
      if(Array.isArray(v)) {
        for(var i=0; i<dimension; ++i) {
          attrs[i].location = v[i]
        }
      } else {
        for(var i=0; i<dimension; ++i) {
          attrs[i].location = v + i
        }
      }
      return v
    }
    , get: function() {
      var result = new Array(dimension)
      for(var i=0; i<dimension; ++i) {
        result[i] = locations[index[i]]
      }
      return result
    }
    , enumerable: true
  })

  parts.pointer = function(type, normalized, stride, offset) {
    type       = type || gl.FLOAT
    normalized = !!normalized
    stride     = stride || (dimension * dimension)
    offset     = offset || 0
    for(var i=0; i<dimension; ++i) {
      var location = locations[index[i]]
      gl.vertexAttribPointer(
            location
          , dimension
          , type
          , normalized
          , stride
          , offset + i * dimension)
      gl.enableVertexAttribArray(location)
    }
  }

  var scratch = new Array(dimension)
  var vertexAttrib = gl['vertexAttrib' + dimension + 'fv']

  Object.defineProperty(obj, name, {
    set: function(x) {
      for(var i=0; i<dimension; ++i) {
        var loc = locations[index[i]]
        gl.disableVertexAttribArray(loc)
        if(Array.isArray(x[0])) {
          vertexAttrib.call(gl, loc, x[i])
        } else {
          for(var j=0; j<dimension; ++j) {
            scratch[j] = x[dimension*i + j]
          }
          vertexAttrib.call(gl, loc, scratch)
        }
      }
      return x
    }
    , get: function() {
      return parts
    }
    , enumerable: true
  })
}

//Create shims for attributes
function createAttributeWrapper(
    gl
  , wrapper
  , attributes
  , locations) {

  var obj = {}
  for(var i=0, n=attributes.length; i<n; ++i) {

    var a = attributes[i]
    var name = a.name
    var type = a.type
    var locs = a.locations

    switch(type) {
      case 'bool':
      case 'int':
      case 'float':
        addVectorAttribute(
            gl
          , wrapper
          , locs[0]
          , locations
          , 1
          , obj
          , name)
      break

      default:
        if(type.indexOf('vec') >= 0) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)
          }
          addVectorAttribute(
              gl
            , wrapper
            , locs[0]
            , locations
            , d
            , obj
            , name)
        } else if(type.indexOf('mat') >= 0) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)
          }
          addMatrixAttribute(
              gl
            , wrapper
            , locs
            , locations
            , d
            , obj
            , name)
        } else {
          throw new GLError('', 'Unknown data type for attribute ' + name + ': ' + type)
        }
      break
    }
  }
  return obj
}

},{"./GLError":50}],52:[function(require,module,exports){
'use strict'

var coallesceUniforms = require('./reflect')
var GLError = require("./GLError")

module.exports = createUniformWrapper

//Binds a function and returns a value
function identity(x) {
  var c = new Function('y', 'return function(){return y}')
  return c(x)
}

function makeVector(length, fill) {
  var result = new Array(length)
  for(var i=0; i<length; ++i) {
    result[i] = fill
  }
  return result
}

//Create shims for uniforms
function createUniformWrapper(gl, wrapper, uniforms, locations) {

  function makeGetter(index) {
    var proc = new Function(
        'gl'
      , 'wrapper'
      , 'locations'
      , 'return function(){return gl.getUniform(wrapper.program,locations[' + index + '])}')
    return proc(gl, wrapper, locations)
  }

  function makePropSetter(path, index, type) {
    switch(type) {
      case 'bool':
      case 'int':
      case 'sampler2D':
      case 'samplerCube':
        return 'gl.uniform1i(locations[' + index + '],obj' + path + ')'
      case 'float':
        return 'gl.uniform1f(locations[' + index + '],obj' + path + ')'
      default:
        var vidx = type.indexOf('vec')
        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new GLError('', 'Invalid data type')
          }
          switch(type.charAt(0)) {
            case 'b':
            case 'i':
              return 'gl.uniform' + d + 'iv(locations[' + index + '],obj' + path + ')'
            case 'v':
              return 'gl.uniform' + d + 'fv(locations[' + index + '],obj' + path + ')'
            default:
              throw new GLError('', 'Unrecognized data type for vector ' + name + ': ' + type)
          }
        } else if(type.indexOf('mat') === 0 && type.length === 4) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)
          }
          return 'gl.uniformMatrix' + d + 'fv(locations[' + index + '],false,obj' + path + ')'
        } else {
          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)
        }
      break
    }
  }

  function enumerateIndices(prefix, type) {
    if(typeof type !== 'object') {
      return [ [prefix, type] ]
    }
    var indices = []
    for(var id in type) {
      var prop = type[id]
      var tprefix = prefix
      if(parseInt(id) + '' === id) {
        tprefix += '[' + id + ']'
      } else {
        tprefix += '.' + id
      }
      if(typeof prop === 'object') {
        indices.push.apply(indices, enumerateIndices(tprefix, prop))
      } else {
        indices.push([tprefix, prop])
      }
    }
    return indices
  }

  function makeSetter(type) {
    var code = [ 'return function updateProperty(obj){' ]
    var indices = enumerateIndices('', type)
    for(var i=0; i<indices.length; ++i) {
      var item = indices[i]
      var path = item[0]
      var idx  = item[1]
      if(locations[idx]) {
        code.push(makePropSetter(path, idx, uniforms[idx].type))
      }
    }
    code.push('return obj}')
    var proc = new Function('gl', 'locations', code.join('\n'))
    return proc(gl, locations)
  }

  function defaultValue(type) {
    switch(type) {
      case 'bool':
        return false
      case 'int':
      case 'sampler2D':
      case 'samplerCube':
        return 0
      case 'float':
        return 0.0
      default:
        var vidx = type.indexOf('vec')
        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new GLError('', 'Invalid data type')
          }
          if(type.charAt(0) === 'b') {
            return makeVector(d, false)
          }
          return makeVector(d, 0)
        } else if(type.indexOf('mat') === 0 && type.length === 4) {
          var d = type.charCodeAt(type.length-1) - 48
          if(d < 2 || d > 4) {
            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)
          }
          return makeVector(d*d, 0)
        } else {
          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)
        }
      break
    }
  }

  function storeProperty(obj, prop, type) {
    if(typeof type === 'object') {
      var child = processObject(type)
      Object.defineProperty(obj, prop, {
        get: identity(child),
        set: makeSetter(type),
        enumerable: true,
        configurable: false
      })
    } else {
      if(locations[type]) {
        Object.defineProperty(obj, prop, {
          get: makeGetter(type),
          set: makeSetter(type),
          enumerable: true,
          configurable: false
        })
      } else {
        obj[prop] = defaultValue(uniforms[type].type)
      }
    }
  }

  function processObject(obj) {
    var result
    if(Array.isArray(obj)) {
      result = new Array(obj.length)
      for(var i=0; i<obj.length; ++i) {
        storeProperty(result, i, obj[i])
      }
    } else {
      result = {}
      for(var id in obj) {
        storeProperty(result, id, obj[id])
      }
    }
    return result
  }

  //Return data
  var coallesced = coallesceUniforms(uniforms, true)
  return {
    get: identity(processObject(coallesced)),
    set: makeSetter(coallesced),
    enumerable: true,
    configurable: true
  }
}

},{"./GLError":50,"./reflect":53}],53:[function(require,module,exports){
'use strict'

module.exports = makeReflectTypes

//Construct type info for reflection.
//
// This iterates over the flattened list of uniform type values and smashes them into a JSON object.
//
// The leaves of the resulting object are either indices or type strings representing primitive glslify types
function makeReflectTypes(uniforms, useIndex) {
  var obj = {}
  for(var i=0; i<uniforms.length; ++i) {
    var n = uniforms[i].name
    var parts = n.split(".")
    var o = obj
    for(var j=0; j<parts.length; ++j) {
      var x = parts[j].split("[")
      if(x.length > 1) {
        if(!(x[0] in o)) {
          o[x[0]] = []
        }
        o = o[x[0]]
        for(var k=1; k<x.length; ++k) {
          var y = parseInt(x[k])
          if(k<x.length-1 || j<parts.length-1) {
            if(!(y in o)) {
              if(k < x.length-1) {
                o[y] = []
              } else {
                o[y] = {}
              }
            }
            o = o[y]
          } else {
            if(useIndex) {
              o[y] = i
            } else {
              o[y] = uniforms[i].type
            }
          }
        }
      } else if(j < parts.length-1) {
        if(!(x[0] in o)) {
          o[x[0]] = {}
        }
        o = o[x[0]]
      } else {
        if(useIndex) {
          o[x[0]] = i
        } else {
          o[x[0]] = uniforms[i].type
        }
      }
    }
  }
  return obj
}
},{}],54:[function(require,module,exports){
'use strict'

exports.uniforms    = runtimeUniforms
exports.attributes  = runtimeAttributes

var GL_TO_GLSL_TYPES = {
  'FLOAT':       'float',
  'FLOAT_VEC2':  'vec2',
  'FLOAT_VEC3':  'vec3',
  'FLOAT_VEC4':  'vec4',
  'INT':         'int',
  'INT_VEC2':    'ivec2',
  'INT_VEC3':    'ivec3',
  'INT_VEC4':    'ivec4',
  'BOOL':        'bool',
  'BOOL_VEC2':   'bvec2',
  'BOOL_VEC3':   'bvec3',
  'BOOL_VEC4':   'bvec4',
  'FLOAT_MAT2':  'mat2',
  'FLOAT_MAT3':  'mat3',
  'FLOAT_MAT4':  'mat4',
  'SAMPLER_2D':  'sampler2D',
  'SAMPLER_CUBE':'samplerCube'
}

var GL_TABLE = null

function getType(gl, type) {
  if(!GL_TABLE) {
    var typeNames = Object.keys(GL_TO_GLSL_TYPES)
    GL_TABLE = {}
    for(var i=0; i<typeNames.length; ++i) {
      var tn = typeNames[i]
      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn]
    }
  }
  return GL_TABLE[type]
}

function runtimeUniforms(gl, program) {
  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)
  var result = []
  for(var i=0; i<numUniforms; ++i) {
    var info = gl.getActiveUniform(program, i)
    if(info) {
      var type = getType(gl, info.type)
      if(info.size > 1) {
        for(var j=0; j<info.size; ++j) {
          result.push({
            name: info.name.replace('[0]', '[' + j + ']'),
            type: type
          })
        }
      } else {
        result.push({
          name: info.name,
          type: type
        })
      }
    }
  }
  return result
}

function runtimeAttributes(gl, program) {
  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)
  var result = []
  for(var i=0; i<numAttributes; ++i) {
    var info = gl.getActiveAttrib(program, i)
    if(info) {
      result.push({
        name: info.name,
        type: getType(gl, info.type)
      })
    }
  }
  return result
}

},{}],55:[function(require,module,exports){
'use strict'

exports.shader   = getShaderReference
exports.program  = createProgram

var GLError = require("./GLError")
var formatCompilerError = require('gl-format-compiler-error');

var weakMap = typeof WeakMap === 'undefined' ? require('weakmap-shim') : WeakMap
var CACHE = new weakMap()

var SHADER_COUNTER = 0

function ShaderReference(id, src, type, shader, programs, count, cache) {
  this.id       = id
  this.src      = src
  this.type     = type
  this.shader   = shader
  this.count    = count
  this.programs = []
  this.cache    = cache
}

ShaderReference.prototype.dispose = function() {
  if(--this.count === 0) {
    var cache    = this.cache
    var gl       = cache.gl

    //Remove program references
    var programs = this.programs
    for(var i=0, n=programs.length; i<n; ++i) {
      var p = cache.programs[programs[i]]
      if(p) {
        delete cache.programs[i]
        gl.deleteProgram(p)
      }
    }

    //Remove shader reference
    gl.deleteShader(this.shader)
    delete cache.shaders[(this.type === gl.FRAGMENT_SHADER)|0][this.src]
  }
}

function ContextCache(gl) {
  this.gl       = gl
  this.shaders  = [{}, {}]
  this.programs = {}
}

var proto = ContextCache.prototype

function compileShader(gl, type, src) {
  var shader = gl.createShader(type)
  gl.shaderSource(shader, src)
  gl.compileShader(shader)
  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(shader)
    try {
        var fmt = formatCompilerError(errLog, src, type);
    } catch (e){
        console.warn('Failed to format compiler error: ' + e);
        throw new GLError(errLog, 'Error compiling shader:\n' + errLog)
    }
    throw new GLError(errLog, fmt.short, fmt.long)
  }
  return shader
}

proto.getShaderReference = function(type, src) {
  var gl      = this.gl
  var shaders = this.shaders[(type === gl.FRAGMENT_SHADER)|0]
  var shader  = shaders[src]
  if(!shader || !gl.isShader(shader.shader)) {
    var shaderObj = compileShader(gl, type, src)
    shader = shaders[src] = new ShaderReference(
      SHADER_COUNTER++,
      src,
      type,
      shaderObj,
      [],
      1,
      this)
  } else {
    shader.count += 1
  }
  return shader
}

function linkProgram(gl, vshader, fshader, attribs, locations) {
  var program = gl.createProgram()
  gl.attachShader(program, vshader)
  gl.attachShader(program, fshader)
  for(var i=0; i<attribs.length; ++i) {
    gl.bindAttribLocation(program, locations[i], attribs[i])
  }
  gl.linkProgram(program)
  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var errLog = gl.getProgramInfoLog(program)
    throw new GLError(errLog, 'Error linking program: ' + errLog)
  }
  return program
}

proto.getProgram = function(vref, fref, attribs, locations) {
  var token = [vref.id, fref.id, attribs.join(':'), locations.join(':')].join('@')
  var prog  = this.programs[token]
  if(!prog || !this.gl.isProgram(prog)) {
    this.programs[token] = prog = linkProgram(
      this.gl,
      vref.shader,
      fref.shader,
      attribs,
      locations)
    vref.programs.push(token)
    fref.programs.push(token)
  }
  return prog
}

function getCache(gl) {
  var ctxCache = CACHE.get(gl)
  if(!ctxCache) {
    ctxCache = new ContextCache(gl)
    CACHE.set(gl, ctxCache)
  }
  return ctxCache
}

function getShaderReference(gl, type, src) {
  return getCache(gl).getShaderReference(type, src)
}

function createProgram(gl, vref, fref, attribs, locations) {
  return getCache(gl).getProgram(vref, fref, attribs, locations)
}

},{"./GLError":50,"gl-format-compiler-error":21,"weakmap-shim":91}],56:[function(require,module,exports){
'use strict'

var ndarray = require('ndarray')
var ops     = require('ndarray-ops')
var pool    = require('typedarray-pool')

module.exports = createTexture2D

var linearTypes = null
var filterTypes = null
var wrapTypes   = null

function lazyInitLinearTypes(gl) {
  linearTypes = [
    gl.LINEAR,
    gl.NEAREST_MIPMAP_LINEAR,
    gl.LINEAR_MIPMAP_NEAREST,
    gl.LINEAR_MIPMAP_NEAREST
  ]
  filterTypes = [
    gl.NEAREST,
    gl.LINEAR,
    gl.NEAREST_MIPMAP_NEAREST,
    gl.NEAREST_MIPMAP_LINEAR,
    gl.LINEAR_MIPMAP_NEAREST,
    gl.LINEAR_MIPMAP_LINEAR
  ]
  wrapTypes = [
    gl.REPEAT,
    gl.CLAMP_TO_EDGE,
    gl.MIRRORED_REPEAT
  ]
}

function acceptTextureDOM (obj) {
  return (
    ('undefined' != typeof HTMLCanvasElement && obj instanceof HTMLCanvasElement) ||
    ('undefined' != typeof HTMLImageElement && obj instanceof HTMLImageElement) ||
    ('undefined' != typeof HTMLVideoElement && obj instanceof HTMLVideoElement) ||
    ('undefined' != typeof ImageData && obj instanceof ImageData))
}

var convertFloatToUint8 = function(out, inp) {
  ops.muls(out, inp, 255.0)
}

function reshapeTexture(tex, w, h) {
  var gl = tex.gl
  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
  if(w < 0 || w > maxSize || h < 0 || h > maxSize) {
    throw new Error('gl-texture2d: Invalid texture size')
  }
  tex._shape = [w, h]
  tex.bind()
  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null)
  tex._mipLevels = [0]
  return tex
}

function Texture2D(gl, handle, width, height, format, type) {
  this.gl = gl
  this.handle = handle
  this.format = format
  this.type = type
  this._shape = [width, height]
  this._mipLevels = [0]
  this._magFilter = gl.NEAREST
  this._minFilter = gl.NEAREST
  this._wrapS = gl.CLAMP_TO_EDGE
  this._wrapT = gl.CLAMP_TO_EDGE
  this._anisoSamples = 1

  var parent = this
  var wrapVector = [this._wrapS, this._wrapT]
  Object.defineProperties(wrapVector, [
    {
      get: function() {
        return parent._wrapS
      },
      set: function(v) {
        return parent.wrapS = v
      }
    },
    {
      get: function() {
        return parent._wrapT
      },
      set: function(v) {
        return parent.wrapT = v
      }
    }
  ])
  this._wrapVector = wrapVector

  var shapeVector = [this._shape[0], this._shape[1]]
  Object.defineProperties(shapeVector, [
    {
      get: function() {
        return parent._shape[0]
      },
      set: function(v) {
        return parent.width = v
      }
    },
    {
      get: function() {
        return parent._shape[1]
      },
      set: function(v) {
        return parent.height = v
      }
    }
  ])
  this._shapeVector = shapeVector
}

var proto = Texture2D.prototype

Object.defineProperties(proto, {
  minFilter: {
    get: function() {
      return this._minFilter
    },
    set: function(v) {
      this.bind()
      var gl = this.gl
      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {
        if(!gl.getExtension('OES_texture_float_linear')) {
          v = gl.NEAREST
        }
      }
      if(filterTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown filter mode ' + v)
      }
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v)
      return this._minFilter = v
    }
  },
  magFilter: {
    get: function() {
      return this._magFilter
    },
    set: function(v) {
      this.bind()
      var gl = this.gl
      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {
        if(!gl.getExtension('OES_texture_float_linear')) {
          v = gl.NEAREST
        }
      }
      if(filterTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown filter mode ' + v)
      }
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v)
      return this._magFilter = v
    }
  },
  mipSamples: {
    get: function() {
      return this._anisoSamples
    },
    set: function(i) {
      var psamples = this._anisoSamples
      this._anisoSamples = Math.max(i, 1)|0
      if(psamples !== this._anisoSamples) {
        var ext = this.gl.getExtension('EXT_texture_filter_anisotropic')
        if(ext) {
          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples)
        }
      }
      return this._anisoSamples
    }
  },
  wrapS: {
    get: function() {
      return this._wrapS
    },
    set: function(v) {
      this.bind()
      if(wrapTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown wrap mode ' + v)
      }
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v)
      return this._wrapS = v
    }
  },
  wrapT: {
    get: function() {
      return this._wrapT
    },
    set: function(v) {
      this.bind()
      if(wrapTypes.indexOf(v) < 0) {
        throw new Error('gl-texture2d: Unknown wrap mode ' + v)
      }
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v)
      return this._wrapT = v
    }
  },
  wrap: {
    get: function() {
      return this._wrapVector
    },
    set: function(v) {
      if(!Array.isArray(v)) {
        v = [v,v]
      }
      if(v.length !== 2) {
        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns')
      }
      for(var i=0; i<2; ++i) {
        if(wrapTypes.indexOf(v[i]) < 0) {
          throw new Error('gl-texture2d: Unknown wrap mode ' + v)
        }
      }
      this._wrapS = v[0]
      this._wrapT = v[1]

      var gl = this.gl
      this.bind()
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS)
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT)

      return v
    }
  },
  shape: {
    get: function() {
      return this._shapeVector
    },
    set: function(x) {
      if(!Array.isArray(x)) {
        x = [x|0,x|0]
      } else {
        if(x.length !== 2) {
          throw new Error('gl-texture2d: Invalid texture shape')
        }
      }
      reshapeTexture(this, x[0]|0, x[1]|0)
      return [x[0]|0, x[1]|0]
    }
  },
  width: {
    get: function() {
      return this._shape[0]
    },
    set: function(w) {
      w = w|0
      reshapeTexture(this, w, this._shape[1])
      return w
    }
  },
  height: {
    get: function() {
      return this._shape[1]
    },
    set: function(h) {
      h = h|0
      reshapeTexture(this, this._shape[0], h)
      return h
    }
  }
})

proto.bind = function(unit) {
  var gl = this.gl
  if(unit !== undefined) {
    gl.activeTexture(gl.TEXTURE0 + (unit|0))
  }
  gl.bindTexture(gl.TEXTURE_2D, this.handle)
  if(unit !== undefined) {
    return (unit|0)
  }
  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0
}

proto.dispose = function() {
  this.gl.deleteTexture(this.handle)
}

proto.generateMipmap = function() {
  this.bind()
  this.gl.generateMipmap(this.gl.TEXTURE_2D)

  //Update mip levels
  var l = Math.min(this._shape[0], this._shape[1])
  for(var i=0; l>0; ++i, l>>>=1) {
    if(this._mipLevels.indexOf(i) < 0) {
      this._mipLevels.push(i)
    }
  }
}

proto.setPixels = function(data, x_off, y_off, mip_level) {
  var gl = this.gl
  this.bind()
  if(Array.isArray(x_off)) {
    mip_level = y_off
    y_off = x_off[1]|0
    x_off = x_off[0]|0
  } else {
    x_off = x_off || 0
    y_off = y_off || 0
  }
  mip_level = mip_level || 0
  var directData = acceptTextureDOM(data) ? data : data.raw
  if(directData) {
    var needsMip = this._mipLevels.indexOf(mip_level) < 0
    if(needsMip) {
      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, directData)
      this._mipLevels.push(mip_level)
    } else {
      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, directData)
    }
  } else if(data.shape && data.stride && data.data) {
    if(data.shape.length < 2 ||
       x_off + data.shape[1] > this._shape[1]>>>mip_level ||
       y_off + data.shape[0] > this._shape[0]>>>mip_level ||
       x_off < 0 ||
       y_off < 0) {
      throw new Error('gl-texture2d: Texture dimensions are out of bounds')
    }
    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data)
  } else {
    throw new Error('gl-texture2d: Unsupported data type')
  }
}


function isPacked(shape, stride) {
  if(shape.length === 3) {
    return  (stride[2] === 1) &&
            (stride[1] === shape[0]*shape[2]) &&
            (stride[0] === shape[2])
  }
  return  (stride[0] === 1) &&
          (stride[1] === shape[0])
}

function texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {
  var dtype = array.dtype
  var shape = array.shape.slice()
  if(shape.length < 2 || shape.length > 3) {
    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d')
  }
  var type = 0, format = 0
  var packed = isPacked(shape, array.stride.slice())
  if(dtype === 'float32') {
    type = gl.FLOAT
  } else if(dtype === 'float64') {
    type = gl.FLOAT
    packed = false
    dtype = 'float32'
  } else if(dtype === 'uint8') {
    type = gl.UNSIGNED_BYTE
  } else {
    type = gl.UNSIGNED_BYTE
    packed = false
    dtype = 'uint8'
  }
  var channels = 1
  if(shape.length === 2) {
    format = gl.LUMINANCE
    shape = [shape[0], shape[1], 1]
    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)
  } else if(shape.length === 3) {
    if(shape[2] === 1) {
      format = gl.ALPHA
    } else if(shape[2] === 2) {
      format = gl.LUMINANCE_ALPHA
    } else if(shape[2] === 3) {
      format = gl.RGB
    } else if(shape[2] === 4) {
      format = gl.RGBA
    } else {
      throw new Error('gl-texture2d: Invalid shape for pixel coords')
    }
    channels = shape[2]
  } else {
    throw new Error('gl-texture2d: Invalid shape for texture')
  }
  //For 1-channel textures allow conversion between formats
  if((format  === gl.LUMINANCE || format  === gl.ALPHA) &&
     (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {
    format = cformat
  }
  if(format !== cformat) {
    throw new Error('gl-texture2d: Incompatible texture format for setPixels')
  }
  var size = array.size
  var needsMip = mipLevels.indexOf(mip_level) < 0
  if(needsMip) {
    mipLevels.push(mip_level)
  }
  if(type === ctype && packed) {
    //Array data types are compatible, can directly copy into texture
    if(array.offset === 0 && array.data.length === size) {
      if(needsMip) {
        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data)
      } else {
        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data)
      }
    } else {
      if(needsMip) {
        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset+size))
      } else {
        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset+size))
      }
    }
  } else {
    //Need to do type conversion to pack data into buffer
    var pack_buffer
    if(ctype === gl.FLOAT) {
      pack_buffer = pool.mallocFloat32(size)
    } else {
      pack_buffer = pool.mallocUint8(size)
    }
    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2]*shape[0], 1])
    if(type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {
      convertFloatToUint8(pack_view, array)
    } else {
      ops.assign(pack_view, array)
    }
    if(needsMip) {
      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size))
    } else {
      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size))
    }
    if(ctype === gl.FLOAT) {
      pool.freeFloat32(pack_buffer)
    } else {
      pool.freeUint8(pack_buffer)
    }
  }
}

function initTexture(gl) {
  var tex = gl.createTexture()
  gl.bindTexture(gl.TEXTURE_2D, tex)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
  return tex
}

function createTextureShape(gl, width, height, format, type) {
  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
  if(width < 0 || width > maxTextureSize || height < 0 || height  > maxTextureSize) {
    throw new Error('gl-texture2d: Invalid texture shape')
  }
  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {
    throw new Error('gl-texture2d: Floating point textures not supported on this platform')
  }
  var tex = initTexture(gl)
  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null)
  return new Texture2D(gl, tex, width, height, format, type)
}

function createTextureDOM(gl, directData, width, height, format, type) {
  var tex = initTexture(gl)
  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, directData)
  return new Texture2D(gl, tex, width, height, format, type)
}

//Creates a texture from an ndarray
function createTextureArray(gl, array) {
  var dtype = array.dtype
  var shape = array.shape.slice()
  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)
  if(shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {
    throw new Error('gl-texture2d: Invalid texture size')
  }
  var packed = isPacked(shape, array.stride.slice())
  var type = 0
  if(dtype === 'float32') {
    type = gl.FLOAT
  } else if(dtype === 'float64') {
    type = gl.FLOAT
    packed = false
    dtype = 'float32'
  } else if(dtype === 'uint8') {
    type = gl.UNSIGNED_BYTE
  } else {
    type = gl.UNSIGNED_BYTE
    packed = false
    dtype = 'uint8'
  }
  var format = 0
  if(shape.length === 2) {
    format = gl.LUMINANCE
    shape = [shape[0], shape[1], 1]
    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)
  } else if(shape.length === 3) {
    if(shape[2] === 1) {
      format = gl.ALPHA
    } else if(shape[2] === 2) {
      format = gl.LUMINANCE_ALPHA
    } else if(shape[2] === 3) {
      format = gl.RGB
    } else if(shape[2] === 4) {
      format = gl.RGBA
    } else {
      throw new Error('gl-texture2d: Invalid shape for pixel coords')
    }
  } else {
    throw new Error('gl-texture2d: Invalid shape for texture')
  }
  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {
    type = gl.UNSIGNED_BYTE
    packed = false
  }
  var buffer, buf_store
  var size = array.size
  if(!packed) {
    var stride = [shape[2], shape[2]*shape[0], 1]
    buf_store = pool.malloc(size, dtype)
    var buf_array = ndarray(buf_store, shape, stride, 0)
    if((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {
      convertFloatToUint8(buf_array, array)
    } else {
      ops.assign(buf_array, array)
    }
    buffer = buf_store.subarray(0, size)
  } else if (array.offset === 0 && array.data.length === size) {
    buffer = array.data
  } else {
    buffer = array.data.subarray(array.offset, array.offset + size)
  }
  var tex = initTexture(gl)
  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer)
  if(!packed) {
    pool.free(buf_store)
  }
  return new Texture2D(gl, tex, shape[0], shape[1], format, type)
}

function createTexture2D(gl) {
  if(arguments.length <= 1) {
    throw new Error('gl-texture2d: Missing arguments for texture2d constructor')
  }
  if(!linearTypes) {
    lazyInitLinearTypes(gl)
  }
  if(typeof arguments[1] === 'number') {
    return createTextureShape(gl, arguments[1], arguments[2], arguments[3]||gl.RGBA, arguments[4]||gl.UNSIGNED_BYTE)
  }
  if(Array.isArray(arguments[1])) {
    return createTextureShape(gl, arguments[1][0]|0, arguments[1][1]|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)
  }
  if(typeof arguments[1] === 'object') {
    var obj = arguments[1]
    var directData = acceptTextureDOM(obj) ? obj : obj.raw
    if (directData) {
      return createTextureDOM(gl, directData, obj.width|0, obj.height|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)
    } else if(obj.shape && obj.data && obj.stride) {
      return createTextureArray(gl, obj)
    }
  }
  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor')
}

},{"ndarray":79,"ndarray-ops":78,"typedarray-pool":86}],57:[function(require,module,exports){
module.exports = glToType
function glToType (flag) {
  switch (flag) {
    case 5126: return 'float32'   // gl.FLOAT
    case 5125: return 'uint32'    // gl.UNSIGNED_INT
    case 5124: return 'int32'     // gl.INT
    case 5123: return 'uint16'    // gl.UNSIGNED_SHORT
    case 32819: return 'uint16'   // gl.UNSIGNED_SHORT_4_4_4_4
    case 32820: return 'uint16'   // gl.UNSIGNED_SHORT_5_5_5_1
    case 33635: return 'uint16'   // gl.UNSIGNED_SHORT_5_6_5
    case 5122: return 'int16'     // gl.SHORT
    case 5121: return 'uint8'     // gl.UNSIGNED_BYTE
    case 5120: return 'int8'      // gl.BYTE
    default: return null
  }
}

},{}],58:[function(require,module,exports){
"use strict"

function doBind(gl, elements, attributes) {
  if(elements) {
    elements.bind()
  } else {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)
  }
  var nattribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS)|0
  if(attributes) {
    if(attributes.length > nattribs) {
      throw new Error("gl-vao: Too many vertex attributes")
    }
    for(var i=0; i<attributes.length; ++i) {
      var attrib = attributes[i]
      if(attrib.buffer) {
        var buffer = attrib.buffer
        var size = attrib.size || 4
        var type = attrib.type || gl.FLOAT
        var normalized = !!attrib.normalized
        var stride = attrib.stride || 0
        var offset = attrib.offset || 0
        buffer.bind()
        gl.enableVertexAttribArray(i)
        gl.vertexAttribPointer(i, size, type, normalized, stride, offset)
      } else {
        if(typeof attrib === "number") {
          gl.vertexAttrib1f(i, attrib)
        } else if(attrib.length === 1) {
          gl.vertexAttrib1f(i, attrib[0])
        } else if(attrib.length === 2) {
          gl.vertexAttrib2f(i, attrib[0], attrib[1])
        } else if(attrib.length === 3) {
          gl.vertexAttrib3f(i, attrib[0], attrib[1], attrib[2])
        } else if(attrib.length === 4) {
          gl.vertexAttrib4f(i, attrib[0], attrib[1], attrib[2], attrib[3])
        } else {
          throw new Error("gl-vao: Invalid vertex attribute")
        }
        gl.disableVertexAttribArray(i)
      }
    }
    for(; i<nattribs; ++i) {
      gl.disableVertexAttribArray(i)
    }
  } else {
    gl.bindBuffer(gl.ARRAY_BUFFER, null)
    for(var i=0; i<nattribs; ++i) {
      gl.disableVertexAttribArray(i)
    }
  }
}

module.exports = doBind
},{}],59:[function(require,module,exports){
"use strict"

var bindAttribs = require("./do-bind.js")

function VAOEmulated(gl) {
  this.gl = gl
  this._elements = null
  this._attributes = null
  this._elementsType = gl.UNSIGNED_SHORT
}

VAOEmulated.prototype.bind = function() {
  bindAttribs(this.gl, this._elements, this._attributes)
}

VAOEmulated.prototype.update = function(attributes, elements, elementsType) {
  this._elements = elements
  this._attributes = attributes
  this._elementsType = elementsType || this.gl.UNSIGNED_SHORT
}

VAOEmulated.prototype.dispose = function() { }
VAOEmulated.prototype.unbind = function() { }

VAOEmulated.prototype.draw = function(mode, count, offset) {
  offset = offset || 0
  var gl = this.gl
  if(this._elements) {
    gl.drawElements(mode, count, this._elementsType, offset)
  } else {
    gl.drawArrays(mode, offset, count)
  }
}

function createVAOEmulated(gl) {
  return new VAOEmulated(gl)
}

module.exports = createVAOEmulated
},{"./do-bind.js":58}],60:[function(require,module,exports){
"use strict"

var bindAttribs = require("./do-bind.js")

function VertexAttribute(location, dimension, a, b, c, d) {
  this.location = location
  this.dimension = dimension
  this.a = a
  this.b = b
  this.c = c
  this.d = d
}

VertexAttribute.prototype.bind = function(gl) {
  switch(this.dimension) {
    case 1:
      gl.vertexAttrib1f(this.location, this.a)
    break
    case 2:
      gl.vertexAttrib2f(this.location, this.a, this.b)
    break
    case 3:
      gl.vertexAttrib3f(this.location, this.a, this.b, this.c)
    break
    case 4:
      gl.vertexAttrib4f(this.location, this.a, this.b, this.c, this.d)
    break
  }
}

function VAONative(gl, ext, handle) {
  this.gl = gl
  this._ext = ext
  this.handle = handle
  this._attribs = []
  this._useElements = false
  this._elementsType = gl.UNSIGNED_SHORT
}

VAONative.prototype.bind = function() {
  this._ext.bindVertexArrayOES(this.handle)
  for(var i=0; i<this._attribs.length; ++i) {
    this._attribs[i].bind(this.gl)
  }
}

VAONative.prototype.unbind = function() {
  this._ext.bindVertexArrayOES(null)
}

VAONative.prototype.dispose = function() {
  this._ext.deleteVertexArrayOES(this.handle)
}

VAONative.prototype.update = function(attributes, elements, elementsType) {
  this.bind()
  bindAttribs(this.gl, elements, attributes)
  this.unbind()
  this._attribs.length = 0
  if(attributes)
  for(var i=0; i<attributes.length; ++i) {
    var a = attributes[i]
    if(typeof a === "number") {
      this._attribs.push(new VertexAttribute(i, 1, a))
    } else if(Array.isArray(a)) {
      this._attribs.push(new VertexAttribute(i, a.length, a[0], a[1], a[2], a[3]))
    }
  }
  this._useElements = !!elements
  this._elementsType = elementsType || this.gl.UNSIGNED_SHORT
}

VAONative.prototype.draw = function(mode, count, offset) {
  offset = offset || 0
  var gl = this.gl
  if(this._useElements) {
    gl.drawElements(mode, count, this._elementsType, offset)
  } else {
    gl.drawArrays(mode, offset, count)
  }
}

function createVAONative(gl, ext) {
  return new VAONative(gl, ext, ext.createVertexArrayOES())
}

module.exports = createVAONative
},{"./do-bind.js":58}],61:[function(require,module,exports){
"use strict"

var createVAONative = require("./lib/vao-native.js")
var createVAOEmulated = require("./lib/vao-emulated.js")

function ExtensionShim (gl) {
  this.bindVertexArrayOES = gl.bindVertexArray.bind(gl)
  this.createVertexArrayOES = gl.createVertexArray.bind(gl)
  this.deleteVertexArrayOES = gl.deleteVertexArray.bind(gl)
}

function createVAO(gl, attributes, elements, elementsType) {
  var ext = gl.createVertexArray
    ? new ExtensionShim(gl)
    : gl.getExtension('OES_vertex_array_object')
  var vao

  if(ext) {
    vao = createVAONative(gl, ext)
  } else {
    vao = createVAOEmulated(gl)
  }
  vao.update(attributes, elements, elementsType)
  return vao
}

module.exports = createVAO

},{"./lib/vao-emulated.js":59,"./lib/vao-native.js":60}],62:[function(require,module,exports){
var tokenize = require('glsl-tokenizer')
var atob     = require('atob-lite')

module.exports = getName

function getName(src) {
  var tokens = Array.isArray(src)
    ? src
    : tokenize(src)

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]
    if (token.type !== 'preprocessor') continue
    var match = token.data.match(/\#define\s+SHADER_NAME(_B64)?\s+(.+)$/)
    if (!match) continue
    if (!match[2]) continue

    var b64  = match[1]
    var name = match[2]

    return (b64 ? atob(name) : name).trim()
  }
}

},{"atob-lite":9,"glsl-tokenizer":69}],63:[function(require,module,exports){
module.exports = tokenize

var literals100 = require('./lib/literals')
  , operators = require('./lib/operators')
  , builtins100 = require('./lib/builtins')
  , literals300es = require('./lib/literals-300es')
  , builtins300es = require('./lib/builtins-300es')

var NORMAL = 999          // <-- never emitted
  , TOKEN = 9999          // <-- never emitted
  , BLOCK_COMMENT = 0
  , LINE_COMMENT = 1
  , PREPROCESSOR = 2
  , OPERATOR = 3
  , INTEGER = 4
  , FLOAT = 5
  , IDENT = 6
  , BUILTIN = 7
  , KEYWORD = 8
  , WHITESPACE = 9
  , EOF = 10
  , HEX = 11

var map = [
    'block-comment'
  , 'line-comment'
  , 'preprocessor'
  , 'operator'
  , 'integer'
  , 'float'
  , 'ident'
  , 'builtin'
  , 'keyword'
  , 'whitespace'
  , 'eof'
  , 'integer'
]

function tokenize(opt) {
  var i = 0
    , total = 0
    , mode = NORMAL
    , c
    , last
    , content = []
    , tokens = []
    , token_idx = 0
    , token_offs = 0
    , line = 1
    , col = 0
    , start = 0
    , isnum = false
    , isoperator = false
    , input = ''
    , len

  opt = opt || {}
  var allBuiltins = builtins100
  var allLiterals = literals100
  if (opt.version === '300 es') {
    allBuiltins = builtins300es
    allLiterals = literals300es
  }

  return function(data) {
    tokens = []
    if (data !== null) return write(data.replace ? data.replace(/\r\n/g, '\n') : data)
    return end()
  }

  function token(data) {
    if (data.length) {
      tokens.push({
        type: map[mode]
      , data: data
      , position: start
      , line: line
      , column: col
      })
    }
  }

  function write(chunk) {
    i = 0
    input += chunk
    len = input.length

    var last

    while(c = input[i], i < len) {
      last = i

      switch(mode) {
        case BLOCK_COMMENT: i = block_comment(); break
        case LINE_COMMENT: i = line_comment(); break
        case PREPROCESSOR: i = preprocessor(); break
        case OPERATOR: i = operator(); break
        case INTEGER: i = integer(); break
        case HEX: i = hex(); break
        case FLOAT: i = decimal(); break
        case TOKEN: i = readtoken(); break
        case WHITESPACE: i = whitespace(); break
        case NORMAL: i = normal(); break
      }

      if(last !== i) {
        switch(input[last]) {
          case '\n': col = 0; ++line; break
          default: ++col; break
        }
      }
    }

    total += i
    input = input.slice(i)
    return tokens
  }

  function end(chunk) {
    if(content.length) {
      token(content.join(''))
    }

    mode = EOF
    token('(eof)')
    return tokens
  }

  function normal() {
    content = content.length ? [] : content

    if(last === '/' && c === '*') {
      start = total + i - 1
      mode = BLOCK_COMMENT
      last = c
      return i + 1
    }

    if(last === '/' && c === '/') {
      start = total + i - 1
      mode = LINE_COMMENT
      last = c
      return i + 1
    }

    if(c === '#') {
      mode = PREPROCESSOR
      start = total + i
      return i
    }

    if(/\s/.test(c)) {
      mode = WHITESPACE
      start = total + i
      return i
    }

    isnum = /\d/.test(c)
    isoperator = /[^\w_]/.test(c)

    start = total + i
    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN
    return i
  }

  function whitespace() {
    if(/[^\s]/g.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }
    content.push(c)
    last = c
    return i + 1
  }

  function preprocessor() {
    if((c === '\r' || c === '\n') && last !== '\\') {
      token(content.join(''))
      mode = NORMAL
      return i
    }
    content.push(c)
    last = c
    return i + 1
  }

  function line_comment() {
    return preprocessor()
  }

  function block_comment() {
    if(c === '/' && last === '*') {
      content.push(c)
      token(content.join(''))
      mode = NORMAL
      return i + 1
    }

    content.push(c)
    last = c
    return i + 1
  }

  function operator() {
    if(last === '.' && /\d/.test(c)) {
      mode = FLOAT
      return i
    }

    if(last === '/' && c === '*') {
      mode = BLOCK_COMMENT
      return i
    }

    if(last === '/' && c === '/') {
      mode = LINE_COMMENT
      return i
    }

    if(c === '.' && content.length) {
      while(determine_operator(content));

      mode = FLOAT
      return i
    }

    if(c === ';' || c === ')' || c === '(') {
      if(content.length) while(determine_operator(content));
      token(c)
      mode = NORMAL
      return i + 1
    }

    var is_composite_operator = content.length === 2 && c !== '='
    if(/[\w_\d\s]/.test(c) || is_composite_operator) {
      while(determine_operator(content));
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function determine_operator(buf) {
    var j = 0
      , idx
      , res

    do {
      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))
      res = operators[idx]

      if(idx === -1) {
        if(j-- + buf.length > 0) continue
        res = buf.slice(0, 1).join('')
      }

      token(res)

      start += res.length
      content = content.slice(res.length)
      return content.length
    } while(1)
  }

  function hex() {
    if(/[^a-fA-F0-9]/.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function integer() {
    if(c === '.') {
      content.push(c)
      mode = FLOAT
      last = c
      return i + 1
    }

    if(/[eE]/.test(c)) {
      content.push(c)
      mode = FLOAT
      last = c
      return i + 1
    }

    if(c === 'x' && content.length === 1 && content[0] === '0') {
      mode = HEX
      content.push(c)
      last = c
      return i + 1
    }

    if(/[^\d]/.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function decimal() {
    if(c === 'f') {
      content.push(c)
      last = c
      i += 1
    }

    if(/[eE]/.test(c)) {
      content.push(c)
      last = c
      return i + 1
    }

    if (c === '-' && /[eE]/.test(last)) {
      content.push(c)
      last = c
      return i + 1
    }

    if(/[^\d]/.test(c)) {
      token(content.join(''))
      mode = NORMAL
      return i
    }

    content.push(c)
    last = c
    return i + 1
  }

  function readtoken() {
    if(/[^\d\w_]/.test(c)) {
      var contentstr = content.join('')
      if(allLiterals.indexOf(contentstr) > -1) {
        mode = KEYWORD
      } else if(allBuiltins.indexOf(contentstr) > -1) {
        mode = BUILTIN
      } else {
        mode = IDENT
      }
      token(content.join(''))
      mode = NORMAL
      return i
    }
    content.push(c)
    last = c
    return i + 1
  }
}

},{"./lib/builtins":65,"./lib/builtins-300es":64,"./lib/literals":67,"./lib/literals-300es":66,"./lib/operators":68}],64:[function(require,module,exports){
// 300es builtins/reserved words that were previously valid in v100
var v100 = require('./builtins')

// The texture2D|Cube functions have been removed
// And the gl_ features are updated
v100 = v100.slice().filter(function (b) {
  return !/^(gl\_|texture)/.test(b)
})

module.exports = v100.concat([
  // the updated gl_ constants
    'gl_VertexID'
  , 'gl_InstanceID'
  , 'gl_Position'
  , 'gl_PointSize'
  , 'gl_FragCoord'
  , 'gl_FrontFacing'
  , 'gl_FragDepth'
  , 'gl_PointCoord'
  , 'gl_MaxVertexAttribs'
  , 'gl_MaxVertexUniformVectors'
  , 'gl_MaxVertexOutputVectors'
  , 'gl_MaxFragmentInputVectors'
  , 'gl_MaxVertexTextureImageUnits'
  , 'gl_MaxCombinedTextureImageUnits'
  , 'gl_MaxTextureImageUnits'
  , 'gl_MaxFragmentUniformVectors'
  , 'gl_MaxDrawBuffers'
  , 'gl_MinProgramTexelOffset'
  , 'gl_MaxProgramTexelOffset'
  , 'gl_DepthRangeParameters'
  , 'gl_DepthRange'

  // other builtins
  , 'trunc'
  , 'round'
  , 'roundEven'
  , 'isnan'
  , 'isinf'
  , 'floatBitsToInt'
  , 'floatBitsToUint'
  , 'intBitsToFloat'
  , 'uintBitsToFloat'
  , 'packSnorm2x16'
  , 'unpackSnorm2x16'
  , 'packUnorm2x16'
  , 'unpackUnorm2x16'
  , 'packHalf2x16'
  , 'unpackHalf2x16'
  , 'outerProduct'
  , 'transpose'
  , 'determinant'
  , 'inverse'
  , 'texture'
  , 'textureSize'
  , 'textureProj'
  , 'textureLod'
  , 'textureOffset'
  , 'texelFetch'
  , 'texelFetchOffset'
  , 'textureProjOffset'
  , 'textureLodOffset'
  , 'textureProjLod'
  , 'textureProjLodOffset'
  , 'textureGrad'
  , 'textureGradOffset'
  , 'textureProjGrad'
  , 'textureProjGradOffset'
])

},{"./builtins":65}],65:[function(require,module,exports){
module.exports = [
  // Keep this list sorted
  'abs'
  , 'acos'
  , 'all'
  , 'any'
  , 'asin'
  , 'atan'
  , 'ceil'
  , 'clamp'
  , 'cos'
  , 'cross'
  , 'dFdx'
  , 'dFdy'
  , 'degrees'
  , 'distance'
  , 'dot'
  , 'equal'
  , 'exp'
  , 'exp2'
  , 'faceforward'
  , 'floor'
  , 'fract'
  , 'gl_BackColor'
  , 'gl_BackLightModelProduct'
  , 'gl_BackLightProduct'
  , 'gl_BackMaterial'
  , 'gl_BackSecondaryColor'
  , 'gl_ClipPlane'
  , 'gl_ClipVertex'
  , 'gl_Color'
  , 'gl_DepthRange'
  , 'gl_DepthRangeParameters'
  , 'gl_EyePlaneQ'
  , 'gl_EyePlaneR'
  , 'gl_EyePlaneS'
  , 'gl_EyePlaneT'
  , 'gl_Fog'
  , 'gl_FogCoord'
  , 'gl_FogFragCoord'
  , 'gl_FogParameters'
  , 'gl_FragColor'
  , 'gl_FragCoord'
  , 'gl_FragData'
  , 'gl_FragDepth'
  , 'gl_FragDepthEXT'
  , 'gl_FrontColor'
  , 'gl_FrontFacing'
  , 'gl_FrontLightModelProduct'
  , 'gl_FrontLightProduct'
  , 'gl_FrontMaterial'
  , 'gl_FrontSecondaryColor'
  , 'gl_LightModel'
  , 'gl_LightModelParameters'
  , 'gl_LightModelProducts'
  , 'gl_LightProducts'
  , 'gl_LightSource'
  , 'gl_LightSourceParameters'
  , 'gl_MaterialParameters'
  , 'gl_MaxClipPlanes'
  , 'gl_MaxCombinedTextureImageUnits'
  , 'gl_MaxDrawBuffers'
  , 'gl_MaxFragmentUniformComponents'
  , 'gl_MaxLights'
  , 'gl_MaxTextureCoords'
  , 'gl_MaxTextureImageUnits'
  , 'gl_MaxTextureUnits'
  , 'gl_MaxVaryingFloats'
  , 'gl_MaxVertexAttribs'
  , 'gl_MaxVertexTextureImageUnits'
  , 'gl_MaxVertexUniformComponents'
  , 'gl_ModelViewMatrix'
  , 'gl_ModelViewMatrixInverse'
  , 'gl_ModelViewMatrixInverseTranspose'
  , 'gl_ModelViewMatrixTranspose'
  , 'gl_ModelViewProjectionMatrix'
  , 'gl_ModelViewProjectionMatrixInverse'
  , 'gl_ModelViewProjectionMatrixInverseTranspose'
  , 'gl_ModelViewProjectionMatrixTranspose'
  , 'gl_MultiTexCoord0'
  , 'gl_MultiTexCoord1'
  , 'gl_MultiTexCoord2'
  , 'gl_MultiTexCoord3'
  , 'gl_MultiTexCoord4'
  , 'gl_MultiTexCoord5'
  , 'gl_MultiTexCoord6'
  , 'gl_MultiTexCoord7'
  , 'gl_Normal'
  , 'gl_NormalMatrix'
  , 'gl_NormalScale'
  , 'gl_ObjectPlaneQ'
  , 'gl_ObjectPlaneR'
  , 'gl_ObjectPlaneS'
  , 'gl_ObjectPlaneT'
  , 'gl_Point'
  , 'gl_PointCoord'
  , 'gl_PointParameters'
  , 'gl_PointSize'
  , 'gl_Position'
  , 'gl_ProjectionMatrix'
  , 'gl_ProjectionMatrixInverse'
  , 'gl_ProjectionMatrixInverseTranspose'
  , 'gl_ProjectionMatrixTranspose'
  , 'gl_SecondaryColor'
  , 'gl_TexCoord'
  , 'gl_TextureEnvColor'
  , 'gl_TextureMatrix'
  , 'gl_TextureMatrixInverse'
  , 'gl_TextureMatrixInverseTranspose'
  , 'gl_TextureMatrixTranspose'
  , 'gl_Vertex'
  , 'greaterThan'
  , 'greaterThanEqual'
  , 'inversesqrt'
  , 'length'
  , 'lessThan'
  , 'lessThanEqual'
  , 'log'
  , 'log2'
  , 'matrixCompMult'
  , 'max'
  , 'min'
  , 'mix'
  , 'mod'
  , 'normalize'
  , 'not'
  , 'notEqual'
  , 'pow'
  , 'radians'
  , 'reflect'
  , 'refract'
  , 'sign'
  , 'sin'
  , 'smoothstep'
  , 'sqrt'
  , 'step'
  , 'tan'
  , 'texture2D'
  , 'texture2DLod'
  , 'texture2DProj'
  , 'texture2DProjLod'
  , 'textureCube'
  , 'textureCubeLod'
  , 'texture2DLodEXT'
  , 'texture2DProjLodEXT'
  , 'textureCubeLodEXT'
  , 'texture2DGradEXT'
  , 'texture2DProjGradEXT'
  , 'textureCubeGradEXT'
]

},{}],66:[function(require,module,exports){
var v100 = require('./literals')

module.exports = v100.slice().concat([
   'layout'
  , 'centroid'
  , 'smooth'
  , 'case'
  , 'mat2x2'
  , 'mat2x3'
  , 'mat2x4'
  , 'mat3x2'
  , 'mat3x3'
  , 'mat3x4'
  , 'mat4x2'
  , 'mat4x3'
  , 'mat4x4'
  , 'uint'
  , 'uvec2'
  , 'uvec3'
  , 'uvec4'
  , 'samplerCubeShadow'
  , 'sampler2DArray'
  , 'sampler2DArrayShadow'
  , 'isampler2D'
  , 'isampler3D'
  , 'isamplerCube'
  , 'isampler2DArray'
  , 'usampler2D'
  , 'usampler3D'
  , 'usamplerCube'
  , 'usampler2DArray'
  , 'coherent'
  , 'restrict'
  , 'readonly'
  , 'writeonly'
  , 'resource'
  , 'atomic_uint'
  , 'noperspective'
  , 'patch'
  , 'sample'
  , 'subroutine'
  , 'common'
  , 'partition'
  , 'active'
  , 'filter'
  , 'image1D'
  , 'image2D'
  , 'image3D'
  , 'imageCube'
  , 'iimage1D'
  , 'iimage2D'
  , 'iimage3D'
  , 'iimageCube'
  , 'uimage1D'
  , 'uimage2D'
  , 'uimage3D'
  , 'uimageCube'
  , 'image1DArray'
  , 'image2DArray'
  , 'iimage1DArray'
  , 'iimage2DArray'
  , 'uimage1DArray'
  , 'uimage2DArray'
  , 'image1DShadow'
  , 'image2DShadow'
  , 'image1DArrayShadow'
  , 'image2DArrayShadow'
  , 'imageBuffer'
  , 'iimageBuffer'
  , 'uimageBuffer'
  , 'sampler1DArray'
  , 'sampler1DArrayShadow'
  , 'isampler1D'
  , 'isampler1DArray'
  , 'usampler1D'
  , 'usampler1DArray'
  , 'isampler2DRect'
  , 'usampler2DRect'
  , 'samplerBuffer'
  , 'isamplerBuffer'
  , 'usamplerBuffer'
  , 'sampler2DMS'
  , 'isampler2DMS'
  , 'usampler2DMS'
  , 'sampler2DMSArray'
  , 'isampler2DMSArray'
  , 'usampler2DMSArray'
])

},{"./literals":67}],67:[function(require,module,exports){
module.exports = [
  // current
    'precision'
  , 'highp'
  , 'mediump'
  , 'lowp'
  , 'attribute'
  , 'const'
  , 'uniform'
  , 'varying'
  , 'break'
  , 'continue'
  , 'do'
  , 'for'
  , 'while'
  , 'if'
  , 'else'
  , 'in'
  , 'out'
  , 'inout'
  , 'float'
  , 'int'
  , 'void'
  , 'bool'
  , 'true'
  , 'false'
  , 'discard'
  , 'return'
  , 'mat2'
  , 'mat3'
  , 'mat4'
  , 'vec2'
  , 'vec3'
  , 'vec4'
  , 'ivec2'
  , 'ivec3'
  , 'ivec4'
  , 'bvec2'
  , 'bvec3'
  , 'bvec4'
  , 'sampler1D'
  , 'sampler2D'
  , 'sampler3D'
  , 'samplerCube'
  , 'sampler1DShadow'
  , 'sampler2DShadow'
  , 'struct'

  // future
  , 'asm'
  , 'class'
  , 'union'
  , 'enum'
  , 'typedef'
  , 'template'
  , 'this'
  , 'packed'
  , 'goto'
  , 'switch'
  , 'default'
  , 'inline'
  , 'noinline'
  , 'volatile'
  , 'public'
  , 'static'
  , 'extern'
  , 'external'
  , 'interface'
  , 'long'
  , 'short'
  , 'double'
  , 'half'
  , 'fixed'
  , 'unsigned'
  , 'input'
  , 'output'
  , 'hvec2'
  , 'hvec3'
  , 'hvec4'
  , 'dvec2'
  , 'dvec3'
  , 'dvec4'
  , 'fvec2'
  , 'fvec3'
  , 'fvec4'
  , 'sampler2DRect'
  , 'sampler3DRect'
  , 'sampler2DRectShadow'
  , 'sizeof'
  , 'cast'
  , 'namespace'
  , 'using'
]

},{}],68:[function(require,module,exports){
module.exports = [
    '<<='
  , '>>='
  , '++'
  , '--'
  , '<<'
  , '>>'
  , '<='
  , '>='
  , '=='
  , '!='
  , '&&'
  , '||'
  , '+='
  , '-='
  , '*='
  , '/='
  , '%='
  , '&='
  , '^^'
  , '^='
  , '|='
  , '('
  , ')'
  , '['
  , ']'
  , '.'
  , '!'
  , '~'
  , '*'
  , '/'
  , '%'
  , '+'
  , '-'
  , '<'
  , '>'
  , '&'
  , '^'
  , '|'
  , '?'
  , ':'
  , '='
  , ','
  , ';'
  , '{'
  , '}'
]

},{}],69:[function(require,module,exports){
var tokenize = require('./index')

module.exports = tokenizeString

function tokenizeString(str, opt) {
  var generator = tokenize(opt)
  var tokens = []

  tokens = tokens.concat(generator(str))
  tokens = tokens.concat(generator(null))

  return tokens
}

},{"./index":63}],70:[function(require,module,exports){
var normalize = require('vectors/normalize-nd')

module.exports = icosphere

function icosphere(subdivisions) {
  subdivisions = +subdivisions|0

  var positions = []
  var faces = []
  var t = 0.5 + Math.sqrt(5) / 2

  positions.push([-1, +t,  0])
  positions.push([+1, +t,  0])
  positions.push([-1, -t,  0])
  positions.push([+1, -t,  0])

  positions.push([ 0, -1, +t])
  positions.push([ 0, +1, +t])
  positions.push([ 0, -1, -t])
  positions.push([ 0, +1, -t])

  positions.push([+t,  0, -1])
  positions.push([+t,  0, +1])
  positions.push([-t,  0, -1])
  positions.push([-t,  0, +1])

  faces.push([0, 11, 5])
  faces.push([0, 5, 1])
  faces.push([0, 1, 7])
  faces.push([0, 7, 10])
  faces.push([0, 10, 11])

  faces.push([1, 5, 9])
  faces.push([5, 11, 4])
  faces.push([11, 10, 2])
  faces.push([10, 7, 6])
  faces.push([7, 1, 8])

  faces.push([3, 9, 4])
  faces.push([3, 4, 2])
  faces.push([3, 2, 6])
  faces.push([3, 6, 8])
  faces.push([3, 8, 9])

  faces.push([4, 9, 5])
  faces.push([2, 4, 11])
  faces.push([6, 2, 10])
  faces.push([8, 6, 7])
  faces.push([9, 8, 1])

  var complex = {
      cells: faces
    , positions: positions
  }

  while (subdivisions-- > 0) {
    complex = subdivide(complex)
  }

  positions = complex.positions
  for (var i = 0; i < positions.length; i++) {
    normalize(positions[i])
  }

  return complex
}

// TODO: work out the second half of loop subdivision
// and extract this into its own module.
function subdivide(complex) {
  var positions = complex.positions
  var cells = complex.cells

  var newCells = []
  var newPositions = []
  var midpoints = {}
  var f = [0, 1, 2]
  var l = 0

  for (var i = 0; i < cells.length; i++) {
    var cell = cells[i]
    var c0 = cell[0]
    var c1 = cell[1]
    var c2 = cell[2]
    var v0 = positions[c0]
    var v1 = positions[c1]
    var v2 = positions[c2]

    var a = getMidpoint(v0, v1)
    var b = getMidpoint(v1, v2)
    var c = getMidpoint(v2, v0)

    var ai = newPositions.indexOf(a)
    if (ai === -1) ai = l++, newPositions.push(a)
    var bi = newPositions.indexOf(b)
    if (bi === -1) bi = l++, newPositions.push(b)
    var ci = newPositions.indexOf(c)
    if (ci === -1) ci = l++, newPositions.push(c)

    var v0i = newPositions.indexOf(v0)
    if (v0i === -1) v0i = l++, newPositions.push(v0)
    var v1i = newPositions.indexOf(v1)
    if (v1i === -1) v1i = l++, newPositions.push(v1)
    var v2i = newPositions.indexOf(v2)
    if (v2i === -1) v2i = l++, newPositions.push(v2)

    newCells.push([v0i, ai, ci])
    newCells.push([v1i, bi, ai])
    newCells.push([v2i, ci, bi])
    newCells.push([ai, bi, ci])
  }

  return {
      cells: newCells
    , positions: newPositions
  }

  // reuse midpoint vertices between iterations.
  // Otherwise, there'll be duplicate vertices in the final
  // mesh, resulting in sharp edges.
  function getMidpoint(a, b) {
    var point = midpoint(a, b)
    var pointKey = pointToKey(point)
    var cachedPoint = midpoints[pointKey]
    if (cachedPoint) {
      return cachedPoint
    } else {
      return midpoints[pointKey] = point
    }
  }

  function pointToKey(point) {
    return point[0].toPrecision(6) + ','
         + point[1].toPrecision(6) + ','
         + point[2].toPrecision(6)
  }

  function midpoint(a, b) {
    return [
        (a[0] + b[0]) / 2
      , (a[1] + b[1]) / 2
      , (a[2] + b[2]) / 2
    ]
  }
}

},{"vectors/normalize-nd":88}],71:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],72:[function(require,module,exports){
"use strict"

function iota(n) {
  var result = new Array(n)
  for(var i=0; i<n; ++i) {
    result[i] = i
  }
  return result
}

module.exports = iota
},{}],73:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],74:[function(require,module,exports){
module.exports      = isTypedArray
isTypedArray.strict = isStrictTypedArray
isTypedArray.loose  = isLooseTypedArray

var toString = Object.prototype.toString
var names = {
    '[object Int8Array]': true
  , '[object Int16Array]': true
  , '[object Int32Array]': true
  , '[object Uint8Array]': true
  , '[object Uint16Array]': true
  , '[object Uint32Array]': true
  , '[object Float32Array]': true
  , '[object Float64Array]': true
}

function isTypedArray(arr) {
  return (
       isStrictTypedArray(arr)
    || isLooseTypedArray(arr)
  )
}

function isStrictTypedArray(arr) {
  return (
       arr instanceof Int8Array
    || arr instanceof Int16Array
    || arr instanceof Int32Array
    || arr instanceof Uint8Array
    || arr instanceof Uint16Array
    || arr instanceof Uint32Array
    || arr instanceof Float32Array
    || arr instanceof Float64Array
  )
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)]
}

},{}],75:[function(require,module,exports){
module.exports = function(arr) {
  if (!arr) return false
  if (!arr.dtype) return false
  var re = new RegExp('function View[0-9]+d(:?' + arr.dtype + ')+')
  return re.test(String(arr.constructor))
}

},{}],76:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],77:[function(require,module,exports){
"use strict";

/* global module, define */

function mapEach(map, operation){
  var keys = map.keys();
  var next;
  while(!(next = keys.next()).done) {
    operation(map.get(next.value), next.value, map);
  }
}

var Multimap = (function() {
  var mapCtor;
  if (typeof Map !== 'undefined') {
    mapCtor = Map;

    if (!Map.prototype.keys) {
      Map.prototype.keys = function() {
        var keys = [];
        this.forEach(function(item, key) {
          keys.push(key);
        });
        return keys;
      };
    }
  }

  function Multimap(iterable) {
    var self = this;

    self._map = mapCtor;

    if (Multimap.Map) {
      self._map = Multimap.Map;
    }

    self._ = self._map ? new self._map() : {};

    if (iterable) {
      iterable.forEach(function(i) {
        self.set(i[0], i[1]);
      });
    }
  }

  /**
   * @param {Object} key
   * @return {Array} An array of values, undefined if no such a key;
   */
  Multimap.prototype.get = function(key) {
    return this._map ? this._.get(key) : this._[key];
  };

  /**
   * @param {Object} key
   * @param {Object} val...
   */
  Multimap.prototype.set = function(key, val) {
    var args = Array.prototype.slice.call(arguments);

    key = args.shift();

    var entry = this.get(key);
    if (!entry) {
      entry = [];
      if (this._map)
        this._.set(key, entry);
      else
        this._[key] = entry;
    }

    Array.prototype.push.apply(entry, args);
    return this;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} true if any thing changed
   */
  Multimap.prototype.delete = function(key, val) {
    if (!this.has(key))
      return false;

    if (arguments.length == 1) {
      this._map ? (this._.delete(key)) : (delete this._[key]);
      return true;
    } else {
      var entry = this.get(key);
      var idx = entry.indexOf(val);
      if (idx != -1) {
        entry.splice(idx, 1);
        return true;
      }
    }

    return false;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} whether the map contains 'key' or 'key=>val' pair
   */
  Multimap.prototype.has = function(key, val) {
    var hasKey = this._map ? this._.has(key) : this._.hasOwnProperty(key);

    if (arguments.length == 1 || !hasKey)
      return hasKey;

    var entry = this.get(key) || [];
    return entry.indexOf(val) != -1;
  };


  /**
   * @return {Array} all the keys in the map
   */
  Multimap.prototype.keys = function() {
    if (this._map)
      return makeIterator(this._.keys());

    return makeIterator(Object.keys(this._));
  };

  /**
   * @return {Array} all the values in the map
   */
  Multimap.prototype.values = function() {
    var vals = [];
    this.forEachEntry(function(entry) {
      Array.prototype.push.apply(vals, entry);
    });

    return makeIterator(vals);
  };

  /**
   *
   */
  Multimap.prototype.forEachEntry = function(iter) {
    mapEach(this, iter);
  };

  Multimap.prototype.forEach = function(iter) {
    var self = this;
    self.forEachEntry(function(entry, key) {
      entry.forEach(function(item) {
        iter(item, key, self);
      });
    });
  };


  Multimap.prototype.clear = function() {
    if (this._map) {
      this._.clear();
    } else {
      this._ = {};
    }
  };

  Object.defineProperty(
    Multimap.prototype,
    "size", {
      configurable: false,
      enumerable: true,
      get: function() {
        var total = 0;

        mapEach(this, function(value){
          total += value.length;
        });

        return total;
      }
    });

  var safariNext;

  try{
    safariNext = new Function('iterator', 'makeIterator', 'var keysArray = []; for(var key of iterator){keysArray.push(key);} return makeIterator(keysArray).next;');
  }catch(error){
    // for of not implemented;
  }

  function makeIterator(iterator){
    if(Array.isArray(iterator)){
      var nextIndex = 0;

      return {
        next: function(){
          return nextIndex < iterator.length ?
            {value: iterator[nextIndex++], done: false} :
          {done: true};
        }
      };
    }

    // Only an issue in safari
    if(!iterator.next && safariNext){
      iterator.next = safariNext(iterator, makeIterator);
    }

    return iterator;
  }

  return Multimap;
})();


if(typeof exports === 'object' && module && module.exports)
  module.exports = Multimap;
else if(typeof define === 'function' && define.amd)
  define(function() { return Multimap; });

},{}],78:[function(require,module,exports){
"use strict"

var compile = require("cwise-compiler")

var EmptyProc = {
  body: "",
  args: [],
  thisVars: [],
  localVars: []
}

function fixup(x) {
  if(!x) {
    return EmptyProc
  }
  for(var i=0; i<x.args.length; ++i) {
    var a = x.args[i]
    if(i === 0) {
      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }
    } else {
      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}
    }
  }
  if(!x.thisVars) {
    x.thisVars = []
  }
  if(!x.localVars) {
    x.localVars = []
  }
  return x
}

function pcompile(user_args) {
  return compile({
    args:     user_args.args,
    pre:      fixup(user_args.pre),
    body:     fixup(user_args.body),
    post:     fixup(user_args.proc),
    funcName: user_args.funcName
  })
}

function makeOp(user_args) {
  var args = []
  for(var i=0; i<user_args.args.length; ++i) {
    args.push("a"+i)
  }
  var wrapper = new Function("P", [
    "return function ", user_args.funcName, "_ndarrayops(", args.join(","), ") {P(", args.join(","), ");return a0}"
  ].join(""))
  return wrapper(pcompile(user_args))
}

var assign_ops = {
  add:  "+",
  sub:  "-",
  mul:  "*",
  div:  "/",
  mod:  "%",
  band: "&",
  bor:  "|",
  bxor: "^",
  lshift: "<<",
  rshift: ">>",
  rrshift: ">>>"
}
;(function(){
  for(var id in assign_ops) {
    var op = assign_ops[id]
    exports[id] = makeOp({
      args: ["array","array","array"],
      body: {args:["a","b","c"],
             body: "a=b"+op+"c"},
      funcName: id
    })
    exports[id+"eq"] = makeOp({
      args: ["array","array"],
      body: {args:["a","b"],
             body:"a"+op+"=b"},
      rvalue: true,
      funcName: id+"eq"
    })
    exports[id+"s"] = makeOp({
      args: ["array", "array", "scalar"],
      body: {args:["a","b","s"],
             body:"a=b"+op+"s"},
      funcName: id+"s"
    })
    exports[id+"seq"] = makeOp({
      args: ["array","scalar"],
      body: {args:["a","s"],
             body:"a"+op+"=s"},
      rvalue: true,
      funcName: id+"seq"
    })
  }
})();

var unary_ops = {
  not: "!",
  bnot: "~",
  neg: "-",
  recip: "1.0/"
}
;(function(){
  for(var id in unary_ops) {
    var op = unary_ops[id]
    exports[id] = makeOp({
      args: ["array", "array"],
      body: {args:["a","b"],
             body:"a="+op+"b"},
      funcName: id
    })
    exports[id+"eq"] = makeOp({
      args: ["array"],
      body: {args:["a"],
             body:"a="+op+"a"},
      rvalue: true,
      count: 2,
      funcName: id+"eq"
    })
  }
})();

var binary_ops = {
  and: "&&",
  or: "||",
  eq: "===",
  neq: "!==",
  lt: "<",
  gt: ">",
  leq: "<=",
  geq: ">="
}
;(function() {
  for(var id in binary_ops) {
    var op = binary_ops[id]
    exports[id] = makeOp({
      args: ["array","array","array"],
      body: {args:["a", "b", "c"],
             body:"a=b"+op+"c"},
      funcName: id
    })
    exports[id+"s"] = makeOp({
      args: ["array","array","scalar"],
      body: {args:["a", "b", "s"],
             body:"a=b"+op+"s"},
      funcName: id+"s"
    })
    exports[id+"eq"] = makeOp({
      args: ["array", "array"],
      body: {args:["a", "b"],
             body:"a=a"+op+"b"},
      rvalue:true,
      count:2,
      funcName: id+"eq"
    })
    exports[id+"seq"] = makeOp({
      args: ["array", "scalar"],
      body: {args:["a","s"],
             body:"a=a"+op+"s"},
      rvalue:true,
      count:2,
      funcName: id+"seq"
    })
  }
})();

var math_unary = [
  "abs",
  "acos",
  "asin",
  "atan",
  "ceil",
  "cos",
  "exp",
  "floor",
  "log",
  "round",
  "sin",
  "sqrt",
  "tan"
]
;(function() {
  for(var i=0; i<math_unary.length; ++i) {
    var f = math_unary[i]
    exports[f] = makeOp({
                    args: ["array", "array"],
                    pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                    body: {args:["a","b"], body:"a=this_f(b)", thisVars:["this_f"]},
                    funcName: f
                  })
    exports[f+"eq"] = makeOp({
                      args: ["array"],
                      pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                      body: {args: ["a"], body:"a=this_f(a)", thisVars:["this_f"]},
                      rvalue: true,
                      count: 2,
                      funcName: f+"eq"
                    })
  }
})();

var math_comm = [
  "max",
  "min",
  "atan2",
  "pow"
]
;(function(){
  for(var i=0; i<math_comm.length; ++i) {
    var f= math_comm[i]
    exports[f] = makeOp({
                  args:["array", "array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(b,c)", thisVars:["this_f"]},
                  funcName: f
                })
    exports[f+"s"] = makeOp({
                  args:["array", "array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(b,c)", thisVars:["this_f"]},
                  funcName: f+"s"
                  })
    exports[f+"eq"] = makeOp({ args:["array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(a,b)", thisVars:["this_f"]},
                  rvalue: true,
                  count: 2,
                  funcName: f+"eq"
                  })
    exports[f+"seq"] = makeOp({ args:["array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(a,b)", thisVars:["this_f"]},
                  rvalue:true,
                  count:2,
                  funcName: f+"seq"
                  })
  }
})();

var math_noncomm = [
  "atan2",
  "pow"
]
;(function(){
  for(var i=0; i<math_noncomm.length; ++i) {
    var f= math_noncomm[i]
    exports[f+"op"] = makeOp({
                  args:["array", "array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(c,b)", thisVars:["this_f"]},
                  funcName: f+"op"
                })
    exports[f+"ops"] = makeOp({
                  args:["array", "array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(c,b)", thisVars:["this_f"]},
                  funcName: f+"ops"
                  })
    exports[f+"opeq"] = makeOp({ args:["array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(b,a)", thisVars:["this_f"]},
                  rvalue: true,
                  count: 2,
                  funcName: f+"opeq"
                  })
    exports[f+"opseq"] = makeOp({ args:["array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(b,a)", thisVars:["this_f"]},
                  rvalue:true,
                  count:2,
                  funcName: f+"opseq"
                  })
  }
})();

exports.any = compile({
  args:["array"],
  pre: EmptyProc,
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "if(a){return true}", localVars: [], thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return false"},
  funcName: "any"
})

exports.all = compile({
  args:["array"],
  pre: EmptyProc,
  body: {args:[{name:"x", lvalue:false, rvalue:true, count:1}], body: "if(!x){return false}", localVars: [], thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return true"},
  funcName: "all"
})

exports.sum = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "this_s+=a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "sum"
})

exports.prod = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=1"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "this_s*=a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "prod"
})

exports.norm2squared = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:2}], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norm2squared"
})
  
exports.norm2 = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:2}], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return Math.sqrt(this_s)"},
  funcName: "norm2"
})
  

exports.norminf = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:4}], body:"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norminf"
})

exports.norm1 = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:3}], body: "this_s+=a<0?-a:a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norm1"
})

exports.sup = compile({
  args: [ "array" ],
  pre:
   { body: "this_h=-Infinity",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] },
  body:
   { body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
     args: [{"name":"_inline_1_arg0_","lvalue":false,"rvalue":true,"count":2} ],
     thisVars: [ "this_h" ],
     localVars: [] },
  post:
   { body: "return this_h",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] }
 })

exports.inf = compile({
  args: [ "array" ],
  pre:
   { body: "this_h=Infinity",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] },
  body:
   { body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
     args: [{"name":"_inline_1_arg0_","lvalue":false,"rvalue":true,"count":2} ],
     thisVars: [ "this_h" ],
     localVars: [] },
  post:
   { body: "return this_h",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] }
 })

exports.argmin = compile({
  args:["index","array","shape"],
  pre:{
    body:"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
    args:[
      {name:"_inline_0_arg0_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg1_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg2_",lvalue:false,rvalue:true,count:1}
      ],
    thisVars:["this_i","this_v"],
    localVars:[]},
  body:{
    body:"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
    args:[
      {name:"_inline_1_arg0_",lvalue:false,rvalue:true,count:2},
      {name:"_inline_1_arg1_",lvalue:false,rvalue:true,count:2}],
    thisVars:["this_i","this_v"],
    localVars:["_inline_1_k"]},
  post:{
    body:"{return this_i}",
    args:[],
    thisVars:["this_i"],
    localVars:[]}
})

exports.argmax = compile({
  args:["index","array","shape"],
  pre:{
    body:"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
    args:[
      {name:"_inline_0_arg0_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg1_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg2_",lvalue:false,rvalue:true,count:1}
      ],
    thisVars:["this_i","this_v"],
    localVars:[]},
  body:{
    body:"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
    args:[
      {name:"_inline_1_arg0_",lvalue:false,rvalue:true,count:2},
      {name:"_inline_1_arg1_",lvalue:false,rvalue:true,count:2}],
    thisVars:["this_i","this_v"],
    localVars:["_inline_1_k"]},
  post:{
    body:"{return this_i}",
    args:[],
    thisVars:["this_i"],
    localVars:[]}
})  

exports.random = makeOp({
  args: ["array"],
  pre: {args:[], body:"this_f=Math.random", thisVars:["this_f"]},
  body: {args: ["a"], body:"a=this_f()", thisVars:["this_f"]},
  funcName: "random"
})

exports.assign = makeOp({
  args:["array", "array"],
  body: {args:["a", "b"], body:"a=b"},
  funcName: "assign" })

exports.assigns = makeOp({
  args:["array", "scalar"],
  body: {args:["a", "b"], body:"a=b"},
  funcName: "assigns" })


exports.equals = compile({
  args:["array", "array"],
  pre: EmptyProc,
  body: {args:[{name:"x", lvalue:false, rvalue:true, count:1},
               {name:"y", lvalue:false, rvalue:true, count:1}], 
        body: "if(x!==y){return false}", 
        localVars: [], 
        thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return true"},
  funcName: "equals"
})



},{"cwise-compiler":13}],79:[function(require,module,exports){
var iota = require("iota-array")
var isBuffer = require("is-buffer")

var hasTypedArrays  = ((typeof Float64Array) !== "undefined")

function compare1st(a, b) {
  return a[0] - b[0]
}

function order() {
  var stride = this.stride
  var terms = new Array(stride.length)
  var i
  for(i=0; i<terms.length; ++i) {
    terms[i] = [Math.abs(stride[i]), i]
  }
  terms.sort(compare1st)
  var result = new Array(terms.length)
  for(i=0; i<result.length; ++i) {
    result[i] = terms[i][1]
  }
  return result
}

function compileConstructor(dtype, dimension) {
  var className = ["View", dimension, "d", dtype].join("")
  if(dimension < 0) {
    className = "View_Nil" + dtype
  }
  var useGetters = (dtype === "generic")

  if(dimension === -1) {
    //Special case for trivial arrays
    var code =
      "function "+className+"(a){this.data=a;};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new "+className+"(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_"+className+"(a){return new "+className+"(a);}"
    var procedure = new Function(code)
    return procedure()
  } else if(dimension === 0) {
    //Special case for 0d arrays
    var code =
      "function "+className+"(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function "+className+"_copy() {\
return new "+className+"(this.data,this.offset)\
};\
proto.pick=function "+className+"_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function "+className+"_get(){\
return "+(useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]")+
"};\
proto.set=function "+className+"_set(v){\
return "+(useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v")+"\
};\
return function construct_"+className+"(a,b,c,d){return new "+className+"(a,d)}"
    var procedure = new Function("TrivialArray", code)
    return procedure(CACHED_CONSTRUCTORS[dtype][0])
  }

  var code = ["'use strict'"]

  //Create constructor for view
  var indices = iota(dimension)
  var args = indices.map(function(i) { return "i"+i })
  var index_str = "this.offset+" + indices.map(function(i) {
        return "this.stride[" + i + "]*i" + i
      }).join("+")
  var shapeArg = indices.map(function(i) {
      return "b"+i
    }).join(",")
  var strideArg = indices.map(function(i) {
      return "c"+i
    }).join(",")
  code.push(
    "function "+className+"(a," + shapeArg + "," + strideArg + ",d){this.data=a",
      "this.shape=[" + shapeArg + "]",
      "this.stride=[" + strideArg + "]",
      "this.offset=d|0}",
    "var proto="+className+".prototype",
    "proto.dtype='"+dtype+"'",
    "proto.dimension="+dimension)

  //view.size:
  code.push("Object.defineProperty(proto,'size',{get:function "+className+"_size(){\
return "+indices.map(function(i) { return "this.shape["+i+"]" }).join("*"),
"}})")

  //view.order:
  if(dimension === 1) {
    code.push("proto.order=[0]")
  } else {
    code.push("Object.defineProperty(proto,'order',{get:")
    if(dimension < 4) {
      code.push("function "+className+"_order(){")
      if(dimension === 2) {
        code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})")
      } else if(dimension === 3) {
        code.push(
"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})")
      }
    } else {
      code.push("ORDER})")
    }
  }

  //view.set(i0, ..., v):
  code.push(
"proto.set=function "+className+"_set("+args.join(",")+",v){")
  if(useGetters) {
    code.push("return this.data.set("+index_str+",v)}")
  } else {
    code.push("return this.data["+index_str+"]=v}")
  }

  //view.get(i0, ...):
  code.push("proto.get=function "+className+"_get("+args.join(",")+"){")
  if(useGetters) {
    code.push("return this.data.get("+index_str+")}")
  } else {
    code.push("return this.data["+index_str+"]}")
  }

  //view.index:
  code.push(
    "proto.index=function "+className+"_index(", args.join(), "){return "+index_str+"}")

  //view.hi():
  code.push("proto.hi=function "+className+"_hi("+args.join(",")+"){return new "+className+"(this.data,"+
    indices.map(function(i) {
      return ["(typeof i",i,"!=='number'||i",i,"<0)?this.shape[", i, "]:i", i,"|0"].join("")
    }).join(",")+","+
    indices.map(function(i) {
      return "this.stride["+i + "]"
    }).join(",")+",this.offset)}")

  //view.lo():
  var a_vars = indices.map(function(i) { return "a"+i+"=this.shape["+i+"]" })
  var c_vars = indices.map(function(i) { return "c"+i+"=this.stride["+i+"]" })
  code.push("proto.lo=function "+className+"_lo("+args.join(",")+"){var b=this.offset,d=0,"+a_vars.join(",")+","+c_vars.join(","))
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'&&i"+i+">=0){\
d=i"+i+"|0;\
b+=c"+i+"*d;\
a"+i+"-=d}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a"+i
    }).join(",")+","+
    indices.map(function(i) {
      return "c"+i
    }).join(",")+",b)}")

  //view.step():
  code.push("proto.step=function "+className+"_step("+args.join(",")+"){var "+
    indices.map(function(i) {
      return "a"+i+"=this.shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "b"+i+"=this.stride["+i+"]"
    }).join(",")+",c=this.offset,d=0,ceil=Math.ceil")
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'){\
d=i"+i+"|0;\
if(d<0){\
c+=b"+i+"*(a"+i+"-1);\
a"+i+"=ceil(-a"+i+"/d)\
}else{\
a"+i+"=ceil(a"+i+"/d)\
}\
b"+i+"*=d\
}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a" + i
    }).join(",")+","+
    indices.map(function(i) {
      return "b" + i
    }).join(",")+",c)}")

  //view.transpose():
  var tShape = new Array(dimension)
  var tStride = new Array(dimension)
  for(var i=0; i<dimension; ++i) {
    tShape[i] = "a[i"+i+"]"
    tStride[i] = "b[i"+i+"]"
  }
  code.push("proto.transpose=function "+className+"_transpose("+args+"){"+
    args.map(function(n,idx) { return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"}).join(";"),
    "var a=this.shape,b=this.stride;return new "+className+"(this.data,"+tShape.join(",")+","+tStride.join(",")+",this.offset)}")

  //view.pick():
  code.push("proto.pick=function "+className+"_pick("+args+"){var a=[],b=[],c=this.offset")
  for(var i=0; i<dimension; ++i) {
    code.push("if(typeof i"+i+"==='number'&&i"+i+">=0){c=(c+this.stride["+i+"]*i"+i+")|0}else{a.push(this.shape["+i+"]);b.push(this.stride["+i+"])}")
  }
  code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}")

  //Add return statement
  code.push("return function construct_"+className+"(data,shape,stride,offset){return new "+className+"(data,"+
    indices.map(function(i) {
      return "shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "stride["+i+"]"
    }).join(",")+",offset)}")

  //Compile procedure
  var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"))
  return procedure(CACHED_CONSTRUCTORS[dtype], order)
}

function arrayDType(data) {
  if(isBuffer(data)) {
    return "buffer"
  }
  if(hasTypedArrays) {
    switch(Object.prototype.toString.call(data)) {
      case "[object Float64Array]":
        return "float64"
      case "[object Float32Array]":
        return "float32"
      case "[object Int8Array]":
        return "int8"
      case "[object Int16Array]":
        return "int16"
      case "[object Int32Array]":
        return "int32"
      case "[object Uint8Array]":
        return "uint8"
      case "[object Uint16Array]":
        return "uint16"
      case "[object Uint32Array]":
        return "uint32"
      case "[object Uint8ClampedArray]":
        return "uint8_clamped"
    }
  }
  if(Array.isArray(data)) {
    return "array"
  }
  return "generic"
}

var CACHED_CONSTRUCTORS = {
  "float32":[],
  "float64":[],
  "int8":[],
  "int16":[],
  "int32":[],
  "uint8":[],
  "uint16":[],
  "uint32":[],
  "array":[],
  "uint8_clamped":[],
  "buffer":[],
  "generic":[]
}

;(function() {
  for(var id in CACHED_CONSTRUCTORS) {
    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))
  }
});

function wrappedNDArrayCtor(data, shape, stride, offset) {
  if(data === undefined) {
    var ctor = CACHED_CONSTRUCTORS.array[0]
    return ctor([])
  } else if(typeof data === "number") {
    data = [data]
  }
  if(shape === undefined) {
    shape = [ data.length ]
  }
  var d = shape.length
  if(stride === undefined) {
    stride = new Array(d)
    for(var i=d-1, sz=1; i>=0; --i) {
      stride[i] = sz
      sz *= shape[i]
    }
  }
  if(offset === undefined) {
    offset = 0
    for(var i=0; i<d; ++i) {
      if(stride[i] < 0) {
        offset -= (shape[i]-1)*stride[i]
      }
    }
  }
  var dtype = arrayDType(data)
  var ctor_list = CACHED_CONSTRUCTORS[dtype]
  while(ctor_list.length <= d+1) {
    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))
  }
  var ctor = ctor_list[d+1]
  return ctor(data, shape, stride, offset)
}

module.exports = wrappedNDArrayCtor

},{"iota-array":72,"is-buffer":73}],80:[function(require,module,exports){
var DEFAULT_NORMALS_EPSILON = 1e-6;
var DEFAULT_FACE_EPSILON = 1e-6;

//Estimate the vertex normals of a mesh
exports.vertexNormals = function(faces, positions, specifiedEpsilon) {

  var N         = positions.length;
  var normals   = new Array(N);
  var epsilon   = specifiedEpsilon === void(0) ? DEFAULT_NORMALS_EPSILON : specifiedEpsilon;

  //Initialize normal array
  for(var i=0; i<N; ++i) {
    normals[i] = [0.0, 0.0, 0.0];
  }

  //Walk over all the faces and add per-vertex contribution to normal weights
  for(var i=0; i<faces.length; ++i) {
    var f = faces[i];
    var p = 0;
    var c = f[f.length-1];
    var n = f[0];
    for(var j=0; j<f.length; ++j) {

      //Shift indices back
      p = c;
      c = n;
      n = f[(j+1) % f.length];

      var v0 = positions[p];
      var v1 = positions[c];
      var v2 = positions[n];

      //Compute infineteismal arcs
      var d01 = new Array(3);
      var m01 = 0.0;
      var d21 = new Array(3);
      var m21 = 0.0;
      for(var k=0; k<3; ++k) {
        d01[k] = v0[k]  - v1[k];
        m01   += d01[k] * d01[k];
        d21[k] = v2[k]  - v1[k];
        m21   += d21[k] * d21[k];
      }

      //Accumulate values in normal
      if(m01 * m21 > epsilon) {
        var norm = normals[c];
        var w = 1.0 / Math.sqrt(m01 * m21);
        for(var k=0; k<3; ++k) {
          var u = (k+1)%3;
          var v = (k+2)%3;
          norm[k] += w * (d21[u] * d01[v] - d21[v] * d01[u]);
        }
      }
    }
  }

  //Scale all normals to unit length
  for(var i=0; i<N; ++i) {
    var norm = normals[i];
    var m = 0.0;
    for(var k=0; k<3; ++k) {
      m += norm[k] * norm[k];
    }
    if(m > epsilon) {
      var w = 1.0 / Math.sqrt(m);
      for(var k=0; k<3; ++k) {
        norm[k] *= w;
      }
    } else {
      for(var k=0; k<3; ++k) {
        norm[k] = 0.0;
      }
    }
  }

  //Return the resulting set of patches
  return normals;
}

//Compute face normals of a mesh
exports.faceNormals = function(faces, positions, specifiedEpsilon) {

  var N         = faces.length;
  var normals   = new Array(N);
  var epsilon   = specifiedEpsilon === void(0) ? DEFAULT_FACE_EPSILON : specifiedEpsilon;

  for(var i=0; i<N; ++i) {
    var f = faces[i];
    var pos = new Array(3);
    for(var j=0; j<3; ++j) {
      pos[j] = positions[f[j]];
    }

    var d01 = new Array(3);
    var d21 = new Array(3);
    for(var j=0; j<3; ++j) {
      d01[j] = pos[1][j] - pos[0][j];
      d21[j] = pos[2][j] - pos[0][j];
    }

    var n = new Array(3);
    var l = 0.0;
    for(var j=0; j<3; ++j) {
      var u = (j+1)%3;
      var v = (j+2)%3;
      n[j] = d01[u] * d21[v] - d01[v] * d21[u];
      l += n[j] * n[j];
    }
    if(l > epsilon) {
      l = 1.0 / Math.sqrt(l);
    } else {
      l = 0.0;
    }
    for(var j=0; j<3; ++j) {
      n[j] *= l;
    }
    normals[i] = n;
  }
  return normals;
}



},{}],81:[function(require,module,exports){
/*!
 * pad-left <https://github.com/jonschlinkert/pad-left>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT license.
 */

'use strict';

var repeat = require('repeat-string');

module.exports = function padLeft(str, num, ch) {
  ch = typeof ch !== 'undefined' ? (ch + '') : ' ';
  return repeat(ch, num) + str;
};
},{"repeat-string":83}],82:[function(require,module,exports){


function parse(str) {
  if(typeof buf !== 'string') {
    str = str.toString();
  }

  var lines = str.trim().split('\n');

  var positions = [];
  var cells = [];
  var vertexUVs = [];
  var vertexNormals = [];
  var faceUVs = [];
  var faceNormals = [];
  var name = null;

  for(var i=0; i<lines.length; i++) {
    var line = lines[i];

    if(line[0] === '#') continue;

    var parts = line
      .trim()
      .replace(/ +/g, ' ')
      .split(' ');

    switch(parts[0]) {
      case 'o':
        name = parts.slice(1).join(' ');
        break;
      case 'v':
        var position = parts.slice(1).map(Number).slice(0, 3);
        positions.push(position);
        break;
      case 'vt':
        var uv = parts.slice(1).map(Number);
        vertexUVs.push(uv);
        break;
      case 'vn':
        var normal = parts.slice(1).map(Number);
        vertexNormals.push(normal);
        break;
      case 'f':
        var positionIndices = [];
        var uvIndices = [];
        var normalIndices = [];

        parts
          .slice(1)
          .forEach(function(part) {
            var indices = part
              .split('/')
              .map(function(index) {
                if(index === '') {
                  return NaN;
                }
                return Number(index);
              })

            positionIndices.push(convertIndex(indices[0], positions.length));

            if(indices.length > 1) {
              if(!isNaN(indices[1])) {
                uvIndices.push(convertIndex(indices[1], vertexUVs.length));
              }
              if(!isNaN(indices[2])) {
                normalIndices.push(convertIndex(indices[2], vertexNormals.length));
              }
            }

          });

          cells.push(positionIndices);

          if(uvIndices.length > 0) {
            faceUVs.push(uvIndices);
          }
          if(normalIndices.length > 0) {
            faceNormals.push(normalIndices);
          }
          
        break;
      default:
        // skip
    }

  }

  var mesh = {
    positions: positions,
    cells: cells
  };

  if(vertexUVs.length > 0) {
    mesh.vertexUVs = vertexUVs;
  }

  if(faceUVs.length > 0) { 
    mesh.faceUVs = faceUVs;
  }

  if(vertexNormals.length > 0) {
    mesh.vertexNormals = vertexNormals;
  }

  if(faceNormals.length > 0) {
    mesh.faceNormals = faceNormals;
  }

  if(name !== null) {
    mesh.name = name;
  }

  return mesh;
}

function convertIndex(objIndex, arrayLength) {
  return objIndex > 0 ? objIndex - 1 : objIndex + arrayLength;
}

module.exports = parse;

},{}],83:[function(require,module,exports){
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

/**
 * Results cache
 */

var res = '';
var cache;

/**
 * Expose `repeat`
 */

module.exports = repeat;

/**
 * Repeat the given `string` the specified `number`
 * of times.
 *
 * **Example:**
 *
 * ```js
 * var repeat = require('repeat-string');
 * repeat('A', 5);
 * //=> AAAAA
 * ```
 *
 * @param {String} `string` The string to repeat
 * @param {Number} `number` The number of times to repeat the string
 * @return {String} Repeated string
 * @api public
 */

function repeat(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }

  // cover common, quick use cases
  if (num === 1) return str;
  if (num === 2) return str + str;

  var max = str.length * num;
  if (cache !== str || typeof cache === 'undefined') {
    cache = str;
    res = '';
  } else if (res.length >= max) {
    return res.substr(0, max);
  }

  while (max > res.length && num > 1) {
    if (num & 1) {
      res += str;
    }

    num >>= 1;
    str += str;
  }

  res += str;
  res = res.substr(0, max);
  return res;
}

},{}],84:[function(require,module,exports){
/* global window, exports, define */

!function() {
    'use strict'

    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    }

    function sprintf(key) {
        // `arguments` is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments)
    }

    function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []))
    }

    function sprintf_format(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, match, pad, pad_character, pad_length, is_positive, sign
        for (i = 0; i < tree_length; i++) {
            if (typeof parse_tree[i] === 'string') {
                output += parse_tree[i]
            }
            else if (Array.isArray(parse_tree[i])) {
                match = parse_tree[i] // convenience purposes only
                if (match[2]) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < match[2].length; k++) {
                        if (!arg.hasOwnProperty(match[2][k])) {
                            throw new Error(sprintf('[sprintf] property "%s" does not exist', match[2][k]))
                        }
                        arg = arg[match[2][k]]
                    }
                }
                else if (match[1]) { // positional argument (explicit)
                    arg = argv[match[1]]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && arg instanceof Function) {
                    arg = arg()
                }

                if (re.numeric_arg.test(match[8]) && (typeof arg !== 'number' && isNaN(arg))) {
                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
                }

                if (re.number.test(match[8])) {
                    is_positive = arg >= 0
                }

                switch (match[8]) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2)
                        break
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10))
                        break
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10)
                        break
                    case 'j':
                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)
                        break
                    case 'e':
                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()
                        break
                    case 'f':
                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)
                        break
                    case 'g':
                        arg = match[7] ? String(Number(arg.toPrecision(match[7]))) : parseFloat(arg)
                        break
                    case 'o':
                        arg = (parseInt(arg, 10) >>> 0).toString(8)
                        break
                    case 's':
                        arg = String(arg)
                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
                        break
                    case 't':
                        arg = String(!!arg)
                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
                        break
                    case 'T':
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()
                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
                        break
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0
                        break
                    case 'v':
                        arg = arg.valueOf()
                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
                        break
                    case 'x':
                        arg = (parseInt(arg, 10) >>> 0).toString(16)
                        break
                    case 'X':
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()
                        break
                }
                if (re.json.test(match[8])) {
                    output += arg
                }
                else {
                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
                        sign = is_positive ? '+' : '-'
                        arg = arg.toString().replace(re.sign, '')
                    }
                    else {
                        sign = ''
                    }
                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '
                    pad_length = match[6] - (sign + arg).length
                    pad = match[6] ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''
                    output += match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output
    }

    var sprintf_cache = Object.create(null)

    function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt]
        }

        var _fmt = fmt, match, parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree.push(match[0])
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree.push('%')
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1])
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else {
                                throw new SyntaxError('[sprintf] failed to parse named argument key')
                            }
                        }
                    }
                    else {
                        throw new SyntaxError('[sprintf] failed to parse named argument key')
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
                }
                parse_tree.push(match)
            }
            else {
                throw new SyntaxError('[sprintf] unexpected placeholder')
            }
            _fmt = _fmt.substring(match[0].length)
        }
        return sprintf_cache[fmt] = parse_tree
    }

    /**
     * export to either browser or node.js
     */
    /* eslint-disable quote-props */
    if (typeof exports !== 'undefined') {
        exports['sprintf'] = sprintf
        exports['vsprintf'] = vsprintf
    }
    if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf
        window['vsprintf'] = vsprintf

        if (typeof define === 'function' && define['amd']) {
            define(function() {
                return {
                    'sprintf': sprintf,
                    'vsprintf': vsprintf
                }
            })
        }
    }
    /* eslint-enable quote-props */
}()

},{}],85:[function(require,module,exports){
var mat4 = require('gl-mat4')

module.exports = TurntableCamera

function TurntableCamera() {
  if (!(this instanceof TurntableCamera))
    return new TurntableCamera

  this.data = new Float32Array(16)
  this.center = new Float32Array(3)
  this.rotation = 0
  this.distance  = 30
  this.downwards = 0
}

var translation = new Float32Array([ 0, 0, 0 ])
var scratch = new Float32Array(16)

TurntableCamera.prototype.view = function(data) {
  data = data || this.data

  mat4.identity(data)
  translation[2] = -this.distance
  translation[1] = -Math.tan(this.downwards) * this.distance
  mat4.translate(data, data, translation)
  mat4.rotateY(data, data, this.rotation)
  mat4.translate(data, data, this.center)
  mat4.identity(scratch)
  mat4.rotateX(scratch, scratch, this.downwards)
  mat4.multiply(data, scratch, data)

  return data
}

},{"gl-mat4":33}],86:[function(require,module,exports){
(function (global,Buffer){
'use strict'

var bits = require('bit-twiddle')
var dup = require('dup')

//Legacy pool support
if(!global.__TYPEDARRAY_POOL) {
  global.__TYPEDARRAY_POOL = {
      UINT8   : dup([32, 0])
    , UINT16  : dup([32, 0])
    , UINT32  : dup([32, 0])
    , INT8    : dup([32, 0])
    , INT16   : dup([32, 0])
    , INT32   : dup([32, 0])
    , FLOAT   : dup([32, 0])
    , DOUBLE  : dup([32, 0])
    , DATA    : dup([32, 0])
    , UINT8C  : dup([32, 0])
    , BUFFER  : dup([32, 0])
  }
}

var hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'
var POOL = global.__TYPEDARRAY_POOL

//Upgrade pool
if(!POOL.UINT8C) {
  POOL.UINT8C = dup([32, 0])
}
if(!POOL.BUFFER) {
  POOL.BUFFER = dup([32, 0])
}

//New technique: Only allocate from ArrayBufferView and Buffer
var DATA    = POOL.DATA
  , BUFFER  = POOL.BUFFER

exports.free = function free(array) {
  if(Buffer.isBuffer(array)) {
    BUFFER[bits.log2(array.length)].push(array)
  } else {
    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {
      array = array.buffer
    }
    if(!array) {
      return
    }
    var n = array.length || array.byteLength
    var log_n = bits.log2(n)|0
    DATA[log_n].push(array)
  }
}

function freeArrayBuffer(buffer) {
  if(!buffer) {
    return
  }
  var n = buffer.length || buffer.byteLength
  var log_n = bits.log2(n)
  DATA[log_n].push(buffer)
}

function freeTypedArray(array) {
  freeArrayBuffer(array.buffer)
}

exports.freeUint8 =
exports.freeUint16 =
exports.freeUint32 =
exports.freeInt8 =
exports.freeInt16 =
exports.freeInt32 =
exports.freeFloat32 = 
exports.freeFloat =
exports.freeFloat64 = 
exports.freeDouble = 
exports.freeUint8Clamped = 
exports.freeDataView = freeTypedArray

exports.freeArrayBuffer = freeArrayBuffer

exports.freeBuffer = function freeBuffer(array) {
  BUFFER[bits.log2(array.length)].push(array)
}

exports.malloc = function malloc(n, dtype) {
  if(dtype === undefined || dtype === 'arraybuffer') {
    return mallocArrayBuffer(n)
  } else {
    switch(dtype) {
      case 'uint8':
        return mallocUint8(n)
      case 'uint16':
        return mallocUint16(n)
      case 'uint32':
        return mallocUint32(n)
      case 'int8':
        return mallocInt8(n)
      case 'int16':
        return mallocInt16(n)
      case 'int32':
        return mallocInt32(n)
      case 'float':
      case 'float32':
        return mallocFloat(n)
      case 'double':
      case 'float64':
        return mallocDouble(n)
      case 'uint8_clamped':
        return mallocUint8Clamped(n)
      case 'buffer':
        return mallocBuffer(n)
      case 'data':
      case 'dataview':
        return mallocDataView(n)

      default:
        return null
    }
  }
  return null
}

function mallocArrayBuffer(n) {
  var n = bits.nextPow2(n)
  var log_n = bits.log2(n)
  var d = DATA[log_n]
  if(d.length > 0) {
    return d.pop()
  }
  return new ArrayBuffer(n)
}
exports.mallocArrayBuffer = mallocArrayBuffer

function mallocUint8(n) {
  return new Uint8Array(mallocArrayBuffer(n), 0, n)
}
exports.mallocUint8 = mallocUint8

function mallocUint16(n) {
  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)
}
exports.mallocUint16 = mallocUint16

function mallocUint32(n) {
  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocUint32 = mallocUint32

function mallocInt8(n) {
  return new Int8Array(mallocArrayBuffer(n), 0, n)
}
exports.mallocInt8 = mallocInt8

function mallocInt16(n) {
  return new Int16Array(mallocArrayBuffer(2*n), 0, n)
}
exports.mallocInt16 = mallocInt16

function mallocInt32(n) {
  return new Int32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocInt32 = mallocInt32

function mallocFloat(n) {
  return new Float32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocFloat32 = exports.mallocFloat = mallocFloat

function mallocDouble(n) {
  return new Float64Array(mallocArrayBuffer(8*n), 0, n)
}
exports.mallocFloat64 = exports.mallocDouble = mallocDouble

function mallocUint8Clamped(n) {
  if(hasUint8C) {
    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)
  } else {
    return mallocUint8(n)
  }
}
exports.mallocUint8Clamped = mallocUint8Clamped

function mallocDataView(n) {
  return new DataView(mallocArrayBuffer(n), 0, n)
}
exports.mallocDataView = mallocDataView

function mallocBuffer(n) {
  n = bits.nextPow2(n)
  var log_n = bits.log2(n)
  var cache = BUFFER[log_n]
  if(cache.length > 0) {
    return cache.pop()
  }
  return new Buffer(n)
}
exports.mallocBuffer = mallocBuffer

exports.clearCache = function clearCache() {
  for(var i=0; i<32; ++i) {
    POOL.UINT8[i].length = 0
    POOL.UINT16[i].length = 0
    POOL.UINT32[i].length = 0
    POOL.INT8[i].length = 0
    POOL.INT16[i].length = 0
    POOL.INT32[i].length = 0
    POOL.FLOAT[i].length = 0
    POOL.DOUBLE[i].length = 0
    POOL.UINT8C[i].length = 0
    DATA[i].length = 0
    BUFFER[i].length = 0
  }
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"bit-twiddle":11,"buffer":12,"dup":17}],87:[function(require,module,exports){
"use strict"

function unique_pred(list, compare) {
  var ptr = 1
    , len = list.length
    , a=list[0], b=list[0]
  for(var i=1; i<len; ++i) {
    b = a
    a = list[i]
    if(compare(a, b)) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique_eq(list) {
  var ptr = 1
    , len = list.length
    , a=list[0], b = list[0]
  for(var i=1; i<len; ++i, b=a) {
    b = a
    a = list[i]
    if(a !== b) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique(list, compare, sorted) {
  if(list.length === 0) {
    return list
  }
  if(compare) {
    if(!sorted) {
      list.sort(compare)
    }
    return unique_pred(list, compare)
  }
  if(!sorted) {
    list.sort()
  }
  return unique_eq(list)
}

module.exports = unique

},{}],88:[function(require,module,exports){
module.exports = normalize

function normalize(vec) {
  var mag = 0
  for (var n = 0; n < vec.length; n++) {
    mag += vec[n] * vec[n]
  }
  mag = Math.sqrt(mag)

  // avoid dividing by zero
  if (mag === 0) {
    return Array.apply(null, new Array(vec.length)).map(Number.prototype.valueOf, 0)
  }

  for (var n = 0; n < vec.length; n++) {
    vec[n] /= mag
  }

  return vec
}

},{}],89:[function(require,module,exports){
var hiddenStore = require('./hidden-store.js');

module.exports = createStore;

function createStore() {
    var key = {};

    return function (obj) {
        if ((typeof obj !== 'object' || obj === null) &&
            typeof obj !== 'function'
        ) {
            throw new Error('Weakmap-shim: Key must be object')
        }

        var store = obj.valueOf(key);
        return store && store.identity === key ?
            store : hiddenStore(obj, key);
    };
}

},{"./hidden-store.js":90}],90:[function(require,module,exports){
module.exports = hiddenStore;

function hiddenStore(obj, key) {
    var store = { identity: key };
    var valueOf = obj.valueOf;

    Object.defineProperty(obj, "valueOf", {
        value: function (value) {
            return value !== key ?
                valueOf.apply(this, arguments) : store;
        },
        writable: true
    });

    return store;
}

},{}],91:[function(require,module,exports){
// Original - @Gozola.
// https://gist.github.com/Gozala/1269991
// This is a reimplemented version (with a few bug fixes).

var createStore = require('./create-store.js');

module.exports = weakMap;

function weakMap() {
    var privates = createStore();

    return {
        'get': function (key, fallback) {
            var store = privates(key)
            return store.hasOwnProperty('value') ?
                store.value : fallback
        },
        'set': function (key, value) {
            privates(key).value = value;
            return this;
        },
        'has': function(key) {
            return 'value' in privates(key);
        },
        'delete': function (key) {
            return delete privates(key).value;
        }
    }
}

},{"./create-store.js":89}],92:[function(require,module,exports){


function playOuchAudio(extreme) {
  let ouchAudio = window[`ouch${_.random(0, 3)}Audio`];
  if (extreme) ouchAudio = ouch4Audio;
  ouchAudio.play();
}

module.exports = { playOuchAudio };


},{}],93:[function(require,module,exports){

var _ = require('lodash');
var Data = require('./data');

var cardContainer = document.getElementById('cards');
var cardTemplate = document.getElementById('card-template');

var cardTypes = {
  victory: require('./victory'),
  surgeon: require('./surgeon'),
  event: require('./events'),
  job: require('./job'),
};

function Card(type, money, template, attributes) {
  this.key = _.uniqueId('card');
  this.type = type;
  this.money = money;
  this.template = template;
  this.flavor = template(attributes);
  this.attributes = attributes;
}

function render(card) {
  var cardNode = cardTemplate.content.cloneNode(true);
  var s = cardNode.querySelector.bind(cardNode);
  s('.card').setAttribute('data-key', card.key);
  s('.card').setAttribute('data-sign', Math.sign(card.money));
  if (Data.money + card.money < 0 || Data.money < 0) {
    s('.card').classList.add('disabled');
  }
  s('.card').classList.add(card.type);

  s('.front .type').innerText = card.type;
  s('.back .type').innerText = card.type;
  s('.flavor').innerHTML = card.flavor;
  s('.amount').innerText = card.money;

  cardContainer.appendChild(cardNode);
}

function renderBack(card, message) {
  var cardEl = cardContainer.querySelector(`[data-key="${card.key}"]`);
  var s = cardEl.querySelector.bind(cardEl);
  s('.back .flavor').innerHTML = message;
}

function toggle(toggle) {
  if (toggle !== undefined) toggle = !toggle;
  cardContainer.classList.toggle('closed', toggle);
}

function reset() {
  cardContainer.innerHTML = '';
}

function select(card) {
  var ev = new CustomEvent('card:select', { detail: card });
  document.body.dispatchEvent(ev);
}

function flip(card) {
  unflip();
  var cardEl = cardContainer.querySelector(`[data-key="${card.key}"]`);
  cardEl.classList.toggle('chosen', true);
  cardContainer.classList.toggle('hide-not-chosen', true);
}

function unflip() {
  for (var i=0; i < cardContainer.children.length; i++) {
    var child = cardContainer.children.item(i);
    child.classList.remove('chosen');
  }
  cardContainer.classList.toggle('hide-not-chosen', false);
}

function generate(_type) {
  var type = _type || _.sample(Object.keys(cardTypes));
  var attr = cardTypes[type].generate();
  var money = (type === 'job' ? attr.pay : -attr.cost) || 0;
  return new Card(type, money, attr.template, attr);
}

module.exports = {
  Card,
  cardTypes,
  render,
  renderBack,
  flip,
  unflip,
  toggle,
  reset,
  select: _.throttle(select, 888),
  generate,
};


},{"./data":95,"./events":96,"./job":99,"./surgeon":104,"./victory":105,"lodash":76}],94:[function(require,module,exports){

let _ = require('lodash');

function createTurntableListeners(renderer) {
  let { camera } = renderer;
  let result = {};
  
  let isDown = false;
  result.mousedown = e => isDown = true;
  result.mouseup = e => isDown = false;
  result.mousemove = e => {
    if (!isDown) return;
    camera.downwards = _.clamp(camera.downwards + e.movementY/200, -Math.PI/8, 0);
    camera.rotation = _.clamp(camera.rotation + e.movementX/100, -Math.PI/4, Math.PI/4);
    renderer.requestFrame();
  }

  result.resize = e => renderer.requestFrame();
  return result;
}

function addListeners(target, listeners) {
  for (let eventName in listeners) {
    target.addEventListener(eventName, listeners[eventName]);
  }
}

function removeListeners(target, listeners) {
  for (let eventName in listeners) {
    target.removeEventListener(eventName, listeners[eventName]);
  }
}

module.exports = { createTurntableListeners, addListeners, removeListeners };


},{"lodash":76}],95:[function(require,module,exports){

var _ = require('lodash');
var HEAL_PER_TURN = 0.2;

var data = {
  money: 5000,
  cards: [],
  transform: {},
};

function getMaxInjuryValue() {
  return _.max(_.values(data.transform.injuryValues)) || 0;
}

function getTurnsTillFullyHealed() {
  return Math.ceil(getMaxInjuryValue() / HEAL_PER_TURN);
}

Object.assign(data, {
  getMaxInjuryValue,
  getTurnsTillFullyHealed,
  HEAL_PER_TURN,
});

module.exports = data;


},{"lodash":76}],96:[function(require,module,exports){

var _ = require('lodash');
var Surgeon = require('./surgeon');
var Mesh = require('./mesh');
var Audio = require('./audio');

var HEAL_PER_TURN = Surgeon.HEAL_PER_TURN;

var injuryAreas = Array.from(Mesh.partDisplayNameMap.keys());

var events = [
  {
    text: 'go to the beach',
    risk: 'Shark Attack!',
    chance: 0.1,
  },
  {
    text: 'have a picnic in the park',
  },
  {
    text: 'go to the party',
    risk: 'Someone punched you!',
    chance: 0.2,
  },
  {
    text: 'have dinner',
  },
  {
    text: 'do some errands',
  },
  {
    text: 'relax at home',
    risk: 'Stayed up all night!',
    chance: 0.3,
  },
  {
    text: 'visit an old friend',
    risk: 'Stayed up all night!',
    chance: 0.3,
  },
  {
    text: 'get some drinks',
    risk: 'Stayed up all night!',
    chance: 0.6,
  }
];

var accidents = {
  'Shark Attack!': () => {
    var injuries = _.sampleSize(injuryAreas, 3);
    var transform = { injuryValues: {} };
    injuries.forEach((area) => {
      transform.injuryValues[area] = HEAL_PER_TURN * _.random(0, 2);
    });
    return transform;
  },
  'Someone punched you!': () => {
    var injury = _.sample([
      'upper_cheek_left', 'upper_cheek_right',
      'lower_cheek_left', 'lower_cheek_right',
      'jaw_left', 'jaw_right', 'nose_bridge',
    ]);
    return {
      injuryValues: {
        [injury]: HEAL_PER_TURN,
      },
    };
  },
  'Stayed up all night!': () => {
    return {
      injuryValues: { under_eyes: HEAL_PER_TURN }
    };
  },
};

var friends = [
  'Anna',
  'Joan',
  'George',
  'Heather',
  'Carl',
];

var templates = [
  (event) => `
    <p>You got a text from a friend:</p>
    <p>
      <strong>${_.sample(friends)}:</strong><br />
      Do you want to <b>${event.text}</b>?
      I'm planning to do that today and was wondering if you wanted to join.
    </p>`,
  (event) => `
    <p>
      You feel like you want to <b>${event.text}</b>.
    </p>`,
  (event) => `
    <p>
      ${_.sample(friends)} invited you to <b>${event.text}</b>.
    </p>`,

];

function generate() {
  var event = Object.assign({}, _.sample(events));
  event.template = _.sample(templates);
  return event;
}

function perform(event) {
  cardAudio.play();
  var response = `You ${event.text}.`;
  var accident = event.risk && Math.random() < event.chance;
  if (accident) {
    Audio.playOuchAudio();
    var transform = accidents[event.risk]();
    Surgeon.mergeTransform(transform);
    return `${response} <p><strong>${event.risk}</strong> Better rest for a bit.</p>`;
  }
  return `${response} <p>It was uneventful.</p>`;
}

module.exports = {
  generate,
  perform,
};


},{"./audio":92,"./mesh":100,"./surgeon":104,"lodash":76}],97:[function(require,module,exports){

let Icosphere = require('icosphere');
let createGeometry = require('gl-geometry');
let createShader = require('gl-shader');
let normals = require('normals');

let eyeVS = `
  attribute vec3 position, normal;

  uniform mat4 projection, view, world;
  varying vec3 v_position, v_normal;

  void main() {
    vec4 worldPosition = world*vec4(position, 1.0);
    gl_Position = projection*view*worldPosition;
    v_position = worldPosition.xyz;
    v_normal = normal;
  }
`;

let eyeFS = `
  precision mediump float;
  varying vec3 v_position, v_normal;

  uniform vec3 lightPosition0, lightPosition1;
  uniform vec4 diffuseColor, ambientColor, specularColor;
  uniform vec3 eyeCenter, lookAt;
  uniform vec4 irisColor;
  uniform float radius;

  void main() {
    vec3 lightDiff0 = normalize(lightPosition0 - v_position);
    vec3 lightDiff1 = normalize(lightPosition1 - v_position);
    vec4 baseColor = vec4(0.8, 0.8, 0.8, 1.0);
    vec4 specularColor = vec4(1.0, 1.0, 1.0, 1.0);
    vec4 diffuseColor = vec4(0.9, 0.9, 0.9, 1.0);
    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

    vec3 centerToLook = normalize(lookAt - eyeCenter);
    vec3 pointToLook = lookAt - v_position;
    vec3 centerToPoint = pointToLook - dot(pointToLook, centerToLook)*centerToLook;
    float centerToPointLength = length(centerToPoint);

    if (centerToPointLength < radius/2.5) {
      baseColor = irisColor;
      diffuseColor = irisColor;
    }

    if (centerToPointLength < radius/5.0) {
      diffuseColor = black;
      baseColor = black;
    }

    float lightDot = clamp(max(dot(lightDiff0, v_normal), dot(lightDiff1, v_normal)), 0.0, 1.0);
    lightDot *= lightDot;
    float ambientWeight = 1.0 - lightDot;
    float weightSum = 1.0 + ambientWeight + lightDot;
    vec4 litColor = (diffuseColor + lightDot*specularColor + ambientWeight*baseColor)/weightSum;
    gl_FragColor = litColor;
  }
`;

class Pair {
  constructor(faceRenderer, left, right) {
    this.gl = faceRenderer.gl;
    this.faceRenderer = faceRenderer;

    let sphere = Icosphere(3);
    this.geometry = createGeometry(this.gl)
      .attr('position', sphere.positions)
      .attr('normal', normals.vertexNormals(sphere.cells, sphere.positions))
      .faces(sphere.cells);
    this.shader = createShader(this.gl, eyeVS, eyeFS);
    this.irisColor = vec4.fromValues(0.3, 0.2, 0.1, 1);

    this.lookAtRadius = 100;
    this.lookAt = vec3.fromValues(0, 0, -this.lookAtRadius);
    this.scale = _.times(3, () => 0.35);
    this.world = mat4.create();
    this.right = right;
    this.left = left;
    this.lookAtAngle = 0;
     
    this._changeGaze();
    this._saccade();
  }

  _changeGaze() {
    this.lookAtAngle = Math.PI*(Math.random() - 0.5)/3;
    this._updateLookAt();
    setTimeout(()=> this._changeGaze(), _.random(2000, 5000));
  }

  _saccade() {
    let adjustment = Math.PI*(Math.random()-0.5)/32;
    this.lookAtAngle += adjustment;
    this._updateLookAt();
    setTimeout(()=> this._changeGaze(), _.random(10, 200));
  }

  _updateLookAt() {
    let { lookAtAngle, lookAtRadius, faceRenderer } = this;
    let x = lookAtRadius*Math.sin(lookAtAngle);
    let z = -lookAtRadius*Math.cos(lookAtAngle);
    vec3.set(this.lookAt, x, 0, z);
    faceRenderer.requestFrame();
  }

  draw() {
    let { left, right, geometry, shader, faceRenderer: {
      projection, view, lightPosition0, lightPosition1,
      ambientColor, specularColor, diffuseColor
    } } = this;
    let { uniforms } = shader;

    geometry.bind(shader);
    uniforms.view = view;
    uniforms.projection = projection;
    uniforms.lightPosition0 = lightPosition0;
    uniforms.lightPosition1 = lightPosition1;
    uniforms.ambientColor = ambientColor;
    uniforms.specularColor = specularColor;
    uniforms.diffuseColor = diffuseColor;
    uniforms.irisColor = this.irisColor;
    uniforms.radius = this.scale[0];
    uniforms.lookAt = this.lookAt;

    for (let center of [left, right]) {
      mat4.identity(this.world);
      mat4.translate(this.world, this.world, center);
      mat4.scale(this.world, this.world, this.scale);
      uniforms.world = this.world;
      uniforms.eyeCenter = center;
      geometry.draw();
    }
  }
}

module.exports = { Pair };


},{"gl-geometry":22,"gl-shader":49,"icosphere":70,"normals":80}],98:[function(require,module,exports){

let { vec3, mat4 } = require('gl-matrix');
let Multimap = require('multimap');
let Surgeon = require('./surgeon');
let Data = require('./data');

let EPSILON = 0.000001;

let healthContainer = document.querySelector('#health');
let healthTemplate = document.querySelector('#health-template');

function getTurnsToHeal(partName) {
  return Math.ceil(_.get(Data, 'transform.injuryValues.' + partName) / Surgeon.HEAL_PER_TURN);
}

let aggregations = new Multimap([
  ['Nose', 'nose_bridge'],
  ['Nose', 'nose_nostrils'],
  ['Nose', 'nose_tip'],
  ['Upper Lip', 'upper_lip_center'],
  ['Lower Lip', 'lower_lip_center'],
  ['Left Ear', 'upper_ear_left'],
  ['Left Ear', 'ear_lobe_left'],
  ['Right Ear', 'upper_ear_right'],
  ['Right Ear', 'ear_lobe_right'],
  ['Eyes', 'under_eyes'],
  ['Eyes', 'eye_lids'],
  ['Left Cheek', 'upper_cheek_left'],
  ['Left Cheek', 'lower_cheek_left'],
  ['Right Cheek', 'upper_cheek_right'],
  ['Right Cheek', 'upper_cheek_left'],
  ['Left Brow', 'brow_left'],
  ['Right Brow', 'brow_right'],
  ['Chin', 'chin_center'],
  ['Left Jaw', 'jaw_left'],
  ['Right Jaw', 'jaw_right'],
]);

function makeHealthNode(name) {
  var healthNode = healthTemplate.content.cloneNode(true).firstElementChild;
  healthContainer.appendChild(healthNode);
  healthNode.dataset.part = name;
  return healthNode;
}

function applyHealthData(healthNode, health) {
  healthNode.querySelector('.name').innerText = health.name;
  healthNode.querySelector('.turns').innerText = health.turns;
  healthNode.style.left = (health.x - 75) + 'px';
  healthNode.style.top = (health.y - 25) + 'px';
  healthNode.style.opacity = health.opacity;
  healthNode.style.zIndex = health.zIndex;
}

class Manager {
  constructor(renderer, facePartAverages) {
    let aggregationAverages = {};
    for (let aggregation of aggregations.keys()) {
      let average = vec3.create();
      for (let facePart of aggregations.get(aggregation)) {
        vec3.add(average, average, facePartAverages[facePart]);
      }
      vec3.scale(average, average, 1/aggregations.get(aggregation).length);
      aggregationAverages[aggregation] = average;
    }

    this.aggregationAverages = aggregationAverages;
    this.cameraMat = mat4.create();
    this.renderer = renderer;
    this.show = false;

    document.body.addEventListener('render', () => this.layout());
    document.body.addEventListener('keydown', e => {
      if (e.key == ' ') {
        this.show = true;
        this.renderer.requestFrame();
      }
    });

    document.body.addEventListener('keyup', e => {
      if (e.key == ' ') {
        this.show = false;
        this.renderer.requestFrame();
      }
    });

  }

  layout() {
    let { renderer, cameraMat, aggregationAverages } = this;
    let { canvas: { width, height }, aspect } = renderer;
    mat4.multiply(cameraMat, renderer.projection, renderer.view);

    if (this.show) {
      healthIsShowing.classList.add('show'); 
    } else {
      healthIsShowing.classList.remove('show');
    }

    let pending = [];
    let removing = [];
    for (let aggregation in aggregationAverages) {
      let turns = _.max(aggregations.get(aggregation).map(getTurnsToHeal)) || 0;
      if (turns == 0) {
        removing.push({ name: aggregation });
        continue;
      }

      let worldPoint = aggregationAverages[aggregation];
      let screenPoint = vec3.transformMat4(vec3.create(), worldPoint, cameraMat);
      let x = (screenPoint[0]+1)*height*aspect/2;
      let y = (-screenPoint[1]+1)*height/2;
      pending.push({ name: aggregation, x, y, z: -screenPoint[2], turns });
    }

    let allZ = _.map(pending, 'z');
    let minZ = _.min(allZ), maxZ = _.max(allZ);
    pending = _.sortBy(pending, x => x.z);

    let minOpacity = 1/pending.length;
    let opacityRange = maxZ - minZ;
    for (let i = 0; i < pending.length; i++) {
      let entry = pending[i];
      let { name } = entry;

      entry.zIndex = i;

      if (opacityRange > 0) {
        entry.opacity = (1 - minOpacity)*(entry.z - minZ) / opacityRange + minOpacity;
      } else {
        entry.opacity = 1;
      }
      if (!this.show) entry.opacity = 0;

      let existing = healthContainer.querySelector(`.health-node[data-part="${name}"]`);
      if (existing == null) existing = makeHealthNode(name);
      applyHealthData(existing, entry);
    }

    for (let i = 0; i < removing.length; i++) {
      let entry = removing[i];
      let name = entry.name;
      let existing = healthContainer.querySelector(`.health-node[data-part="${name}"]`);
      if (existing) existing.remove();
    }
  }
}

module.exports = { Manager, aggregations };


},{"./data":95,"./surgeon":104,"gl-matrix":48,"multimap":77}],99:[function(require,module,exports){

let _ = require('lodash');
let Data = require('./data');
let Money = require('./money');
let Mesh = require('./mesh');
let Victory = require('./victory');

let { IDEAL_FACE } = Victory;
let IDEAL_PART_NAMES = _.keys(IDEAL_FACE.normalShifts);

function renderFaceConstraintText(constraint) {
  let { partName, maxDaysToHeal } = constraint;
  let faceMessage, partMessage = '';

  if (maxDaysToHeal == 0) {
    faceMessage = `We need a ${_.sample(['fresh', 'lovely', 'radiant'])} face.`;
  } else if (maxDaysToHeal < 3) {
    let adjective = _.sample(['reasonable', 'average', 'modest']);
    faceMessage = `We're just looking for a ${adjective}-looking person.`;
  } else if (maxDaysToHeal < 5) {
    let adjective = _.sample(['roadkill', 'silly putty', 'tree bark']);
    faceMessage = `We're open to a ${adjective} look.`;
  } else {
    faceMessage = `We want you if you have a face.`;
  }

  if (partName) {
    let displayName = Mesh.partDisplayNameMap.get(partName);
    let sizeAdjective;
    if (IDEAL_FACE.normalShifts[partName] > 0) {
      sizeAdjective = _.sample(['huge', 'hefty', 'big', 'sizeable']);
    } else {
      sizeAdjective = _.sample(['small', 'discreet', 'compact', 'tiny']);
    }

    partMessage = `We're really looking for someone with a <b>${sizeAdjective} ${displayName}</b>.`;
  }

  return `
    <p>${faceMessage}</p>
    <p>${partMessage}</p>
  `;
}

function checkFaceConstraint(constraint) {
  let success = true;
  let message = 'Congratulations!';
  let turn = _.sample(['On second thought... ', `We've changed our minds.`, `Actually...`]);

  if (Data.getTurnsTillFullyHealed() > constraint.maxDaysToHeal) {
    let rejection = _.sample([`We're getting someone else.`, `Please leave.`]);
    message = turn + ' ' + rejection;
    success = false;
  }

  let { partName } = constraint;
  if (success && partName) {
    let displayName = Mesh.partDisplayNameMap.get(partName);
    let check = Victory.checkFacePart(partName, constraint.checkRatio || 0.5);
    if (check == -1) {
      message = `${turn} <b>Your ${displayName} is too big for us.</b>`;
      success = false; 
    } else if (check == 1) {
      message = `${turn} <b>Your ${displayName} is too small for us.</b>`;
      success = false;
    }
  }

  return { success, message };
}

function roundBy(value, rounder) {
  return rounder*Math.floor(value / rounder);
}

function generateMagazineJob() {
  let magazineType = _.sample(['Teen', 'Gossip', 'Fashion', 'Home']);
  let pay = 0;

  if (magazineType == 'Teen') {
    pay = _.random(500, 1500);
  } else if (magazineType == 'Gossip') {
    pay = _.random(100, 1000);
  } else if (magazineType == 'Fashion') {
    pay = _.random(2000, 3500);
  } else if (magazineType == 'Home') {
    pay = _.random(1000, 2200);
  }

  let content = _.sample([
     `
      <p>We've got a job for an ad in <b>${magazineType} Magazine</b> for you!</p>
     `
  ]);

  let constraint = { maxDaysToHeal: _.random(0, 1), partName: _.sample(IDEAL_PART_NAMES) };
  return { pay, content, constraint };
}

function generateAdJob() {
  let gerund = _.sample([ 'cleaning', 'opening', 'vacuuming' ]);
  let noun = _.sample([ 'car', 'refrigerator', 'desk', 'chicken' ]);

  let content = _.sample([
    `
      <p>We have a new product for ${gerund} your ${noun}
        and we want you to be our <b>TV spokesperson</b>!</p>
    `,
  ]);

  let pay = _.random(100, 600);
  let constraint = {
    maxDaysToHeal: _.random(0, 4),
    partName: _.sample(IDEAL_PART_NAMES), 
    checkRatio: 0.75
  };
  return { pay, content, constraint };
}

function generateSketchyJob() {
  let pay = _.random(5, 100);

  let diminuative = _.sample(['Honey', 'Babe']);
  let convention = _.sample(['Awesome Socks', 'Electronic Darts', 'Gilford Gaming']);

  let content = _.sample([
    `
      <p>Looking for an <b>easy gig</b>? I got <b>${pay} dollars</b> with your name on it.</p>
    `,
    `
      <p>${diminuative}, with a face like that you'd make a killing at <b>Woofers</b>.</p>
    `,
    `
      <p>${diminuative}, I got a <b>booth at the ${convention} Convention</b> that you'd look great next to.</p>
    `
  ]);

  let constraint = { maxDaysToHeal: _.random(0, 10) };
  return { pay, content, constraint };
}

let generatorList = _.concat(
  _.times(30, () => generateSketchyJob),
  _.times(30, () => generateAdJob),
  _.times(15, () => generateMagazineJob));

function perform(job) {
  let check = checkFaceConstraint(job.constraint);
  if (check.success) {
    Data.money += job.pay;
    Money.renderChange(job.pay);
    moneyAudio.play();
    return `You made <strong>${job.pay} dollars</strong>!`;
  } else {
    window[`ugh${_.random(0,2)}Audio`].play();
    return check.message;
  }
}

function generate() {
  let job = _.sample(generatorList)();

  let pay = job.pay;
  if (pay > 1000) pay = roundBy(pay, 100);
  else if (pay > 100) pay = roundBy(pay, 10);
  job.pay = pay;

  job.template = (job) => {
    let constraintText = renderFaceConstraintText(job.constraint);
    return job.content + constraintText;
  };
  return job;
}

module.exports = { generate, perform };


},{"./data":95,"./mesh":100,"./money":101,"./victory":105,"lodash":76}],100:[function(require,module,exports){

let parseOBJ = require('parse-wavefront-obj');
let Multimap = require('multimap');
let Setup = require('./setup');
let _ = require('lodash');

let face = parseOBJ(require('../mesh/face.obj'));
let faceWeights = _.mapValues(require('../mesh/faceWeights.json'),
    x => Setup.derefCells(x, face.cells));

let displayNamePairs = [
  ['nose_bridge', 'nose bridge'],
  ['nose_nostrils', 'nostrils'],
  ['nose_tip', 'nose tip'],
  ['upper_lip_center', 'upper lip'],
  ['lower_lip_center', 'lower lip'],
  ['upper_ear_left', 'upper left ear'],
  ['ear_lobe_left', 'left ear lobe'],
  ['upper_ear_right', 'upper right ear'],
  ['ear_lobe_right', 'right ear lobe'],
  ['under_eyes', 'area under your eyes'],
  ['eye_lids', 'eye lids'],
  ['upper_cheek_left', 'upper left cheek'],
  ['lower_cheek_left', 'lower left cheek'],
  ['upper_cheek_right', 'upper right cheek'],
  ['lower_cheek_right', 'lower right cheek'],
  ['brow_left', 'left brow'],
  ['brow_right', 'right brow'],
  ['chin_center', 'chin'],
  ['jaw_left', 'left jaw'],
  ['jaw_right', 'right jaw']
];

let partDisplayNameMap = new Map(displayNamePairs);
let ALL_FACE_PARTS = Array.from(partDisplayNameMap.keys());

module.exports = {
  cube: parseOBJ(require('../mesh/cube.obj')),
  ponytail: parseOBJ(require('../mesh/ponytail.obj')),
  face, faceWeights, partDisplayNameMap, ALL_FACE_PARTS
};


},{"../mesh/cube.obj":2,"../mesh/face.obj":3,"../mesh/faceWeights.json":4,"../mesh/ponytail.obj":5,"./setup":103,"lodash":76,"multimap":77,"parse-wavefront-obj":82}],101:[function(require,module,exports){

var Data = require('./data');

var moneyContainer = document.getElementById('money');
var amountEl = moneyContainer.querySelector('.amount');
var changeQueue = [];

function render() {
  amountEl.innerText = Data.money;
}

function renderChange(change, reason) {
  if (!change) return;

  var changeEl = document.createElement('div');
  changeEl.innerText = `${reason || ''} ${change}`;
  changeEl.classList.add('change');
  changeEl.setAttribute('data-sign', Math.sign(change));
  changeQueue.push(changeEl);
}

function renderChangeFromQueue() {
  var changeEl = changeQueue.shift();
  if (!changeEl) return;
  moneyContainer.appendChild(changeEl);
  setTimeout(() => changeEl.classList.add('animate'), 10);
  setTimeout(() => changeEl.remove(), 800);
}

setInterval(renderChangeFromQueue, 500)

module.exports = {
  render,
  renderChange,
};


},{"./data":95}],102:[function(require,module,exports){

let TurntableCamera = require('turntable-camera');
let createShader = require('gl-shader');
let createTexture = require('gl-texture2d');
let { vec3, vec4, mat4 } = require('gl-matrix');
let Setup = require('./setup');
let Eye = require('./eye');

const NSHIFT = 'normalShifts';

const skinColors = [
  // Fair
  {
    diffuseColor: vec4.fromValues(1,0.8,0.6,1),
    specularColor: vec4.fromValues(1,1,1,1),
    ambientColor: vec4.fromValues(0.5,0.5,0.4,1),
    injuryColor: vec4.fromValues(0.4, 0.1, 0.15, 1),
  },
  // Medium
  {
    diffuseColor: vec4.fromValues(0.93, 0.70, 0.55, 1.00),
    specularColor: vec4.fromValues(1,1,1,1),
    ambientColor: vec4.fromValues(0.64, 0.48, 0.39, 1.00),
    injuryColor: vec4.fromValues(0.25, 0.1, 0.15, 1),
  },
  // Tanned
  {
    diffuseColor: vec4.fromValues(0.71, 0.54, 0.47, 1.00),
    specularColor: vec4.fromValues(0.94, 0.71, 0.62, 1.00),
    ambientColor: vec4.fromValues(0.3, 0.2, 0.15, 1.00),
    injuryColor: vec4.fromValues(0.2, 0, 0.1, 1),
  },
  // Dark
  {
    diffuseColor: vec4.fromValues(0.40, 0.21, 0.16, 1.00),
    specularColor: vec4.fromValues(0.69, 0.38, 0.30, 1.00),
    ambientColor: vec4.fromValues(0.10, 0.10, 0.07, 1.00),
    injuryColor: vec4.fromValues(0.1, 0, 0.2, 1),
  },
];

const hairColors = [
  // Blonde
  {
    hairAmbientColor: vec4.fromValues(0.2,0.1,0.1,1),
    hairSpecularColor: vec4.fromValues(1, 1, 1,1),
    hairDiffuseColor: vec4.fromValues(1.00, 0.83, 0.32, 1.00),
  },
  // Platinum
  {
    hairAmbientColor: vec4.fromValues(0.16, 0.14, 0.09, 1.00),
    hairSpecularColor: vec4.fromValues(1, 1, 1, 1.00),
    hairDiffuseColor: vec4.fromValues(1, 0.95, 0.8, 1.00),
  },
  // Brown
  {
    hairAmbientColor: vec4.fromValues(0, 0, 0, 1.00),
    hairSpecularColor: vec4.fromValues(0.60, 0.28, 0.17, 1.00),
    hairDiffuseColor: vec4.fromValues(0.46, 0.21, 0.13, 1.00),
  },
  // Black
  {
    hairAmbientColor: vec4.fromValues(0, 0, 0, 1.00),
    hairSpecularColor: vec4.fromValues(0.4, 0.2, 0.1, 1.00),
    hairDiffuseColor: vec4.fromValues(0.2, 0.15, 0.07, 1.00),
  },
];

function preFrame(gl, canvas, color = [1,1,1,1]) {
  canvas.width = canvas.offsetWidth;
  canvas.height = canvas.offsetHeight;
  gl.clearColor(color[0], color[1], color[2], color[3]);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  var { width, height } = canvas;
  gl.viewport(0, 0, width, height);
}

function canvasProjection(projection, canvas) {
  let { width, height } = canvas;
  return mat4.perspective(projection, Math.PI/4, width/height, 1, 100);
}

function createDefaultShader(gl) {
  let vs = `
    attribute vec3 position, normal, shift, texcoord;

    uniform mat4 projection, view;
    varying vec3 v_position, v_normal, v_shift, v_texcoord;

    void main() {
      vec3 displaced = position + shift.z*normal;
      gl_Position = projection*view*vec4(displaced, 1.0);
      v_position = gl_Position.xyz;
      v_texcoord = texcoord;
      v_normal = normal;
      v_shift = shift;
    }
  `;

  let fs = `
    precision mediump float;
    varying vec3 v_position, v_normal, v_shift, v_texcoord;

    uniform vec3 lightPosition0, lightPosition1;
    uniform vec4 diffuseColor, ambientColor, specularColor, injuryColor;
    uniform sampler2D texture;

    void main() {
      vec3 lightDiff0 = normalize(lightPosition0 - v_position);
      vec3 lightDiff1 = normalize(lightPosition1 - v_position);

      vec4 sample = texture2D(texture, v_texcoord.xy);
      vec4 diffuseUse = vec4(((1.0 - sample[3])*diffuseColor + sample[3]*sample).xyz, 1.0);
      float lightDot = clamp(max(dot(lightDiff0, v_normal), dot(lightDiff1, v_normal)), 0.0, 1.0);
      float ambientWeight = 1.0 - lightDot;
      float weightSum = 1.0 + ambientWeight + lightDot;
      vec4 litColor = (diffuseUse + lightDot*specularColor + ambientWeight*ambientColor)/weightSum;
      gl_FragColor = (1.0 - v_shift.x)*litColor + v_shift.x*injuryColor;
    }
  `;
  
  return createShader(gl, vs, fs);
}

function createBackgroundGeometry(gl) {
  let positions = [], texcoords = []; 
  let radius = 20, count = 32;
  for (let i = 0; i < count; i++) {
    let t = i/(count-1);
    let nextT = (i+1)/(count-1);

    let theta = 2*Math.PI*(t - 0.25);
    let nextTheta = 2*Math.PI*(nextT - 0.25);

    let bottom = -20, top = 40;
    positions.push([radius*Math.cos(theta), bottom, -radius*Math.sin(theta)]);
    positions.push([radius*Math.cos(theta), top, -radius*Math.sin(theta)]);
    positions.push([radius*Math.cos(nextTheta), top, -radius*Math.sin(nextTheta)]);

    positions.push([radius*Math.cos(nextTheta), bottom, -radius*Math.sin(nextTheta)]);
    positions.push([radius*Math.cos(theta), bottom, -radius*Math.sin(theta)]);
    positions.push([radius*Math.cos(nextTheta), top, -radius*Math.sin(nextTheta)]);

    texcoords.push([t, 0, 0]);
    texcoords.push([t, 1, 0]);
    texcoords.push([nextT, 1, 0]);

    texcoords.push([nextT, 0, 0]);
    texcoords.push([t, 0, 0]);
    texcoords.push([nextT, 1, 0]);
  }
  return createGeometry(gl).attr('position', positions)
    .attr('texcoord', texcoords);
}

function createBackgroundShader(gl) {
  let vs = `
    attribute vec3 position, texcoord;
    uniform mat4 projection, view;
    varying vec2 v_texcoord;

    void main() {
      gl_Position = projection*view*vec4(position, 1.0);
      v_texcoord = texcoord.xy;
    }
  `;

  let fs = `
    precision mediump float;
    uniform sampler2D texture;
    varying vec2 v_texcoord;

    void main() {
      gl_FragColor = texture2D(texture, v_texcoord);
    }
  `;
  
  return createShader(gl, vs, fs);
}

function createDefaultCamera() {
  let result = new TurntableCamera();
  result.center[1] -= 1;
  result.center[2] -= 2;
  result.distance = 9;
  result.rotation = -Math.PI/6;
  result.downwards = -Math.PI/16;
  return result;
}

class Renderer {
  constructor(canvas) {
    this.canvas = canvas;
    this.gl = canvas.getContext('webgl');
    this.camera = createDefaultCamera();
    this.projection = mat4.create();
    this.view = mat4.create();
    this.gl.enable(this.gl.DEPTH_TEST);
    this.clearColor = vec4.fromValues(0.05, 0.1, 0.2, 1.0);
  }

  preFrame() {
    preFrame(this.gl, this.canvas, this.clearColor);
    canvasProjection(this.projection, this.canvas);
    this.camera.view(this.view);
  }

  requestFrame() {
    requestAnimationFrame(this.drawFrame.bind(this));
  }
}

class Default extends Renderer {
  constructor(canvas) {
    super(canvas);
    this.shader = createDefaultShader(this.gl);
    this.lightPosition0 = vec3.fromValues(10, 10, 10);
    this.lightPosition1 = vec3.fromValues(-10, -2, 0);
    this.diffuseColor = vec4.fromValues(1,0.8,0.6,1);
    this.specularColor = vec4.fromValues(1,1,1,1);
    this.ambientColor = vec4.fromValues(0.7,0.7,0.6,1);
    this.injuryColor = vec4.fromValues(0.4, 0.1, 0.15, 1);
    this.geometry = [];
  }

  drawFrame() {
    this.preFrame();
    for (let geometry of this.geometry) {
      this.draw(geometry);
    }
    document.body.dispatchEvent(new CustomEvent('render'));
  }

  draw(geometry, overrides = {}) {
    let { shader, projection, view } = this;
    let { uniforms } = shader;
    geometry.bind(shader);
    uniforms.projection = overrides.projection || projection;
    uniforms.lightPosition0 = this.lightPosition0;
    uniforms.lightPosition1 = this.lightPosition1;
    uniforms.ambientColor = overrides.ambientColor || this.ambientColor;
    uniforms.specularColor = overrides.specularColor || this.specularColor;
    uniforms.diffuseColor = overrides.diffuseColor || this.diffuseColor;
    uniforms.injuryColor = this.injuryColor;
    uniforms.view = overrides.view || view;
    geometry.draw();
  }
}

class Face extends Default {
  constructor(canvas) {
    super(canvas);
    var skinColor = _.sample(skinColors);
    var hairColor = _.sample(hairColors);
    Object.assign(this, skinColor);
    Object.assign(this, hairColor);
    this.eyePair = new Eye.Pair(this,
      vec3.fromValues(-0.85, 0.9, 3.4),
      vec3.fromValues(0.85, 0.9, 3.4));

    this.cityTexture = createTexture(this.gl, cityImage);
    this.backgroundShader = createBackgroundShader(this.gl);
    this.backgroundGeometry = createBackgroundGeometry(this.gl);
    this.featuresTexture = createTexture(this.gl, featuresImage);

    this.hairOptions = {
      ambientColor: this.hairAmbientColor,
      specularColor: this.hairSpecularColor,
      diffuseColor: this.hairDiffuseColor
    };
  }

  installFace(faceMesh, faceWeights) {
    this.geometry = [];

    this.faceMesh = faceMesh;
    this.faceWeights = faceWeights;
    this.shifts = _.times(3*faceMesh.cells.length, i => vec3.create());
    this.faceGeometry = Setup.createGeometryFromObj(this.gl, faceMesh)
      .attr('shifts', this.shifts);
    this.geometry.push(this.faceGeometry);
  }

  _applyWeights(paramsSet, shiftIndex) {
    if (paramsSet == null) return;
    let { shifts } = this;

    for (let key in paramsSet) {
      let value = paramsSet[key];
      let weights = this.faceWeights[key];
      if (weights == null) continue;
      for(let i = 0; i < weights.length; i++) {
        shifts[i][shiftIndex] += value*weights[i];
      }
    }
  }

  applyFaceParameters(params) {
    let { shifts } = this;
    let { normalShifts, injuryValues } = params;

    for (let shift of shifts) vec3.set(shift, 0, 0, 0);
    this._applyWeights(normalShifts, 2);
    this._applyWeights(injuryValues, 0);

    this.faceGeometry.attr('shift', shifts);
  }

  drawFrame() {
    this.preFrame();

    let { canvas: { width, height } } = this;
    this.gl.viewport(0, 0, width, height);
    this.backgroundGeometry.bind(this.backgroundShader);
    this.backgroundShader.uniforms.projection = this.projection;
    this.backgroundShader.uniforms.view = this.view;
    this.backgroundShader.uniforms.texture = this.cityTexture.bind();
    this.backgroundGeometry.draw();

    let aspect = Math.max((2/3)*width/height, 1.1);
    mat4.perspective(this.projection, Math.PI/4, aspect, 1, 100);
    this.gl.viewport(0, 0, Math.floor(aspect*height), height);
    this.aspect = aspect;

    this.faceGeometry.bind(this.shader);
    this.shader.uniforms.texture = this.featuresTexture.bind();
    for (let geometry of this.geometry) {
      let options = geometry != this.faceGeometry ? this.hairOptions : undefined;
      this.draw(geometry, options);
    }

    this.eyePair.draw();
    document.body.dispatchEvent(new CustomEvent('render'));
  }
}

module.exports = { Default, Face, NSHIFT };


},{"./eye":97,"./setup":103,"gl-matrix":48,"gl-shader":49,"gl-texture2d":56,"turntable-camera":85}],103:[function(require,module,exports){

let _ = require('lodash');
let createGeometry = require('gl-geometry');
let parseOBJ = require('parse-wavefront-obj');
let { vec3 } = require('gl-matrix');

function derefCells(array, cells) {
  return _.flatMap(cells, cell => cell.map(i => array[i])); 
}

function createGeometryFromObj(gl, obj) {
  let positions = derefCells(obj.positions, obj.cells);
  let normals = derefCells(obj.vertexNormals, obj.faceNormals);
  let texcoords = derefCells(obj.vertexUVs, obj.faceUVs).map(x => [x[0], x[1], 0]);
  let shifts = _.times(positions.length, i => vec3.create());
  return createGeometry(gl)
    .attr('position', positions)
    .attr('normal', normals)
    .attr('texcoord', texcoords)
    .attr('shift', shifts);
}

function weightedPositionAverage(mesh, weightsSet) {
  let diff = vec3.create();
  return _.mapValues(weightsSet, weights => {
    let result = vec3.create();
    let weightSum = 0;
    
    for (let i = 0; i < weights.length; i++) {
      let weight = weights[i]
      if (weight == 0) continue;

      weightSum += weight;
      let position = mesh.positions[mesh.cells[Math.floor(i/3)][i%3]];
      vec3.sub(diff, position, result);
      vec3.scaleAndAdd(result, result, diff, weight/weightSum);
    }

    return result;
  });
}

module.exports = { derefCells, createGeometryFromObj, weightedPositionAverage };


},{"gl-geometry":22,"gl-matrix":48,"lodash":76,"parse-wavefront-obj":82}],104:[function(require,module,exports){

var _ = require('lodash');
var Money = require('./money');
var Data = require('./data');
var Victory = require('./victory');
var Audio = require('./audio');

var { HEAL_PER_TURN } = Data;

function surgeryHasCandidatePart(surgery) {
  var example = surgery(0, 0);
  return _.intersection(_.keys(example.normalShifts), Victory.PART_CANDIDATES).length > 0;
}

var surgeries = {
  'upper lip injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        upper_lip_center: 0.2 + _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        upper_lip_center: heal * HEAL_PER_TURN, 
        lower_lip_center: jitter * HEAL_PER_TURN,
      },
    };
  },
  'upper lip reductions': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        upper_lip_center: -0.2 + _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        upper_lip_center: heal * HEAL_PER_TURN, 
        lower_lip_center: jitter * HEAL_PER_TURN,
      },
    };
  },
  'lower lip injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        lower_lip_center: 0.2 + _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        lower_lip_center: heal * HEAL_PER_TURN, 
        upper_lip_center: jitter * HEAL_PER_TURN,
      },
    };
  },
  'lower lip reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        lower_lip_center: -0.2 + _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        lower_lip_center: heal * HEAL_PER_TURN, 
        upper_lip_center: jitter * HEAL_PER_TURN,
      },
    };
  },
  'cheek lift': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        upper_cheek_left: 0.2 + _.random(0, 0.05 * jitter, true),
        upper_cheek_right: 0.2 + _.random(0, 0.05 * jitter, true),
        under_eyes: _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        upper_cheek_left: heal * HEAL_PER_TURN,
        upper_cheek_right: heal * HEAL_PER_TURN,
        under_eyes: jitter * HEAL_PER_TURN,
      },
    };
  },
  'cheek injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        upper_cheek_left: 0.2 + _.random(0, 0.05 * jitter, true),
        upper_cheek_right: 0.2 + _.random(0, 0.05 * jitter, true),
        lower_cheek_left: 0.2 + _.random(0, 0.05 * jitter, true),
        lower_cheek_right: 0.2 + _.random(0, 0.05 * jitter, true),
        under_eyes: _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        upper_cheek_left: heal * HEAL_PER_TURN,
        upper_cheek_right: heal * HEAL_PER_TURN,
        lower_cheek_left: heal * HEAL_PER_TURN,
        lower_cheek_right: heal * HEAL_PER_TURN,
        under_eyes: jitter * HEAL_PER_TURN,
      },
    };
  },
  'nose bridge injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        nose_bridge: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        nose_bridge: heal * HEAL_PER_TURN,
        nose_tip: jitter * HEAL_PER_TURN,
      },
    };
  },
  'nose bridge reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        nose_bridge: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        nose_bridge: heal * HEAL_PER_TURN,
        nose_tip: jitter * HEAL_PER_TURN,
      },
    };
  },
  'nose tip injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        nose_tip: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        nose_tip: heal * HEAL_PER_TURN,
        nose_bridge: jitter * HEAL_PER_TURN,
        nose_nostrils: jitter * HEAL_PER_TURN,
      },
    };
  },
  'nose tip reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        nose_tip: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        nose_tip: heal * HEAL_PER_TURN,
        nose_bridge: jitter * HEAL_PER_TURN,
        nose_nostrils: jitter * HEAL_PER_TURN,
      },
    };
  },
  'nostril enlargement': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        nose_nostrils: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        nose_nostrils: heal * HEAL_PER_TURN,
        nose_tip: jitter * HEAL_PER_TURN,
      },
    };
  },
  'nostril reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        nose_nostrils: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        nose_nostrils: heal * HEAL_PER_TURN,
        nose_tip: jitter * HEAL_PER_TURN,
      },
    };
  },
  'brow injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        brow_left: 0.2 + _.random(0, 0.05 * jitter, true),
        brow_right: 0.2 + _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        brow_left: heal * HEAL_PER_TURN,
        brow_right: heal * HEAL_PER_TURN,
      },
    };
  },
  'brow reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    return {
      normalShifts: {
        brow_left: -0.2 + _.random(0, 0.05 * jitter, true),
        brow_right: -0.2 + _.random(0, 0.05 * jitter, true),
      },
      injuryValues: {
        brow_left: heal * HEAL_PER_TURN,
        brow_right: heal * HEAL_PER_TURN,
      },
    };
  },
  'eye enlargement': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        eye_lids: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        eye_lids: heal * HEAL_PER_TURN,
        under_eyes: jitter * HEAL_PER_TURN,
      },
    };
  },
  'eye reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        eye_lids: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        eye_lids: heal * HEAL_PER_TURN,
        under_eyes: jitter * HEAL_PER_TURN,
      },
    };
  },
  'jaw enlargement': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        jaw_right: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
        jaw_left: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        jaw_right: heal * HEAL_PER_TURN,
        jaw_left: heal * HEAL_PER_TURN,
      },
    };
  },
  'jaw reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        jaw_right: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
        jaw_left: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        jaw_right: heal * HEAL_PER_TURN,
        jaw_left: heal * HEAL_PER_TURN,
      },
    };
  },
  'chin injection': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        chin_center: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        chin_center: heal * HEAL_PER_TURN,
        jaw_left: jitter * HEAL_PER_TURN,
        jaw_right: jitter * HEAL_PER_TURN,
      },
    };
  },
  'chin reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        chin_center: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        chin_center: heal * HEAL_PER_TURN,
        jaw_left: jitter * HEAL_PER_TURN,
        jaw_right: jitter * HEAL_PER_TURN,
      },
    };
  },
  'upper ear enlargement': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        upper_ear_left: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
        upper_ear_right: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        upper_ear_left: heal * HEAL_PER_TURN,
        upper_ear_right: heal * HEAL_PER_TURN,
        ear_lobe_left: jitter * HEAL_PER_TURN,
        ear_lobe_right: jitter * HEAL_PER_TURN,
      },
    };
  },
  'upper ear reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        upper_ear_left: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
        upper_ear_right: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        upper_ear_left: heal * HEAL_PER_TURN,
        upper_ear_right: heal * HEAL_PER_TURN,
        ear_lobe_left: jitter * HEAL_PER_TURN,
        ear_lobe_right: jitter * HEAL_PER_TURN,
      },
    };
  },
  'ear lobe enlargement': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        ear_lobe_left: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
        ear_lobe_right: 0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        ear_lobe_left: heal * HEAL_PER_TURN,
        ear_lobe_right: heal * HEAL_PER_TURN,
        upper_ear_left: jitter * HEAL_PER_TURN,
        upper_ear_right: jitter * HEAL_PER_TURN,
      },
    };
  },
  'ear lobe reduction': (skill, heal) => {
    var jitter = _.random(0, 2 - skill);
    var jitterSign = jitter && (Math.random() > 0.5 ? 1 : -1);
    return {
      normalShifts: {
        ear_lobe_left: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
        ear_lobe_right: -0.2 + jitterSign * (_.random(0, 0.05 * jitter, true)),
      },
      injuryValues: {
        ear_lobe_left: heal * HEAL_PER_TURN,
        ear_lobe_right: heal * HEAL_PER_TURN,
        upper_ear_left: jitter * HEAL_PER_TURN,
        upper_eat_right: jitter * HEAL_PER_TURN,
      },
    };
  },
};

var lists = {
  skillRange: [-2, 2],

  prefix: {
    '-1': ['Dr. MC', '', 'Doc', 'M.C.', 'Healer'],
    '0': ['Dr.', 'Dr. Mr.', 'Dr. Mrs.', 'Doctor'],
    '1': ['Sir Dr.', 'Dame Dr.', 'Dr. Prof.', 'Dr.']
  },
  firstName: [
    'Barry', 'Kirk', 'Melinda', 'Harry', 'Howard', 'Gordon', 'Linda',
    'Jane', 'George', 'Kim', 'Jim', 'Michael', 'Jess', 'Alex', 'Sharon',
  ],
  lastName: [
    'Guvorkian', 'Hindsight', 'Snatch', 'Chang', 'Song', 'Danger',
  ],

  postfix: {
    '-1': ['', '', 'the Hammer'],
    '0': ['Sr', 'Jr', 'III', 'PhD', 'Ph.D.', '', 'MD'],
    '1': ['MD', 'M.D.'],
  },

  school: {
    '-1': ['School of Rock Bottom', 'Looking At Your Face', 'Wiki Night School'],
    '0': ['Bridgetower Community Academy', 'University of Stuff', 'Hayman College'],
    '1': ['Ivyford University', 'Academy of Surgeons', 'Superior University'],
  },

  office: {
    '-1': ['Alley Way', 'Shady Cir.', 'Under Hollow Dr.'],
    '0': ['Neutral Str.', 'Face Way', 'Simple Cir.', 'Autumn Dr.'],
    '1': ['Care Dr.', 'Franklin Way', 'Sorota Row'],
  },

  templates: {
    '-1': [
      (s) => `
        <p>
          Yo, you need <b>${s.surgery}</b>?!
        </p>
        <p>
          We got some just for you!
        </p>
        <p>
          Come visit <b>${s.name}</b> at ${s.office}!
        </p>
      `,
    ],
    '0': [
      (s) => `
        <b>${s.name}</b>
        <p>
          <i>${s.office}</i>
        </p>
        <p>
          Need <b>${s.surgery}</b>?
          <br />
          We're offerring specials for ${s.cost}.
        </p>
      `,
    ],
    '1': [
      (s) => `
        <b>${s.name}</b>
        <p>
          <i>${s.office}</i>
          <i>${s.school}</i>
        </p>
        <p>
         We believe in bringing out the best in you!
        </p>
        <p>
         Today only, we're offering <b>${s.surgery}</b> for ${s.cost}.
        </p>
      `
    ],
  },

  surgery: Object.keys(surgeries).filter(x => surgeryHasCandidatePart(surgeries[x])),
  healRange: [0, 3],
  costRange: [100, 1000],
};

var getListBySkill = (skill, listsBySkill) => {
  var jitter = _.random(0, 1);
  return listsBySkill[Math.sign(skill + jitter)];
};

function generate() {
  var surgeon = {};
  var skill = surgeon.skill = _.random.apply(_, lists.skillRange);
  surgeon.cost = _.random.apply(_, lists.costRange) + (skill * 100);
  surgeon.cost = Math.round(surgeon.cost / 10) * 10;
  surgeon.money = surgeon.cost;
  surgeon.heal = Math.max(_.random.apply(_, lists.healRange) - skill, 0);
  surgeon.surgery = _.sample(lists.surgery);
  surgeon.office = [
    _.random(100, 8888),
    _.sample(getListBySkill(skill, lists.office)),
    _.sample(['Suite', 'Office', '#']),
    _.random(1, 10),
  ].join(' ');
  surgeon.school = _.sample(getListBySkill(skill, lists.school));
  surgeon.name = _.compact([
    _.sample(getListBySkill(skill, lists.prefix)),
    _.sample(lists.firstName),
    _.sample(lists.lastName),
    _.sample(getListBySkill(skill, lists.postfix)),
  ]).join(' ');
  surgeon.template = _.sample(getListBySkill(skill, lists.templates));
  return surgeon;
}

function perform(surgeon) {
  // Shouldn't encounter this state, but just in case.
  if (Data.money < surgeon.cost) return 'You could not afford the procedure.';
  Audio.playOuchAudio(surgeon.heal > 3);

  mergeTransform(surgeries[surgeon.surgery](surgeon.skill, surgeon.heal));
  Data.money -= surgeon.cost;
  Money.renderChange(-surgeon.cost);
  return `${surgeon.name} performed the <b>${surgeon.surgery}</b>. <br /><br />
     ${surgeon.heal > 1 ? 'You may need a few days to heal...' : 'You feel pretty good!'}`;
}

function mergeTransform(params) {
  for (let param in params) {
    Data.transform[param] = Data.transform[param] || {};
    for (let key in params[param]) {
      Data.transform[param][key] = Data.transform[param][key] || 0;
      Data.transform[param][key] += params[param][key];
    }
  }
  return Data.transform;
}

module.exports = {
  generate,
  perform,
  surgeries,
  mergeTransform,
  HEAL_PER_TURN };



},{"./audio":92,"./data":95,"./money":101,"./victory":105,"lodash":76}],105:[function(require,module,exports){

let _ = require('lodash');
let Data = require('./data');
let Mesh = require('./mesh');
let Money = require('./money');

let SIZE_GAP = 0.4;

function generateIdealFace() {
  let faceParts = _.keys(Mesh.faceWeights);
  faceParts = _.filter(faceParts, (part) => part !== 'under_eyes');

  let partNames = _.shuffle(faceParts);
  let constrainedParts = partNames.slice(0, 3);

  let normalShifts = {};
  for (let partName of constrainedParts) {
    normalShifts[partName] = _.random(0, 1) ? SIZE_GAP : -SIZE_GAP;
  }

  return { normalShifts };
}

let IDEAL_FACE = generateIdealFace();
let IDEAL_PART_NAMES = _.keys(IDEAL_FACE.normalShifts);
let PART_CANDIDATES = _.union(IDEAL_PART_NAMES,
  _.chain(Mesh.ALL_FACE_PARTS).subtract(IDEAL_PART_NAMES).shuffle().sampleSize(3).value());

function checkFacePart(partName, ratio = 0.5) {
  let delta = IDEAL_FACE.normalShifts[partName]
    - _.get(Data, 'transform.normalShifts.' + partName, 0);
  if (delta < -ratio*SIZE_GAP) return -1;
  if (delta > ratio*SIZE_GAP) return 1;
  return 0;
}

function generate() {
  let content = `
    <p>The <strong class="victory">Most Beautiful Woman of the Year</strong> competition
    is here! Do you have the face to beat out the competition? (Entry fee
    required)</p>
  `;
  return { cost: 500, template: () => content };
}

function perform(victory) {
  let success = true;
  let partNames = _.shuffle(IDEAL_PART_NAMES);
  var partName;

  for (var partName of partNames) {
    if (checkFacePart(partName) != 0) {
      success = false;
      break;
    }
  }

  if (success) {
    cheerAudio.play();
    modalVictory.classList.add('show');
    document.body.dispatchEvent(new CustomEvent('endGame'));
    return '';   
  }

  let displayName = Mesh.partDisplayNameMap.get(partName);
  Data.money -= victory.cost;
  Money.renderChange(-victory.cost);
  return `
    <p>You lost the competition this year. They said something was off about
    your ${displayName}...</p>`;
}

module.exports = { generate, perform, checkFacePart,
  IDEAL_FACE, IDEAL_PART_NAMES, PART_CANDIDATES };


},{"./data":95,"./mesh":100,"./money":101,"lodash":76}]},{},[1]);
